import {
  MxDbEllipseShape
} from "./chunk-FSS5QSU3.js";
import {
  McGiWorldDrawType_default
} from "./chunk-3EHWTHVA.js";
import {
  McEdGetPointWorldDrawObject,
  MrxDbgUiPrPoint,
  MxFun_default,
  addRegisterMxDbEntity
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipse/draw.js
function drawMxDbEllipse() {
  const t = new MrxDbgUiPrPoint(), r = MxFun_default.getCurrentDraw(), e = new McEdGetPointWorldDrawObject(), o = new MxDbEllipse_default();
  t.setMessage("\n点击开始绘制椭圆:"), t.go(() => {
    o.point1 = t.value(), e.setDraw((t2) => {
      o.point2 = t2, e.drawCustomEntity(o);
    }), t.setUserDraw(e), t.setMessage("\n再次点击结束绘制椭圆:"), t.go(() => {
      r.addMxEntity(o);
    });
  });
}

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipse/index.js
var MxDbEllipse = class extends MxDbEllipseShape {
  constructor() {
    super(), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.isClosedToCenter = false, this.closed = false, this._propertyDbKeys = [...this._propertyDbKeys, "point1", "point2"];
  }
  getTypeName() {
    return "MxDbEllipse";
  }
  create() {
    return new MxDbEllipse();
  }
  setPoint1(t) {
    return this.point1 = t, this;
  }
  setPoint2(t) {
    return this.point2 = t, this;
  }
  worldDraw(t) {
    const { point1: i, point2: e } = this, s = i.clone().set(e.x, i.y, e.z), r = e.clone().set(i.x, e.y, i.z);
    this.xRadius = i.distanceTo(s) / 2, this.yRadius = i.distanceTo(r) / 2;
    const o = i.x > e.x, p = i.y > e.y, n = o ? i.x - this.xRadius : i.x + this.xRadius, l = p ? i.y - this.yRadius : i.y + this.yRadius;
    this.center = new THREE.Vector3(n, l, 0), this.drawEllipseShape(t), t.getType() === McGiWorldDrawType_default.kSelectDraw && t.drawLines([i, new THREE.Vector3(i.x, e.y), e, new THREE.Vector3(e.x, i.y), i]);
  }
  getGripPoints() {
    let t = new THREE.Vector3(0.5 * (this.point2.x + this.point1.x), 0.5 * (this.point2.y + this.point1.y), 0);
    return [this.point1, this.point2, t];
  }
  moveGripPointsAt(t, i) {
    return 0 === t ? this.point1.add(i) : 1 === t ? this.point2.add(i) : 2 === t && (this.point1.add(i), this.point2.add(i)), true;
  }
};
MxDbEllipse.cmd = "Mx_Ellipse", MxDbEllipse.draw = drawMxDbEllipse, addRegisterMxDbEntity(MxDbEllipse);
var MxDbEllipse_default = MxDbEllipse;

export {
  MxDbEllipse_default
};
//# sourceMappingURL=chunk-O2HP56LH.js.map
