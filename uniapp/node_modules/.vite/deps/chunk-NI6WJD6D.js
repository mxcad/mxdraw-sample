import {
  MrxDbgUiPrPoint,
  MxDbEntity,
  MxFun_default,
  MxThreeJS_default,
  addRegisterMxDbEntity
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadTag/draw.js
var __awaiter = function(t, n, r, i) {
  return new (r || (r = Promise))(function(e, o) {
    function a(t2) {
      try {
        c(i.next(t2));
      } catch (t3) {
        o(t3);
      }
    }
    function u(t2) {
      try {
        c(i.throw(t2));
      } catch (t3) {
        o(t3);
      }
    }
    function c(t2) {
      var n2;
      t2.done ? e(t2.value) : (n2 = t2.value, n2 instanceof r ? n2 : new r(function(t3) {
        t3(n2);
      })).then(a, u);
    }
    c((i = i.apply(t, n || [])).next());
  });
};
function drawMxDbLeadTag() {
  return __awaiter(this, void 0, void 0, function* () {
    let t = yield new MrxDbgUiPrPoint().go();
    if (!t)
      return;
    let n = prompt("请输入文字批注", "批注");
    if (!n)
      return;
    const r = new MxDbLeadTag_default();
    r.point = t, r.text = n, MxFun_default.addToCurrentSpace(r);
  });
}

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadTag/index.js
var MxDbLeadTag = class extends MxDbEntity {
  constructor() {
    super(...arguments), this.point = new THREE.Vector3(), this.leadLen = 88, this.text = "", this.textHeight = 24;
  }
  getTypeName() {
    return "MxDbLeadTag";
  }
  createDots(e, t) {
    const { x: n, y: o, z: r } = e, i = new THREE.Shape();
    i.arc(n, o, t.screenCoordLong2Doc(6), 0, 2 * Math.PI, true);
    const s = new THREE.Path();
    s.arc(n, o, t.screenCoordLong2Doc(3), 0, 2 * Math.PI, true), i.holes.push(s);
    const a = new THREE.ShapeGeometry(i), d = new THREE.MeshPhongMaterial({ color: "#ff0000", transparent: true }), x = new THREE.Shape();
    x.arc(n, o, t.screenCoordLong2Doc(3), 0, 2 * Math.PI, true);
    const c = new THREE.ShapeGeometry(x), E = new THREE.MeshPhongMaterial({ color: "#e2da8f", transparent: true }), h = new THREE.Mesh(a, d), g = new THREE.Mesh(c, E);
    return h.add(g), h;
  }
  worldDraw(e) {
    let t = e.getMxObject();
    const n = this.createDots(this.point, t);
    if (e.drawEntity(n), n.geometry.computeBoundingBox(), e.drawSelectLine(n.geometry.boundingBox.max, n.geometry.boundingBox.min), 2 === e.getType())
      return;
    let o = e.getMxObject().screenCoordLong2Doc(this.leadLen), r = new THREE.Vector3(this.point.x + 2 * o, this.point.y + o, 0);
    const i = r.x - o, s = new THREE.Vector3(i, r.y, r.z);
    e.setLineWidth(4), e.setColor("#ffe605"), e.drawLines([this.point, s, r]);
    const a = e.getMxObject().screenCoordLong2Doc(this.textHeight), d = r.clone().setX(r.x);
    e.setColor(16744448);
    const x = MxThreeJS_default.creatTextSprite(this.text, d, a, 0, e.getColor());
    if (x) {
      const t2 = new THREE.Box3(), n2 = new THREE.Vector3();
      t2.expandByObject(x), t2.getSize(n2), x.position.setX(x.position.x + n2.x / 2);
      const o2 = e.getMxObject().screenCoordLong2Doc(5), r2 = t2.min.clone().setX(t2.min.x + n2.x / 2).setY(t2.min.y - o2), i2 = t2.max.clone().setX(t2.max.x + n2.x / 2).setY(t2.min.y + o2);
      i2.setY(t2.max.y + o2);
      const s2 = new THREE.Vector3(r2.x, i2.y), a2 = new THREE.Vector3(i2.x, r2.y);
      e.setColor("#ffffff"), e.setLineWidth(0), e.drawLine(r2, s2), e.drawLine(i2, a2), e.drawLine(r2, a2), e.drawLine(s2, i2);
      const d2 = o2 / 2, c = [], E = [];
      c.push(new THREE.Vector3(s2.x + d2, s2.y - o2, s2.z), new THREE.Vector3(s2.x + d2, s2.y - d2, s2.z), new THREE.Vector3(s2.x + o2, s2.y - d2, s2.z)), E.push(new THREE.Vector3(a2.x - d2, a2.y + o2, a2.z), new THREE.Vector3(a2.x - d2, a2.y + d2, a2.z), new THREE.Vector3(a2.x - o2, a2.y + d2, a2.z)), e.drawLines(c), e.drawLines(E), e.setOpacity(0.5), e.setColor("#663244"), e.setRenderOrder(-100), e.drawSolid([r2, s2, i2, a2]), e.setRenderOrder(100), e.drawEntity(x);
    }
  }
  getGripPoints() {
    return [this.point];
  }
  onViewChange() {
    return this.setNeedUpdateDisplay(), true;
  }
  moveGripPointsAt(e, t) {
    return 0 === e && this.point.add(t), true;
  }
  dwgIn(e) {
    return this.onDwgIn(e), this.dwgInHelp(e, ["point", "text", "textHeight", "leadLen"]), true;
  }
  dwgOut(e) {
    return this.onDwgOut(e), this.dwgOutHelp(e, ["point", "text", "textHeight", "leadLen"]), e;
  }
};
MxDbLeadTag.cmd = "Mx_LeadTag", MxDbLeadTag.draw = drawMxDbLeadTag, addRegisterMxDbEntity(MxDbLeadTag);
var MxDbLeadTag_default = MxDbLeadTag;

export {
  MxDbLeadTag_default
};
//# sourceMappingURL=chunk-NI6WJD6D.js.map
