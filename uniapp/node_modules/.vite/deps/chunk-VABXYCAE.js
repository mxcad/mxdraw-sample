import {
  MrxDbgUiPrBaseReturn_default
} from "./chunk-I5AWBXB6.js";
import {
  McGiWorldDrawType_default
} from "./chunk-3EHWTHVA.js";
import {
  McEdGetPointWorldDrawObject,
  MrxDbgUiPrPoint,
  MxDbEntity,
  MxFun_default,
  addRegisterMxDbEntity
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbAnyLine/draw.js
function drawMxDbAnyLine() {
  const r = new MrxDbgUiPrPoint(), t = MxFun_default.getCurrentDraw(), e = new McEdGetPointWorldDrawObject(), n = new MxDbAnyLine_default();
  r.setUserDraw(e), r.setMessage("\n点击开始画线:"), r.go((o) => {
    o === MrxDbgUiPrBaseReturn_default.kOk && (n.points.push(r.value()), e.setDraw((r2) => {
      n.points.push(r2.clone()), e.drawCustomEntity(n);
    })), r.setMessage("\n再次点击结束画线:"), r.go((r2) => {
      r2 === MrxDbgUiPrBaseReturn_default.kOk && t.addMxEntity(n);
    });
  });
}

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbAnyLine/index.js
var propertyDbKeys = ["points"];
var MxDbAnyLine = class extends MxDbEntity {
  constructor() {
    super(...arguments), this.points = [];
  }
  getTypeName() {
    return "MxDbAnyLine";
  }
  create() {
    return new MxDbAnyLine();
  }
  worldDraw(t) {
    let e = t.getMxObject();
    const n = new THREE.Box3().setFromPoints(this.points);
    let r = new THREE.Vector3();
    if (n.getCenter(r), t.drawLines(this.points), t.getType() === McGiWorldDrawType_default.kSelectDraw) {
      const i = new THREE.Vector3();
      n.getSize(i), i.addScalar(e.screenCoordLong2Doc(20));
      const o = i.x / 2, s = i.y / 2, y = { x: r.x - o, y: r.y - s }, x = { x: r.x + o, y: r.y - s }, d = { x: r.x + o, y: r.y + s }, p = { x: r.x - o, y: r.y + s };
      t.drawLine(y.x, y.y, x.x, x.y), t.drawLine(x.x, x.y, d.x, d.y), t.drawLine(d.x, d.y, p.x, p.y), t.drawLine(p.x, p.y, y.x, y.y);
    }
  }
  setPoints(t) {
    return this.points = t, this;
  }
  getCenter() {
    const t = new THREE.Geometry();
    t.vertices = this.points;
    const e = new THREE.Vector3();
    return t.computeBoundingBox(), t.boundingBox.getCenter(e), e;
  }
  getGripPoints() {
    return [this.getCenter()];
  }
  moveGripPointsAt(t, e) {
    return 0 === t && this.points.forEach((t2) => {
      t2.add(e);
    }), true;
  }
  dwgIn(t) {
    return this.onDwgIn(t), this.dwgInHelp(t, propertyDbKeys), true;
  }
  dwgOut(t) {
    return this.onDwgOut(t), this.dwgOutHelp(t, propertyDbKeys), t;
  }
};
MxDbAnyLine.cmd = "Mx_AnyLine", MxDbAnyLine.draw = drawMxDbAnyLine, addRegisterMxDbEntity(MxDbAnyLine);
var MxDbAnyLine_default = MxDbAnyLine;

export {
  MxDbAnyLine_default
};
//# sourceMappingURL=chunk-VABXYCAE.js.map
