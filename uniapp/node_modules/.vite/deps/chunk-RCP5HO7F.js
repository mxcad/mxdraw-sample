import {
  McEdGetPointWorldDrawObject,
  MrxDbgUiPrPoint,
  MxDbEntity,
  MxFun_default,
  addRegisterMxDbEntity
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbPolyline/draw.js
function drawMxDbPolyline() {
  const e = new MrxDbgUiPrPoint();
  e.setMessage("\n指定第一点:");
  let t, r = new MxDbPolyline_default();
  e.go((o) => {
    if (0 != o)
      return;
    let n = e.value();
    t || (t = n.clone());
    let s = n;
    const i = new McEdGetPointWorldDrawObject();
    i.setDraw((e2, t2) => {
      t2.setColor(16711680), t2.drawLine(s, e2), t2.drawCustomEntity(r);
    }), e.setUserDraw(i), e.setMessage("\n指定下一点:");
    let d = 0;
    r.addVertexAt(n), e.goWhile((t2) => {
      if (0 == t2)
        s = e.value(), r.addVertexAt(s), ++d >= 2 ? (e.setMessage("\n指定下一点:"), e.setKeyWords("[闭合(C)/放弃(U)]")) : d > 0 ? (e.setMessage("\n指定下一点:"), e.setKeyWords("[放弃(U)]")) : (e.setMessage("\n指定第一点:"), e.setKeyWords(""));
      else if (1 == t2) {
        if (e.isKeyWordPicked("C"))
          return { exit: true };
        e.isKeyWordPicked("U") && console.log("Mx_Line undo....");
      }
    }, () => {
      MxFun_default.getCurrentDraw().addMxEntity(r);
    });
  });
}

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbPolyline/index.js
var MxDbPolyline = class extends MxDbEntity {
  constructor() {
    super(...arguments), this.points = [];
  }
  getTypeName() {
    return "MxDbPolyline";
  }
  worldDraw(t) {
    this.points.length < 2 || t.drawLines(this.points);
  }
  getGripPoints() {
    return this.points;
  }
  moveGripPointsAt(t, i) {
    return !(t >= this.points.length) && (this.points[t].add(i), true);
  }
  create() {
    return new MxDbPolyline();
  }
  dwgIn(t) {
    this.onDwgIn(t);
    let i = t.points;
    return this.points = [], i.forEach((t2) => {
      this.points.push(new THREE.Vector3(t2.x, t2.y, t2.z));
    }), true;
  }
  dwgOut(t) {
    return this.onDwgOut(t), t.points = this.points, t;
  }
  addVertexAt(t) {
    this.points.push(t);
  }
  numVerts() {
    return this.points.length;
  }
  getPointAt(t) {
    return t < this.points.length ? this.points[t] : null;
  }
  setPointAt(t, i) {
    return t < this.points.length && (this.points[t] = i, true);
  }
};
MxDbPolyline.cmd = "Mx_Lines", MxDbPolyline.draw = drawMxDbPolyline, addRegisterMxDbEntity(MxDbPolyline);
var MxDbPolyline_default = MxDbPolyline;

export {
  MxDbPolyline_default
};
//# sourceMappingURL=chunk-RCP5HO7F.js.map
