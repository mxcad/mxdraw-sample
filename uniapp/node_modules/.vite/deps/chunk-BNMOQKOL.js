import {
  McGiWorldDrawType_default
} from "./chunk-3EHWTHVA.js";
import {
  MxDbEntity,
  addRegisterMxDbEntity,
  computeBounding
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbHatch/index.js
var MxDbHatch = class extends MxDbEntity {
  constructor() {
    super(...arguments), this.points = [];
  }
  worldDraw(t) {
    t.getType() === McGiWorldDrawType_default.kWorldDraw ? t.drawSolid(this.points) : t.drawLines([...this.points, this.points[0]]);
  }
  getTypeName() {
    return "MxDbHatch";
  }
  moveGripPointsAt(t, i) {
    return 0 === t ? this.points.forEach((t2) => {
      t2.add(i);
    }) : this.points[t - 1] && this.points[t - 1].add(i), true;
  }
  setPoints(t) {
    this.points = t.map((t2) => t2.clone());
  }
  getGripPoints() {
    if (this.points.length > 0) {
      const { centerPoint: t } = computeBounding(this.points);
      return [t, ...this.points];
    }
    return [];
  }
  dwgIn(t) {
    this.onDwgIn(t);
    const i = t.points;
    return this.points = i.map(({ x: t2, y: i2, z: o }) => new THREE.Vector3(t2, i2, o)), true;
  }
  dwgOut(t) {
    return this.onDwgOut(t), t.points = this.points, t;
  }
};
addRegisterMxDbEntity(MxDbHatch);
var MxDbHatch_default = MxDbHatch;

export {
  MxDbHatch_default
};
//# sourceMappingURL=chunk-BNMOQKOL.js.map
