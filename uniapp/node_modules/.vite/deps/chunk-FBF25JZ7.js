import {
  McEdGetPointWorldDrawObject,
  MrxDbgUiPrPoint,
  MxDbEntity,
  MxFun_default,
  MxThreeJS_default,
  addRegisterMxDbEntity
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadComment/draw.js
function drawMxDbLeadComment() {
  const t = new MrxDbgUiPrPoint();
  t.setMessage("\n指定第一点:"), t.go((e) => {
    if (0 != e)
      return;
    const o = t.value();
    let n = new MxDbLeadComment_default();
    n.point1 = o.clone(), n.textHeight = MxFun_default.screenCoordLong2Doc(50);
    let r = prompt("请输入文字批注", "批注");
    if (!r)
      return;
    n.text = r, n.textWidth = MxFun_default.screenCoordLong2Doc(10 * r.length), n.fixedSize = true, n.fixedSize && (n.textHeight = 50, n.textWidth = 50 * r.length);
    const i = new McEdGetPointWorldDrawObject();
    i.setDraw((t2, e2) => {
      n.point2 = t2, e2.drawCustomEntity(n);
    }), t.setBasePt(o), t.setUseBasePt(true), t.setUserDraw(i), t.setMessage("\n指定第二点:"), t.go((e2) => {
      if (0 != e2)
        return void console.log(e2);
      const o2 = t.value();
      n.point2 = o2, MxFun_default.addToCurrentSpace(n);
    });
  });
}

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadComment/index.js
var MxDbLeadComment = class extends MxDbEntity {
  constructor() {
    super(...arguments), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.text = "", this.textHeight = 20, this.textWidth = 0, this.fixedSize = false;
  }
  getTypeName() {
    return "MxDbLeadComment";
  }
  create() {
    return new MxDbLeadComment();
  }
  worldDraw(t) {
    if (t.drawLine(this.point1, this.point2), this.text.length > 0) {
      const e = new THREE.Vector3();
      let i = this.textHeight, n = this.textWidth, o = t.getMxObject();
      this.fixedSize && (i = o.screenCoordLong2Doc(i), n = o.screenCoordLong2Doc(n));
      let h = MxThreeJS_default.clacTextSpriteSize(this.text, i, n);
      e.x = this.point2.x + 0.5 * h.textwidth, e.y = this.point2.y + 0.5 * h.allTextHeight, t.drawText(this.text, i, 0, e, n);
      const s = new THREE.Vector3();
      s.x = this.point2.x + h.textwidth, s.y = this.point2.y, t.drawLine(s, this.point2);
    }
  }
  getGripPoints() {
    let t = [];
    return t.push(this.point1), t.push(this.point2), t;
  }
  moveGripPointsAt(t, e) {
    return 0 == t ? this.point1.add(e) : 1 == t && this.point2.add(e), true;
  }
  dwgIn(t) {
    return this.onDwgIn(t), this.point1.copy(t.point1), this.point2.copy(t.point2), this.text = t.text.substr(0), this.textHeight = t.textHeight, t.textWidth && (this.textWidth = t.textWidth), this.fixedSize = t.fixedSize, true;
  }
  dwgOut(t) {
    return this.onDwgOut(t), t.point1 = this.point1, t.point2 = this.point2, t.textHeight = this.textHeight, t.text = this.text, t.textWidth = this.textWidth, t.fixedSize = this.fixedSize, t;
  }
  onViewChange() {
    return !!this.fixedSize && (this.setNeedUpdateDisplay(false), true);
  }
};
MxDbLeadComment.cmd = "Mx_Comment", MxDbLeadComment.draw = drawMxDbLeadComment, addRegisterMxDbEntity(MxDbLeadComment);
var MxDbLeadComment_default = MxDbLeadComment;

export {
  MxDbLeadComment_default
};
//# sourceMappingURL=chunk-FBF25JZ7.js.map
