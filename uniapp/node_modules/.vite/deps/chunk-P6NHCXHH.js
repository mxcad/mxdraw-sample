import {
  MrxDbgUiPrBaseReturn_default
} from "./chunk-I5AWBXB6.js";
import {
  MxDbCloudLine_default
} from "./chunk-WACUBFYC.js";
import {
  MxDbLeadComment_default
} from "./chunk-FBF25JZ7.js";
import {
  McEdGetPointWorldDrawObject,
  MrxDbgUiPrPoint,
  MxDbEntity,
  MxFun_default,
  MxType_default,
  addRegisterMxDbEntity
} from "./chunk-EEK3ULSO.js";

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbRectBoxLeadComment/draw.js
function drawMxDbRectBoxLeadComment() {
  const t = new MrxDbgUiPrPoint(), e = MxFun_default.getCurrentDraw(), r = new McEdGetPointWorldDrawObject(), o = new MxDbRectBoxLeadComment_default();
  o.setLineWidth(3), o.setLineWidthByPixels(true), t.setMessage("\n云线框起始点:"), t.go((n) => {
    o.radius = MxFun_default.screenCoordLong2Doc(8), n == MrxDbgUiPrBaseReturn_default.kOk && (o.point1 = t.value(), r.setDraw((t2) => {
      o.point2 = t2, r.drawCustomEntity(o);
    }), t.setUserDraw(r), t.setMessage("\n云线框结束点:"), t.go((n2) => {
      if (n2 != MrxDbgUiPrBaseReturn_default.kOk)
        return;
      o.point2 = t.value(), r.setDraw((t2) => {
        o.point3 = t2, r.drawCustomEntity(o);
      });
      let i = prompt("请输入文字批注", "批注");
      i || (i = "默认批注文字"), o.text = i, o.textWidth = MxFun_default.screenCoordLong2Doc(10 * i.length), o.textHeight = MxFun_default.screenCoordLong2Doc(5 * i.length), o.fixedSize = true, o.fixedSize && (o.textHeight = 20, o.textWidth = 20 * i.length), t.setMessage("\n审图标注点:"), t.go((r2) => {
        r2 == MrxDbgUiPrBaseReturn_default.kOk && (o.point3 = t.value(), e.addMxEntity(o));
      });
    }));
  });
}

// ../../../../../web/MxCADOnline/MxDrawPlugin/mxdraw-sample/uniapp/node_modules/mxdraw/dist/lib/MxModule/MxDbRectBoxLeadComment/index.js
var MxDbRectBoxLeadComment = class extends MxDbEntity {
  constructor() {
    super(...arguments), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.point3 = new THREE.Vector3(), this.text = "", this.textHeight = 20, this.radius = 16, this.textWidth = 0, this.fixedSize = false;
  }
  getTypeName() {
    return "MxDbRectBoxLeadComment";
  }
  create() {
    return new MxDbRectBoxLeadComment();
  }
  getCloudLine() {
    let t = new MxDbCloudLine_default();
    t.setRadius(this.radius);
    let e = this.point1.clone(), i = this.point2.clone();
    if (e.x > i.x) {
      let t2 = e.x;
      e.x = i.x, i.x = t2;
    }
    if (e.y > i.y) {
      let t2 = e.y;
      e.y = i.y, i.y = t2;
    }
    let o = new THREE.Vector3(e.x, i.y, e.z);
    o = t.addLine(e, o), i = new THREE.Vector3(i.x, o.y, i.z), i = t.addLine(o, i);
    let n = new THREE.Vector3(i.x, e.y, e.z);
    n = t.addLine(i, n);
    let d = e = t.addLine(n, e), s = e.distanceTo(this.point3);
    return s > o.distanceTo(this.point3) && (d = o, s = o.distanceTo(this.point3)), s > i.distanceTo(this.point3) && (d = i, s = i.distanceTo(this.point3)), s > n.distanceTo(this.point3) && (d = n, s = n.distanceTo(this.point3)), { cloudLine: t, pt1: e, pt2: o, pt3: i, pt4: n, leadPt: d };
  }
  worldDraw(t) {
    let e = this.getCloudLine();
    if (e.cloudLine.worldDraw(t), this.text.length > 0) {
      let i = e.leadPt, o = new MxDbLeadComment_default();
      o.point1 = i, o.point2 = this.point3, o.text = this.text, o.textHeight = this.textHeight, o.textWidth = this.textWidth, o.fixedSize = this.fixedSize, o.worldDraw(t);
    }
  }
  getGripPoints() {
    let t = [];
    return t.push(this.point1), t.push(this.point2), t.push(this.point3), t;
  }
  moveGripPointsAt(t, e) {
    return 0 == t ? this.point1.add(e) : 1 == t ? this.point2.add(e) : 2 == t && this.point3.add(e), true;
  }
  dwgIn(t) {
    return this.onDwgIn(t), this.point1.copy(t.point1), this.point2.copy(t.point2), this.point3.copy(t.point3), this.text = t.text.substr(0), this.textHeight = t.textHeight, this.radius = t.radius, t.textWidth && (this.textWidth = t.textWidth), this.fixedSize = t.fixedSize, true;
  }
  dwgOut(t) {
    if (this.onDwgOut(t), t.point1 = this.point1, t.point2 = this.point2, t.point3 = this.point3, t.textHeight = this.textHeight, t.text = this.text, t.radius = this.radius, t.textWidth = this.textWidth, t.fixedSize = this.fixedSize, t.type === MxType_default.MxCloneType.kSaveDwgClone) {
      let e = this.getCloudLine(), i = e.cloudLine.reCalculateDrawGeometryPoint();
      t.cachePoint = i || [], t.leadPt = e.leadPt;
    }
    return t;
  }
  onViewChange() {
    return !!this.fixedSize && (this.setNeedUpdateDisplay(false), true);
  }
};
MxDbRectBoxLeadComment.cmd = "Mx_CheckDraw", MxDbRectBoxLeadComment.draw = drawMxDbRectBoxLeadComment, addRegisterMxDbEntity(MxDbRectBoxLeadComment);
var MxDbRectBoxLeadComment_default = MxDbRectBoxLeadComment;

export {
  MxDbRectBoxLeadComment_default
};
//# sourceMappingURL=chunk-P6NHCXHH.js.map
