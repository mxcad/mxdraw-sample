var __awaiter=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))(function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function c(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r(function(t){t(e)})).then(a,c)}u((n=n.apply(t,e||[])).next())})};import McEdGetPointWorldDrawObject from"../McEdGetPointWorldDrawObject";import MrxDbgUiPrPoint from"../MrxDbgUiPrPoint";import MxDbArcShapeDraw from".";import MxFun from"../MxFun";export default function drawMxDbArcShape(){const t=new MrxDbgUiPrPoint,e=MxFun.getCurrentDraw(),r=new McEdGetPointWorldDrawObject;let n=new MxDbArcShapeDraw;t.setMessage("\n确定圆弧中点:"),t.setUserDraw(r),t.go(()=>__awaiter(this,void 0,void 0,function*(){t.setMessage("\n确定圆弧开始点:"),n.center=t.value(),r.setDraw(t=>{n.interRadiusPoint=t,r.drawCircle(n.center,t.distanceTo(n.center))}),n.interRadiusPoint=(yield t.go())||new THREE.Vector3,r.setDraw(t=>{n.outerRadiusPoint=t,r.drawCustomEntity(n)}),n.outerRadiusPoint=(yield t.go())||new THREE.Vector3,e.addMxEntity(n)}))};