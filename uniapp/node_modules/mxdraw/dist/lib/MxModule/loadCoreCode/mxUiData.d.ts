declare class MxVueComandLine {
    [x: string]: any;
    msCmdText: string;
    msCmdDisplay: string;
    msCmdTip: string;
    mUpDisplayFun: ((data: {
        msCmdTip: string;
        msCmdDisplay: string;
        msCmdText: string;
    }) => void) | undefined;
    mxFunObject: undefined;
    mountUpDisplayFun: (fun: ((data: {
        msCmdTip: string;
        msCmdDisplay: string;
        msCmdText: string;
    }) => void) | undefined) => void;
    upDisplay(): void;
    setCmdText: (str: string) => void;
    getCmdText: () => string;
    getCmdDisplay: () => string;
    setCmdDisplay: (str: string) => void;
    addCmdDisplay: (str: string) => void;
    setCmdTip: (str: string) => void;
    getCmdTip: () => string;
}
declare class MxDynamicInput {
    [x: string]: any;
    mType: number;
    mPos: number[];
    mTip: string;
    mValue1: string;
    mValue1Pos: number[];
    mValue2: string;
    mValue2Pos: number[];
    misShow: boolean;
    mOnKeydownEvent: ((arg0: any) => void) | undefined;
    mFocusValue: string;
    setFocusValue: (value: string) => void;
    getFocusValue: () => string;
    mountKeydownEvent: (fun: ((arg0: any) => void) | undefined) => void;
    onKeydown: (keyCode: any) => void;
    setType: (type: number) => void;
    getType: () => number;
    isShow: () => boolean;
    setPos: (pos: number[]) => void;
    setTip: (tip: string) => void;
    setValue1: (val: string) => void;
    getValue1: () => string;
    setValue1Pos: (pos: number[]) => void;
    setValue2: (val: string) => void;
    getValue2: () => string;
    setValue2Pos: (pos: number[]) => void;
    setShow: (isShow: boolean) => void;
    getData: () => {
        list: Array<{
            value: string;
            readonly: boolean;
            show?: boolean;
            pos?: number[];
        }>;
        pos: number[];
        postype: number;
    } | undefined;
}
export declare class MxVueInterface {
    [x: string]: any;
    mSetCoordFun: ((coordTip: string) => void) | undefined;
    mUpdateCursorFun: ((cursorType: string) => void) | undefined;
    mOnKeydownEvent: ((arg0: any) => void) | undefined;
    mCursorType: string;
    mComandLine: MxVueComandLine;
    mdynamicInput: MxDynamicInput;
    mMxEvents: {
        [key: string]: Function;
    };
    mxFunObject: any;
    mFooterData: any;
    mLinetypeComboxData: any;
    mTitle: any;
    mTopButtonBarData: any;
    mMenuBarData: any;
    mRighButtonBarData: any;
    mLeftButtonBarData: any;
    mTitleButtonBarData: any;
    mLayerComboxData: any;
    mColorComboxData: any;
    mountSetCoordFun: (fun: ((coordTip: string) => void) | undefined) => void;
    mountUpdateCursorFun: (fun: ((cursorType: string) => void) | undefined) => void;
    mountKeydownEvent: (fun: ((arg0: any) => void) | undefined) => void;
    onKeydown: (keyCode: number) => void;
    setTipCoord: (str: any) => void;
    getCursorType: () => string;
    setCursorType: (curtype: string) => void;
    getTitle: () => any;
    getTopButtonBarData: () => any;
    getMenuBarData: () => any;
    getRighButtonBarData: () => any;
    getLeftButtonBarData: () => any;
    getTitleButtonBarData: () => any;
    getLayerComboxData: () => any;
    getColorComboxData: () => any;
    getLinetypeComboxData: () => any;
    getFooterData: () => any;
    sendStringToExecute: (sCmd: any) => void;
    getCmdLine: () => MxVueComandLine;
    getDynamicInput: () => MxDynamicInput;
    init: (mxFun: any) => void;
    OnMxEvent: (event: {
        [x: string]: any;
    }) => void;
    mountMxEvent: (name: string | number, call: any) => void;
}
declare const mxUiData: MxVueInterface;
export default mxUiData;
