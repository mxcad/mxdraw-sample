/** 简单颜色滤镜矩阵 */
interface ChannelParamTypes {
    r?: number;
    g?: number;
    b?: number;
}
export default class MxFilters {
    private uniformObj;
    private filtersStr;
    private filtersTypes;
    private VSHADER_SOURCE;
    private FSHADER_SOURCE;
    private _matrix;
    /**
     * 过滤或增强某个颜色通道
     * @param {ChannelParamTypes}
     * */
    channel({ r, g, b }: ChannelParamTypes): this;
    /**
     * 改变亮度
     * @param {number} p
     * p = 0 全暗，p > 0 且 p < 1 调暗，p = 1 原色， p > 1 调亮
     * */
    brightness(p: number): this;
    /**
     * 饱和度
     * @param {number} p
     * p = 0 完全灰度化，p = 1 原色，p > 1 增强饱和度
     * */
    saturate(p: number): this;
    /**
     * 对比度
     * @param {number} p
     *  p = 1 原色， p < 1 减弱对比度，p > 1 增强对比度
     * */
    contrast(p: number): this;
    /**
     * 透明度
     * @param {number} p
     * p = 0 全透明，p = 1 原色
     * */
    opacity(p: number): this;
    /**
     * 反色
     * @param {number} p
     * p = 0 原色， p = 1 完全反色
     * */
    invert(p: number): this;
    /**
     * 灰度
     * @param {number} p 0~1
     * */
    grayscale(p?: number): this;
    /**
     * 深褐色
     * @param {number} p 0~1
     * */
    sepia(p?: number): this;
    /**
     * 色相旋转，将色调沿极坐标转过deg角度
     * @param {number} deg 0~360
     * */
    hueRotate(deg: number): this;
    /**
     * 色相旋转，将色调沿极坐标转过deg角度
     * @param {number} deg 0~360
     * */
    /**
     * 卷积
     * @param {Matrix3} cKernel 3*3的矩阵
     * @param {number} stStep 1 / 9
     * @param {number} scaleFactor 521
     * */
    convolution(cKernel: THREE.Matrix3, stStep?: number, scaleFactor?: number): this;
    /**
     * 重置所有滤镜效果
     * */
    reset(): this;
    _getFilterShaderData(texture: THREE.Texture): {
        uniforms: {
            e_Texture: {
                value: import("three").Texture;
            };
            colorMatrix: {
                value: import("three").Matrix4;
            };
        };
        vertexShader: string;
        fragmentShader: string;
    };
    _getFilterColor(color?: string | number | THREE.Color, opacity?: number): import("three").Color;
    /** 转成JSON字符串 */
    toJSON(): string;
    /** 还原序列化的数据 */
    static fromJSON(json: string): MxFilters;
}
export {};
