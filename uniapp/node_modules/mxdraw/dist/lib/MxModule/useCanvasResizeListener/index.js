var __awaiter=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{d(o.next(e))}catch(e){i(e)}}function s(e){try{d(o.throw(e))}catch(e){i(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}d((o=o.apply(e,t||[])).next())})};import store from"../store";import{createCanvasParent}from"../../tools/dom/create";import{dynamicImport}from"../../tools/dynamicImport";import _ from"lodash";export default function useCanvasResizeListener(e,t,n=100){return __awaiter(this,void 0,void 0,function*(){if(!store.state.MxFun)return void console.error("请先调用loadCoreCode方法! ");if(!e)return void console.error("请确保mxdrawObj参数 是通过调用MxFun.createMxObject的callback回调函数拿到的mxDraw对象");let o=e;if(!o.isLoadCanvasResizeListene){o.isLoadCanvasResizeListene=!0;let r=void 0;e.addEvent("addResizeEvent",e=>{r=e}),yield dynamicImport("element-resize-event-polyfill");let i=createCanvasParent(t);i.addEventListener?i.addEventListener("resize",_.throttle(function(e){r&&r()},n),!1):console.log("mx: parentdiv[addEventListener] invalid")}})};