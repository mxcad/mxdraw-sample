var __renderjsModules={};

__renderjsModules["421a6b0e"] = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __reExport = (target, module2, copyDefault, desc) => {
    if (module2 && typeof module2 === "object" || typeof module2 === "function") {
      for (let key of __getOwnPropNames(module2))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
    }
    return target;
  };
  var __toESM = (module2, isNodeMode) => {
    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
  };
  var __toCommonJS = /* @__PURE__ */ ((cache) => {
    return (module2, temp) => {
      return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
    };
  })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/element-resize-event-polyfill/dist/element-resize-event-polyfill.umd.min.js
  var require_element_resize_event_polyfill_umd_min = __commonJS({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/element-resize-event-polyfill/dist/element-resize-event-polyfill.umd.min.js"(exports2, module2) {
      (function(t, e) {
        typeof exports2 === "object" && typeof module2 === "object" ? module2.exports = e() : typeof define === "function" && define.amd ? define([], e) : typeof exports2 === "object" ? exports2["element-resize-event-polyfill"] = e() : t["element-resize-event-polyfill"] = e();
      })(typeof self !== "undefined" ? self : exports2, function() {
        return function(t) {
          var e = {};
          function n(r) {
            if (e[r])
              return e[r].exports;
            var i = e[r] = { i: r, l: false, exports: {} };
            return t[r].call(i.exports, i, i.exports, n), i.l = true, i.exports;
          }
          return n.m = t, n.c = e, n.d = function(t2, e2, r) {
            n.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: r });
          }, n.r = function(t2) {
            typeof Symbol !== "undefined" && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
          }, n.t = function(t2, e2) {
            if (1 & e2 && (t2 = n(t2)), 8 & e2)
              return t2;
            if (4 & e2 && typeof t2 === "object" && t2 && t2.__esModule)
              return t2;
            var r = /* @__PURE__ */ Object.create(null);
            if (n.r(r), Object.defineProperty(r, "default", { enumerable: true, value: t2 }), 2 & e2 && typeof t2 != "string")
              for (var i in t2)
                n.d(r, i, function(e3) {
                  return t2[e3];
                }.bind(null, i));
            return r;
          }, n.n = function(t2) {
            var e2 = t2 && t2.__esModule ? function() {
              return t2["default"];
            } : function() {
              return t2;
            };
            return n.d(e2, "a", e2), e2;
          }, n.o = function(t2, e2) {
            return Object.prototype.hasOwnProperty.call(t2, e2);
          }, n.p = "", n(n.s = "fae3");
        }({ "6dd8": function(t, e, n) {
          "use strict";
          (function(t2) {
            var n2 = function() {
              if (typeof Map !== "undefined")
                return Map;
              function t3(t4, e2) {
                var n3 = -1;
                return t4.some(function(t5, r2) {
                  return t5[0] === e2 && (n3 = r2, true);
                }), n3;
              }
              return function() {
                function e2() {
                  this.__entries__ = [];
                }
                return Object.defineProperty(e2.prototype, "size", { get: function() {
                  return this.__entries__.length;
                }, enumerable: true, configurable: true }), e2.prototype.get = function(e3) {
                  var n3 = t3(this.__entries__, e3), r2 = this.__entries__[n3];
                  return r2 && r2[1];
                }, e2.prototype.set = function(e3, n3) {
                  var r2 = t3(this.__entries__, e3);
                  ~r2 ? this.__entries__[r2][1] = n3 : this.__entries__.push([e3, n3]);
                }, e2.prototype.delete = function(e3) {
                  var n3 = this.__entries__, r2 = t3(n3, e3);
                  ~r2 && n3.splice(r2, 1);
                }, e2.prototype.has = function(e3) {
                  return !!~t3(this.__entries__, e3);
                }, e2.prototype.clear = function() {
                  this.__entries__.splice(0);
                }, e2.prototype.forEach = function(t4, e3) {
                  e3 === void 0 && (e3 = null);
                  for (var n3 = 0, r2 = this.__entries__; n3 < r2.length; n3++) {
                    var i2 = r2[n3];
                    t4.call(e3, i2[1], i2[0]);
                  }
                }, e2;
              }();
            }(), r = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document, i = function() {
              return typeof t2 !== "undefined" && t2.Math === Math ? t2 : typeof self !== "undefined" && self.Math === Math ? self : typeof window !== "undefined" && window.Math === Math ? window : Function("return this")();
            }(), o = function() {
              return typeof requestAnimationFrame === "function" ? requestAnimationFrame.bind(i) : function(t3) {
                return setTimeout(function() {
                  return t3(Date.now());
                }, 1e3 / 60);
              };
            }(), s = 2;
            function c(t3, e2) {
              var n3 = false, r2 = false, i2 = 0;
              function c2() {
                n3 && (n3 = false, t3()), r2 && a2();
              }
              function u2() {
                o(c2);
              }
              function a2() {
                var t4 = Date.now();
                if (n3) {
                  if (t4 - i2 < s)
                    return;
                  r2 = true;
                } else
                  n3 = true, r2 = false, setTimeout(u2, e2);
                i2 = t4;
              }
              return a2;
            }
            var u = 20, a = ["top", "right", "bottom", "left", "width", "height", "size", "weight"], f = typeof MutationObserver !== "undefined", h = function() {
              function t3() {
                this.connected_ = false, this.mutationEventsAdded_ = false, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = c(this.refresh.bind(this), u);
              }
              return t3.prototype.addObserver = function(t4) {
                ~this.observers_.indexOf(t4) || this.observers_.push(t4), this.connected_ || this.connect_();
              }, t3.prototype.removeObserver = function(t4) {
                var e2 = this.observers_, n3 = e2.indexOf(t4);
                ~n3 && e2.splice(n3, 1), !e2.length && this.connected_ && this.disconnect_();
              }, t3.prototype.refresh = function() {
                var t4 = this.updateObservers_();
                t4 && this.refresh();
              }, t3.prototype.updateObservers_ = function() {
                var t4 = this.observers_.filter(function(t5) {
                  return t5.gatherActive(), t5.hasActive();
                });
                return t4.forEach(function(t5) {
                  return t5.broadcastActive();
                }), t4.length > 0;
              }, t3.prototype.connect_ = function() {
                r && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), f ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, { attributes: true, childList: true, characterData: true, subtree: true })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = true), this.connected_ = true);
              }, t3.prototype.disconnect_ = function() {
                r && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = false, this.connected_ = false);
              }, t3.prototype.onTransitionEnd_ = function(t4) {
                var e2 = t4.propertyName, n3 = e2 === void 0 ? "" : e2, r2 = a.some(function(t5) {
                  return !!~n3.indexOf(t5);
                });
                r2 && this.refresh();
              }, t3.getInstance = function() {
                return this.instance_ || (this.instance_ = new t3()), this.instance_;
              }, t3.instance_ = null, t3;
            }(), d = function(t3, e2) {
              for (var n3 = 0, r2 = Object.keys(e2); n3 < r2.length; n3++) {
                var i2 = r2[n3];
                Object.defineProperty(t3, i2, { value: e2[i2], enumerable: false, writable: false, configurable: true });
              }
              return t3;
            }, p = function(t3) {
              var e2 = t3 && t3.ownerDocument && t3.ownerDocument.defaultView;
              return e2 || i;
            }, l = M(0, 0, 0, 0);
            function v(t3) {
              return parseFloat(t3) || 0;
            }
            function _5(t3) {
              for (var e2 = [], n3 = 1; n3 < arguments.length; n3++)
                e2[n3 - 1] = arguments[n3];
              return e2.reduce(function(e3, n4) {
                var r2 = t3["border-" + n4 + "-width"];
                return e3 + v(r2);
              }, 0);
            }
            function b(t3) {
              for (var e2 = ["top", "right", "bottom", "left"], n3 = {}, r2 = 0, i2 = e2; r2 < i2.length; r2++) {
                var o2 = i2[r2], s2 = t3["padding-" + o2];
                n3[o2] = v(s2);
              }
              return n3;
            }
            function y(t3) {
              var e2 = t3.getBBox();
              return M(0, 0, e2.width, e2.height);
            }
            function m(t3) {
              var e2 = t3.clientWidth, n3 = t3.clientHeight;
              if (!e2 && !n3)
                return l;
              var r2 = p(t3).getComputedStyle(t3), i2 = b(r2), o2 = i2.left + i2.right, s2 = i2.top + i2.bottom, c2 = v(r2.width), u2 = v(r2.height);
              if (r2.boxSizing === "border-box" && (Math.round(c2 + o2) !== e2 && (c2 -= _5(r2, "left", "right") + o2), Math.round(u2 + s2) !== n3 && (u2 -= _5(r2, "top", "bottom") + s2)), !w(t3)) {
                var a2 = Math.round(c2 + o2) - e2, f2 = Math.round(u2 + s2) - n3;
                Math.abs(a2) !== 1 && (c2 -= a2), Math.abs(f2) !== 1 && (u2 -= f2);
              }
              return M(i2.left, i2.top, c2, u2);
            }
            var g = function() {
              return typeof SVGGraphicsElement !== "undefined" ? function(t3) {
                return t3 instanceof p(t3).SVGGraphicsElement;
              } : function(t3) {
                return t3 instanceof p(t3).SVGElement && typeof t3.getBBox === "function";
              };
            }();
            function w(t3) {
              return t3 === p(t3).document.documentElement;
            }
            function E(t3) {
              return r ? g(t3) ? y(t3) : m(t3) : l;
            }
            function O(t3) {
              var e2 = t3.x, n3 = t3.y, r2 = t3.width, i2 = t3.height, o2 = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object, s2 = Object.create(o2.prototype);
              return d(s2, { x: e2, y: n3, width: r2, height: i2, top: n3, right: e2 + r2, bottom: i2 + n3, left: e2 }), s2;
            }
            function M(t3, e2, n3, r2) {
              return { x: t3, y: e2, width: n3, height: r2 };
            }
            var x = function() {
              function t3(t4) {
                this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = M(0, 0, 0, 0), this.target = t4;
              }
              return t3.prototype.isActive = function() {
                var t4 = E(this.target);
                return this.contentRect_ = t4, t4.width !== this.broadcastWidth || t4.height !== this.broadcastHeight;
              }, t3.prototype.broadcastRect = function() {
                var t4 = this.contentRect_;
                return this.broadcastWidth = t4.width, this.broadcastHeight = t4.height, t4;
              }, t3;
            }(), T = function() {
              function t3(t4, e2) {
                var n3 = O(e2);
                d(this, { target: t4, contentRect: n3 });
              }
              return t3;
            }(), j = function() {
              function t3(t4, e2, r2) {
                if (this.activeObservations_ = [], this.observations_ = new n2(), typeof t4 !== "function")
                  throw new TypeError("The callback provided as parameter 1 is not a function.");
                this.callback_ = t4, this.controller_ = e2, this.callbackCtx_ = r2;
              }
              return t3.prototype.observe = function(t4) {
                if (!arguments.length)
                  throw new TypeError("1 argument required, but only 0 present.");
                if (typeof Element !== "undefined" && Element instanceof Object) {
                  if (!(t4 instanceof p(t4).Element))
                    throw new TypeError('parameter 1 is not of type "Element".');
                  var e2 = this.observations_;
                  e2.has(t4) || (e2.set(t4, new x(t4)), this.controller_.addObserver(this), this.controller_.refresh());
                }
              }, t3.prototype.unobserve = function(t4) {
                if (!arguments.length)
                  throw new TypeError("1 argument required, but only 0 present.");
                if (typeof Element !== "undefined" && Element instanceof Object) {
                  if (!(t4 instanceof p(t4).Element))
                    throw new TypeError('parameter 1 is not of type "Element".');
                  var e2 = this.observations_;
                  e2.has(t4) && (e2.delete(t4), e2.size || this.controller_.removeObserver(this));
                }
              }, t3.prototype.disconnect = function() {
                this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
              }, t3.prototype.gatherActive = function() {
                var t4 = this;
                this.clearActive(), this.observations_.forEach(function(e2) {
                  e2.isActive() && t4.activeObservations_.push(e2);
                });
              }, t3.prototype.broadcastActive = function() {
                if (this.hasActive()) {
                  var t4 = this.callbackCtx_, e2 = this.activeObservations_.map(function(t5) {
                    return new T(t5.target, t5.broadcastRect());
                  });
                  this.callback_.call(t4, e2, t4), this.clearActive();
                }
              }, t3.prototype.clearActive = function() {
                this.activeObservations_.splice(0);
              }, t3.prototype.hasActive = function() {
                return this.activeObservations_.length > 0;
              }, t3;
            }(), z = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new n2(), A = function() {
              function t3(e2) {
                if (!(this instanceof t3))
                  throw new TypeError("Cannot call a class as a function.");
                if (!arguments.length)
                  throw new TypeError("1 argument required, but only 0 present.");
                var n3 = h.getInstance(), r2 = new j(e2, n3, this);
                z.set(this, r2);
              }
              return t3;
            }();
            ["observe", "unobserve", "disconnect"].forEach(function(t3) {
              A.prototype[t3] = function() {
                var e2;
                return (e2 = z.get(this))[t3].apply(e2, arguments);
              };
            });
            var S = function() {
              return typeof i.ResizeObserver !== "undefined" ? i.ResizeObserver : A;
            }();
            e["a"] = S;
          }).call(this, n("c8ba"));
        }, c8ba: function(t, e) {
          var n;
          n = function() {
            return this;
          }();
          try {
            n = n || new Function("return this")();
          } catch (r) {
            typeof window === "object" && (n = window);
          }
          t.exports = n;
        }, f6fd: function(t, e) {
          (function(t2) {
            var e2 = "currentScript", n = t2.getElementsByTagName("script");
            e2 in t2 || Object.defineProperty(t2, e2, { get: function() {
              try {
                throw new Error();
              } catch (r) {
                var t3, e3 = (/.*at [^\(]*\((.*):.+:.+\)$/gi.exec(r.stack) || [false])[1];
                for (t3 in n)
                  if (n[t3].src == e3 || n[t3].readyState == "interactive")
                    return n[t3];
                return null;
              }
            } });
          })(document);
        }, fae3: function(t, e, n) {
          "use strict";
          var r;
          (n.r(e), n.d(e, "EventListenerWrapper", function() {
            return c;
          }), typeof window !== "undefined") && (n("f6fd"), (r = window.document.currentScript) && (r = r.src.match(/(.+\/)[^/]+\.js(\?.*)?$/)) && (n.p = r[1]));
          var i = n("6dd8");
          const o = EventTarget.prototype.addEventListener, s = function(t2) {
            const e2 = document.createEvent("HTMLEvents");
            return e2.initEvent(t2), e2;
          }, c = function(t2) {
            t2 === "resize" && a(this), o.apply(this, arguments);
          };
          function u(t2) {
            const e2 = u.observer = u.observer || new i["a"](t2);
            return e2.initialized = true, e2;
          }
          function a(t2) {
            const e2 = u((t3) => {
              if (e2.initialized)
                e2.initialized = false;
              else
                for (let e3 of t3) {
                  const t4 = s("resize");
                  e3.target.dispatchEvent(t4), e3 && e3.target && typeof e3.target.onresize === "function" && e3.target.onresize(t4);
                }
            });
            e2.observe(t2);
          }
          HTMLElement.prototype.addEventListener = c, Reflect.defineProperty(HTMLElement.prototype, "onresize", { set(t2) {
            this._onresize = t2, typeof t2 === "function" && a(this);
          }, get() {
            return this._onresize || null;
          } });
        } });
      });
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/jquery/dist/jquery.js"(exports2, module2) {
      (function(global2, factory) {
        "use strict";
        if (typeof module2 === "object" && typeof module2.exports === "object") {
          module2.exports = global2.document ? factory(global2, true) : function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        } else {
          factory(global2);
        }
      })(typeof window !== "undefined" ? window : exports2, function(window2, noGlobal) {
        "use strict";
        var arr = [];
        var getProto = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
          return arr.flat.call(array);
        } : function(array) {
          return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction = function isFunction2(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        }
        var version = "3.6.3", jQuery2 = function(selector, context) {
          return new jQuery2.fn.init(selector, context);
        };
        jQuery2.fn = jQuery2.prototype = {
          jquery: version,
          constructor: jQuery2,
          length: 0,
          toArray: function() {
            return slice.call(this);
          },
          get: function(num) {
            if (num == null) {
              return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          pushStack: function(elems) {
            var ret = jQuery2.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          each: function(callback) {
            return jQuery2.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery2.map(this, function(elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return i % 2;
            }));
          },
          eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          push,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery2.extend = jQuery2.fn.extend = function() {
          var options2, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== "object" && !isFunction(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options2 = arguments[i]) != null) {
              for (name in options2) {
                copy = options2[name];
                if (name === "__proto__" || target === copy) {
                  continue;
                }
                if (deep && copy && (jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery2.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery2.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        jQuery2.extend({
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          globalEval: function(code, options2, doc) {
            DOMEval(code, { nonce: options2 && options2.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          makeArray: function(arr2, results) {
            var ret = results || [];
            if (arr2 != null) {
              if (isArrayLike(Object(arr2))) {
                jQuery2.merge(ret, typeof arr2 === "string" ? [arr2] : arr2);
              } else {
                push.call(ret, arr2);
              }
            }
            return ret;
          },
          inArray: function(elem, arr2, i) {
            return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
          },
          merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          map: function(elems, callback, arg) {
            var length, value2, i = 0, ret = [];
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value2 = callback(elems[i], i, arg);
                if (value2 != null) {
                  ret.push(value2);
                }
              }
            } else {
              for (i in elems) {
                value2 = callback(elems[i], i, arg);
                if (value2 != null) {
                  ret.push(value2);
                }
              }
            }
            return flat(ret);
          },
          guid: 1,
          support
        });
        if (typeof Symbol === "function") {
          jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
        }
        jQuery2.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
          class2type["[object " + name + "]"] = name.toLowerCase();
        });
        function isArrayLike(obj) {
          var length = !!obj && "length" in obj && obj.length, type = toType(obj);
          if (isFunction(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        var Sizzle = function(window3) {
          var i, support2, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document3, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window3.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true;
            }
            return 0;
          }, hasOwn2 = {}.hasOwnProperty, arr2 = [], pop = arr2.pop, pushNative = arr2.push, push2 = arr2.push, slice2 = arr2.slice, indexOf2 = function(list, elem) {
            var i2 = 0, len = list.length;
            for (; i2 < len; i2++) {
              if (list[i2] === elem) {
                return i2;
              }
            }
            return -1;
          }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace2 = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace2 + "*(" + identifier + ")(?:" + whitespace2 + "*([*^$|!~]?=)" + whitespace2 + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace2 + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace2 + "+", "g"), rtrim2 = new RegExp("^" + whitespace2 + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace2 + "+$", "g"), rcomma = new RegExp("^" + whitespace2 + "*," + whitespace2 + "*"), rcombinators = new RegExp("^" + whitespace2 + "*([>+~]|" + whitespace2 + ")" + whitespace2 + "*"), rdescend = new RegExp(whitespace2 + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + identifier + ")"),
            "CLASS": new RegExp("^\\.(" + identifier + ")"),
            "TAG": new RegExp("^(" + identifier + "|[*])"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace2 + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace2 + "*(?:([+-]|)" + whitespace2 + "*(\\d+)|))" + whitespace2 + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            "needsContext": new RegExp("^" + whitespace2 + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace2 + "*((?:-\\d)?\\d*)" + whitespace2 + "*\\)|)(?=[^-]|$)", "i")
          }, rhtml2 = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape2, nonHex) {
            var high = "0x" + escape2.slice(1) - 65536;
            return nonHex ? nonHex : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
          }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
              if (ch === "\0") {
                return "\uFFFD";
              }
              return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
            }
            return "\\" + ch;
          }, unloadHandler = function() {
            setDocument();
          }, inDisabledFieldset = addCombinator(function(elem) {
            return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
          }, { dir: "parentNode", next: "legend" });
          try {
            push2.apply(arr2 = slice2.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr2[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push2 = {
              apply: arr2.length ? function(target, els) {
                pushNative.apply(target, slice2.call(els));
              } : function(target, els) {
                var j = target.length, i2 = 0;
                while (target[j++] = els[i2++]) {
                }
                target.length = j - 1;
              }
            };
          }
          function Sizzle2(selector, context, results, seed) {
            var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }
            if (!seed) {
              setDocument(context);
              context = context || document3;
              if (documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                  if (m = match[1]) {
                    if (nodeType === 9) {
                      if (elem = context.getElementById(m)) {
                        if (elem.id === m) {
                          results.push(elem);
                          return results;
                        }
                      } else {
                        return results;
                      }
                    } else {
                      if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    }
                  } else if (match[2]) {
                    push2.apply(results, context.getElementsByTagName(selector));
                    return results;
                  } else if ((m = match[3]) && support2.getElementsByClassName && context.getElementsByClassName) {
                    push2.apply(results, context.getElementsByClassName(m));
                    return results;
                  }
                }
                if (support2.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                  newSelector = selector;
                  newContext = context;
                  if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                    if (newContext !== context || !support2.scope) {
                      if (nid = context.getAttribute("id")) {
                        nid = nid.replace(rcssescape, fcssescape);
                      } else {
                        context.setAttribute("id", nid = expando);
                      }
                    }
                    groups = tokenize(selector);
                    i2 = groups.length;
                    while (i2--) {
                      groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                    }
                    newSelector = groups.join(",");
                  }
                  try {
                    if (support2.cssSupportsSelector && !CSS.supports("selector(:is(" + newSelector + "))")) {
                      throw new Error();
                    }
                    push2.apply(results, newContext.querySelectorAll(newSelector));
                    return results;
                  } catch (qsaError) {
                    nonnativeSelectorCache(selector, true);
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute("id");
                    }
                  }
                }
              }
            }
            return select(selector.replace(rtrim2, "$1"), context, results, seed);
          }
          function createCache() {
            var keys = [];
            function cache(key, value2) {
              if (keys.push(key + " ") > Expr.cacheLength) {
                delete cache[keys.shift()];
              }
              return cache[key + " "] = value2;
            }
            return cache;
          }
          function markFunction(fn) {
            fn[expando] = true;
            return fn;
          }
          function assert(fn) {
            var el = document3.createElement("fieldset");
            try {
              return !!fn(el);
            } catch (e) {
              return false;
            } finally {
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }
              el = null;
            }
          }
          function addHandle(attrs, handler) {
            var arr3 = attrs.split("|"), i2 = arr3.length;
            while (i2--) {
              Expr.attrHandle[arr3[i2]] = handler;
            }
          }
          function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (diff) {
              return diff;
            }
            if (cur) {
              while (cur = cur.nextSibling) {
                if (cur === b) {
                  return -1;
                }
              }
            }
            return a ? 1 : -1;
          }
          function createInputPseudo(type) {
            return function(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === type;
            };
          }
          function createButtonPseudo(type) {
            return function(elem) {
              var name = elem.nodeName.toLowerCase();
              return (name === "input" || name === "button") && elem.type === type;
            };
          }
          function createDisabledPseudo(disabled) {
            return function(elem) {
              if ("form" in elem) {
                if (elem.parentNode && elem.disabled === false) {
                  if ("label" in elem) {
                    if ("label" in elem.parentNode) {
                      return elem.parentNode.disabled === disabled;
                    } else {
                      return elem.disabled === disabled;
                    }
                  }
                  return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;
              } else if ("label" in elem) {
                return elem.disabled === disabled;
              }
              return false;
            };
          }
          function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
              argument = +argument;
              return markFunction(function(seed, matches2) {
                var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
                while (i2--) {
                  if (seed[j = matchIndexes[i2]]) {
                    seed[j] = !(matches2[j] = seed[j]);
                  }
                }
              });
            });
          }
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
          }
          support2 = Sizzle2.support = {};
          isXML = Sizzle2.isXML = function(elem) {
            var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
            return !rhtml2.test(namespace || docElem2 && docElem2.nodeName || "HTML");
          };
          setDocument = Sizzle2.setDocument = function(node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
              return document3;
            }
            document3 = doc;
            docElem = document3.documentElement;
            documentIsHTML = !isXML(document3);
            if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
              if (subWindow.addEventListener) {
                subWindow.addEventListener("unload", unloadHandler, false);
              } else if (subWindow.attachEvent) {
                subWindow.attachEvent("onunload", unloadHandler);
              }
            }
            support2.scope = assert(function(el) {
              docElem.appendChild(el).appendChild(document3.createElement("div"));
              return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
            });
            support2.cssSupportsSelector = assert(function() {
              return CSS.supports("selector(*)") && document3.querySelectorAll(":is(:jqfake)") && !CSS.supports("selector(:is(*,:jqfake))");
            });
            support2.attributes = assert(function(el) {
              el.className = "i";
              return !el.getAttribute("className");
            });
            support2.getElementsByTagName = assert(function(el) {
              el.appendChild(document3.createComment(""));
              return !el.getElementsByTagName("*").length;
            });
            support2.getElementsByClassName = rnative.test(document3.getElementsByClassName);
            support2.getById = assert(function(el) {
              docElem.appendChild(el).id = expando;
              return !document3.getElementsByName || !document3.getElementsByName(expando).length;
            });
            if (support2.getById) {
              Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
              Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var elem = context.getElementById(id);
                  return elem ? [elem] : [];
                }
              };
            } else {
              Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                  return node2 && node2.value === attrId;
                };
              };
              Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var node2, i2, elems, elem = context.getElementById(id);
                  if (elem) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                    elems = context.getElementsByName(id);
                    i2 = 0;
                    while (elem = elems[i2++]) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                    }
                  }
                  return [];
                }
              };
            }
            Expr.find["TAG"] = support2.getElementsByTagName ? function(tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);
              } else if (support2.qsa) {
                return context.querySelectorAll(tag);
              }
            } : function(tag, context) {
              var elem, tmp = [], i2 = 0, results = context.getElementsByTagName(tag);
              if (tag === "*") {
                while (elem = results[i2++]) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }
                return tmp;
              }
              return results;
            };
            Expr.find["CLASS"] = support2.getElementsByClassName && function(className, context) {
              if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support2.qsa = rnative.test(document3.querySelectorAll)) {
              assert(function(el) {
                var input;
                docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
                if (el.querySelectorAll("[msallowcapture^='']").length) {
                  rbuggyQSA.push("[*^$]=" + whitespace2 + `*(?:''|"")`);
                }
                if (!el.querySelectorAll("[selected]").length) {
                  rbuggyQSA.push("\\[" + whitespace2 + "*(?:value|" + booleans + ")");
                }
                if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                  rbuggyQSA.push("~=");
                }
                input = document3.createElement("input");
                input.setAttribute("name", "");
                el.appendChild(input);
                if (!el.querySelectorAll("[name='']").length) {
                  rbuggyQSA.push("\\[" + whitespace2 + "*name" + whitespace2 + "*=" + whitespace2 + `*(?:''|"")`);
                }
                if (!el.querySelectorAll(":checked").length) {
                  rbuggyQSA.push(":checked");
                }
                if (!el.querySelectorAll("a#" + expando + "+*").length) {
                  rbuggyQSA.push(".#.+[+~]");
                }
                el.querySelectorAll("\\\f");
                rbuggyQSA.push("[\\r\\n\\f]");
              });
              assert(function(el) {
                el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var input = document3.createElement("input");
                input.setAttribute("type", "hidden");
                el.appendChild(input).setAttribute("name", "D");
                if (el.querySelectorAll("[name=d]").length) {
                  rbuggyQSA.push("name" + whitespace2 + "*[*^$|!~]?=");
                }
                if (el.querySelectorAll(":enabled").length !== 2) {
                  rbuggyQSA.push(":enabled", ":disabled");
                }
                docElem.appendChild(el).disabled = true;
                if (el.querySelectorAll(":disabled").length !== 2) {
                  rbuggyQSA.push(":enabled", ":disabled");
                }
                el.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
              });
            }
            if (support2.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
              assert(function(el) {
                support2.disconnectedMatch = matches.call(el, "*");
                matches.call(el, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
              });
            }
            if (!support2.cssSupportsSelector) {
              rbuggyQSA.push(":has");
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
              var adown = a.nodeType === 9 && a.documentElement || a, bup = b && b.parentNode;
              return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
              if (b) {
                while (b = b.parentNode) {
                  if (b === a) {
                    return true;
                  }
                }
              }
              return false;
            };
            sortOrder = hasCompare ? function(a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }
              compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
              if (compare & 1 || !support2.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a == document3 || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                  return -1;
                }
                if (b == document3 || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
                  return 1;
                }
                return sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            } : function(a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var cur, i2 = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
              if (!aup || !bup) {
                return a == document3 ? -1 : b == document3 ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
              } else if (aup === bup) {
                return siblingCheck(a, b);
              }
              cur = a;
              while (cur = cur.parentNode) {
                ap.unshift(cur);
              }
              cur = b;
              while (cur = cur.parentNode) {
                bp.unshift(cur);
              }
              while (ap[i2] === bp[i2]) {
                i2++;
              }
              return i2 ? siblingCheck(ap[i2], bp[i2]) : ap[i2] == preferredDoc ? -1 : bp[i2] == preferredDoc ? 1 : 0;
            };
            return document3;
          };
          Sizzle2.matches = function(expr, elements) {
            return Sizzle2(expr, null, null, elements);
          };
          Sizzle2.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (support2.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches.call(elem, expr);
                if (ret || support2.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
                nonnativeSelectorCache(expr, true);
              }
            }
            return Sizzle2(expr, document3, null, [elem]).length > 0;
          };
          Sizzle2.contains = function(context, elem) {
            if ((context.ownerDocument || context) != document3) {
              setDocument(context);
            }
            return contains(context, elem);
          };
          Sizzle2.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) != document3) {
              setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn2.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return val !== void 0 ? val : support2.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
          };
          Sizzle2.escape = function(sel) {
            return (sel + "").replace(rcssescape, fcssescape);
          };
          Sizzle2.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };
          Sizzle2.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i2 = 0;
            hasDuplicate = !support2.detectDuplicates;
            sortInput = !support2.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
              while (elem = results[i2++]) {
                if (elem === results[i2]) {
                  j = duplicates.push(i2);
                }
              }
              while (j--) {
                results.splice(duplicates[j], 1);
              }
            }
            sortInput = null;
            return results;
          };
          getText = Sizzle2.getText = function(elem) {
            var node, ret = "", i2 = 0, nodeType = elem.nodeType;
            if (!nodeType) {
              while (node = elem[i2++]) {
                ret += getText(node);
              }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
              if (typeof elem.textContent === "string") {
                return elem.textContent;
              } else {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  ret += getText(elem);
                }
              }
            } else if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            return ret;
          };
          Expr = Sizzle2.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              ">": { dir: "parentNode", first: true },
              " ": { dir: "parentNode" },
              "+": { dir: "previousSibling", first: true },
              "~": { dir: "previousSibling" }
            },
            preFilter: {
              "ATTR": function(match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
              },
              "CHILD": function(match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                  if (!match[3]) {
                    Sizzle2.error(match[0]);
                  }
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +(match[7] + match[8] || match[3] === "odd");
                } else if (match[3]) {
                  Sizzle2.error(match[0]);
                }
                return match;
              },
              "PSEUDO": function(match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr["CHILD"].test(match[0])) {
                  return null;
                }
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";
                } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
              }
            },
            filter: {
              "TAG": function(nodeNameSelector) {
                var nodeName2 = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function() {
                  return true;
                } : function(elem) {
                  return elem.nodeName && elem.nodeName.toLowerCase() === nodeName2;
                };
              },
              "CLASS": function(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace2 + ")" + className + "(" + whitespace2 + "|$)")) && classCache(className, function(elem) {
                  return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                });
              },
              "ATTR": function(name, operator, check) {
                return function(elem) {
                  var result = Sizzle2.attr(elem, name);
                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }
                  result += "";
                  return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                };
              },
              "CHILD": function(type, what, _argument, first, last) {
                var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                return first === 1 && last === 0 ? function(elem) {
                  return !!elem.parentNode;
                } : function(elem, _context, xml) {
                  var cache, uniqueCache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                  if (parent) {
                    if (simple) {
                      while (dir2) {
                        node = elem;
                        while (node = node[dir2]) {
                          if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                            return false;
                          }
                        }
                        start = dir2 = type === "only" && !start && "nextSibling";
                      }
                      return true;
                    }
                    start = [forward ? parent.firstChild : parent.lastChild];
                    if (forward && useCache) {
                      node = parent;
                      outerCache = node[expando] || (node[expando] = {});
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          uniqueCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      if (useCache) {
                        node = elem;
                        outerCache = node[expando] || (node[expando] = {});
                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }
                      if (diff === false) {
                        while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                          if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});
                              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                              uniqueCache[type] = [dirruns, diff];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    diff -= last;
                    return diff === first || diff % first === 0 && diff / first >= 0;
                  }
                };
              },
              "PSEUDO": function(pseudo, argument) {
                var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle2.error("unsupported pseudo: " + pseudo);
                if (fn[expando]) {
                  return fn(argument);
                }
                if (fn.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                    var idx, matched = fn(seed, argument), i2 = matched.length;
                    while (i2--) {
                      idx = indexOf2(seed, matched[i2]);
                      seed[idx] = !(matches2[idx] = matched[i2]);
                    }
                  }) : function(elem) {
                    return fn(elem, 0, args);
                  };
                }
                return fn;
              }
            },
            pseudos: {
              "not": markFunction(function(selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrim2, "$1"));
                return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                  var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                  while (i2--) {
                    if (elem = unmatched[i2]) {
                      seed[i2] = !(matches2[i2] = elem);
                    }
                  }
                }) : function(elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);
                  input[0] = null;
                  return !results.pop();
                };
              }),
              "has": markFunction(function(selector) {
                return function(elem) {
                  return Sizzle2(selector, elem).length > 0;
                };
              }),
              "contains": markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                  return (elem.textContent || getText(elem)).indexOf(text) > -1;
                };
              }),
              "lang": markFunction(function(lang) {
                if (!ridentifier.test(lang || "")) {
                  Sizzle2.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              "target": function(elem) {
                var hash = window3.location && window3.location.hash;
                return hash && hash.slice(1) === elem.id;
              },
              "root": function(elem) {
                return elem === docElem;
              },
              "focus": function(elem) {
                return elem === document3.activeElement && (!document3.hasFocus || document3.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              "enabled": createDisabledPseudo(false),
              "disabled": createDisabledPseudo(true),
              "checked": function(elem) {
                var nodeName2 = elem.nodeName.toLowerCase();
                return nodeName2 === "input" && !!elem.checked || nodeName2 === "option" && !!elem.selected;
              },
              "selected": function(elem) {
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              "empty": function(elem) {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              "parent": function(elem) {
                return !Expr.pseudos["empty"](elem);
              },
              "header": function(elem) {
                return rheader.test(elem.nodeName);
              },
              "input": function(elem) {
                return rinputs.test(elem.nodeName);
              },
              "button": function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
              },
              "text": function(elem) {
                var attr;
                return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },
              "first": createPositionalPseudo(function() {
                return [0];
              }),
              "last": createPositionalPseudo(function(_matchIndexes, length) {
                return [length - 1];
              }),
              "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              "even": createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 0;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              "odd": createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 1;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument > length ? length : argument;
                for (; --i2 >= 0; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument;
                for (; ++i2 < length; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos["nth"] = Expr.pseudos["eq"];
          for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }
          function setFilters() {
          }
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          tokenize = Sizzle2.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;
              if (match = rcombinators.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: match[0].replace(rtrim2, " ")
                });
                soFar = soFar.slice(matched.length);
              }
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle2.error(selector) : tokenCache(selector, groups).slice(0);
          };
          function toSelector(tokens) {
            var i2 = 0, len = tokens.length, selector = "";
            for (; i2 < len; i2++) {
              selector += tokens[i2].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            } : function(elem, context, xml) {
              var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
              if (xml) {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                    if (skip && skip === elem.nodeName.toLowerCase()) {
                      elem = elem[dir2] || elem;
                    } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      return newCache[2] = oldCache[2];
                    } else {
                      uniqueCache[key] = newCache;
                      if (newCache[2] = matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
              var i2 = matchers.length;
              while (i2--) {
                if (!matchers[i2](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i2 = 0, len = contexts.length;
            for (; i2 < len; i2++) {
              Sizzle2(selector, contexts[i2], results);
            }
            return results;
          }
          function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
            for (; i2 < len; i2++) {
              if (elem = unmatched[i2]) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i2);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
              var temp, i2, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
              if (matcher) {
                matcher(matcherIn, matcherOut, context, xml);
              }
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);
                i2 = temp.length;
                while (i2--) {
                  if (elem = temp[i2]) {
                    matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    temp = [];
                    i2 = matcherOut.length;
                    while (i2--) {
                      if (elem = matcherOut[i2]) {
                        temp.push(matcherIn[i2] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }
                  i2 = matcherOut.length;
                  while (i2--) {
                    if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i2]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }
              } else {
                matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push2.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
              return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
              return indexOf2(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function(elem, context, xml) {
              var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              checkContext = null;
              return ret;
            }];
            for (; i2 < len; i2++) {
              if (matcher = Expr.relative[tokens[i2].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
                if (matcher[expando]) {
                  j = ++i2;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(i2 > 1 && elementMatcher(matchers), i2 > 1 && toSelector(tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })).replace(rtrim2, "$1"), matcher, i2 < j && matcherFromTokens(tokens.slice(i2, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context == document3 || context || outermost;
              }
              for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument != document3) {
                    setDocument(elem);
                    xml = !documentIsHTML;
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document3, xml)) {
                      results.push(elem);
                      break;
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                  }
                }
                if (bySet) {
                  if (elem = !matcher && elem) {
                    matchedCount--;
                  }
                  if (seed) {
                    unmatched.push(elem);
                  }
                }
              }
              matchedCount += i2;
              if (bySet && i2 !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml);
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i2--) {
                      if (!(unmatched[i2] || setMatched[i2])) {
                        setMatched[i2] = pop.call(results);
                      }
                    }
                  }
                  setMatched = condense(setMatched);
                }
                push2.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  Sizzle2.uniqueSort(results);
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }
              return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          compile = Sizzle2.compile = function(selector, match) {
            var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
              if (!match) {
                match = tokenize(selector);
              }
              i2 = match.length;
              while (i2--) {
                cached = matcherFromTokens(match[i2]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }
              cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
              cached.selector = selector;
            }
            return cached;
          };
          select = Sizzle2.select = function(selector, context, results, seed) {
            var i2, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                  return results;
                } else if (compiled) {
                  context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i2 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
              while (i2--) {
                token = tokens[i2];
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find = Expr.find[type]) {
                  if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                    tokens.splice(i2, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push2.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
          };
          support2.sortStable = expando.split("").sort(sortOrder).join("") === expando;
          support2.detectDuplicates = !!hasDuplicate;
          setDocument();
          support2.sortDetached = assert(function(el) {
            return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
          });
          if (!assert(function(el) {
            el.innerHTML = "<a href='#'></a>";
            return el.firstChild.getAttribute("href") === "#";
          })) {
            addHandle("type|href|height|width", function(elem, name, isXML2) {
              if (!isXML2) {
                return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
              }
            });
          }
          if (!support2.attributes || !assert(function(el) {
            el.innerHTML = "<input/>";
            el.firstChild.setAttribute("value", "");
            return el.firstChild.getAttribute("value") === "";
          })) {
            addHandle("value", function(elem, _name, isXML2) {
              if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
                return elem.defaultValue;
              }
            });
          }
          if (!assert(function(el) {
            return el.getAttribute("disabled") == null;
          })) {
            addHandle(booleans, function(elem, name, isXML2) {
              var val;
              if (!isXML2) {
                return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
              }
            });
          }
          return Sizzle2;
        }(window2);
        jQuery2.find = Sizzle;
        jQuery2.expr = Sizzle.selectors;
        jQuery2.expr[":"] = jQuery2.expr.pseudos;
        jQuery2.uniqueSort = jQuery2.unique = Sizzle.uniqueSort;
        jQuery2.text = Sizzle.getText;
        jQuery2.isXMLDoc = Sizzle.isXML;
        jQuery2.contains = Sizzle.contains;
        jQuery2.escapeSelector = Sizzle.escape;
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery2(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery2.expr.match.needsContext;
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction(qualifier)) {
            return jQuery2.grep(elements, function(elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery2.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery2.grep(elements, function(elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery2.filter(qualifier, elements, not);
        }
        jQuery2.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery2.find.matches(expr, jQuery2.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery2.fn.extend({
          find: function(selector) {
            var i, ret, len = this.length, self2 = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery2(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery2.contains(self2[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              jQuery2.find(selector, self2[i], ret);
            }
            return len > 1 ? jQuery2.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery2(selector) : selector || [], false).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery2.fn.init = function(selector, context, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery2 ? context[0] : context;
                jQuery2.merge(this, jQuery2.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document2, true));
                if (rsingleTag.test(match[1]) && jQuery2.isPlainObject(context)) {
                  for (match in context) {
                    if (isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : selector(jQuery2);
          }
          return jQuery2.makeArray(selector, this);
        };
        init.prototype = jQuery2.fn;
        rootjQuery = jQuery2(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery2.fn.extend({
          has: function(target) {
            var targets = jQuery2(target, this), l = targets.length;
            return this.filter(function() {
              var i = 0;
              for (; i < l; i++) {
                if (jQuery2.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery2(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery2.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery2.uniqueSort(matched) : matched);
          },
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf.call(jQuery2(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
          },
          add: function(selector, context) {
            return this.pushStack(jQuery2.uniqueSort(jQuery2.merge(this.get(), jQuery2(selector, context))));
          },
          addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery2.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery2.merge([], elem.childNodes);
          }
        }, function(name, fn) {
          jQuery2.fn[name] = function(until, selector) {
            var matched = jQuery2.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery2.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery2.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options2) {
          var object = {};
          jQuery2.each(options2.match(rnothtmlwhite) || [], function(_5, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery2.Callbacks = function(options2) {
          options2 = typeof options2 === "string" ? createOptions(options2) : jQuery2.extend({}, options2);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options2.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options2.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options2.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self2 = {
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add(args) {
                  jQuery2.each(args, function(_5, arg) {
                    if (isFunction(arg)) {
                      if (!options2.unique || !self2.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType(arg) !== "string") {
                      add(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },
            remove: function() {
              jQuery2.each(arguments, function(_5, arg) {
                var index;
                while ((index = jQuery2.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            has: function(fn) {
              return fn ? jQuery2.inArray(fn, list) > -1 : list.length > 0;
            },
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },
            fire: function() {
              self2.fireWith(this, arguments);
              return this;
            },
            fired: function() {
              return !!fired;
            }
          };
          return self2;
        };
        function Identity(v) {
          return v;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value2, resolve, reject, noValue) {
          var method;
          try {
            if (value2 && isFunction(method = value2.promise)) {
              method.call(value2).done(resolve).fail(reject);
            } else if (value2 && isFunction(method = value2.then)) {
              method.call(value2, resolve, reject);
            } else {
              resolve.apply(void 0, [value2].slice(noValue));
            }
          } catch (value3) {
            reject.apply(void 0, [value3]);
          }
        }
        jQuery2.extend({
          Deferred: function(func) {
            var tuples = [
              [
                "notify",
                "progress",
                jQuery2.Callbacks("memory"),
                jQuery2.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn) {
                return promise.then(null, fn);
              },
              pipe: function() {
                var fns = arguments;
                return jQuery2.Deferred(function(newDefer) {
                  jQuery2.each(tuples, function(_i, tuple) {
                    var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction(then)) {
                        if (special) {
                          then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special));
                        } else {
                          maxDepth++;
                          then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special), resolve(maxDepth, deferred2, Identity, deferred2.notifyWith));
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process2 = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e) {
                        if (jQuery2.Deferred.exceptionHook) {
                          jQuery2.Deferred.exceptionHook(e, process2.stackTrace);
                        }
                        if (depth + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth) {
                      process2();
                    } else {
                      if (jQuery2.Deferred.getStackHook) {
                        process2.stackTrace = jQuery2.Deferred.getStackHook();
                      }
                      window2.setTimeout(process2);
                    }
                  };
                }
                return jQuery2.Deferred(function(newDefer) {
                  tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                  tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                  tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                }).promise();
              },
              promise: function(obj) {
                return obj != null ? jQuery2.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery2.each(tuples, function(i, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(function() {
                  state = stateString;
                }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery2.Deferred(), updateFunc = function(i2) {
              return function(value2) {
                resolveContexts[i2] = this;
                resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value2;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
              if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery2.Deferred.exceptionHook = function(error, stack) {
          if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
            window2.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
          }
        };
        jQuery2.readyException = function(error) {
          window2.setTimeout(function() {
            throw error;
          });
        };
        var readyList = jQuery2.Deferred();
        jQuery2.fn.ready = function(fn) {
          readyList.then(fn).catch(function(error) {
            jQuery2.readyException(error);
          });
          return this;
        };
        jQuery2.extend({
          isReady: false,
          readyWait: 1,
          ready: function(wait) {
            if (wait === true ? --jQuery2.readyWait : jQuery2.isReady) {
              return;
            }
            jQuery2.isReady = true;
            if (wait !== true && --jQuery2.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery2]);
          }
        });
        jQuery2.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery2.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery2.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn, key, value2, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (toType(key) === "object") {
            chainable = true;
            for (i in key) {
              access(elems, fn, i, key[i], true, emptyGet, raw);
            }
          } else if (value2 !== void 0) {
            chainable = true;
            if (!isFunction(value2)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn.call(elems, value2);
                fn = null;
              } else {
                bulk = fn;
                fn = function(elem, _key, value3) {
                  return bulk.call(jQuery2(elem), value3);
                };
              }
            }
            if (fn) {
              for (; i < len; i++) {
                fn(elems[i], key, raw ? value2 : value2.call(elems[i], i, fn(elems[i], key)));
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn.call(elems);
          }
          return len ? fn(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data() {
          this.expando = jQuery2.expando + Data.uid++;
        }
        Data.uid = 1;
        Data.prototype = {
          cache: function(owner) {
            var value2 = owner[this.expando];
            if (!value2) {
              value2 = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value2;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value: value2,
                    configurable: true
                  });
                }
              }
            }
            return value2;
          },
          set: function(owner, data, value2) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
              cache[camelCase(data)] = value2;
            } else {
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
          },
          access: function(owner, key, value2) {
            if (key === void 0 || key && typeof key === "string" && value2 === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value2);
            return value2 !== void 0 ? value2 : key;
          },
          remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache[key[i]];
              }
            }
            if (key === void 0 || jQuery2.isEmptyObject(cache)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== void 0 && !jQuery2.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data();
        var dataUser = new Data();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery2.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery2.fn.extend({
          data: function(key, value2) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value3) {
              var data2;
              if (elem && value3 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value3);
              });
            }, null, value2, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery2.extend({
          queue: function(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, jQuery2.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery2.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery2._queueHooks(elem, type), next = function() {
              jQuery2.dequeue(elem, type);
            };
            if (fn === "inprogress") {
              fn = queue.shift();
              startLength--;
            }
            if (fn) {
              if (type === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery2.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        jQuery2.fn.extend({
          queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery2.queue(this[0], type);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery2.queue(this, type, data);
              jQuery2._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery2.dequeue(this, type);
              }
            });
          },
          dequeue: function(type) {
            return this.each(function() {
              jQuery2.dequeue(this, type);
            });
          },
          clearQueue: function(type) {
            return this.queue(type || "fx", []);
          },
          promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery2.Deferred(), elements = this, i = this.length, resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
            if (typeof type !== "string") {
              obj = type;
              type = void 0;
            }
            type = type || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery2.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery2.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery2.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery2.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery2.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery2.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery2.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery2.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        jQuery2.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery2(this).show();
              } else {
                jQuery2(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context, tag)) {
            return jQuery2.merge([context], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l = elems.length;
          for (; i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (toType(elem) === "object") {
                jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + jQuery2.htmlPrefilter(elem) + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery2.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery2.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function expectSync(elem, type) {
          return elem === safeActiveElement() === (type === "focus");
        }
        function safeActiveElement() {
          try {
            return document2.activeElement;
          } catch (err) {
          }
        }
        function on(elem, types, selector, data, fn, one) {
          var origFn, type;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type in types) {
              on(elem, type, selector, data, types[type], one);
            }
            return elem;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = void 0;
          } else if (fn == null) {
            if (typeof selector === "string") {
              fn = data;
              data = void 0;
            } else {
              fn = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return elem;
          }
          if (one === 1) {
            origFn = fn;
            fn = function(event) {
              jQuery2().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery2.guid++);
          }
          return elem.each(function() {
            jQuery2.event.add(this, types, fn, data, selector);
          });
        }
        jQuery2.event = {
          global: {},
          add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery2.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery2.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = /* @__PURE__ */ Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e) {
                return typeof jQuery2 !== "undefined" && jQuery2.event.triggered !== e.type ? jQuery2.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery2.event.special[type] || {};
              handleObj = jQuery2.extend({
                type,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery2.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery2.event.global[type] = true;
            }
          },
          remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                for (type in events) {
                  jQuery2.event.remove(elem, type + types[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery2.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
            if (jQuery2.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery2.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery2.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery2.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery2(sel, this).index(cur) > -1 : jQuery2.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery2.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value2) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value: value2
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery2.expando] ? originalEvent : new jQuery2.Event(originalEvent);
          },
          special: {
            load: {
              noBubble: true
            },
            click: {
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", returnTrue);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type, expectSync2) {
          if (!expectSync2) {
            if (dataPriv.get(el, type) === void 0) {
              jQuery2.event.add(el, type, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type, false);
          jQuery2.event.add(el, type, {
            namespace: false,
            handler: function(event) {
              var notAsync, result, saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                if (!saved.length) {
                  saved = slice.call(arguments);
                  dataPriv.set(this, type, saved);
                  notAsync = expectSync2(this, type);
                  this[type]();
                  result = dataPriv.get(this, type);
                  if (saved !== result || notAsync) {
                    dataPriv.set(this, type, false);
                  } else {
                    result = {};
                  }
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result && result.value;
                  }
                } else if ((jQuery2.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved.length) {
                dataPriv.set(this, type, {
                  value: jQuery2.event.trigger(jQuery2.extend(saved[0], jQuery2.Event.prototype), saved.slice(1), this)
                });
                event.stopImmediatePropagation();
              }
            }
          });
        }
        jQuery2.removeEvent = function(elem, type, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
          }
        };
        jQuery2.Event = function(src, props) {
          if (!(this instanceof jQuery2.Event)) {
            return new jQuery2.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery2.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery2.expando] = true;
        };
        jQuery2.Event.prototype = {
          constructor: jQuery2.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery2.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery2.event.addProp);
        jQuery2.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
          jQuery2.event.special[type] = {
            setup: function() {
              leverageNative(this, type, expectSync);
              return false;
            },
            trigger: function() {
              leverageNative(this, type);
              return true;
            },
            _default: function(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType
          };
        });
        jQuery2.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery2.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery2.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery2.fn.extend({
          on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
          },
          one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
          },
          off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery2(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
              return this;
            }
            if (typeof types === "object") {
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn = selector;
              selector = void 0;
            }
            if (fn === false) {
              fn = returnFalse;
            }
            return this.each(function() {
              jQuery2.event.remove(this, types, fn, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery2(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                  jQuery2.event.add(dest, type, events[type][i]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery2.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value2 = args[0], valueIsFunction = isFunction(value2);
          if (valueIsFunction || l > 1 && typeof value2 === "string" && !support.checkClone && rchecked.test(value2)) {
            return collection.each(function(index) {
              var self2 = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value2.call(this, index, self2.html());
              }
              domManip(self2, args, callback, ignored);
            });
          }
          if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first || ignored) {
              scripts = jQuery2.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery2.clone(node, true, true);
                  if (hasScripts) {
                    jQuery2.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery2.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery2.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery2._evalUrl && !node.noModule) {
                        jQuery2._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove(elem, selector, keepData) {
          var node, nodes = selector ? jQuery2.filter(selector, elem) : elem, i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              jQuery2.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery2.extend({
          htmlPrefilter: function(html) {
            return html;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery2.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type, special = jQuery2.event.special, i = 0;
            for (; (elem = elems[i]) !== void 0; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery2.event.remove(elem, type);
                      } else {
                        jQuery2.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery2.fn.extend({
          detach: function(selector) {
            return remove(this, selector, true);
          },
          remove: function(selector) {
            return remove(this, selector);
          },
          text: function(value2) {
            return access(this, function(value3) {
              return value3 === void 0 ? jQuery2.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value3;
                }
              });
            }, null, value2, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery2.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value2) {
            return access(this, function(value3) {
              var elem = this[0] || {}, i = 0, l = this.length;
              if (value3 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value3 === "string" && !rnoInnerhtml.test(value3) && !wrapMap[(rtagName.exec(value3) || ["", ""])[1].toLowerCase()]) {
                value3 = jQuery2.htmlPrefilter(value3);
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery2.cleanData(getAll(elem, false));
                      elem.innerHTML = value3;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value3);
              }
            }, null, value2, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery2.inArray(this, ignored) < 0) {
                jQuery2.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery2.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery2.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery2(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              jQuery2(insert[i])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options2, callback) {
          var ret, name, old = {};
          for (name in options2) {
            old[name] = elem.style[name];
            elem.style[name] = options2[name];
          }
          ret = callback.call(elem);
          for (name in options2) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery2.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              ret = ret.replace(rtrimCSS, "$1") || void 0;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery2.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? ret + "" : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery2.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value2, subtract) {
          var matches = rcssNum.exec(value2);
          return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value2;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            if (box === "margin") {
              delta += jQuery2.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
              delta += jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              if (box !== "padding") {
                delta += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              } else {
                extra += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            } else {
              if (box === "content") {
                delta -= jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              }
              if (box !== "margin") {
                delta -= jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
          }
          return delta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery2.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
            isBorderBox = jQuery2.css(elem, "boxSizing", false, styles) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, val) + "px";
        }
        jQuery2.extend({
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
          },
          cssProps: {},
          style: function(elem, name, value2, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (value2 !== void 0) {
              type = typeof value2;
              if (type === "string" && (ret = rcssNum.exec(value2)) && ret[1]) {
                value2 = adjustCSS(elem, name, ret);
                type = "number";
              }
              if (value2 == null || value2 !== value2) {
                return;
              }
              if (type === "number" && !isCustomProp) {
                value2 += ret && ret[3] || (jQuery2.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value2 === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value2 = hooks.set(elem, value2, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value2);
                } else {
                  style[name] = value2;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery2.each(["height", "width"], function(_i, dimension) {
          jQuery2.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery2.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value2, extra) {
              var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
              }
              if (subtract && (matches = rcssNum.exec(value2)) && (matches[3] || "px") !== "px") {
                elem.style[dimension] = value2;
                value2 = jQuery2.css(elem, dimension);
              }
              return setPositiveNumber(elem, value2, subtract);
            }
          };
        });
        jQuery2.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
          if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
              return elem.getBoundingClientRect().left;
            })) + "px";
          }
        });
        jQuery2.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix, suffix) {
          jQuery2.cssHooks[prefix + suffix] = {
            expand: function(value2) {
              var i = 0, expanded = {}, parts = typeof value2 === "string" ? value2.split(" ") : [value2];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix !== "margin") {
            jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        jQuery2.fn.extend({
          css: function(name, value2) {
            return access(this, function(elem, name2, value3) {
              var styles, len, map = {}, i = 0;
              if (Array.isArray(name2)) {
                styles = getStyles(elem);
                len = name2.length;
                for (; i < len; i++) {
                  map[name2[i]] = jQuery2.css(elem, name2[i], false, styles);
                }
                return map;
              }
              return value3 !== void 0 ? jQuery2.style(elem, name2, value3) : jQuery2.css(elem, name2);
            }, name, value2, arguments.length > 1);
          }
        });
        function Tween(elem, options2, prop, end, easing) {
          return new Tween.prototype.init(elem, options2, prop, end, easing);
        }
        jQuery2.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options2, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery2.easing._default;
            this.options = options2;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery2.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery2.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery2.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery2.fx.step[tween.prop]) {
                jQuery2.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery2.easing = {
          linear: function(p) {
            return p;
          },
          swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery2.fx = Tween.prototype.init;
        jQuery2.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery2.fx.interval);
            }
            jQuery2.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type, includeWidth) {
          var which, i = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value2, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value2)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value2, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery2._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery2.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value2 = props[prop];
            if (rfxtypes.test(value2)) {
              delete props[prop];
              toggle = toggle || value2 === "toggle";
              if (value2 === (hidden ? "hide" : "show")) {
                if (value2 === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery2.style(elem, prop);
            }
          }
          propTween = !jQuery2.isEmptyObject(props);
          if (!propTween && jQuery2.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery2.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery2.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery2.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery2.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value2, hooks;
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value2 = props[index];
            if (Array.isArray(value2)) {
              easing = value2[1];
              value2 = props[index] = value2[0];
            }
            if (index !== name) {
              props[name] = value2;
              delete props[index];
            }
            hooks = jQuery2.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value2 = hooks.expand(value2);
              delete props[name];
              for (index in value2) {
                if (!(index in props)) {
                  props[index] = value2[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options2) {
          var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery2.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery2.extend({}, properties),
            opts: jQuery2.extend(true, {
              specialEasing: {},
              easing: jQuery2.easing._default
            }, options2),
            originalProperties: properties,
            originalOptions: options2,
            startTime: fxNow || createFxNow(),
            duration: options2.duration,
            tweens: [],
            createTween: function(prop, end) {
              var tween = jQuery2.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index2 < length2; index2++) {
                animation.tweens[index2].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction(result.stop)) {
                jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery2.map(props, createTween, animation);
          if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery2.fx.timer(jQuery2.extend(tick, {
            elem,
            anim: animation,
            queue: animation.opts.queue
          }));
          return animation;
        }
        jQuery2.Animation = jQuery2.extend(Animation, {
          tweeners: {
            "*": [function(prop, value2) {
              var tween = this.createTween(prop, value2);
              adjustCSS(tween.elem, prop, rcssNum.exec(value2), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery2.speed = function(speed, easing, fn) {
          var opt = speed && typeof speed === "object" ? jQuery2.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
          };
          if (jQuery2.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery2.fx.speeds) {
                opt.duration = jQuery2.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery2.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery2.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery2.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty = jQuery2.isEmptyObject(prop), optall = jQuery2.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery2.extend({}, prop), optall);
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = void 0;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery2.timers, data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery2.dequeue(this, type);
              }
            });
          },
          finish: function(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function() {
              var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery2.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery2.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery2.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery2.fn[name];
          jQuery2.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery2.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery2.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery2.timers = [];
        jQuery2.fx.tick = function() {
          var timer, i = 0, timers = jQuery2.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery2.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery2.fx.timer = function(timer) {
          jQuery2.timers.push(timer);
          jQuery2.fx.start();
        };
        jQuery2.fx.interval = 13;
        jQuery2.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery2.fx.stop = function() {
          inProgress = null;
        };
        jQuery2.fx.speeds = {
          slow: 600,
          fast: 200,
          _default: 400
        };
        jQuery2.fn.delay = function(time, type) {
          time = jQuery2.fx ? jQuery2.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function(next, hooks) {
            var timeout = window2.setTimeout(next, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery2.expr.attrHandle;
        jQuery2.fn.extend({
          attr: function(name, value2) {
            return access(this, jQuery2.attr, name, value2, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery2.removeAttr(this, name);
            });
          }
        });
        jQuery2.extend({
          attr: function(elem, name, value2) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery2.prop(elem, name, value2);
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              hooks = jQuery2.attrHooks[name.toLowerCase()] || (jQuery2.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value2 !== void 0) {
              if (value2 === null) {
                jQuery2.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value2, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value2 + "");
              return value2;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery2.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value2) {
                if (!support.radioValue && value2 === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value2);
                  if (val) {
                    elem.value = val;
                  }
                  return value2;
                }
              }
            }
          },
          removeAttr: function(elem, value2) {
            var name, i = 0, attrNames = value2 && value2.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value2, name) {
            if (value2 === false) {
              jQuery2.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery2.each(jQuery2.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery2.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery2.fn.extend({
          prop: function(name, value2) {
            return access(this, jQuery2.prop, name, value2, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery2.propFix[name] || name];
            });
          }
        });
        jQuery2.extend({
          prop: function(elem, name, value2) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              name = jQuery2.propFix[name] || name;
              hooks = jQuery2.propHooks[name];
            }
            if (value2 !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value2, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value2;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery2.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery2.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery2.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery2.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value2) {
          var tokens = value2.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value2) {
          if (Array.isArray(value2)) {
            return value2;
          }
          if (typeof value2 === "string") {
            return value2.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery2.fn.extend({
          addClass: function(value2) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value2)) {
              return this.each(function(j) {
                jQuery2(this).addClass(value2.call(this, j, getClass(this)));
              });
            }
            classNames = classesToArray(value2);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function(value2) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value2)) {
              return this.each(function(j) {
                jQuery2(this).removeClass(value2.call(this, j, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value2);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function(value2, stateVal) {
            var classNames, className, i, self2, type = typeof value2, isValidValue = type === "string" || Array.isArray(value2);
            if (isFunction(value2)) {
              return this.each(function(i2) {
                jQuery2(this).toggleClass(value2.call(this, i2, getClass(this), stateVal), stateVal);
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value2) : this.removeClass(value2);
            }
            classNames = classesToArray(value2);
            return this.each(function() {
              if (isValidValue) {
                self2 = jQuery2(this);
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (self2.hasClass(className)) {
                    self2.removeClass(className);
                  } else {
                    self2.addClass(className);
                  }
                }
              } else if (value2 === void 0 || type === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute("class", className || value2 === false ? "" : dataPriv.get(this, "__className__") || "");
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery2.fn.extend({
          val: function(value2) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery2.valHooks[elem.type] || jQuery2.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction(value2);
            return this.each(function(i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value2.call(this, i, jQuery2(this).val());
              } else {
                val = value2;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery2.map(val, function(value3) {
                  return value3 == null ? "" : value3 + "";
                });
              }
              hooks = jQuery2.valHooks[this.type] || jQuery2.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery2.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery2.find.attr(elem, "value");
                return val != null ? val : stripAndCollapse(jQuery2.text(elem));
              }
            },
            select: {
              get: function(elem) {
                var value2, option, i, options2 = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options2.length;
                if (index < 0) {
                  i = max;
                } else {
                  i = one ? index : 0;
                }
                for (; i < max; i++) {
                  option = options2[i];
                  if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value2 = jQuery2(option).val();
                    if (one) {
                      return value2;
                    }
                    values.push(value2);
                  }
                }
                return values;
              },
              set: function(elem, value2) {
                var optionSet, option, options2 = elem.options, values = jQuery2.makeArray(value2), i = options2.length;
                while (i--) {
                  option = options2[i];
                  if (option.selected = jQuery2.inArray(jQuery2.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery2.each(["radio", "checkbox"], function() {
          jQuery2.valHooks[this] = {
            set: function(elem, value2) {
              if (Array.isArray(value2)) {
                return elem.checked = jQuery2.inArray(jQuery2(elem).val(), value2) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery2.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        support.focusin = "onfocusin" in window2;
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
          e.stopPropagation();
        };
        jQuery2.extend(jQuery2.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery2.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery2.expando] ? event : new jQuery2.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery2.makeArray(data, [event]);
            special = jQuery2.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type;
              handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery2.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  jQuery2.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          simulate: function(type, elem, event) {
            var e = jQuery2.extend(new jQuery2.Event(), event, {
              type,
              isSimulated: true
            });
            jQuery2.event.trigger(e, null, elem);
          }
        });
        jQuery2.fn.extend({
          trigger: function(type, data) {
            return this.each(function() {
              jQuery2.event.trigger(type, data, this);
            });
          },
          triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery2.event.trigger(type, data, elem, true);
            }
          }
        });
        if (!support.focusin) {
          jQuery2.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {
            var handler = function(event) {
              jQuery2.event.simulate(fix, event.target, jQuery2.event.fix(event));
            };
            jQuery2.event.special[fix] = {
              setup: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) {
                  doc.addEventListener(orig, handler, true);
                }
                dataPriv.access(doc, fix, (attaches || 0) + 1);
              },
              teardown: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                  doc.removeEventListener(orig, handler, true);
                  dataPriv.remove(doc, fix);
                } else {
                  dataPriv.access(doc, fix, attaches);
                }
              }
            };
          });
        }
        var location = window2.location;
        var nonce = { guid: Date.now() };
        var rquery = /\?/;
        jQuery2.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery2.error("Invalid XML: " + (parserErrorElem ? jQuery2.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add) {
          var name;
          if (Array.isArray(obj)) {
            jQuery2.each(obj, function(i, v) {
              if (traditional || rbracket.test(prefix)) {
                add(prefix, v);
              } else {
                buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
              }
            });
          } else if (!traditional && toType(obj) === "object") {
            for (name in obj) {
              buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
          } else {
            add(prefix, obj);
          }
        }
        jQuery2.param = function(a, traditional) {
          var prefix, s = [], add = function(key, valueOrFunction) {
            var value2 = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value2 == null ? "" : value2);
          };
          if (a == null) {
            return "";
          }
          if (Array.isArray(a) || a.jquery && !jQuery2.isPlainObject(a)) {
            jQuery2.each(a, function() {
              add(this.name, this.value);
            });
          } else {
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add);
            }
          }
          return s.join("&");
        };
        jQuery2.fn.extend({
          serialize: function() {
            return jQuery2.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery2.prop(this, "elements");
              return elements ? jQuery2.makeArray(elements) : this;
            }).filter(function() {
              var type = this.type;
              return this.name && !jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
              var val = jQuery2(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery2.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options2, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery2.each(structure[dataType] || [], function(_5, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options2, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options2.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options2.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery2.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery2.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery2.extend({
          active: 0,
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            converters: {
              "* text": String,
              "text html": true,
              "text json": JSON.parse,
              "text xml": jQuery2.parseXML
            },
            flatOptions: {
              url: true,
              context: true
            }
          },
          ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery2.ajaxSettings), settings) : ajaxExtend(jQuery2.ajaxSettings, target);
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          ajax: function(url, options2) {
            if (typeof url === "object") {
              options2 = url;
              url = void 0;
            }
            options2 = options2 || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery2.ajaxSetup({}, options2), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery2(callbackContext) : jQuery2.event, deferred = jQuery2.Deferred(), completeDeferred = jQuery2.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              setRequestHeader: function(name, value2) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value2;
                }
                return this;
              },
              overrideMimeType: function(type) {
                if (completed2 == null) {
                  s.mimeType = type;
                }
                return this;
              },
              statusCode: function(map) {
                var code;
                if (map) {
                  if (completed2) {
                    jqXHR.always(map[jqXHR.status]);
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  }
                }
                return this;
              },
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
            s.type = options2.method || options2.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s.url;
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                s.crossDomain = true;
              }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = jQuery2.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options2, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery2.event && s.global;
            if (fireGlobals && jQuery2.active++ === 0) {
              jQuery2.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
              uncached = s.url.slice(cacheURL.length);
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }
              s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
              if (jQuery2.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery2.lastModified[cacheURL]);
              }
              if (jQuery2.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery2.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options2.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options2, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (completed2) {
                  throw e;
                }
                done(-1, e);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              if (!isSuccess && jQuery2.inArray("script", s.dataTypes) > -1 && jQuery2.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery2.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery2.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                error = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery2.active) {
                  jQuery2.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery2.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery2.get(url, void 0, callback, "script");
          }
        });
        jQuery2.each(["get", "post"], function(_i, method) {
          jQuery2[method] = function(url, data, callback, type) {
            if (isFunction(data)) {
              type = type || callback;
              callback = data;
              data = void 0;
            }
            return jQuery2.ajax(jQuery2.extend({
              url,
              type: method,
              dataType: type,
              data,
              success: callback
            }, jQuery2.isPlainObject(url) && url));
          };
        });
        jQuery2.ajaxPrefilter(function(s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        jQuery2._evalUrl = function(url, options2, doc) {
          return jQuery2.ajax({
            url,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery2.globalEval(response, options2, doc);
            }
          });
        };
        jQuery2.fn.extend({
          wrapAll: function(html) {
            var wrap;
            if (this[0]) {
              if (isFunction(html)) {
                html = html.call(this[0]);
              }
              wrap = jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html) {
            if (isFunction(html)) {
              return this.each(function(i) {
                jQuery2(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function() {
              var self2 = jQuery2(this), contents = self2.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self2.append(html);
              }
            });
          },
          wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
              jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery2(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery2.expr.pseudos.hidden = function(elem) {
          return !jQuery2.expr.pseudos.visible(elem);
        };
        jQuery2.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery2.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrSuccessStatus = {
          0: 200,
          1223: 204
        }, xhrSupported = jQuery2.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery2.ajaxTransport(function(options2) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options2.crossDomain) {
            return {
              send: function(headers, complete) {
                var i, xhr = options2.xhr();
                xhr.open(options2.type, options2.url, options2.async, options2.username, options2.password);
                if (options2.xhrFields) {
                  for (i in options2.xhrFields) {
                    xhr[i] = options2.xhrFields[i];
                  }
                }
                if (options2.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options2.mimeType);
                }
                if (!options2.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function(type) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(xhr.status, xhr.statusText);
                        }
                      } else {
                        complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options2.hasContent && options2.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery2.ajaxPrefilter(function(s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });
        jQuery2.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery2.globalEval(text);
              return text;
            }
          }
        });
        jQuery2.ajaxPrefilter("script", function(s) {
          if (s.cache === void 0) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });
        jQuery2.ajaxTransport("script", function(s) {
          if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
              send: function(_5, complete) {
                script = jQuery2("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery2.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery2.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery2.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery2.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery2(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery2.parseHTML = function(data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            if (support.createHTMLDocument) {
              context = document2.implementation.createHTMLDocument("");
              base = context.createElement("base");
              base.href = document2.location.href;
              context.head.appendChild(base);
            } else {
              context = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery2(scripts).remove();
          }
          return jQuery2.merge([], parsed.childNodes);
        };
        jQuery2.fn.load = function(url, params, callback) {
          var selector, type, response, self2 = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type = "POST";
          }
          if (self2.length > 0) {
            jQuery2.ajax({
              url,
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self2.html(selector ? jQuery2("<div>").append(jQuery2.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function(jqXHR, status) {
              self2.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery2.expr.pseudos.animated = function(elem) {
          return jQuery2.grep(jQuery2.timers, function(fn) {
            return elem === fn.elem;
          }).length;
        };
        jQuery2.offset = {
          setOffset: function(elem, options2, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery2.css(elem, "position"), curElem = jQuery2(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery2.css(elem, "top");
            curCSSLeft = jQuery2.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options2)) {
              options2 = options2.call(elem, i, jQuery2.extend({}, curOffset));
            }
            if (options2.top != null) {
              props.top = options2.top - curOffset.top + curTop;
            }
            if (options2.left != null) {
              props.left = options2.left - curOffset.left + curLeft;
            }
            if ("using" in options2) {
              options2.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery2.fn.extend({
          offset: function(options2) {
            if (arguments.length) {
              return options2 === void 0 ? this : this.each(function(i) {
                jQuery2.offset.setOffset(this, options2, i);
              });
            }
            var rect, win, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery2.css(elem, "position") === "fixed") {
              offset = elem.getBoundingClientRect();
            } else {
              offset = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery2(offsetParent).offset();
                parentOffset.top += jQuery2.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery2.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset.top - parentOffset.top - jQuery2.css(elem, "marginTop", true),
              left: offset.left - parentOffset.left - jQuery2.css(elem, "marginLeft", true)
            };
          },
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery2.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top = prop === "pageYOffset";
          jQuery2.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val2 === void 0) {
                return win ? win[prop] : elem[method2];
              }
              if (win) {
                win.scrollTo(!top ? val2 : win.pageXOffset, top ? val2 : win.pageYOffset);
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery2.each(["top", "left"], function(_i, prop) {
          jQuery2.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);
              return rnumnonpx.test(computed) ? jQuery2(elem).position()[prop] + "px" : computed;
            }
          });
        });
        jQuery2.each({ Height: "height", Width: "width" }, function(name, type) {
          jQuery2.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery2.fn[funcName] = function(margin, value2) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value2 === true ? "margin" : "border");
              return access(this, function(elem, type2, value3) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                }
                return value3 === void 0 ? jQuery2.css(elem, type2, extra) : jQuery2.style(elem, type2, value3, extra);
              }, type, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery2.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type) {
          jQuery2.fn[type] = function(fn) {
            return this.on(type, fn);
          };
        });
        jQuery2.fn.extend({
          bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
          },
          unbind: function(types, fn) {
            return this.off(types, null, fn);
          },
          delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
          },
          undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
          },
          hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
          }
        });
        jQuery2.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
          jQuery2.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
          };
        });
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
        jQuery2.proxy = function(fn, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!isFunction(fn)) {
            return void 0;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery2.guid++;
          return proxy;
        };
        jQuery2.holdReady = function(hold) {
          if (hold) {
            jQuery2.readyWait++;
          } else {
            jQuery2.ready(true);
          }
        };
        jQuery2.isArray = Array.isArray;
        jQuery2.parseJSON = JSON.parse;
        jQuery2.nodeName = nodeName;
        jQuery2.isFunction = isFunction;
        jQuery2.isWindow = isWindow;
        jQuery2.camelCase = camelCase;
        jQuery2.type = toType;
        jQuery2.now = Date.now;
        jQuery2.isNumeric = function(obj) {
          var type = jQuery2.type(obj);
          return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
        };
        jQuery2.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery2;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery2.noConflict = function(deep) {
          if (window2.$ === jQuery2) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery2) {
            window2.jQuery = _jQuery;
          }
          return jQuery2;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery2;
        }
        return jQuery2;
      });
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/store/Pubsub.js
  var PubSub;
  var init_Pubsub = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/store/Pubsub.js"() {
      PubSub = class {
        constructor() {
          this.events = {};
        }
        on(e, t) {
          let s = this;
          return s.events.hasOwnProperty(e) || (s.events[e] = []), s.events[e].push(t);
        }
        emit(e, ...t) {
          return this.events.hasOwnProperty(e) ? this.events[e].map((e2) => e2(...t)) : [];
        }
        off(e, t) {
          if (this.events[e]) {
            const s = this.events[e].indexOf(t);
            this.events[e].splice(s, 1);
          }
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/store/Store.js
  var Store;
  var init_Store = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/store/Store.js"() {
      init_Pubsub();
      Store = class {
        constructor(t) {
          let s = this;
          s.actions = {}, s.mutations = {}, s.state = t.state, s.status = "resting", s.events = new PubSub(), t.hasOwnProperty("actions") && (s.actions = t.actions), t.hasOwnProperty("mutations") && (s.mutations = t.mutations);
        }
        dispatch(t, s) {
          return typeof this.actions[t] != "function" ? (console.error(`Action "${t} doesn't exist.`), false) : (console.groupCollapsed(`ACTION: ${t}`), this.status = "action", this.actions[t](this, s), console.groupEnd(), true);
        }
        commit(t, s) {
          if (typeof this.mutations[t] != "function")
            return console.log(`Mutation "${t}" doesn't exist`), false;
          this.status = "mutation";
          let o = this.mutations[t](this.state, s);
          return this.state = Object.assign(this.state, o), true;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/store/index.js
  var options, store, store_default;
  var init_store = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/store/index.js"() {
      init_Store();
      options = { state: { MxFun: null, Mxassembly: null, isCreateDrawObj: false }, actions: {}, mutations: {} };
      for (let t in options.state) {
        const o = t.charAt(0).toUpperCase() + t.slice(1);
        options.mutations["set" + o] = (o2, s) => {
          o2[t] = s;
        };
      }
      store = new Store(options);
      store_default = store;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/tools/registerMxDbEntity/index.js
  function registerMxDbEntity() {
    store_default.events.emit("MxDbEntityRegister");
  }
  function addRegisterMxDbEntity(t) {
    const e = () => {
      !t.isRegister && t.register && t.register(), store_default.events.off("stateChange", e);
    };
    registerList.push(e);
  }
  var registerList, callRegisterMxDbEntityLists;
  var init_registerMxDbEntity = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/tools/registerMxDbEntity/index.js"() {
      init_store();
      registerList = [];
      callRegisterMxDbEntityLists = () => {
        registerList.forEach((t) => {
          t && t();
        });
      };
      store_default.events.on("MxDbEntityRegister", callRegisterMxDbEntityLists);
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/Mxassembly/index.js
  var MxassemblyClass, Mxassembly, Mxassembly_default;
  var init_Mxassembly = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/Mxassembly/index.js"() {
      init_store();
      MxassemblyClass = class {
        constructor() {
          this.mxassembly = null;
        }
        initImp() {
          this.mxassembly || store_default.state.Mxassembly && (this.mxassembly = store_default.state.Mxassembly);
        }
        NewMcGePoint3d(s, e, t) {
          this.initImp();
          let a = new this.mxassembly.McGePoint3d();
          return s && (a.x = s), e && (a.y = e), t && (a.z = t), a;
        }
        NewMcGePoint3dArray(s) {
          this.initImp();
          let e = new this.mxassembly.McGePoint3dArray();
          return s && s.forEach((s2) => {
            let t = this.NewMcGePoint3d();
            t.x = s2.x, t.y = s2.y, t.z = s2.z, e.append(t);
          }), e;
        }
      };
      Mxassembly = new MxassemblyClass();
      Mxassembly_default = Mxassembly;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/McGeTool/index.js
  var McGeToolClass, McGeTool, McGeTool_default;
  var init_McGeTool = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/McGeTool/index.js"() {
      init_Mxassembly();
      init_store();
      McGeToolClass = class {
        constructor() {
          this.mxgeTool = null;
        }
        initImp() {
          this.mxgeTool || store_default.state.Mxassembly && (this.mxgeTool = new store_default.state.Mxassembly.McGeTool());
        }
        calcArea(e) {
          if (this.initImp(), e instanceof Array) {
            let o = Mxassembly_default.NewMcGePoint3dArray(e);
            return this.mxgeTool.calcArea(o);
          }
          return this.mxgeTool.calcArea(e);
        }
        pointInPolyline(e, o) {
          this.initImp();
          let t = o;
          o instanceof Array && (t = Mxassembly_default.NewMcGePoint3dArray(o));
          let s = Mxassembly_default.NewMcGePoint3d(e.x, e.y, e.z);
          return this.mxgeTool.pointInPolyline(s, t);
        }
      };
      McGeTool = new McGeToolClass();
      McGeTool_default = McGeTool;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/McGiWorldDrawType/index.js
  var McGiWorldDrawType, McGiWorldDrawType_default;
  var init_McGiWorldDrawType = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/McGiWorldDrawType/index.js"() {
      !function(r) {
        r[r.kWorldDraw = 1] = "kWorldDraw", r[r.kDynDragDraw = 2] = "kDynDragDraw", r[r.kSelectDraw = 3] = "kSelectDraw";
      }(McGiWorldDrawType || (McGiWorldDrawType = {}));
      McGiWorldDrawType_default = McGiWorldDrawType;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/lodash/lodash.js"(exports2, module2) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
        var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value2 = array[index];
            setter(accumulator, value2, iteratee(value2), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value2 = array[index];
            if (predicate(value2, index, array)) {
              result[resIndex++] = value2;
            }
          }
          return result;
        }
        function arrayIncludes(array, value2) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value2, 0) > -1;
        }
        function arrayIncludesWith(array, value2, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value2, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value2, key, collection2) {
            if (predicate(value2, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value2, fromIndex) {
          return value2 === value2 ? strictIndexOf(array, value2, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value2, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value2)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value2) {
          return value2 !== value2;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value2, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value2) : iteratee(accumulator, value2, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value2) {
            return func(value2);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value2, key) {
            result[++index] = [key, value2];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value2 = array[index];
            if (value2 === placeholder || value2 === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value2) {
            result[++index] = value2;
          });
          return result;
        }
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value2) {
            result[++index] = [value2, value2];
          });
          return result;
        }
        function strictIndexOf(array, value2, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value2) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value2, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value2) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _5.defaults(root.Object(), context, _5.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value2) {
            if (isObjectLike(value2) && !isArray(value2) && !(value2 instanceof LazyWrapper)) {
              if (value2 instanceof LodashWrapper) {
                return value2;
              }
              if (hasOwnProperty.call(value2, "__wrapped__")) {
                return wrapperClone(value2);
              }
            }
            return new LodashWrapper(value2);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value2, chainAll) {
            this.__wrapped__ = value2;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value2) {
            this.__wrapped__ = value2;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value2 = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value2);
                  if (type == LAZY_MAP_FLAG) {
                    value2 = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value2;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
          }
          function hashSet(key, value2) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value2 === undefined2 ? HASH_UNDEFINED : value2;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value2) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value2]);
            } else {
              data[index][1] = value2;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value2) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value2);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value2) {
            this.__data__.set(value2, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value2) {
            return this.__data__.has(value2);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value2) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value2]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value2);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value2, inherited) {
            var isArr = isArray(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value2.length, String2) : [], length = result2.length;
            for (var key in value2) {
              if ((inherited || hasOwnProperty.call(value2, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value2) {
            if (value2 !== undefined2 && !eq(object[key], value2) || value2 === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value2);
            }
          }
          function assignValue(object, key, value2) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value2)) || value2 === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value2);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value2, key, collection2) {
              setter(accumulator, value2, iteratee2(value2), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value2) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value2,
                "writable": true
              });
            } else {
              object[key] = value2;
            }
          }
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get(object, paths[index]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value2, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value2, key, object, stack) : customizer(value2);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value2)) {
              return value2;
            }
            var isArr = isArray(value2);
            if (isArr) {
              result2 = initCloneArray(value2);
              if (!isDeep) {
                return copyArray(value2, result2);
              }
            } else {
              var tag = getTag(value2), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value2)) {
                return cloneBuffer(value2, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value2);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value2, baseAssignIn(result2, value2)) : copySymbols(value2, baseAssign(result2, value2));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value2 : {};
                }
                result2 = initCloneByTag(value2, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value2);
            if (stacked) {
              return stacked;
            }
            stack.set(value2, result2);
            if (isSet(value2)) {
              value2.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value2, stack));
              });
            } else if (isMap(value2)) {
              value2.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value2, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value2);
            arrayEach(props || value2, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value2[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value2, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value2 = object[key];
              if (value2 === undefined2 && !(key in object) || !predicate(value2)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value2 = array[index], computed = iteratee2 == null ? value2 : iteratee2(value2);
                value2 = comparator || value2 !== 0 ? value2 : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value2);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value2);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value2, index, collection2) {
              result2 = !!predicate(value2, index, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value2 = array[index], current = iteratee2(value2);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value2;
              }
            }
            return result2;
          }
          function baseFill(array, value2, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end === undefined2 || end > length ? length : toInteger(end);
            if (end < 0) {
              end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
              array[start++] = value2;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value2, index, collection2) {
              if (predicate(value2, index, collection2)) {
                result2.push(value2);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value2 = array[index];
              if (depth > 0 && predicate(value2)) {
                if (depth > 1) {
                  baseFlatten(value2, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value2);
                }
              } else if (!isStrict) {
                result2[result2.length] = value2;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value2) {
            if (value2 == null) {
              return value2 === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value2) ? getRawTag(value2) : objectToString(value2);
          }
          function baseGt(value2, other) {
            return value2 > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value2 = array[index], computed = iteratee2 ? iteratee2(value2) : value2;
                value2 = comparator || value2 !== 0 ? value2 : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value2);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value2, key, object2) {
              setter(accumulator, iteratee2(value2), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value2) {
            return isObjectLike(value2) && baseGetTag(value2) == argsTag;
          }
          function baseIsArrayBuffer(value2) {
            return isObjectLike(value2) && baseGetTag(value2) == arrayBufferTag;
          }
          function baseIsDate(value2) {
            return isObjectLike(value2) && baseGetTag(value2) == dateTag;
          }
          function baseIsEqual(value2, other, bitmask, customizer, stack) {
            if (value2 === other) {
              return true;
            }
            if (value2 == null || other == null || !isObjectLike(value2) && !isObjectLike(other)) {
              return value2 !== value2 && other !== other;
            }
            return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value2) {
            return isObjectLike(value2) && getTag(value2) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value2) {
            if (!isObject(value2) || isMasked(value2)) {
              return false;
            }
            var pattern = isFunction(value2) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value2));
          }
          function baseIsRegExp(value2) {
            return isObjectLike(value2) && baseGetTag(value2) == regexpTag;
          }
          function baseIsSet(value2) {
            return isObjectLike(value2) && getTag(value2) == setTag;
          }
          function baseIsTypedArray(value2) {
            return isObjectLike(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag(value2)];
          }
          function baseIteratee(value2) {
            if (typeof value2 == "function") {
              return value2;
            }
            if (value2 == null) {
              return identity;
            }
            if (typeof value2 == "object") {
              return isArray(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
            }
            return property(value2);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value2, other) {
            return value2 < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value2, key, collection2) {
              result2[++index] = iteratee2(value2, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length = array.length;
            if (!length) {
              return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value2) {
                    return baseGet(value2, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value2, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value2);
              });
              return { "criteria": criteria, "index": ++index, "value": value2 };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value2, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value2 = baseGet(object, path);
              if (predicate(value2, path)) {
                baseSet(result2, castPath(path, object), value2);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value2 = values2[index], computed = iteratee2 ? iteratee2(value2) : value2;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start;
              start += step;
            }
            return result2;
          }
          function baseRepeat(string, n) {
            var result2 = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n % 2) {
                result2 += string;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string += string;
              }
            } while (n);
            return result2;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value2, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value2;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value2, index, collection2) {
              result2 = predicate(value2, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value2, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value2 == "number" && value2 === value2 && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value2 : computed < value2)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value2, identity, retHighest);
          }
          function baseSortedIndexBy(array, value2, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value2 = iteratee2(value2);
            var valIsNaN = value2 !== value2, valIsNull = value2 === null, valIsSymbol = isSymbol(value2), valIsUndefined = value2 === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value2 : computed < value2;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value2 = array[index], computed = iteratee2 ? iteratee2(value2) : value2;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value2 === 0 ? 0 : value2;
              }
            }
            return result2;
          }
          function baseToNumber(value2) {
            if (typeof value2 == "number") {
              return value2;
            }
            if (isSymbol(value2)) {
              return NAN;
            }
            return +value2;
          }
          function baseToString(value2) {
            if (typeof value2 == "string") {
              return value2;
            }
            if (isArray(value2)) {
              return arrayMap(value2, baseToString) + "";
            }
            if (isSymbol(value2)) {
              return symbolToString ? symbolToString.call(value2) : "";
            }
            var result2 = value2 + "";
            return result2 == "0" && 1 / value2 == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value2 = array[index], computed = iteratee2 ? iteratee2(value2) : value2;
                value2 = comparator || value2 !== 0 ? value2 : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value2);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value2);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value2, actions) {
            var result2 = value2;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value2 = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value2);
            }
            return result2;
          }
          function castArrayLikeObject(value2) {
            return isArrayLikeObject(value2) ? value2 : [];
          }
          function castFunction(value2) {
            return typeof value2 == "function" ? value2 : identity;
          }
          function castPath(value2, object) {
            if (isArray(value2)) {
              return value2;
            }
            return isKey(value2, object) ? [value2] : stringToPath(toString(value2));
          }
          var castRest = baseRest;
          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined2 ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value2, other) {
            if (value2 !== other) {
              var valIsDefined = value2 !== undefined2, valIsNull = value2 === null, valIsReflexive = value2 === value2, valIsSymbol = isSymbol(value2);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value2 > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value2 < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order = orders[index];
                return result2 * (order == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
              }
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value2 = args[0];
                if (wrapper && args.length == 1 && isArray(value2)) {
                  return wrapper.plant(value2).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value2;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
              }
              var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn);
              }
              return fn.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value2, other) {
              var result2;
              if (value2 === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value2 !== undefined2) {
                result2 = value2;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value2 == "string" || typeof other == "string") {
                  value2 = baseToString(value2);
                  other = baseToString(other);
                } else {
                  value2 = baseToNumber(value2);
                  other = baseToNumber(other);
                }
                result2 = operator(value2, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value2, other) {
              if (!(typeof value2 == "string" && typeof other == "string")) {
                value2 = toNumber(value2);
                other = toNumber(other);
              }
              return operator(value2, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value2 = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value2) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value2) {
            return isPlainObject(value2) ? undefined2 : value2;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value2 = object[key];
              result2[length] = [key, value2, isStrictComparable(value2)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value2 = getValue(object, key);
            return baseIsNative(value2) ? value2 : undefined2;
          }
          function getRawTag(value2) {
            var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
            try {
              value2[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result2 = nativeObjectToString.call(value2);
            if (unmasked) {
              if (isOwn) {
                value2[symToStringTag] = tag;
              } else {
                delete value2[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value2) {
              var result2 = baseGetTag(value2), Ctor = result2 == objectTag ? value2.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value2) {
            return isArray(value2) || isArguments(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
          }
          function isIndex(value2, length) {
            var type = typeof value2;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
          }
          function isIterateeCall(value2, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value2);
            }
            return false;
          }
          function isKey(value2, object) {
            if (isArray(value2)) {
              return false;
            }
            var type = typeof value2;
            if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol(value2)) {
              return true;
            }
            return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object2(object);
          }
          function isKeyable(value2) {
            var type = typeof value2;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value2) {
            var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value2 === proto;
          }
          function isStrictComparable(value2) {
            return value2 === value2 && !isObject(value2);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value2 = source[3];
            if (value2) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value2, source[4]) : value2;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value2 = source[5];
            if (value2) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value2, source[6]) : value2;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value2 = source[7];
            if (value2) {
              data[7] = value2;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value2) {
            return nativeObjectToString.call(value2);
          }
          function overRest(func, start, transform2) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start + index];
              }
              index = -1;
              var otherArgs = Array2(start + 1);
              while (++index < start) {
                otherArgs[index] = args[index];
              }
              otherArgs[start] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value2 = array[rand];
              array[rand] = array[index];
              array[index] = value2;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result2;
          });
          function toKey(value2) {
            if (typeof value2 == "string" || isSymbol(value2)) {
              return value2;
            }
            var result2 = value2 + "";
            return result2 == "0" && 1 / value2 == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value2 = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value2)) {
                details.push(value2);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value2 = array[index];
              if (value2) {
                result2[resIndex++] = value2;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value2, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array, value2, start)) {
              start = 0;
              end = length;
            }
            return baseFill(array, value2, start, end);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value2, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value2, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value2, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value2 === value2 ? strictLastIndexOf(array, value2, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value2 = array[index];
              if (predicate(value2, index, array)) {
                result2.push(value2);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined2 ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
          }
          function sortedIndex(array, value2) {
            return baseSortedIndex(array, value2);
          }
          function sortedIndexBy(array, value2, iteratee2) {
            return baseSortedIndexBy(array, value2, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value2) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value2);
              if (index < length && eq(array[index], value2)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value2) {
            return baseSortedIndex(array, value2, true);
          }
          function sortedLastIndexBy(array, value2, iteratee2) {
            return baseSortedIndexBy(array, value2, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value2) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value2, true) - 1;
              if (eq(array[index], value2)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value2) {
            var result2 = lodash(value2);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value2, interceptor) {
            interceptor(value2);
            return value2;
          }
          function thru(value2, interceptor) {
            return interceptor(value2);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value2 = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value2 instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value2 = value2.slice(start, +start + (length ? 1 : 0));
            value2.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value2, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value2 = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value2 };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value2) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value2;
            return result2;
          }
          function wrapperReverse() {
            var value2 = this.__wrapped__;
            if (value2 instanceof LazyWrapper) {
              var wrapped = value2;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value2, key) {
            if (hasOwnProperty.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value2, key) {
            if (hasOwnProperty.call(result2, key)) {
              result2[key].push(value2);
            } else {
              baseAssignValue(result2, key, [value2]);
            }
          });
          function includes(collection, value2, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value2, fromIndex) > -1 : !!length && baseIndexOf(collection, value2, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value2) {
              result2[++index] = isFunc ? apply(path, value2, args) : baseInvoke(value2, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value2, key) {
            baseAssignValue(result2, key, value2);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value2, key) {
            result2[key ? 0 : 1].push(value2);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce(func, wait, options2) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options2)) {
              leading = !!options2.leading;
              maxing = "maxWait" in options2;
              maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options2 ? !!options2.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
              var array = args[start], otherArgs = castSlice(args, 0, start);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options2) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options2)) {
              leading = "leading" in options2 ? !!options2.leading : leading;
              trailing = "trailing" in options2 ? !!options2.trailing : trailing;
            }
            return debounce(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value2, wrapper) {
            return partial(castFunction(wrapper), value2);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value2 = arguments[0];
            return isArray(value2) ? value2 : [value2];
          }
          function clone(value2) {
            return baseClone(value2, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value2, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value2, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value2) {
            return baseClone(value2, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value2, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value2, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value2, other) {
            return value2 === other || value2 !== value2 && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value2, other) {
            return value2 >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value2) {
            return isObjectLike(value2) && hasOwnProperty.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value2) {
            return value2 != null && isLength(value2.length) && !isFunction(value2);
          }
          function isArrayLikeObject(value2) {
            return isObjectLike(value2) && isArrayLike(value2);
          }
          function isBoolean(value2) {
            return value2 === true || value2 === false || isObjectLike(value2) && baseGetTag(value2) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value2) {
            return isObjectLike(value2) && value2.nodeType === 1 && !isPlainObject(value2);
          }
          function isEmpty(value2) {
            if (value2 == null) {
              return true;
            }
            if (isArrayLike(value2) && (isArray(value2) || typeof value2 == "string" || typeof value2.splice == "function" || isBuffer(value2) || isTypedArray(value2) || isArguments(value2))) {
              return !value2.length;
            }
            var tag = getTag(value2);
            if (tag == mapTag || tag == setTag) {
              return !value2.size;
            }
            if (isPrototype(value2)) {
              return !baseKeys(value2).length;
            }
            for (var key in value2) {
              if (hasOwnProperty.call(value2, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value2, other) {
            return baseIsEqual(value2, other);
          }
          function isEqualWith(value2, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value2, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value2, other, undefined2, customizer) : !!result2;
          }
          function isError(value2) {
            if (!isObjectLike(value2)) {
              return false;
            }
            var tag = baseGetTag(value2);
            return tag == errorTag || tag == domExcTag || typeof value2.message == "string" && typeof value2.name == "string" && !isPlainObject(value2);
          }
          function isFinite2(value2) {
            return typeof value2 == "number" && nativeIsFinite(value2);
          }
          function isFunction(value2) {
            if (!isObject(value2)) {
              return false;
            }
            var tag = baseGetTag(value2);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value2) {
            return typeof value2 == "number" && value2 == toInteger(value2);
          }
          function isLength(value2) {
            return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
          }
          function isObject(value2) {
            var type = typeof value2;
            return value2 != null && (type == "object" || type == "function");
          }
          function isObjectLike(value2) {
            return value2 != null && typeof value2 == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value2) {
            return isNumber(value2) && value2 != +value2;
          }
          function isNative(value2) {
            if (isMaskable(value2)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value2);
          }
          function isNull(value2) {
            return value2 === null;
          }
          function isNil(value2) {
            return value2 == null;
          }
          function isNumber(value2) {
            return typeof value2 == "number" || isObjectLike(value2) && baseGetTag(value2) == numberTag;
          }
          function isPlainObject(value2) {
            if (!isObjectLike(value2) || baseGetTag(value2) != objectTag) {
              return false;
            }
            var proto = getPrototype(value2);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value2) {
            return isInteger(value2) && value2 >= -MAX_SAFE_INTEGER && value2 <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value2) {
            return typeof value2 == "string" || !isArray(value2) && isObjectLike(value2) && baseGetTag(value2) == stringTag;
          }
          function isSymbol(value2) {
            return typeof value2 == "symbol" || isObjectLike(value2) && baseGetTag(value2) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value2) {
            return value2 === undefined2;
          }
          function isWeakMap(value2) {
            return isObjectLike(value2) && getTag(value2) == weakMapTag;
          }
          function isWeakSet(value2) {
            return isObjectLike(value2) && baseGetTag(value2) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value2, other) {
            return value2 <= other;
          });
          function toArray(value2) {
            if (!value2) {
              return [];
            }
            if (isArrayLike(value2)) {
              return isString(value2) ? stringToArray(value2) : copyArray(value2);
            }
            if (symIterator && value2[symIterator]) {
              return iteratorToArray(value2[symIterator]());
            }
            var tag = getTag(value2), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value2);
          }
          function toFinite(value2) {
            if (!value2) {
              return value2 === 0 ? value2 : 0;
            }
            value2 = toNumber(value2);
            if (value2 === INFINITY || value2 === -INFINITY) {
              var sign = value2 < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value2 === value2 ? value2 : 0;
          }
          function toInteger(value2) {
            var result2 = toFinite(value2), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value2) {
            return value2 ? baseClamp(toInteger(value2), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value2) {
            if (typeof value2 == "number") {
              return value2;
            }
            if (isSymbol(value2)) {
              return NAN;
            }
            if (isObject(value2)) {
              var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
              value2 = isObject(other) ? other + "" : other;
            }
            if (typeof value2 != "string") {
              return value2 === 0 ? value2 : +value2;
            }
            value2 = baseTrim(value2);
            var isBinary = reIsBinary.test(value2);
            return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
          }
          function toPlainObject(value2) {
            return copyObject(value2, keysIn(value2));
          }
          function toSafeInteger(value2) {
            return value2 ? baseClamp(toInteger(value2), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value2 === 0 ? value2 : 0;
          }
          function toString(value2) {
            return value2 == null ? "" : baseToString(value2);
          }
          var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value2 = object[key];
                if (value2 === undefined2 || eq(value2, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value2, key) {
            if (value2 != null && typeof value2.toString != "function") {
              value2 = nativeObjectToString.call(value2);
            }
            result2[value2] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value2, key) {
            if (value2 != null && typeof value2.toString != "function") {
              value2 = nativeObjectToString.call(value2);
            }
            if (hasOwnProperty.call(result2, value2)) {
              result2[value2].push(key);
            } else {
              result2[value2] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value2, key, object2) {
              baseAssignValue(result2, iteratee2(value2, key, object2), value2);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value2, key, object2) {
              baseAssignValue(result2, key, iteratee2(value2, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value2, path) {
              return predicate(value2, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value2 = object == null ? undefined2 : object[toKey(path[index])];
              if (value2 === undefined2) {
                index = length;
                value2 = defaultValue;
              }
              object = isFunction(value2) ? value2.call(object) : value2;
            }
            return object;
          }
          function set(object, path, value2) {
            return object == null ? object : baseSet(object, path, value2);
          }
          function setWith(object, path, value2, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value2, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value2, index, object2) {
              return iteratee2(accumulator, value2, index, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
          }
          function escape2(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options2, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options2, guard)) {
              options2 = undefined2;
            }
            string = toString(string);
            options2 = assignInWith({}, options2, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options2.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options2.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2((options2.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options2.evaluate || reNoMatch).source + "|$", "g");
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options2, "sourceURL") ? (options2.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty.call(options2, "variable") && options2.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value2) {
            return toString(value2).toLowerCase();
          }
          function toUpper(value2) {
            return toString(value2).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string, options2) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options2)) {
              var separator = "separator" in options2 ? options2.separator : separator;
              length = "length" in options2 ? toInteger(options2.length) : length;
              omission = "omission" in options2 ? baseToString(options2.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end += result2.length - end;
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value2) {
            return function() {
              return value2;
            };
          }
          function defaultTo(value2, defaultValue) {
            return value2 == null || value2 !== value2 ? defaultValue : value2;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value2) {
            return value2;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options2) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options2 == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options2 = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options2) && "chain" in options2) || !!options2.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value2) {
            if (isArray(value2)) {
              return arrayMap(value2, toKey);
            }
            return isSymbol(value2) ? [value2] : copyArray(stringToPath(toString(value2)));
          }
          function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape2;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value2) {
              return baseInvoke(value2, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result2 = this;
            if (result2.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result2);
            }
            if (start < 0) {
              result2 = result2.takeRight(-start);
            } else if (start) {
              result2 = result2.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger(end);
              result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value2 = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value2 instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value2);
              var interceptor = function(value3) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value3], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value2 = onlyLazy ? value2 : new LazyWrapper(this);
                var result2 = func.apply(value2, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value2 = this.value();
                return func.apply(isArray(value2) ? value2 : [], args);
              }
              return this[chainName](function(value3) {
                return func.apply(isArray(value3) ? value3 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _5 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _5;
          define(function() {
            return _5;
          });
        } else if (freeModule) {
          (freeModule.exports = _5)._ = _5;
          freeExports._ = _5;
        } else {
          root._ = _5;
        }
      }).call(exports2);
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/tools/algorithm/random.js
  function createReandomId(t = 10) {
    return new Number(Math.random().toString().substr(3, t) + Date.now()).toString(36);
  }
  var init_random = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/tools/algorithm/random.js"() {
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/tools/dom/create.js
  function createCanvas(e = "mx-canvas") {
    const t = document.getElementById(e) || document.createElement("canvas");
    return t.id = e, t;
  }
  function createCanvasParent(e = createCanvas()) {
    let t;
    return e || (e = createCanvas()), e.parentNode ? t = e.parentNode : (t = document.createElement("div")).appendChild(e), t;
  }
  var init_create = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/tools/dom/create.js"() {
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxCADObject/index.js
  var MxCADObject;
  var init_MxCADObject = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxCADObject/index.js"() {
      MxCADObject = class {
        constructor(e) {
          this._mxCAD = e;
        }
        newFile() {
          this._mxCAD.newFile();
        }
        undo() {
          this._mxCAD.undo();
        }
        openFile(e, t) {
          this._mxCAD.openFile(e, t);
        }
        saveFile(e, t) {
          this._mxCAD.saveFile(e, t);
        }
        getDisplayFromServer() {
          this._mxCAD.getDisplayFromServer();
        }
        getFileName() {
          return this._mxCAD.getFileName();
        }
        getAllLayerData() {
          return this._mxCAD.getAllLayerData();
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbDatabase/index.js
  var MxDbDatabase;
  var init_MxDbDatabase = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbDatabase/index.js"() {
      MxDbDatabase = class {
        constructor(t) {
          this._mxDatabase = t;
        }
        addLayer(t) {
          return this._mxDatabase.addLayer(t);
        }
        showLayer(t, a) {
          this._mxDatabase.showLayer(t, a);
        }
        setCurrentLayer(t) {
          return this._mxDatabase.setCurrentLayer(t);
        }
        getLayer(t) {
          return this._mxDatabase.getLayer(t);
        }
        addEntity(t) {
          return this._mxDatabase.addMxEntity(t);
        }
        getGroup(t) {
          return this._mxDatabase.getGroupDictionary().getAt(t);
        }
        addGroup(t) {
          return this._mxDatabase.getGroupDictionary().add(t);
        }
        getEntityInGroup(t) {
          return this._mxDatabase.getGroupDictionary().getEntityInGroup(t);
        }
        deleteGroup(t) {
          return this._mxDatabase.getGroupDictionary().delete(t);
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/tools/three/index.js
  function setGeometrPostion(e, t) {
    for (let n = 0; n < e.vertices.length; n++)
      e.vertices[n].x += t.x, e.vertices[n].y += t.y, e.vertices[n].z += t.z;
  }
  function repairGeometryFaceVertexUvs(e) {
    e.computeBoundingBox();
    const t = e.boundingBox.min, n = e.boundingBox.max, o = new THREE.Vector2(0 - t.x, 0 - t.y), r = new THREE.Vector2(n.x - t.x, n.y - t.y);
    e.faceVertexUvs[0] = [];
    const c = e.faces;
    for (let t2 = 0; t2 < c.length; t2++) {
      const n2 = c[t2], a = e.vertices[n2.a], l = e.vertices[n2.b], i = e.vertices[n2.c];
      e.faceVertexUvs[0].push([new THREE.Vector2((a.x + o.x) / r.x, (a.y + o.y) / r.y), new THREE.Vector2((l.x + o.x) / r.x, (l.y + o.y) / r.y), new THREE.Vector2((i.x + o.x) / r.x, (i.y + o.y) / r.y)]);
    }
    return e.uvsNeedUpdate = true, e;
  }
  function getToGenerateRoundedCorners(e, t, n = true) {
    if (t.length > 0) {
      const o = new THREE.CurvePath();
      n || e.push(e[0]);
      for (let r = 0; r < e.length - 1; r++) {
        const c = t[r] || 0;
        if (r === 0 && !n) {
          const t2 = e[0].clone().sub(e[1]);
          t2.normalize();
          const n2 = e[1].clone();
          n2.add(t2.clone().multiplyScalar(c));
          const r2 = new THREE.LineCurve3(e[0], n2);
          o.curves.push(r2);
          continue;
        }
        const a = !n || e[r - 1] ? e[r - 1].clone().sub(e[r]) : e[e.length - 1].clone().sub(e[0]);
        a.normalize();
        const l = !n || e[r + 1] ? e[r + 1].clone().sub(e[r]) : e[1].clone().sub(e[0]);
        l.normalize(), e[r].clone().add(a.clone().multiplyScalar(c));
        const i = e[r].clone().add(a.clone().multiplyScalar(c)), s = e[r].clone(), E = e[r].clone().add(l.clone().multiplyScalar(c)), u = new THREE.QuadraticBezierCurve3(i, s, E);
        if (r === e.length - 2) {
          const t2 = e[r].clone();
          t2.add(l.clone().multiplyScalar(c));
          const a2 = e[r + 1].clone();
          n ? a2.add(l.clone().multiplyScalar(-c)) : a2.add(l.clone());
          const i2 = new THREE.LineCurve3(t2, a2);
          o.curves.push(u, i2);
        } else
          o.curves.push(u);
        r === 0 && e.push(e[0]);
      }
      return o.getPoints(50);
    }
    return e;
  }
  function computeRectPoints(e, t) {
    return [e, e.clone().set(t.x, e.y, t.z), t, t.clone().set(e.x, t.y, e.z)];
  }
  function calculateArcOrigin(e, t, n) {
    const o = e.x, r = t.x, c = n.x, a = e.y, l = t.y, i = n.y, s = o - r, E = a - l, u = o - c, x = a - i, T = (o * o - r * r + (a * a - l * l)) / 2, g = (o * o - c * c + (a * a - i * i)) / 2, R = E * u - s * x, y = -(x * T - E * g) / R, d = -(s * g - u * T) / R;
    return new THREE.Vector3(y, d, 0);
  }
  function calculateRadiusArc(e, t) {
    const n = e.x, o = e.y, r = t.x, c = t.y;
    return Math.sqrt((n - r) * (n - r) + (o - c) * (o - c));
  }
  function calculateArcAngle(e, t, n) {
    const o = e.x, r = t.x;
    let c, a, l;
    return c = (e.y - t.y) / n, (a = (o - r) / n) >= 0.99999 && (a = 0.99999), a <= -0.99999 && (a = -0.99999), l = (l = Math.acos(a)) / Math.PI * 180, c < -0.05 && (l = 360 - l), { sin: c, cos: a, angle: l };
  }
  function judgementArcRenderDirection(e, t, n) {
    let o, r;
    return o = e < n ? n - e : n - e + 360, (r = e < t ? t - e : t - e + 360) > o;
  }
  function createThreePointArc(e, t, n, o = false, r = false, c = new THREE.Color("#ff0000")) {
    const a = calculateArcOrigin(e, t, n), l = a.x, i = a.y, s = calculateRadiusArc(e, a), E = calculateArcAngle(e, a, s), u = calculateArcAngle(t, a, s), x = calculateArcAngle(n, a, s);
    let T, g, R = E.angle, y = u.angle, d = x.angle, h = judgementArcRenderDirection(R, y, d);
    r && (h = true), o ? (g = new THREE.ArcCurve(l, i, s, THREE.MathUtils.degToRad(R), THREE.MathUtils.degToRad(y), !h), T = h ? y > R ? THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle) : 360 - Math.abs(THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle)) : R > y ? Math.abs(THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle)) : 360 - THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle)) : (g = new THREE.ArcCurve(l, i, s, THREE.MathUtils.degToRad(R), THREE.MathUtils.degToRad(d), h), T = h ? d > R ? 360 - THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle) : Math.abs(THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle)) : R > d ? 360 + THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle) : THREE.MathUtils.radToDeg(g.aEndAngle - g.aStartAngle));
    const H = T * Math.PI * s / 180, p = new THREE.BufferGeometry().setFromPoints(g.getPoints(50)), f = new THREE.LineBasicMaterial({ color: c });
    return { arc: new THREE.Line(p, f), radius: s, angle: T, arcLength: H };
  }
  function computeRegularPolygonVertices(e = new THREE.Vector3(), t = new THREE.Vector3(), n = 3) {
    const o = [];
    n = Math.max(3, n), o.push(t);
    const r = 2 * Math.PI / n;
    for (let c = 1; c < n; c++) {
      const n2 = Math.cos(r * c), a = Math.sin(r * c), l = e.clone(), i = t.clone(), s = i.x - l.x, E = i.y - l.y, u = new THREE.Vector3(s * n2 - E * a + l.x, s * a + E * n2 + l.y);
      o.push(u);
    }
    return o;
  }
  function computeBounding(e) {
    if (e.length == 0) {
      let e2 = new THREE.Vector3();
      return { centerPoint: e2, minPoint: e2, maxPoint: e2 };
    }
    {
      let t = new THREE.Vector3(e[0].x, e[0].y, e[0].z || 0), n = new THREE.Vector3(e[0].x, e[0].y, e[0].z || 0), o = e.length;
      for (let r = 1; r < o; r++) {
        let o2 = e[r];
        t.x > o2.x && (t.x = o2.x), t.y > o2.y && (t.y = o2.y), n.x < o2.x && (n.x = o2.x), n.y < o2.y && (n.y = o2.y);
      }
      return { centerPoint: new THREE.Vector3(t.x + 0.5 * (n.x - t.x), t.y + 0.5 * (n.y - t.y), 0), minPoint: t, maxPoint: n };
    }
  }
  var init_three = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/tools/three/index.js"() {
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxThreeJS/MxThreeJS.mixin.js
  function MxThreeJSMixin(e) {
    return e.createImage = function(t, r, o, n, a) {
      if (!a)
        return new Promise((a2, i) => {
          e.createImage.call(this, t, r, o, n, (e2) => a2(e2));
        });
      new THREE.TextureLoader().load(n, function(e2) {
        let n2 = new THREE.PlaneGeometry(r, o), i = new THREE.MeshLambertMaterial({ map: e2, transparent: true, side: THREE.DoubleSide });
        i.map && (i.map.needsUpdate = true), setGeometrPostion(n2, t);
        let s = new THREE.Mesh(n2, i);
        s.material.depthTest = false, a && a(s);
      }, void 0, function(e2) {
        console.log(e2), a && a(null);
      });
    }, e.loadSVG = function(e2, t, r, o) {
      return r ? (store_default.state.MxFun.loadSVG(e2, t, r, o), new Promise((e3) => {
        e3(null);
      })) : new Promise((r2) => {
        store_default.state.MxFun.loadSVG(e2, t, (e3) => {
          r2(e3);
        }, o);
      });
    }, e.clacTextSize = (e2, t) => store_default.state.MxFun.getMxThreeJS().clacTextSize(e2, t), e.clacTextSpriteSize = (e2, t, r) => store_default.state.MxFun.getMxThreeJS().clacTextSpriteSize(e2, t, r), e.creatTextSprite = (e2, t, r, o, n) => store_default.state.MxFun.getMxThreeJS().creatTextSprite(e2, t, r, o, n), e;
  }
  var init_MxThreeJS_mixin = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxThreeJS/MxThreeJS.mixin.js"() {
      init_three();
      init_store();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxThreeJS/MxThreeJS.js
  var MxThreeJS;
  var init_MxThreeJS = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxThreeJS/MxThreeJS.js"() {
      MxThreeJS = class {
        createLine(e, t, n) {
          const r = new THREE.Geometry(), s = new THREE.LineBasicMaterial({ color: n });
          return r.vertices.push(e, t), new THREE.Line(r, s);
        }
        createCircle(e, t, n) {
          const r = new THREE.CircleGeometry(t, 64, 3, 2 * Math.PI), s = new THREE.LineBasicMaterial({ color: n });
          r.vertices.shift();
          const c = new THREE.LineLoop(r, s), { x: i, y: o, z: E } = e;
          return c.position.set(i, o, E), c;
        }
        createPoint(e, t, n = 3) {
          const r = new THREE.Geometry();
          r.vertices.push(e);
          const s = new THREE.PointsMaterial({ color: t, size: n });
          return new THREE.Points(r, s);
        }
        createTriangle(e, t, n = 1) {
          if (e.length < 3)
            return null;
          const r = e.length, s = new THREE.Geometry();
          for (let t2 = 0; t2 + 2 < r; t2 += 3) {
            s.vertices.push(e[t2]), s.vertices.push(e[t2 + 1]), s.vertices.push(e[t2 + 2]);
            const n2 = new THREE.Face3(t2, t2 + 1, t2 + 2);
            s.faces.push(n2);
          }
          s.computeFaceNormals(), s.computeVertexNormals();
          const c = new THREE.MeshBasicMaterial({ color: t, transparent: true, depthTest: false, side: THREE.DoubleSide, opacity: n });
          return new THREE.Mesh(s, c);
        }
        createLines(e, t) {
          const n = new THREE.Geometry();
          n.vertices = e;
          const r = new THREE.LineBasicMaterial({ color: t });
          return new THREE.Line(n, r);
        }
        createDashedLines(e, t, n, r) {
          const s = new THREE.Geometry();
          s.vertices = e;
          const c = new THREE.Line(s, new THREE.LineDashedMaterial({ color: t, dashSize: n, gapSize: r }));
          return c.computeLineDistances(), c;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxThreeJS/index.js
  var MxThreeJS2, MxThreeJS_default;
  var init_MxThreeJS2 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxThreeJS/index.js"() {
      init_MxThreeJS_mixin();
      init_MxThreeJS();
      MxThreeJS2 = MxThreeJSMixin(new MxThreeJS());
      MxThreeJS_default = MxThreeJS2;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDrawObject/index.js
  var __awaiter, MxDrawObject;
  var init_MxDrawObject = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDrawObject/index.js"() {
      init_MxCADObject();
      init_MxDbDatabase();
      init_MxThreeJS2();
      __awaiter = function(e, r, t, o) {
        return new (t || (t = Promise))(function(n, a) {
          function d(e2) {
            try {
              s(o.next(e2));
            } catch (e3) {
              a(e3);
            }
          }
          function i(e2) {
            try {
              s(o.throw(e2));
            } catch (e3) {
              a(e3);
            }
          }
          function s(e2) {
            var r2;
            e2.done ? n(e2.value) : (r2 = e2.value, r2 instanceof t ? r2 : new t(function(e3) {
              e3(r2);
            })).then(d, i);
          }
          s((o = o.apply(e, r || [])).next());
        });
      };
      MxDrawObject = class {
        constructor(e) {
          this._mxdrawObj = e;
        }
        getScene() {
          return this._mxdrawObj.getScene();
        }
        getCamera() {
          return this._mxdrawObj.getCamera();
        }
        getRenderer() {
          return this._mxdrawObj.renderer;
        }
        setMouseRightRotate(e = true) {
          return this._mxdrawObj.setMouseRightRotate(e);
        }
        getFullDisplayRange() {
          return this._mxdrawObj.getFullDisplayRange();
        }
        getCanvas() {
          return this._mxdrawObj.getCanvas();
        }
        updateDisplay() {
          return this._mxdrawObj.updateDisplay();
        }
        createCanvasImageData(e, r) {
          return this._mxdrawObj.createCanvasImageData(e, r);
        }
        setViewColor(e) {
          return this._mxdrawObj.setViewColor(e);
        }
        setSize(e, r) {
          return this._mxdrawObj.setSize(e, r);
        }
        getIntersectObjects(e) {
          return this._mxdrawObj.getIntersectObjects(e);
        }
        addObject(e, r = true) {
          return this._mxdrawObj.addObject(e, r);
        }
        addViewObject(e) {
          return this._mxdrawObj.addViewObject(e);
        }
        getViewWidth() {
          return this._mxdrawObj.getViewWidth();
        }
        getViewHeight() {
          return this._mxdrawObj.getViewHeight();
        }
        removeObject(e, r = true) {
          return this._mxdrawObj.removeObject(e, r);
        }
        zoomInitialStates() {
          return this._mxdrawObj.zoomInitialStates();
        }
        zoomScale(e) {
          return this._mxdrawObj.zoomScale(e);
        }
        zoomW(e, r, t) {
          return this._mxdrawObj.zoomW(e, r, t);
        }
        zoomCenter(e, r) {
          return this._mxdrawObj.zoomCenter(e, r);
        }
        initZoomW(e, r) {
          return this._mxdrawObj.initZoomW(e, r);
        }
        addEvent(e, r) {
          return this._mxdrawObj.addEvent(e, r);
        }
        on(e, r) {
          return this._mxdrawObj.addEvent(e, r);
        }
        setIniset(e) {
          return this._mxdrawObj.setIniset(e);
        }
        screenCoord2World(e, r, t) {
          return this._mxdrawObj.screenCoord2World(e, r, t);
        }
        worldCoord2Screen(e, r, t) {
          return this._mxdrawObj.worldCoord2Screen(e, r, t);
        }
        screenCoord2Doc(e, r) {
          return this._mxdrawObj.screenCoord2Doc(e, r, 0);
        }
        worldCoordLong2Doc(e) {
          return this._mxdrawObj.worldCoordLong2Doc(e);
        }
        docCoordLong2World(e) {
          return this._mxdrawObj.docCoordLong2World(e);
        }
        docCoord2World(e, r, t) {
          return this._mxdrawObj.docCoord2World(e, r, t);
        }
        docCoord2World2(e) {
          return this._mxdrawObj.docCoord2World(e.x, e.y, e.z);
        }
        worldCoord2Doc(e, r, t) {
          return this._mxdrawObj.worldCoord2Doc(e, r, t);
        }
        worldCoord2Doc2(e) {
          return this._mxdrawObj.worldCoord2Doc(e.x, e.y, e.z);
        }
        docCoord2Screen(e, r) {
          return this._mxdrawObj.docCoord2Screen(e, r, 0);
        }
        screenCoordLong2Doc(e) {
          return this._mxdrawObj.screenCoordLong2Doc(e);
        }
        docCoordLong2Screen(e) {
          return this._mxdrawObj.docCoordLong2Screen(e);
        }
        screenCoordLong2World(e) {
          return this._mxdrawObj.screenCoordLong2World(e);
        }
        worldCoordLong2Screen(e) {
          return this._mxdrawObj.worldCoordLong2Screen(e);
        }
        initRendererParam(e) {
          return this._mxdrawObj.initRendererParam(e);
        }
        addMxEntity(e) {
          return this._mxdrawObj.addMxEntity(e);
        }
        getMxCurrentSelect() {
          let e = this._mxdrawObj.getMxAllSelect();
          return e.length == 0 && (e = this._mxdrawObj.getPrvCommandSelect()), e;
        }
        addMxCurrentSelect(e) {
          return this._mxdrawObj.addMxCurrentSelect(e);
        }
        clearMxCurrentSelect() {
          return this._mxdrawObj.clearMxCurrentSelect();
        }
        getMxEntity(e) {
          return this._mxdrawObj.getMxEntityUserObject(e);
        }
        findMxEntityAtPoint(e, r, t) {
          return this._mxdrawObj.findMxEntityAtPoint(e, r, t);
        }
        getAllMxEntity() {
          return this._mxdrawObj.getAllMxEntity();
        }
        setMouseMiddlePan(e) {
          return this._mxdrawObj.setMouseMiddlePan(e);
        }
        resetThreeJSControls() {
          return this._mxdrawObj.resetThreeJSControls();
        }
        enableZoom(e) {
          return this._mxdrawObj.enableZoom(e);
        }
        enablePan(e) {
          return this._mxdrawObj.enablePan(e);
        }
        eraseMxEntity(e) {
          return this._mxdrawObj.eraseMxEntity(e);
        }
        removeViewObject(e) {
          this._mxdrawObj.removeViewObject(e);
        }
        saveMxEntityToJson(e) {
          return JSON.stringify(this._mxdrawObj.saveMxEntityToJson(e));
        }
        saveMxEntityToObject(e) {
          return this._mxdrawObj.saveMxEntityToJson(e);
        }
        loadMxEntityFromJson(e, r = null) {
          return __awaiter(this, void 0, void 0, function* () {
            if (r) {
              let e2 = r.length;
              for (let t = 0; t < e2; t++)
                yield MxThreeJS_default.loadSVG(r[t]);
            }
            return this.getAllMxEntity().forEach((e2) => {
              for (let r2 in e2)
                Reflect.deleteProperty(e2, r2);
            }), typeof e == "string" ? this._mxdrawObj.loadMxEntityFromJson(JSON.parse(e)) : this._mxdrawObj.loadMxEntityFromJson(e);
          });
        }
        eraseAllMxEntity() {
          return this._mxdrawObj.eraseAllMxEntity();
        }
        makeCurrent() {
          this._mxdrawObj.makeCurrent();
        }
        getViewCenterDocCoord() {
          return this._mxdrawObj.getViewCenterDocCoord();
        }
        updateCanvasSize() {
          this._mxdrawObj.updateCanvasSize();
        }
        newFile(e, r, t, o) {
          return this._mxdrawObj.newFile(e, r, t, o);
        }
        stopAllLoading() {
          this._mxdrawObj.stopAllLoading();
        }
        getOrbitControls() {
          return this._mxdrawObj.getOrbitControls();
        }
        enableViewControls(e) {
          return this._mxdrawObj.enableViewControls(e);
        }
        getMxDatabase() {
          return new MxDbDatabase(this._mxdrawObj.getMxDatabase());
        }
        setZoomSpeed(e) {
          return this._mxdrawObj.setZoomSpeed(e);
        }
        getMxCAD() {
          let e = this._mxdrawObj.getMxCAD();
          return new MxCADObject(e);
        }
        resetRenderer() {
          return this._mxdrawObj.resetRenderer();
        }
        setRequestHeader(e) {
          return this._mxdrawObj.setRequestHeader(e);
        }
        closeWebSocket() {
          return this._mxdrawObj.closeWebSocket();
        }
        cadCoord2Doc(e, r, t) {
          return this._mxdrawObj.cadCoord2Doc(e, r, t);
        }
        docCoord2Cad(e, r, t) {
          return this._mxdrawObj.docCoord2Cad(e, r, t);
        }
        setViewAngle(e) {
          return this._mxdrawObj.setViewAngle(e);
        }
        getViewAngle() {
          return this._mxdrawObj.getViewAngle();
        }
        getSysVar(e) {
          return this._mxdrawObj.sysVariable().getSysVar();
        }
        setSysVar(e, r) {
          return this._mxdrawObj.sysVariable().setSysVar(e, r);
        }
        isMxCAD() {
          return this._mxdrawObj.isMxCAD();
        }
        getMxObjectImplement() {
          return this._mxdrawObj;
        }
        getAllLayoutName() {
          return this._mxdrawObj.getAllLayoutName();
        }
        getDtabaseJsonString() {
          return this._mxdrawObj.getDtabaseJsonString();
        }
        gotoLayout(e) {
          return this._mxdrawObj.gotoLayout(e);
        }
        initMxCpp(e) {
          return this._mxdrawObj.initMxCpp(e);
        }
        isWebgl2() {
          return this._mxdrawObj.isWebgl2();
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/useCanvasResizeListener/index.js
  function useCanvasResizeListener(e, t, n = 100) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (!store_default.state.MxFun)
        return void console.error("\u8BF7\u5148\u8C03\u7528loadCoreCode\u65B9\u6CD5! ");
      if (!e)
        return void console.error("\u8BF7\u786E\u4FDDmxdrawObj\u53C2\u6570 \u662F\u901A\u8FC7\u8C03\u7528MxFun.createMxObject\u7684callback\u56DE\u8C03\u51FD\u6570\u62FF\u5230\u7684mxDraw\u5BF9\u8C61");
      let o = e;
      if (!o.isLoadCanvasResizeListene) {
        o.isLoadCanvasResizeListene = true;
        let r = void 0;
        e.addEvent("addResizeEvent", (e2) => {
          r = e2;
        }), yield dynamicImport("element-resize-event-polyfill");
        let i = createCanvasParent(t);
        i.addEventListener ? i.addEventListener("resize", import_lodash.default.throttle(function(e2) {
          r && r();
        }, n), false) : console.log("mx: parentdiv[addEventListener] invalid");
      }
    });
  }
  var import_lodash, __awaiter2;
  var init_useCanvasResizeListener = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/useCanvasResizeListener/index.js"() {
      init_store();
      init_create();
      init_dynamicImport();
      import_lodash = __toESM(require_lodash());
      __awaiter2 = function(e, t, n, o) {
        return new (n || (n = Promise))(function(r, i) {
          function a(e2) {
            try {
              d(o.next(e2));
            } catch (e3) {
              i(e3);
            }
          }
          function s(e2) {
            try {
              d(o.throw(e2));
            } catch (e3) {
              i(e3);
            }
          }
          function d(e2) {
            var t2;
            e2.done ? r(e2.value) : (t2 = e2.value, t2 instanceof n ? t2 : new n(function(e3) {
              e3(t2);
            })).then(a, s);
          }
          d((o = o.apply(e, t || [])).next());
        });
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/McEdGetPointWorldDrawObject/index.js
  var McEdGetPointWorldDrawObject;
  var init_McEdGetPointWorldDrawObject = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/McEdGetPointWorldDrawObject/index.js"() {
      init_store();
      McEdGetPointWorldDrawObject = class {
        constructor() {
          var t;
          this._McEdGetPointWorldDraw = new ((t = store_default.state.MxFun) === null || t === void 0 ? void 0 : t.getMxJigCmdManager().McEdGetPointWorldDrawObjectClass())(), this._get = () => this._McEdGetPointWorldDraw;
        }
        drawCircle(t, r) {
          return this._McEdGetPointWorldDraw.drawCircle(t, r);
        }
        drawLine(t, r) {
          return this._McEdGetPointWorldDraw.drawLine(t, r);
        }
        drawEntity(t, r) {
          return this._McEdGetPointWorldDraw.drawEntity(t, r);
        }
        drawText(t, r, e, o) {
          return this._McEdGetPointWorldDraw.drawText(t, r, e, o);
        }
        setDraw(t) {
          return this._McEdGetPointWorldDraw.setDraw(t);
        }
        setColor(t) {
          return this._McEdGetPointWorldDraw.setColor(t);
        }
        getColor() {
          return this._McEdGetPointWorldDraw.getColor();
        }
        drawCustomEntity(t, r) {
          return this._McEdGetPointWorldDraw.drawCustomEntity(t, r);
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MrxDbgUiPrPoint/index.js
  var _MrxDbgUiPrPoint, MrxDbgUiPrPoint;
  var init_MrxDbgUiPrPoint = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MrxDbgUiPrPoint/index.js"() {
      init_McEdGetPointWorldDrawObject();
      init_store();
      MrxDbgUiPrPoint = class {
        constructor() {
          var r;
          _MrxDbgUiPrPoint = new ((r = store_default.state.MxFun) === null || r === void 0 ? void 0 : r.getMxJigCmdManager().getMrxDbgUiPrPointClass())();
        }
        keyWords() {
          return _MrxDbgUiPrPoint.keyWords();
        }
        setKeyWords(r) {
          return _MrxDbgUiPrPoint.setKeyWords(r);
        }
        message() {
          return _MrxDbgUiPrPoint.message();
        }
        setMessage(r) {
          return _MrxDbgUiPrPoint.setMessage(r);
        }
        keyWordPicked() {
          return _MrxDbgUiPrPoint.keyWordPicked();
        }
        isKeyWordPicked(r) {
          return _MrxDbgUiPrPoint.isKeyWordPicked(r);
        }
        setUserDraw(r) {
          if (typeof r != "function")
            return _MrxDbgUiPrPoint.setUserDraw(r._get ? r._get() : r);
          {
            const e = new McEdGetPointWorldDrawObject();
            e.setDraw(r), _MrxDbgUiPrPoint.setUserDraw(e._get());
          }
        }
        value() {
          return _MrxDbgUiPrPoint.value();
        }
        valueDocCoord() {
          return _MrxDbgUiPrPoint.valueDocCoord();
        }
        basePt() {
          return _MrxDbgUiPrPoint.basePt();
        }
        setBasePt(r) {
          return _MrxDbgUiPrPoint.setBasePt(r);
        }
        setUseBasePt(r) {
          return _MrxDbgUiPrPoint.setUseBasePt(r);
        }
        go(r) {
          return r ? (_MrxDbgUiPrPoint.go(r), new Promise((r2, e) => {
            r2(null);
          })) : new Promise((r2, e) => {
            _MrxDbgUiPrPoint.go((e2) => {
              r2(e2 != 0 ? null : _MrxDbgUiPrPoint.value());
            });
          });
        }
        goWhile(r, e) {
          return _MrxDbgUiPrPoint.goWhile(r, e);
        }
        drawReserve(r) {
          return _MrxDbgUiPrPoint.drawReserve(r);
        }
        setInputToucheType(r) {
          return _MrxDbgUiPrPoint.setInputToucheType(r);
        }
        getInputToucheType() {
          return _MrxDbgUiPrPoint.getInputToucheType();
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/loadCoreCode/mxUiData.js
  var MxVueComandLine, MxInputType, MxInputPostionType, MxDynamicInput, CursorType, MxVueInterface, mxUiData, mxUiData_default;
  var init_mxUiData = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/loadCoreCode/mxUiData.js"() {
      MxVueComandLine = class {
        constructor() {
          this.msCmdText = "", this.msCmdDisplay = "", this.msCmdTip = "", this.mUpDisplayFun = void 0, this.mxFunObject = void 0, this.mountUpDisplayFun = (t) => {
            this.mUpDisplayFun = t;
          }, this.setCmdText = (t) => {
            this.msCmdText = t;
          }, this.getCmdText = () => this.msCmdText, this.getCmdDisplay = () => this.msCmdDisplay, this.setCmdDisplay = (t) => {
            this.msCmdDisplay = t;
          }, this.addCmdDisplay = (t) => {
            this.msCmdDisplay.length > 1024 ? (this.msCmdDisplay = this.msCmdDisplay.substring(this.msCmdDisplay.length - 1024, this.msCmdDisplay.length), this.msCmdDisplay = this.msCmdDisplay + t) : this.msCmdDisplay = this.msCmdDisplay + t;
          }, this.setCmdTip = (t) => {
            this.msCmdTip = t;
          }, this.getCmdTip = () => this.msCmdTip;
        }
        upDisplay() {
          const { msCmdTip: t, msCmdDisplay: s, msCmdText: i } = this;
          this.mUpDisplayFun != void 0 && this.mUpDisplayFun({ msCmdTip: t, msCmdDisplay: s, msCmdText: i });
        }
      };
      MxInputType = { kNoInput: 0, kXYCoordInput: 1, kDistanceInput: 2, kDynTip: 3 };
      MxInputPostionType = { kRelative: 0, kAbsolutely: 1 };
      MxDynamicInput = class {
        constructor() {
          this.mType = MxInputType.kNoInput, this.mPos = [0, 0], this.mTip = "", this.mValue1 = "", this.mValue1Pos = [0, 0], this.mValue2 = "", this.mValue2Pos = [0, 0], this.misShow = false, this.mOnKeydownEvent = void 0, this.mFocusValue = "", this.setFocusValue = (t) => {
            this.mFocusValue = t;
          }, this.getFocusValue = () => this.mFocusValue, this.mountKeydownEvent = (t) => {
            this.mOnKeydownEvent = t;
          }, this.onKeydown = (t) => {
            this.mOnKeydownEvent != void 0 && this.mOnKeydownEvent(t);
          }, this.setType = (t) => {
            this.mType = t;
          }, this.getType = () => this.mType, this.isShow = () => this.misShow, this.setPos = (t) => {
            this.mPos = t;
          }, this.setTip = (t) => {
            this.mTip = t;
          }, this.setValue1 = (t) => {
            this.mValue1 = t;
          }, this.getValue1 = () => this.mValue1, this.setValue1Pos = (t) => {
            this.mValue1Pos = t;
          }, this.setValue2 = (t) => {
            this.mValue2 = t;
          }, this.getValue2 = () => this.mValue2, this.setValue2Pos = (t) => {
            this.mValue2Pos = t;
          }, this.setShow = (t) => {
            this.misShow = t;
          }, this.getData = () => {
            if (!this.misShow)
              return;
            let t = { list: [{ value: "", readonly: true }, { value: "", readonly: false }, { value: "", readonly: false }], pos: this.mPos, postype: MxInputPostionType.kRelative };
            return this.mType != MxInputType.kNoInput ? (this.mType == MxInputType.kXYCoordInput ? (t.list[0].show = true, t.list[0].value = this.mTip, t.list[0].readonly = true, t.list[1].show = true, t.list[1].value = this.mValue1, t.list[1].readonly = false, t.list[2].show = true, t.list[2].value = this.mValue2, t.list[2].readonly = false) : this.mType == MxInputType.kDistanceInput ? (t.list[0].show = true, t.list[0].value = this.mTip, t.list[0].readonly = true, t.list[1].show = true, t.list[1].value = this.mValue1, t.list[1].readonly = false, t.list[1].pos = this.mValue1Pos, t.list[2].show = true, t.list[2].value = this.mValue2, t.list[2].readonly = true, t.list[2].pos = this.mValue2Pos, t.postype = MxInputPostionType.kAbsolutely) : this.mType == MxInputType.kDynTip ? (t.list[0].show = true, t.list[0].value = this.mTip, t.list[0].readonly = true, t.list[1].show = false, t.list[2].show = false) : t = void 0, t) : void 0;
          };
        }
      };
      CursorType = { kNormal: "Normal", kRect: "Rect", kCross: "Cross" };
      MxVueInterface = class {
        constructor() {
          this.mSetCoordFun = void 0, this.mUpdateCursorFun = void 0, this.mOnKeydownEvent = void 0, this.mCursorType = CursorType.kNormal, this.mComandLine = new MxVueComandLine(), this.mdynamicInput = new MxDynamicInput(), this.mMxEvents = {}, this.mountSetCoordFun = (t) => {
            this.mSetCoordFun = t;
          }, this.mountUpdateCursorFun = (t) => {
            this.mUpdateCursorFun = t;
          }, this.mountKeydownEvent = (t) => {
            this.mOnKeydownEvent = t;
          }, this.onKeydown = (t) => {
            this.mOnKeydownEvent != void 0 && this.mOnKeydownEvent(t);
          }, this.setTipCoord = (t) => {
            this.mSetCoordFun != void 0 && this.mSetCoordFun(t);
          }, this.getCursorType = () => this.mCursorType, this.setCursorType = (t) => {
            if (typeof t == "number")
              switch (t) {
                case 0:
                  this.mCursorType = CursorType.kNormal;
                  break;
                case 1:
                  this.mCursorType = CursorType.kRect;
                  break;
                case 2:
                  this.mCursorType = CursorType.kCross;
              }
            else
              this.mCursorType = t;
            this.mUpdateCursorFun != void 0 && this.mUpdateCursorFun(this.mCursorType);
          }, this.getTitle = () => this.mTitle, this.getTopButtonBarData = () => this.mTopButtonBarData, this.getMenuBarData = () => this.mMenuBarData, this.getRighButtonBarData = () => this.mRighButtonBarData, this.getLeftButtonBarData = () => this.mLeftButtonBarData, this.getTitleButtonBarData = () => this.mTitleButtonBarData, this.getLayerComboxData = () => this.mLayerComboxData, this.getColorComboxData = () => this.mColorComboxData, this.getLinetypeComboxData = () => this.mLinetypeComboxData, this.getFooterData = () => this.mFooterData, this.sendStringToExecute = (t) => {
            this.mxFunObject.sendStringToExecute(t);
          }, this.getCmdLine = () => this.mComandLine, this.getDynamicInput = () => this.mdynamicInput, this.init = (t) => {
            this.mxFunObject = t;
          }, this.OnMxEvent = (t) => {
            const s = t.name;
            if (s == void 0)
              return;
            const i = this.mMxEvents[s];
            i != void 0 && i(t.param);
          }, this.mountMxEvent = (t, s) => {
            this.mMxEvents[t] = s;
          };
        }
      };
      mxUiData = new MxVueInterface();
      mxUiData_default = mxUiData;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxFun/index.js
  var mxUiData2, MxFunClass, MxFun, MxFun_default;
  var init_MxFun = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxFun/index.js"() {
      init_random();
      init_create();
      init_MxDrawObject();
      init_store();
      init_useCanvasResizeListener();
      init_MrxDbgUiPrPoint();
      init_mxUiData();
      init_MxDbDatabase();
      init_MxCADObject();
      mxUiData2 = mxUiData_default;
      MxFunClass = class {
        constructor() {
          this.listenForUpdateCursor = (e) => {
            mxUiData2.mountUpdateCursorFun(e);
          };
        }
        createMxObject({ canvasId: e = createReandomId(), cadFile: t = "", callback: r, isNewFile: o = false, useWebsocket: n = false, isAutoResize: a = true, mapBox: s, isMxCAD: u = false, userIdentitySign: i = "emptyUserIdentity" }) {
          if (this.initUiDataObject(mxUiData2), !n && o && (o = false), s) {
            const e2 = s.canvas;
            store_default.state.MxFun.createMxObject(e2, t, (t2) => {
              let o2 = new MxDrawObject(t2);
              t2.setIniset({ EnableOsnapFunction: true }), r && r(o2, { canvas: e2, canvasParent: void 0 });
            }, void 0, o, n, s);
          } else {
            const s2 = createCanvas(e), d = createCanvasParent(s2);
            d.parentNode && d.parentNode.nodeType != 11 || document.body.appendChild(d);
            let c = void 0;
            u && (c = true, n = true), store_default.state.MxFun.createMxObject(e, t, (e2) => {
              let t2 = new MxDrawObject(e2);
              if (u) {
                const t3 = 2;
                i.length == 0 && (i = "invalidUserIdentity"), e2.initRunMode(t3), e2.initUserLoginData(i, "");
              }
              e2.setMouseRightRotate(false), e2.setIniset({ EnableOsnapFunction: true }), e2.addEvent("onResize", () => (d.tabindex = 3, { width: d.clientWidth, height: d.clientHeight })), a && useCanvasResizeListener(t2, s2), r && r(t2, { canvas: s2, canvasParent: d });
            }, c, o, n, void 0);
          }
        }
        setMxServer(e = "ws://localhost:5090") {
          store_default.state.MxFun.setMxServer(e);
        }
        enablStaticLoad(e) {
          store_default.state.MxFun.enablStaticLoad(e);
        }
        setStaticServer(e) {
          store_default.state.MxFun.setStaticServer(e);
        }
        addCommand(e, t) {
          store_default.state.MxFun.addCommand(e, t);
        }
        sendStringToExecute(e, ...t) {
          return store_default.state.MxFun.sendStringToExecute(e, ...t);
        }
        call(e, t, r) {
          return store_default.state.MxFun.call(e, t, r);
        }
        getCurrentDraw() {
          return new MxDrawObject(store_default.state.MxFun.getCurrentDraw());
        }
        getCurrentDatabase() {
          let e = store_default.state.MxFun.getCurrentDraw();
          return new MxDbDatabase(e.getMxDatabase());
        }
        screenCoordLong2World(e) {
          return store_default.state.MxFun.screenCoordLong2World(e);
        }
        screenCoordLong2Doc(e) {
          return store_default.state.MxFun.screenCoordLong2Doc(e);
        }
        docCoordLong2Screen(e) {
          return store_default.state.MxFun.docCoordLong2Screen(e);
        }
        worldCoordLong2Doc(e) {
          return store_default.state.MxFun.worldCoordLong2Doc(e);
        }
        docCoordLong2World(e) {
          return store_default.state.MxFun.docCoordLong2World(e);
        }
        screenCoord2World(e, t, r) {
          return store_default.state.MxFun.screenCoord2World(e, t, r);
        }
        worldCoord2Screen(e, t, r) {
          return store_default.state.MxFun.worldCoord2Screen(e, t, r);
        }
        docCoord2World(e, t, r) {
          return store_default.state.MxFun.docCoord2World(e, t, r);
        }
        worldCoord2Doc(e, t, r) {
          return store_default.state.MxFun.worldCoord2Doc(e, t, r);
        }
        screenCoord2Doc(e, t) {
          return store_default.state.MxFun.screenCoord2Doc(e, t, 0);
        }
        docCoord2Screen(e, t) {
          return store_default.state.MxFun.docCoord2Screen(e, t, 0);
        }
        updateDisplay() {
          return store_default.state.MxFun.updateDisplay();
        }
        addWindowsEvent(e) {
          return store_default.state.MxFun.addWindowsEvent(e);
        }
        isRunningCommand() {
          return store_default.state.MxFun.isRunningCommand();
        }
        zoomW(e, t, r, o, n) {
          return store_default.state.MxFun.zoomW(e, t, r, o, n);
        }
        showLayer(e, t, r) {
          return store_default.state.MxFun.showLayer(e, t, r);
        }
        getCurrentMxCAD() {
          let e = store_default.state.MxFun.getCurrentMxCAD();
          return new MxCADObject(e);
        }
        getQueryString(e) {
          return store_default.state.MxFun.getQueryString(e);
        }
        setIniset(e) {
          return store_default.state.MxFun.setIniset(e);
        }
        upDisplayForLayerData(e) {
          return store_default.state.MxFun.upDisplayForLayerData(e);
        }
        initUiDataObject(e) {
          return mxUiData2 = e, store_default.state.MxFun.initUiDataObject(e);
        }
        getUIData() {
          return mxUiData2;
        }
        testMX(e) {
          return 11;
        }
        loadImageMaterial(e, t) {
          return t ? (store_default.state.MxFun.loadImageMaterial(e, t), new Promise((e2, t2) => {
            e2(null);
          })) : new Promise((t2, r) => {
            store_default.state.MxFun.loadImageMaterial(e, (e2) => {
              t2(e2 || null);
            });
          });
        }
        openFile(e, t = false) {
          return store_default.state.MxFun.openFile(e, t);
        }
        addToCurrentSpace(e) {
          return this.getCurrentDraw().addMxEntity(e);
        }
        selectEnt(e, t = null) {
          return new Promise((r, o) => {
            const n = new MrxDbgUiPrPoint();
            n.setMessage(e), n.go((e2) => {
              if (e2 != 0)
                return void r(0);
              const o2 = n.value();
              let a = this.getCurrentDraw().findMxEntityAtPoint(o2), s = 0;
              for (; a.length != 0; ) {
                let e3 = a.length;
                for (let r2 = 0; r2 < e3; r2++) {
                  let e4 = a[r2];
                  if (!t || !t.type || t.type == e4.getTypeName()) {
                    s = e4.objectId();
                    break;
                  }
                }
                break;
              }
              r(s);
            });
          });
        }
        listenForCommandLineInput(e) {
          mxUiData2.getCmdLine().mountUpDisplayFun(e);
        }
        setCommandLineInputData(e, t) {
          mxUiData2.getCmdLine().setCmdText(e), mxUiData2.onKeydown(t);
        }
        listenForCoordTip(e) {
          mxUiData2.mountSetCoordFun(e);
        }
        getMxFunTHREE() {
          return store_default.state.MxFun.getTHREE();
        }
        getMxFunThreeTool() {
          return store_default.state.MxFun.getMxThreeJS();
        }
        ceneratecursor(e = 128, t = 10, r = true, o) {
          return store_default.state.MxFun.ceneratecursor(e, t, r, o);
        }
        callCommand(e, t, r) {
          return store_default.state.MxFun.callCommand(e, t, r);
        }
        cadCoord2Doc(e, t, r) {
          return store_default.state.MxFun.cadCoord2Doc(e, t, r);
        }
        docCoord2Cad(e, t, r) {
          return store_default.state.MxFun.docCoord2Cad(e, t, r);
        }
        getMxEntity(e) {
          return store_default.state.MxFun.getMxEntity(e);
        }
        getCurrentMousePostion() {
          let e = store_default.state.MxFun.getCurrentMousePostion();
          return new THREE.Vector3(e.x, e.y, 0);
        }
        stopRunCommand() {
          return store_default.state.MxFun.stopRunCommand();
        }
      };
      MxFun = new MxFunClass();
      MxFun_default = MxFun;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxPaintBrush/index.js
  var MxPaintBrushProps, MxPaintBrush, MxPaintBrush_default;
  var init_MxPaintBrush = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxPaintBrush/index.js"() {
      MxPaintBrushProps = {};
      MxPaintBrush = { getProps: () => MxPaintBrushProps, setProps: (s) => Object.assign(MxPaintBrushProps, s), use: (s) => Object.assign(s, MxPaintBrushProps) };
      MxPaintBrush_default = MxPaintBrush;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxType/MxType.js
  var MxType_exports = {};
  __export(MxType_exports, {
    InputToucheType: () => InputToucheType,
    MxCloneType: () => MxCloneType,
    MxDefaultRenderOrder: () => MxDefaultRenderOrder
  });
  var MxCloneType, MxDefaultRenderOrder, InputToucheType;
  var init_MxType = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxType/MxType.js"() {
      !function(e) {
        e[e.kClone = 1] = "kClone", e[e.kDragClone = 2] = "kDragClone", e[e.kMxFileClone = 3] = "kMxFileClone", e[e.kSaveDwgClone = 4] = "kSaveDwgClone";
      }(MxCloneType || (MxCloneType = {}));
      !function(e) {
        e[e.kCADMeshRenderOrder = 10] = "kCADMeshRenderOrder", e[e.kCADCurveRenderOrder = 20] = "kCADCurveRenderOrder", e[e.kMxEntityRenderOrder = 30] = "kMxEntityRenderOrder", e[e.kGripRenderOrder = 110] = "kGripRenderOrder", e[e.kDynJigRenderOrder = 120] = "kDynJigRenderOrder";
      }(MxDefaultRenderOrder || (MxDefaultRenderOrder = {}));
      !function(e) {
        e[e.kGetBegan = 1] = "kGetBegan", e[e.kGetEnd = 2] = "kGetEnd";
      }(InputToucheType || (InputToucheType = {}));
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxType/index.js
  var MxType_default;
  var init_MxType2 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxType/index.js"() {
      init_MxType();
      init_MxType();
      MxType_default = MxType_exports;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEntity/index.js
  function getDwgKeyVal(t, e) {
    let i, r = "";
    return import_lodash2.default.isObject(e) ? (i = e.default, r = e.key) : typeof e == "string" && (r = e), [r, t[r] === void 0 ? i : t[r]];
  }
  var import_lodash2, __awaiter3, DataType, MXDBDATATYPE, MxDbEntity;
  var init_MxDbEntity = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbEntity/index.js"() {
      import_lodash2 = __toESM(require_lodash());
      init_MxFun();
      init_MxPaintBrush();
      init_MxType2();
      init_store();
      __awaiter3 = function(t, e, i, r) {
        return new (i || (i = Promise))(function(s, a) {
          function n(t2) {
            try {
              h(r.next(t2));
            } catch (t3) {
              a(t3);
            }
          }
          function o(t2) {
            try {
              h(r.throw(t2));
            } catch (t3) {
              a(t3);
            }
          }
          function h(t2) {
            var e2;
            t2.done ? s(t2.value) : (e2 = t2.value, e2 instanceof i ? e2 : new i(function(t3) {
              t3(e2);
            })).then(n, o);
          }
          h((r = r.apply(t, e || [])).next());
        });
      };
      !function(t) {
        t[t.Default = 0] = "Default", t[t.Color = 1] = "Color", t[t.Vector2 = 2] = "Vector2", t[t.Vector3 = 3] = "Vector3", t[t.Vector4 = 4] = "Vector4", t[t.Matrix3 = 5] = "Matrix3", t[t.Matrix4 = 6] = "Matrix4";
      }(DataType || (DataType = {}));
      MXDBDATATYPE = "datatype";
      MxDbEntity = class {
        constructor() {
          this.color = 16777215, this.renderOrder = 30, this.opacity = 1, this.visible = true, this.userData = {}, this.sGuid = "", this.dLineWidth = 0, this.lineWidthByPixels = true, this.dDashArray = 0, this.dDashRatio = 0, this.layer = "", this._event = {};
          const t = this.constructor;
          t.isPaintBrushDraw && (MxPaintBrush_default.use(this), t.isPaintBrushDraw = false);
        }
        static register() {
          const t = this;
          t.isRegister || (t.cmd && t.draw && MxFun_default.addCommand(t.cmd, t.draw), new t().rxInit(), t.isRegister = true);
        }
        static use() {
          return __awaiter3(this, void 0, void 0, function* () {
            this.register(), this.isPaintBrushDraw = true, this.cmd && MxFun_default.sendStringToExecute(this.cmd);
          });
        }
        initGuid(t) {
          this.sGuid.length > 0 ? console.log("mx: init guid error") : this.sGuid = t;
        }
        dwgInHelp(t, e, i) {
          let r = this;
          const s = t.type === MxType_default.MxCloneType.kMxFileClone || t.type === MxType_default.MxCloneType.kSaveDwgClone, a = (t2) => {
            if (!t2)
              return;
            const { value: e2, [MXDBDATATYPE]: r2 } = t2;
            switch (r2) {
              case DataType.Color:
                return new THREE.Color(...e2);
              case DataType.Vector2:
                return new THREE.Vector2(...e2);
              case DataType.Vector3:
                return new THREE.Vector3(...e2);
              case DataType.Vector4:
                return new THREE.Vector4(...e2);
              case DataType.Matrix3:
                return new THREE.Matrix3().fromArray(e2);
              case DataType.Matrix4:
                return new THREE.Matrix4().fromArray(e2);
            }
            return i && i.getCacheVal ? i.getCacheVal(t2) : void 0;
          };
          function n(t2) {
            return t2 instanceof THREE.Color || t2 instanceof THREE.Vector2 || t2 instanceof THREE.Vector3 || t2 instanceof THREE.Vector4 || t2 instanceof THREE.Matrix3 || t2 instanceof THREE.Matrix4 ? t2.clone() : i && i.getVal ? i.getVal(t2) : void 0;
          }
          return e.forEach((e2) => {
            const [i2, o] = getDwgKeyVal(t, e2);
            r[i2] = import_lodash2.default.cloneDeepWith(o, s ? a : n);
          }), true;
        }
        dwgOutHelp(t, e) {
          const i = (t2) => t2 instanceof THREE.Color ? { [MXDBDATATYPE]: DataType.Color, value: t2.toArray() } : t2 instanceof THREE.Vector2 ? { [MXDBDATATYPE]: DataType.Vector2, value: t2.toArray() } : t2 instanceof THREE.Vector3 ? { [MXDBDATATYPE]: DataType.Vector3, value: t2.toArray() } : t2 instanceof THREE.Vector4 ? { [MXDBDATATYPE]: DataType.Vector4, value: t2.toArray() } : t2 instanceof THREE.Matrix3 ? { [MXDBDATATYPE]: DataType.Matrix3, value: t2.toArray() } : t2 instanceof THREE.Matrix4 ? { [MXDBDATATYPE]: DataType.Matrix4, value: t2.toArray() } : void 0;
          let r = this;
          const s = t.type === MxType_default.MxCloneType.kMxFileClone || t.type === MxType_default.MxCloneType.kSaveDwgClone;
          return e.forEach((e2) => {
            const [a, n] = getDwgKeyVal(r, e2);
            t[a] = s ? import_lodash2.default.cloneDeepWith(n, i) : n;
          }), t;
        }
        callEvent(t, e) {
          return this._event[t] != void 0 ? this._event[t](e) : void 0;
        }
        create(t) {
          return new (0, this.constructor)(t);
        }
        transformBy(t) {
        }
        getGeomExtents() {
          return null;
        }
        getClosestPointTo(t, e = 0) {
          return null;
        }
        getImp() {
          return this.MxDbEntityImp;
        }
        setNeedUpdateDisplay(t) {
          let e = this.getImp();
          return !!e && (t ? e.upDisplay() : e.setDirtyDisplay(true), true);
        }
        getMxObject() {
          let t = this.getImp();
          return t ? t.getMxObject() : null;
        }
        onViewChange() {
          return false;
        }
        objectId() {
          let t = this.getImp();
          return t ? t.objectId() : 0;
        }
        erase() {
          let t = this.getImp();
          return !!t && t.erase();
        }
        setLayer(t) {
          let e = this.getImp();
          e && e.nodifySetLayer(), this.layer = t;
        }
        getLayer() {
          return this.layer;
        }
        setColor(t) {
          return this.color = t, this;
        }
        getColor() {
          return this.color || 16777215;
        }
        clone(t) {
          let e = this.create(), i = { type: t || MxType_default.MxCloneType.kClone };
          return this.dwgOut(i), e.dwgIn(i), e.sGuid = "", e;
        }
        onDwgIn(t) {
          this.color = t.color, this.renderOrder = t.renderOrder, this.opacity = t.opacity, this.visible = t.visible, t.userData ? this.userData = JSON.parse(JSON.stringify(t.userData)) : this.userData = {}, this.dLineWidth = t.lineWidth, this.lineWidthByPixels = t.lineWidthByPixels, this.dDashArray = t.dashArray, this.dDashRatio = t.dashRatio, this.layer = t.layer, t.guid && (this.sGuid = t.guid);
        }
        onDwgOut(t) {
          t.color = this.color, t.renderOrder = this.renderOrder, t.opacity = this.opacity, t.visible = this.visible, t.lineWidth = this.dLineWidth, t.lineWidthByPixels = this.lineWidthByPixels, t.dashArray = this.dDashArray, t.dashRatio = this.dDashRatio, t.layer = this.layer, t.guid = this.sGuid, Object.keys(this.userData).length > 0 && (t.userData = this.userData);
        }
        rxInit() {
          store_default.state.MxFun.initMxDbEntityType(this);
        }
        setRenderOrder(t) {
          this.renderOrder = t;
        }
        getRenderOrder() {
          return this.renderOrder;
        }
        setLineWidthByPixels(t) {
          return this.lineWidthByPixels = t, this;
        }
        getLineWidthByPixels() {
          return this.lineWidthByPixels;
        }
        setLineWidth(t) {
          return this.dLineWidth = t, this;
        }
        getLineWidth() {
          return this.dLineWidth;
        }
        getGetLength() {
          return 0;
        }
        setDashLen(t) {
          let e = this.getGetLength();
          if (e < 1e-6 || t < 1e-6)
            return this;
          let i = Math.floor(e / t);
          return i < 1e-6 && (this.dDashRatio = 0), this.dDashArray = 1 / i, this;
        }
        setDashRatio(t) {
          return this.dDashRatio = t, this;
        }
        setDashArray(t) {
          return this.dDashArray = t, this;
        }
        setDash(t, e) {
          return this.dDashArray = t, this.dDashRatio = e, this.dLineWidth == 0 && (this.dLineWidth = 6, this.lineWidthByPixels = true), this;
        }
        getDash() {
          return { dDashArray: this.dDashArray, dDashRatio: this.dDashRatio };
        }
        setDashLineDisplay(t) {
          return t ? (this.dDashArray < 1e-5 && (this.dDashArray = 0.03), this.dDashRatio < 1e-5 && (this.dDashRatio = 0.1), this.dLineWidth == 0 && (this.dLineWidth = 6, this.lineWidthByPixels = true)) : (this.dDashArray = 0, this.dDashRatio = 0), this;
        }
        isDashLineDisplay() {
          return this.dDashArray > 0 && this.dDashRatio > 0;
        }
        guid() {
          return this.sGuid;
        }
        onEndGripEidt() {
          this.callEvent("onEndGripEidt");
        }
        onStartGripEidt() {
          return this.callEvent("onStartGripEidt");
        }
        addEvent(t, e) {
          this._event[t] = e;
        }
        removeEvent(t) {
          this._event[t] = void 0;
        }
        toJsonString(t = MxType_default.MxCloneType.kMxFileClone) {
          let e = { type: t };
          return this.dwgOut(e), e.TypeName = this.getTypeName(), JSON.stringify(e);
        }
        fromJsonString(t) {
          let e = JSON.parse(t);
          return (e.type == MxType_default.MxCloneType.kMxFileClone || e.type == MxType_default.MxCloneType.kClone) && this.dwgIn(e);
        }
      };
      MxDbEntity.isRegister = false;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbHatch/index.js
  var MxDbHatch_exports = {};
  __export(MxDbHatch_exports, {
    default: () => MxDbHatch_default
  });
  var MxDbHatch, MxDbHatch_default;
  var init_MxDbHatch = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbHatch/index.js"() {
      init_three();
      init_McGiWorldDrawType();
      init_MxDbEntity();
      init_registerMxDbEntity();
      MxDbHatch = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.points = [];
        }
        worldDraw(t) {
          t.getType() === McGiWorldDrawType_default.kWorldDraw ? t.drawSolid(this.points) : t.drawLines([...this.points, this.points[0]]);
        }
        getTypeName() {
          return "MxDbHatch";
        }
        moveGripPointsAt(t, i) {
          return t === 0 ? this.points.forEach((t2) => {
            t2.add(i);
          }) : this.points[t - 1] && this.points[t - 1].add(i), true;
        }
        setPoints(t) {
          this.points = t.map((t2) => t2.clone());
        }
        getGripPoints() {
          if (this.points.length > 0) {
            const { centerPoint: t } = computeBounding(this.points);
            return [t, ...this.points];
          }
          return [];
        }
        dwgIn(t) {
          this.onDwgIn(t);
          const i = t.points;
          return this.points = i.map(({ x: t2, y: i2, z: o }) => new THREE.Vector3(t2, i2, o)), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.points = this.points, t;
        }
      };
      addRegisterMxDbEntity(MxDbHatch);
      MxDbHatch_default = MxDbHatch;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArea/draw.js
  function drawMxDbArea() {
    const t = new MrxDbgUiPrPoint();
    t.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), t.go((r) => {
      if (r != 0)
        return;
      const e = t.value();
      let o = new MxDbArea_default();
      o.addPoint(e);
      const n = new McEdGetPointWorldDrawObject();
      n.setDraw((t2, r2) => {
        let e2 = o.clone();
        e2.addPoint(t2), n.drawCustomEntity(e2);
      }), t.setUserDraw(n), t.setMessage("\n\u6307\u5B9A\u4E0B\u4E00\u70B9:"), t.goWhile((r2) => {
        if (r2 == 0) {
          const r3 = t.value();
          o.addPoint(r3);
        }
      }, (t2) => {
        o.isFill = true, o.fillOpacity = 0.7, o.fillColor = 6697540, MxFun_default.getCurrentDraw().addMxEntity(o);
      });
    });
  }
  var init_draw = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbArea/draw.js"() {
      init_MxDbArea();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArea/index.js
  var MxDbArea_exports = {};
  __export(MxDbArea_exports, {
    default: () => MxDbArea_default
  });
  var MxDbArea, MxDbArea_default;
  var init_MxDbArea = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbArea/index.js"() {
      init_registerMxDbEntity();
      init_McGeTool();
      init_McGiWorldDrawType();
      init_MxDbEntity();
      init_MxDbHatch();
      init_MxFun();
      init_MxThreeJS2();
      init_draw();
      MxDbArea = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.points = [], this.isFill = false, this.fillColor = 6697540, this.fillOpacity = 0.7;
        }
        getTypeName() {
          return "MxDbArea";
        }
        create() {
          return new MxDbArea();
        }
        getDimText() {
          return McGeTool_default.calcArea(this.points).toFixed(2);
        }
        worldDraw(t) {
          if (this.points.length < 3)
            return void (this.points.length == 2 && t.drawLine(this.points[0], this.points[1]));
          let i = this.points[0], r = i.clone(), e = i.clone(), o = this.points.length;
          for (let s2 = 1; s2 < o; s2++) {
            let o2 = this.points[s2];
            r.x > o2.x && (r.x = o2.x), r.y > o2.y && (r.y = o2.y), e.x < o2.x && (e.x = o2.x), e.y < o2.y && (e.y = o2.y), t.drawLine(i, o2), i = o2;
          }
          t.drawLine(i, this.points[0]);
          let s = new THREE.Vector3(r.x + 0.5 * (e.x - r.x), r.y + 0.5 * (e.y - r.y));
          const n = t.getColor();
          let l = MxFun_default.screenCoordLong2Doc(20), p = MxThreeJS_default.creatTextSprite(this.getDimText(), s, l, 0, n);
          if (p != null && t.drawEntity(p), t.getType() == McGiWorldDrawType_default.kWorldDraw && this.isFill) {
            t.setColor(this.fillColor), t.setOpacity(this.fillOpacity), t.setRenderOrder(t.getRenderOrder() - 1);
            const i2 = new MxDbHatch_default();
            i2.points = this.points, i2.worldDraw(t);
          }
        }
        getGripPoints() {
          return this.points;
        }
        moveGripPointsAt(t, i) {
          return !(t >= this.points.length) && (this.points[t].add(i), true);
        }
        dwgIn(t) {
          this.onDwgIn(t);
          let i = t.points;
          return this.points = [], i.forEach((t2) => {
            this.points.push(new THREE.Vector3(t2.x, t2.y, t2.z));
          }), this.dwgInHelp(t, ["isFill", "fillColor", "fillOpacity"]), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.points = this.points, this.dwgOutHelp(t, ["isFill", "fillColor", "fillOpacity"]), t;
        }
        addPoint(t) {
          this.points.push(t.clone());
        }
        getPoints() {
          return this.points;
        }
        clearPoint() {
          this.points = [];
        }
      };
      MxDbArea.cmd = "Mx_Area", MxDbArea.draw = drawMxDbArea, addRegisterMxDbEntity(MxDbArea);
      MxDbArea_default = MxDbArea;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadTag/draw.js
  function drawMxDbLeadTag() {
    return __awaiter4(this, void 0, void 0, function* () {
      let t = yield new MrxDbgUiPrPoint().go();
      if (!t)
        return;
      let n = prompt("\u8BF7\u8F93\u5165\u6587\u5B57\u6279\u6CE8", "\u6279\u6CE8");
      if (!n)
        return;
      const r = new MxDbLeadTag_default();
      r.point = t, r.text = n, MxFun_default.addToCurrentSpace(r);
    });
  }
  var __awaiter4;
  var init_draw2 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadTag/draw.js"() {
      init_MxDbLeadTag();
      init_MrxDbgUiPrPoint();
      init_MxFun();
      __awaiter4 = function(t, n, r, i) {
        return new (r || (r = Promise))(function(e, o) {
          function a(t2) {
            try {
              c(i.next(t2));
            } catch (t3) {
              o(t3);
            }
          }
          function u(t2) {
            try {
              c(i.throw(t2));
            } catch (t3) {
              o(t3);
            }
          }
          function c(t2) {
            var n2;
            t2.done ? e(t2.value) : (n2 = t2.value, n2 instanceof r ? n2 : new r(function(t3) {
              t3(n2);
            })).then(a, u);
          }
          c((i = i.apply(t, n || [])).next());
        });
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadTag/index.js
  var MxDbLeadTag_exports = {};
  __export(MxDbLeadTag_exports, {
    default: () => MxDbLeadTag_default
  });
  var MxDbLeadTag, MxDbLeadTag_default;
  var init_MxDbLeadTag = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadTag/index.js"() {
      init_registerMxDbEntity();
      init_MxDbEntity();
      init_MxThreeJS2();
      init_draw2();
      MxDbLeadTag = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.point = new THREE.Vector3(), this.leadLen = 88, this.text = "", this.textHeight = 24;
        }
        getTypeName() {
          return "MxDbLeadTag";
        }
        createDots(e, t) {
          const { x: n, y: o, z: r } = e, i = new THREE.Shape();
          i.arc(n, o, t.screenCoordLong2Doc(6), 0, 2 * Math.PI, true);
          const s = new THREE.Path();
          s.arc(n, o, t.screenCoordLong2Doc(3), 0, 2 * Math.PI, true), i.holes.push(s);
          const a = new THREE.ShapeGeometry(i), d = new THREE.MeshPhongMaterial({ color: "#ff0000", transparent: true }), x = new THREE.Shape();
          x.arc(n, o, t.screenCoordLong2Doc(3), 0, 2 * Math.PI, true);
          const c = new THREE.ShapeGeometry(x), E = new THREE.MeshPhongMaterial({ color: "#e2da8f", transparent: true }), h = new THREE.Mesh(a, d), g = new THREE.Mesh(c, E);
          return h.add(g), h;
        }
        worldDraw(e) {
          let t = e.getMxObject();
          const n = this.createDots(this.point, t);
          if (e.drawEntity(n), n.geometry.computeBoundingBox(), e.drawSelectLine(n.geometry.boundingBox.max, n.geometry.boundingBox.min), e.getType() === 2)
            return;
          let o = e.getMxObject().screenCoordLong2Doc(this.leadLen), r = new THREE.Vector3(this.point.x + 2 * o, this.point.y + o, 0);
          const i = r.x - o, s = new THREE.Vector3(i, r.y, r.z);
          e.setLineWidth(4), e.setColor("#ffe605"), e.drawLines([this.point, s, r]);
          const a = e.getMxObject().screenCoordLong2Doc(this.textHeight), d = r.clone().setX(r.x);
          e.setColor(16744448);
          const x = MxThreeJS_default.creatTextSprite(this.text, d, a, 0, e.getColor());
          if (x) {
            const t2 = new THREE.Box3(), n2 = new THREE.Vector3();
            t2.expandByObject(x), t2.getSize(n2), x.position.setX(x.position.x + n2.x / 2);
            const o2 = e.getMxObject().screenCoordLong2Doc(5), r2 = t2.min.clone().setX(t2.min.x + n2.x / 2).setY(t2.min.y - o2), i2 = t2.max.clone().setX(t2.max.x + n2.x / 2).setY(t2.min.y + o2);
            i2.setY(t2.max.y + o2);
            const s2 = new THREE.Vector3(r2.x, i2.y), a2 = new THREE.Vector3(i2.x, r2.y);
            e.setColor("#ffffff"), e.setLineWidth(0), e.drawLine(r2, s2), e.drawLine(i2, a2), e.drawLine(r2, a2), e.drawLine(s2, i2);
            const d2 = o2 / 2, c = [], E = [];
            c.push(new THREE.Vector3(s2.x + d2, s2.y - o2, s2.z), new THREE.Vector3(s2.x + d2, s2.y - d2, s2.z), new THREE.Vector3(s2.x + o2, s2.y - d2, s2.z)), E.push(new THREE.Vector3(a2.x - d2, a2.y + o2, a2.z), new THREE.Vector3(a2.x - d2, a2.y + d2, a2.z), new THREE.Vector3(a2.x - o2, a2.y + d2, a2.z)), e.drawLines(c), e.drawLines(E), e.setOpacity(0.5), e.setColor("#663244"), e.setRenderOrder(-100), e.drawSolid([r2, s2, i2, a2]), e.setRenderOrder(100), e.drawEntity(x);
          }
        }
        getGripPoints() {
          return [this.point];
        }
        onViewChange() {
          return this.setNeedUpdateDisplay(), true;
        }
        moveGripPointsAt(e, t) {
          return e === 0 && this.point.add(t), true;
        }
        dwgIn(e) {
          return this.onDwgIn(e), this.dwgInHelp(e, ["point", "text", "textHeight", "leadLen"]), true;
        }
        dwgOut(e) {
          return this.onDwgOut(e), this.dwgOutHelp(e, ["point", "text", "textHeight", "leadLen"]), e;
        }
      };
      MxDbLeadTag.cmd = "Mx_LeadTag", MxDbLeadTag.draw = drawMxDbLeadTag, addRegisterMxDbEntity(MxDbLeadTag);
      MxDbLeadTag_default = MxDbLeadTag;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCoord/draw.js
  function drawMxDbCoord() {
    const o = new MrxDbgUiPrPoint();
    o.setMessage("\n\u6307\u5B9A\u5750\u6807\u70B9:"), o.go((t) => {
      if (t != 0)
        return;
      const e = o.value();
      let r = new MxDbCoord_default();
      r.point1 = e, r.point2 = e.clone(), o.setBasePt(e), o.setUseBasePt(true), o.setUserDraw((o2, t2) => {
        r.point2 = o2, t2.drawCustomEntity(r);
      }), o.setMessage("\n\u6307\u5B9A\u6807\u6CE8\u70B9:"), o.go((t2) => {
        t2 == 0 ? (r.point2 = o.value(), MxFun_default.addToCurrentSpace(r)) : console.log(t2);
      });
    });
  }
  var init_draw3 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbCoord/draw.js"() {
      init_MxDbCoord();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCoord/index.js
  var MxDbCoord_exports = {};
  __export(MxDbCoord_exports, {
    default: () => MxDbCoord_default
  });
  var MxDbCoord, MxDbCoord_default;
  var init_MxDbCoord = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbCoord/index.js"() {
      init_registerMxDbEntity();
      init_MxDbEntity();
      init_draw3();
      MxDbCoord = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3();
        }
        worldDraw(t) {
          let o = t.getMxObject();
          t.drawLine(this.point1, this.point2);
          let i = this.point2.clone();
          var r = o.screenCoordLong2Doc(20), n = 6 * r;
          i.x = i.x + n, t.drawLine(this.point2, i);
          var e = new THREE.Vector3(), p = new THREE.Vector3();
          let s = o.docCoord2Cad(this.point1.x, this.point1.y, this.point1.z), d = s.x.toFixed(3), x = s.y.toFixed(3);
          e.x = this.point2.x + 0.3 * r + 0.5 * n, e.y = this.point2.y + 0.1 * r + 0.5 * r, t.drawText(d, r, 0, e), p.x = this.point2.x + 0.3 * r + 0.5 * n, p.y = this.point2.y - 0.1 * r - 0.5 * r, t.drawText(x, r, 0, p);
        }
        getGripPoints() {
          let t = [];
          return t.push(this.point1), t.push(this.point2), t;
        }
        moveGripPointsAt(t, o) {
          return t == 0 ? this.point1.add(o) : t == 1 && this.point2.add(o), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.point1.copy(t.point1), this.point2.copy(t.point2), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.point1 = this.point1, t.point2 = this.point2, t;
        }
        create() {
          return new MxDbCoord();
        }
        transformBy(t) {
          this.point1.applyMatrix4(t), this.point2.applyMatrix4(t);
        }
        getTypeName() {
          return "MxDbCoord";
        }
      };
      MxDbCoord.cmd = "Mx_Coord", MxDbCoord.draw = drawMxDbCoord, addRegisterMxDbEntity(MxDbCoord);
      MxDbCoord_default = MxDbCoord;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDb2LineAngularDimension/draw.js
  function drawMxDb2LineAngularDimension() {
    const n = new MrxDbgUiPrPoint(), t = MxFun_default.getCurrentDraw(), e = new MxDb2LineAngularDimension_default(), r = new McEdGetPointWorldDrawObject();
    return n.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), n.go((o) => {
      o === 0 && (n.setMessage("\n\u6307\u5B9A\u7B2C\u4E8C\u4E2A\u89D2\u5EA6\u70B9:"), e.point1 = n.value(), r.setDraw((n2, t2) => {
        e.point2 = n2, r.drawLine(e.point1, n2);
      }), n.setUserDraw(r), n.go((o2) => {
        n.setMessage("\n\u6307\u5B9A\u6700\u540E\u4E00\u4E2A\u70B9:"), o2 === 0 && (e.point2 = n.value(), r.setDraw((n2, t2) => {
          e.point3 = n2, r.drawCustomEntity(e);
        }), n.go((n2) => {
          n2 === 0 && t.addMxEntity(e);
        }));
      }));
    }), e;
  }
  var init_draw4 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDb2LineAngularDimension/draw.js"() {
      init_MxDb2LineAngularDimension();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDb2LineAngularDimension/index.js
  var MxDb2LineAngularDimension_exports = {};
  __export(MxDb2LineAngularDimension_exports, {
    default: () => MxDb2LineAngularDimension_default
  });
  var import_lodash3, propertyDbKeys, MxDb2LineAngularDimension, MxDb2LineAngularDimension_default;
  var init_MxDb2LineAngularDimension = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDb2LineAngularDimension/index.js"() {
      init_registerMxDbEntity();
      import_lodash3 = __toESM(require_lodash());
      init_McGiWorldDrawType();
      init_MxDbEntity();
      init_draw4();
      propertyDbKeys = ["colors", "point1", "point2", "point3"];
      MxDb2LineAngularDimension = class extends MxDbEntity {
        constructor(t) {
          if (super(), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.point3 = new THREE.Vector3(), this.colors = [], t) {
            const { points: i, colors: n } = t;
            i && this.setPoints(i), n && this.setColor(n);
          }
        }
        calculateLineAngle(t, i, n) {
          const o = 2 * Math.PI / 360;
          return { startAngle: 180 * Math.atan2(i.y - t.y, i.x - t.x) / Math.PI * o, endAngle: 180 * Math.atan2(n.y - t.y, n.x - t.x) / Math.PI * o };
        }
        setPoints(t) {
          const [i, n, o] = t;
          return i && (this.point1 = i), n && (this.point2 = n), o && (this.point3 = o), this;
        }
        setColor(t) {
          return import_lodash3.default.isArray(t) ? this.colors = t : this.color = t, this;
        }
        worldDraw(t) {
          if (t.getType() == McGiWorldDrawType_default.kWorldDraw || t.getType() == McGiWorldDrawType_default.kDynDragDraw) {
            const [i, n, o, e] = this.colors || [], r = this.getColor(), s = t.getMxObject();
            t.setColor(i || r), t.drawLine(this.point1, this.point2), t.setColor(n || r), t.drawLine(this.point2, this.point3);
            const { startAngle: a, endAngle: p } = this.calculateLineAngle(this.point2, this.point1, this.point3), l = this.point2.distanceTo(this.point1), h = this.point2.distanceTo(this.point3), d = Math.min(l, h) / 4;
            let c = THREE.MathUtils.radToDeg(a - p);
            c < 0 && (c += 360);
            let D = s.screenCoordLong2Doc(50);
            const g = new THREE.ArcCurve(this.point2.x, this.point2.y, d, a, p, true), y = new THREE.Geometry().setFromPoints(g.getPoints(50));
            t.setColor(o || r), t.drawGeometryLines(y);
            const w = g.getPoint(0.5);
            let u = new THREE.Vector3(w.x, w.y, 0);
            const M = u.sub(this.point2), m = M.length() + 0.5 * D;
            M.normalize().multiplyScalar(m), u = this.point2.clone().add(M), t.setColor(e || r), t.drawText(c.toFixed(3) + "\xB0", 0.5 * D, 0, u);
          } else
            t.drawLine(this.point1, this.point2), t.drawLine(this.point3, this.point2);
        }
        getGripPoints() {
          return [this.point1, this.point2, this.point3];
        }
        moveGripPointsAt(t, i) {
          return t === 0 ? this.point1.add(i) : t === 1 ? this.point2.add(i) : t === 2 && this.point3.add(i), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.dwgInHelp(t, propertyDbKeys), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), this.dwgOutHelp(t, propertyDbKeys), t;
        }
        create() {
          return new MxDb2LineAngularDimension();
        }
        transformBy(t) {
          this.point1.applyMatrix4(t), this.point2.applyMatrix4(t);
        }
        getTypeName() {
          return "MxDb2LineAngularDimension";
        }
      };
      MxDb2LineAngularDimension.cmd = "Mx_AngleSurveying", MxDb2LineAngularDimension.draw = drawMxDb2LineAngularDimension, addRegisterMxDbEntity(MxDb2LineAngularDimension);
      MxDb2LineAngularDimension_default = MxDb2LineAngularDimension;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxFilters/index.js
  var MxFilters;
  var init_MxFilters = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxFilters/index.js"() {
      MxFilters = class {
        constructor() {
          this.uniformObj = {}, this.filtersStr = "", this.filtersTypes = "", this.VSHADER_SOURCE = "\n  varying vec2 v_Uv; \n  void main () {\n      v_Uv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n  ", this.FSHADER_SOURCE = `
  varying vec2 v_Uv;
  uniform sampler2D e_Texture;
  uniform mat4 colorMatrix;
  ${this.filtersStr}
  void main () {
    vec4 color = texture2D( e_Texture, v_Uv );
    color = color * colorMatrix;
    ${this.filtersTypes}
    gl_FragColor = color;
  }`, this._matrix = new THREE.Matrix4();
        }
        channel({ r: t = 1, g: r = 1, b: i = 1 }) {
          return this._matrix = new THREE.Matrix4().set(t, 0, 0, 0, 0, r, 0, 0, 0, 0, i, 0, 0, 0, 0, 1).multiply(this._matrix), this;
        }
        brightness(t) {
          return this._matrix = new THREE.Matrix4().set(t, 0, 0, 0, 0, t, 0, 0, 0, 0, t, 0, 0, 0, 0, 1).multiply(this._matrix), this;
        }
        saturate(t) {
          const r = 0.2126 * (1 - t), i = 0.7152 * (1 - t), e = 0.0722 * (1 - t);
          return this._matrix = new THREE.Matrix4().set(r + t, i, e, 0, r, i + t, e, 0, r, i, e + t, 0, 0, 0, 0, 1).multiply(this._matrix), this;
        }
        contrast(t) {
          const r = 0.5 * (1 - t);
          return this._matrix = new THREE.Matrix4().set(t, 0, 0, 0, 0, t, 0, 0, 0, 0, t, 0, r, r, r, 1).multiply(this._matrix), this;
        }
        opacity(t) {
          return this._matrix = new THREE.Matrix4().set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, t).multiply(this._matrix), this;
        }
        invert(t) {
          const r = 1 - 2 * t;
          return this._matrix = new THREE.Matrix4().set(r, 0, 0, 0, 0, r, 0, 0, 0, 0, r, 0, t, t, t, 1).multiply(this._matrix), this;
        }
        grayscale(t = 1) {
          const r = 0.2126 * t, i = 0.7152 * t, e = 0.0722 * t;
          return this._matrix = new THREE.Matrix4().set(r + 1 - t, i, e, 0, r, i + 1 - t, e, 0, r, i, e + 1 - t, 0, 0, 0, 0, 1).multiply(this._matrix), this;
        }
        sepia(t = 1) {
          return this._matrix = new THREE.Matrix4().set(1 - 0.607 * t, 0.769 * t, 0.189 * t, 0, 0.349 * t, 1 - 0.314 * t, 0.168 * t, 0, 0.272 * t, 0.534 * t, 1 - 0.869 * t, 0, 0, 0, 0, 1).multiply(this._matrix), this;
        }
        hueRotate(t) {
          const r = t / 180 * Math.PI, i = Math.cos(r), e = Math.sin(r);
          return this._matrix = new THREE.Matrix4().set(0.2126 + 0.7874 * i + -0.2126 * e, 0.7152 + -0.7152 * i + -0.7152 * e, 0.0722 + -0.0722 * i + 0.9278 * e, 0, 0.2126 + -0.2126 * i + 0.143 * e, 0.7152 + i * (1 - 0.7152) + 0.14 * e, 0.0722 + -0.0722 * i + -0.283 * e, 0, 0.2126 + -0.2126 * i + -0.7874 * e, 0.7152 + -0.7152 * i + 0.7152 * e, 0.0722 + 0.9278 * i + 0.0722 * e, 0, 0, 0, 0, 1).multiply(this._matrix), this;
        }
        convolution(t, r = 1 / 9, i = 521) {
          return this.uniformObj = Object.assign(Object.assign({}, this.uniformObj), { cKernel: { value: t.toArray() }, stStep: { value: r }, scaleFactor: { value: i } }), this.filtersTypes.indexOf("convolutionTextureColor") < 0 && (this.filtersStr += "\n        uniform float cKernel[9];\n        uniform float stStep;\n        uniform float scaleFactor;\n        vec4 convolutionTextureColor(vec4 color) {\n            vec2 offsets[9];\n            offsets[0] = vec2(-1.0,-1.0);\n            offsets[1] =  vec2(0.0,-1.0);\n            offsets[2] = vec2(1.0,-1.0);\n            offsets[3] =  vec2(-1.0,0.0);\n            offsets[4] = vec2(0.0,0.0);\n            offsets[5] = vec2(1.0,0.0);\n            offsets[6] =  vec2(-1.0,1.0);\n            offsets[7] = vec2(0.0,1.0);\n            offsets[8] = vec2(1.0,1.0);\n        \n            vec4 sum = color;\n            for(int i = 0; i < 9; i++) {\n                sum = sum + cKernel[i] * scaleFactor * texture2D(e_Texture, v_Uv + offsets[i] / stStep);\n            };\n            return sum;\n        }", this.filtersTypes += "color = convolutionTextureColor(color);\n"), this;
        }
        reset() {
          return this.uniformObj = {}, this.filtersStr = "", this.filtersTypes = "", this._matrix = new THREE.Matrix4(), this;
        }
        _getFilterShaderData(t) {
          return { uniforms: Object.assign({ e_Texture: { value: t }, colorMatrix: { value: this._matrix } }, this.uniformObj), vertexShader: this.VSHADER_SOURCE, fragmentShader: this.FSHADER_SOURCE };
        }
        _getFilterColor(t = "#000000", r = 1) {
          t = new THREE.Color(t);
          let { r: i, g: e, b: s } = t;
          const n = this._matrix.toArray(), o = (n[12], n[13], n[14], n[15], n[0] * i + n[1] * i + n[2] * i + n[3] * r), a = n[4] * e + n[5] * e + n[6] * e + n[7] * r, l = n[8] * s + n[9] * s + n[10] * s + n[11] * r;
          return t.setRGB(o, a, l), t;
        }
        toJSON() {
          return JSON.stringify({ matrix: this._matrix.toArray(), uniformObj: this.uniformObj, filtersStr: this.filtersStr, filtersTypes: this.filtersTypes });
        }
        static fromJSON(t) {
          const { matrix: r, uniformObj: i, filtersStr: e, filtersTypes: s } = JSON.parse(t), n = new MxFilters();
          return n._matrix = new THREE.Matrix4().fromArray(r), n.uniformObj = i, n.filtersStr = e, n.filtersTypes = s, n;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbShape/index.js
  var MxDbShape;
  var init_MxDbShape = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbShape/index.js"() {
      init_three();
      init_McGeTool();
      init_MxDbEntity();
      init_MxFilters();
      init_MxFun();
      init_MxType2();
      MxDbShape = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.isLoadMaterialFromPath = true, this.strokeLineWidth = 2, this.isStrokeDashLine = false, this.isFill = false, this.curveSegments = 50, this.closed = true, this.cornerRadius = [], this._propertyDbKeys = ["isFill", "stroke", "strokeLineWidth", "isStrokeDashLine", "closed", "cornerRadius", "fillImageSrc", "fillImageParam"];
        }
        setStroke(t) {
          return this.stroke = t, this;
        }
        setStrokeLineWidth(t) {
          return this.strokeLineWidth = t, this;
        }
        setIsStrokeDashLine(t) {
          return this.isStrokeDashLine = t, this;
        }
        setIsFill(t) {
          return this.isFill = t, this;
        }
        get fillImageSrc() {
          return this._fillImageSrc;
        }
        set fillImageSrc(t) {
          this._fillImageSrc = t, this.isLoadMaterialFromPath = true, this.material = null;
        }
        setFillImageSrc(t) {
          return this.fillImageSrc = t, this;
        }
        setCurveSegments(t) {
          return this.curveSegments = t, this;
        }
        setClosed(t) {
          return this.closed = t, this;
        }
        setCornerRadius(t, e = true) {
          t instanceof Array ? this.cornerRadius = t.map((t2) => e ? MxFun_default.screenCoordLong2Doc(t2) : t2) : this.cornerRadius = e ? MxFun_default.screenCoordLong2Doc(t) : t;
        }
        getTypeName() {
          return "MxDbShape";
        }
        getShapePoints(t) {
          const { curveSegments: e } = this;
          return this.points = t.getPoints(e).map((t2) => t2 instanceof THREE.Vector2 ? new THREE.Vector3(t2.x, t2.y, 0) : t2), this.points;
        }
        createPaths(t) {
          return this._paths = new THREE.CurvePath(), Array.isArray(t) ? t.forEach((t2) => this._paths.add(t2)) : this._paths.add(t), this._paths;
        }
        _draw(t, e) {
          let { isFill: i, closed: s } = this;
          const r = t.getColor();
          t.setColor(this.filter ? this.filter._getFilterColor(this.color, this.opacity) : this.color);
          const o = this.getCornerRadiusPoints(s || i ? this.getClosedPoints(e) : e);
          i ? !this.fillImageSrc && t.drawSolid(o) : t.drawLines(o), this._fillImg(t, o), t.setColor(r);
        }
        getCornerRadiusPoints(t) {
          const { cornerRadius: e } = this;
          if (!e)
            return t;
          const i = typeof e == "number" ? t.map(() => e) : e;
          return i.length > 0 ? getToGenerateRoundedCorners(t, i) : t;
        }
        _drawStoreLine(t, e, i) {
          const { isFill: s, stroke: r, strokeLineWidth: o } = this, a = t.getLineWidth(), n = t.getColor(), l = t.isDashLineDisplay();
          r && s && (t.setDashLineDisplay(this.isStrokeDashLine), t.setColor(r), t.setLineWidth(o), i ? i(t) : t.drawLines(this.getCornerRadiusPoints(this.getClosedPoints(e))), t.setColor(n), t.setLineWidth(a), t.setDashLineDisplay(l));
        }
        getClosedPoints(t) {
          return [...t, t[0]];
        }
        getTotalLength() {
          return this._paths ? this._paths.getLength() + (this.closedLine ? this.closedLine.getLength() : 0) : 0;
        }
        getArea() {
          return this.points ? McGeTool_default.calcArea(this.closed ? this.getClosedPoints(this.points) : this.points) : 0;
        }
        worldDraw(t) {
          const e = this.createPaths(new THREE.Curve()), i = this.getShapePoints(e);
          this._draw(t, i), this._drawStoreLine(t, i);
        }
        _fillImg(t, e) {
          const i = { transparent: true, depthTest: false, opacity: this.opacity, visible: this.visible };
          if (!this.isFill || !this.fillImageSrc)
            return;
          if (!this.material) {
            let t2 = this;
            return void MxFun_default.loadImageMaterial(this.fillImageSrc, (e2) => {
              t2.isLoadMaterialFromPath = false, e2 && (t2.material = e2, t2.setNeedUpdateDisplay(), MxFun_default.updateDisplay());
            });
          }
          const s = e.map(({ x: t2, y: e2 }) => new THREE.Vector2(t2, e2));
          let r = this.material, o = new THREE.ShapeGeometry(new THREE.Shape(s));
          if (o = repairGeometryFaceVertexUvs(o), this.filter) {
            const t2 = r.map, e2 = this.filter._getFilterShaderData(t2);
            r = new THREE.ShaderMaterial(Object.assign(Object.assign({}, e2), i));
          }
          if (r.depthTest = false, r.transparent = true, r.opacity = this.opacity, r.visible = this.visible, this.fillImageParam) {
            const t2 = this.fillImageParam;
            for (let e2 in this.fillImageParam) {
              this.material.map[e2] = t2[e2];
            }
          }
          let a = new THREE.Mesh(o, r);
          t.drawEntity(a);
        }
        getGripPoints() {
          return [];
        }
        moveGripPointsAt(t, e) {
          return true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.dwgInHelp(t, this._propertyDbKeys), this.isLoadMaterialFromPath = true, this.material = null, t.type === MxType_default.MxCloneType.kMxFileClone ? t.filter && (this.filter = MxFilters.fromJSON(t.filter)) : t.filter && (this.filter = t.filter), true;
        }
        dwgOut(t) {
          var e;
          return this.onDwgOut(t), this.dwgOutHelp(t, this._propertyDbKeys), t.type === MxType_default.MxCloneType.kMxFileClone ? this.filter && (t.filter = (e = this.filter) === null || e === void 0 ? void 0 : e.toJSON()) : t.filter = this.filter, t;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipseShape/index.js
  var MxDbEllipseShape;
  var init_MxDbEllipseShape = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipseShape/index.js"() {
      init_MxDbShape();
      MxDbEllipseShape = class extends MxDbShape {
        constructor() {
          super(), this.center = new THREE.Vector3(), this.xRadius = 10, this.yRadius = 10, this.startAngle = 0, this.endAngle = 2 * Math.PI, this.clockwise = false, this.rotation = 0, this.isClosedToCenter = true, this._propertyDbKeys = [...this._propertyDbKeys, "center", "xRadius", "yRadius", "startAngle", "endAngle", "clockwise", "rotation", "isClosedToCenter"];
        }
        getTypeName() {
          return "MxDbEllipseShape";
        }
        setCenter(t) {
          return this.center = t, this;
        }
        setXRadius(t) {
          return this.xRadius = t, this;
        }
        setYRadius(t) {
          return this.yRadius = t, this;
        }
        setStartAngle(t) {
          return this.startAngle = t, this;
        }
        setEndAngle(t) {
          return this.endAngle = t, this;
        }
        setClockwise(t) {
          return this.clockwise = t, this;
        }
        setRotation(t) {
          return this.rotation = t, this;
        }
        setIsClosedToCenter(t) {
          return this.isClosedToCenter = t, this;
        }
        worldDraw(t) {
          this.drawEllipseShape(t);
        }
        drawEllipseShape(t) {
          let { startAngle: e, endAngle: s, clockwise: i } = this;
          const r = this.createEllipseCurve(), n = this.createPaths(r);
          let a, h = this.getShapePoints(n);
          return this._draw(t, h), this._drawStoreLine(t, h), { centralAngle: a = i ? s > e ? THREE.MathUtils.radToDeg(r.aEndAngle - r.aStartAngle) : 360 - Math.abs(THREE.MathUtils.radToDeg(r.aEndAngle - r.aStartAngle)) : e > s ? Math.abs(THREE.MathUtils.radToDeg(r.aEndAngle - r.aStartAngle)) : 360 - THREE.MathUtils.radToDeg(r.aEndAngle - r.aStartAngle), curve: r, points: h };
        }
        createEllipseCurve(t = this.center.x, e = this.center.y, s = this.xRadius, i = this.yRadius, r = this.startAngle, n = this.endAngle, a = this.clockwise, h = this.rotation) {
          return new THREE.EllipseCurve(t, e, s, i, r, n, a, h);
        }
        getCornerRadiusPoints(t) {
          return t;
        }
        getClosedPoints(t) {
          try {
            let e = (this._paths || new THREE.CatmullRomCurve3(t, false, "catmullrom", 0)).getLength();
            this.closedLine = this.getClosedLine(t);
            const s = this.closedLine.getLength();
            let i = this.curveSegments / e, r = 2.5 * (e > this.curveSegments ? s * i : 1);
            if (r > 20 * this.curveSegments && (r = 20 * this.curveSegments), r <= 0)
              return t;
            const n = this.closedLine.getPoints(r);
            return [...t, ...n];
          } catch (e) {
            return [...t, t[0]];
          }
        }
        getClosedLine(t) {
          const { isClosedToCenter: e, center: s } = this;
          let i = e ? [t[t.length - 1], s, t[0]] : [t[t.length - 1], t[0]];
          return new THREE.CatmullRomCurve3(i, false, "catmullrom", 0.01);
        }
        getGripPoints() {
          return [this.center];
        }
        moveGripPointsAt(t, e) {
          return t === 0 && this.center.add(e), true;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCircleShape/index.js
  var MxDbCircleShape;
  var init_MxDbCircleShape = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbCircleShape/index.js"() {
      init_MxDbEllipseShape();
      MxDbCircleShape = class extends MxDbEllipseShape {
        getTypeName() {
          return "MxDbCircleShape";
        }
        get radius() {
          return this.xRadius;
        }
        set radius(s) {
          this.xRadius = s, this.yRadius = s;
        }
        setRadius(s) {
          return this.radius = s, this;
        }
        setXRadius(s) {
          return this.setRadius(s), this;
        }
        setYRadius(s) {
          return this.setRadius(s), this;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MrxDbgUiPrBaseReturn/index.js
  var MrxDbgUiPrBaseReturn, MrxDbgUiPrBaseReturn_default;
  var init_MrxDbgUiPrBaseReturn = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MrxDbgUiPrBaseReturn/index.js"() {
      !function(e) {
        e[e.kCancel = -2] = "kCancel", e[e.kNone = -1] = "kNone", e[e.kOk = 0] = "kOk", e[e.kKeyWord = 1] = "kKeyWord";
      }(MrxDbgUiPrBaseReturn || (MrxDbgUiPrBaseReturn = {}));
      MrxDbgUiPrBaseReturn_default = MrxDbgUiPrBaseReturn;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/Mx3PointArc/draw.js
  function drawMx3PointArc() {
    const r = new MrxDbgUiPrPoint(), t = new McEdGetPointWorldDrawObject(), e = new Mx3PointArc_default();
    e.closed = false, e.setColor("#ff0000").setLineWidth(10), r.setUserDraw(t), r.setMessage("\n\u786E\u5B9A\u5706\u5F27\u5F00\u59CB\u70B9:"), r.go((o) => {
      o === MrxDbgUiPrBaseReturn_default.kOk && (e.point1 = r.value(), t.setDraw((r2) => {
        t.drawLine(e.point1, r2);
      })), r.setMessage("\n\u786E\u5B9A\u5706\u5F27\u7ED3\u675F\u70B9:"), r.go((o2) => {
        o2 === MrxDbgUiPrBaseReturn_default.kOk && (e.point2 = r.value(), t.setDraw((r2) => {
          e.point3 = r2, t.drawCustomEntity(e);
        })), r.setMessage("\n\u786E\u5B9A\u5706\u5F27\u4E0A\u4EFB\u610F\u4E00\u70B9:"), r.go((r2) => {
          if (r2 === MrxDbgUiPrBaseReturn_default.kOk) {
            MxFun_default.getCurrentDraw().addMxEntity(e);
            const { radius: r3, angle: t2, arcLength: o3 } = createThreePointArc(e.point1, e.point2, e.point3, true);
            console.log("\u534A\u5F84:", r3), console.log("\u5706\u5F27\u5706\u5FC3\u89D2\u5EA6:", t2), console.log("\u5706\u5F27\u5F27\u957F:", o3);
          }
        });
      });
    });
  }
  var init_draw5 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/Mx3PointArc/draw.js"() {
      init_three();
      init_Mx3PointArc();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrBaseReturn();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/Mx3PointArc/index.js
  var Mx3PointArc_exports = {};
  __export(Mx3PointArc_exports, {
    default: () => Mx3PointArc_default
  });
  var Mx3PointArc, Mx3PointArc_default;
  var init_Mx3PointArc = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/Mx3PointArc/index.js"() {
      init_registerMxDbEntity();
      init_three();
      init_MxDbCircleShape();
      init_draw5();
      Mx3PointArc = class extends MxDbCircleShape {
        constructor() {
          super(), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.point3 = new THREE.Vector3(), this.autoClockwise = true, this._propertyDbKeys = [...this._propertyDbKeys, "point1", "point2", "point3", "autoClockwise"];
        }
        getTypeName() {
          return "Mx3PointArc";
        }
        create() {
          return new Mx3PointArc();
        }
        worldDraw(t) {
          let { point1: i, point2: e, point3: r } = this;
          this.upDateCenter(i, e, r), this.upDateRadius(i);
          const [n, o, s] = this.compute3PointAngle();
          this.upDataClockwise(n, o, s), this.startAngle = THREE.MathUtils.degToRad(n), this.endAngle = THREE.MathUtils.degToRad(o), this.drawEllipseShape(t);
        }
        getGripPoints() {
          return [this.point1, this.point2, this.point3, this.center];
        }
        compute3PointAngle() {
          const { point1: t, point2: i, point3: e } = this, r = calculateArcAngle(t, this.center, this.radius), n = calculateArcAngle(i, this.center, this.radius), o = calculateArcAngle(e, this.center, this.radius);
          return [r.angle, n.angle, o.angle];
        }
        upDateCenter(t, i, e) {
          return this.center = calculateArcOrigin(t, i, e), this.center;
        }
        upDateRadius(t) {
          return this.radius = calculateRadiusArc(t, this.center), this.radius;
        }
        upDataClockwise(t, i, e) {
          const { autoClockwise: r } = this;
          r && (this.clockwise = judgementArcRenderDirection(i, t, e));
        }
        moveGripPointsAt(t, i) {
          return t === 0 ? this.point1.add(i) : t === 1 ? this.point2.add(i) : t === 2 ? this.point3.add(i) : t === 3 && (this.point1.add(i), this.point2.add(i), this.point3.add(i)), this.upDateCenter(this.point1, this.point2, this.point3), true;
        }
      };
      Mx3PointArc.cmd = "Mx_3PointArc", Mx3PointArc.draw = drawMx3PointArc, addRegisterMxDbEntity(Mx3PointArc);
      Mx3PointArc_default = Mx3PointArc;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbAnyLine/draw.js
  function drawMxDbAnyLine() {
    const r = new MrxDbgUiPrPoint(), t = MxFun_default.getCurrentDraw(), e = new McEdGetPointWorldDrawObject(), n = new MxDbAnyLine_default();
    r.setUserDraw(e), r.setMessage("\n\u70B9\u51FB\u5F00\u59CB\u753B\u7EBF:"), r.go((o) => {
      o === MrxDbgUiPrBaseReturn_default.kOk && (n.points.push(r.value()), e.setDraw((r2) => {
        n.points.push(r2.clone()), e.drawCustomEntity(n);
      })), r.setMessage("\n\u518D\u6B21\u70B9\u51FB\u7ED3\u675F\u753B\u7EBF:"), r.go((r2) => {
        r2 === MrxDbgUiPrBaseReturn_default.kOk && t.addMxEntity(n);
      });
    });
  }
  var init_draw6 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbAnyLine/draw.js"() {
      init_MxDbAnyLine();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrBaseReturn();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbAnyLine/index.js
  var MxDbAnyLine_exports = {};
  __export(MxDbAnyLine_exports, {
    default: () => MxDbAnyLine_default
  });
  var propertyDbKeys2, MxDbAnyLine, MxDbAnyLine_default;
  var init_MxDbAnyLine = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbAnyLine/index.js"() {
      init_MxDbEntity();
      init_McGiWorldDrawType();
      init_draw6();
      init_registerMxDbEntity();
      propertyDbKeys2 = ["points"];
      MxDbAnyLine = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.points = [];
        }
        getTypeName() {
          return "MxDbAnyLine";
        }
        create() {
          return new MxDbAnyLine();
        }
        worldDraw(t) {
          let e = t.getMxObject();
          const n = new THREE.Box3().setFromPoints(this.points);
          let r = new THREE.Vector3();
          if (n.getCenter(r), t.drawLines(this.points), t.getType() === McGiWorldDrawType_default.kSelectDraw) {
            const i = new THREE.Vector3();
            n.getSize(i), i.addScalar(e.screenCoordLong2Doc(20));
            const o = i.x / 2, s = i.y / 2, y = { x: r.x - o, y: r.y - s }, x = { x: r.x + o, y: r.y - s }, d = { x: r.x + o, y: r.y + s }, p = { x: r.x - o, y: r.y + s };
            t.drawLine(y.x, y.y, x.x, x.y), t.drawLine(x.x, x.y, d.x, d.y), t.drawLine(d.x, d.y, p.x, p.y), t.drawLine(p.x, p.y, y.x, y.y);
          }
        }
        setPoints(t) {
          return this.points = t, this;
        }
        getCenter() {
          const t = new THREE.Geometry();
          t.vertices = this.points;
          const e = new THREE.Vector3();
          return t.computeBoundingBox(), t.boundingBox.getCenter(e), e;
        }
        getGripPoints() {
          return [this.getCenter()];
        }
        moveGripPointsAt(t, e) {
          return t === 0 && this.points.forEach((t2) => {
            t2.add(e);
          }), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.dwgInHelp(t, propertyDbKeys2), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), this.dwgOutHelp(t, propertyDbKeys2), t;
        }
      };
      MxDbAnyLine.cmd = "Mx_AnyLine", MxDbAnyLine.draw = drawMxDbAnyLine, addRegisterMxDbEntity(MxDbAnyLine);
      MxDbAnyLine_default = MxDbAnyLine;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCloudLine/draw.js
  function drawMxDbCloudLine() {
    const t = new MrxDbgUiPrPoint(), o = MxFun_default.getCurrentDraw(), e = new McEdGetPointWorldDrawObject();
    t.setMessage("\n\u70B9\u51FB\u5F00\u542F\u7ED8\u5236\u4E91\u7EBF:"), t.go(() => {
      const n = MxFun_default.screenCoordLong2Doc(16);
      let r = t.value();
      const i = new MxDbCloudLine_default();
      i.setRadius(n), i.addPoint(r), e.setDraw((t2) => {
        r.distanceTo(t2) > n && (r = t2.clone(), i.addPoint(t2, true)), e.drawCustomEntity(i);
      }), t.setUserDraw(e), t.setMessage("\n\u518D\u6B21\u70B9\u51FB\u7ED3\u675F\u7ED8\u5236\u4E91\u7EBF:"), t.go(() => {
        o.addMxEntity(i);
      });
    });
  }
  var init_draw7 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbCloudLine/draw.js"() {
      init_MxDbCloudLine();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCloudLine/index.js
  var MxDbCloudLine_exports = {};
  __export(MxDbCloudLine_exports, {
    default: () => MxDbCloudLine_default
  });
  var propertyDbKeys3, MxDbCloudLine, MxDbCloudLine_default;
  var init_MxDbCloudLine = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbCloudLine/index.js"() {
      init_MxDbEntity();
      init_McGiWorldDrawType();
      init_MxType2();
      init_draw7();
      init_registerMxDbEntity();
      propertyDbKeys3 = ["points", "radius"];
      MxDbCloudLine = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.points = [], this.radius = 16, this.cachePoint = null;
        }
        getTypeName() {
          return "MxDbCloudLine";
        }
        create() {
          return new MxDbCloudLine();
        }
        setRadius(t) {
          this.radius = t;
        }
        getRadius() {
          return this.radius;
        }
        getCachePoint() {
          return this.cachePoint;
        }
        clacNewArcDiameterPoint(t) {
          if (this.points.length == 0)
            return t;
          let e = this.points[this.points.length - 1];
          const n = 2 * this.radius, i = e.distanceTo(t);
          if (i < n)
            return null;
          const r = n * (t.x - e.x) / i + e.x, o = n * (t.y - e.y) / i + e.y;
          return new THREE.Vector3(r, o, e.z);
        }
        createCloudArcCurvePoints(t, e, n) {
          const i = new THREE.Vector3((t.x + e.x) / 2, (t.y + e.y) / 2, 0);
          n || (n = i.distanceTo(t));
          const { startAngle: r, endAngle: o } = function(t2, e2, n2) {
            const i2 = 2 * Math.PI / 360;
            return { startAngle: 180 * Math.atan2(e2.y - t2.y, e2.x - t2.x) / Math.PI * i2, endAngle: 180 * Math.atan2(n2.y - t2.y, n2.x - t2.x) / Math.PI * i2 };
          }(i, t, e);
          return new THREE.ArcCurve(i.x, i.y, n, r, o, true).getPoints(10);
        }
        addPoint(t, e) {
          let n = this.clacNewArcDiameterPoint(t);
          n && (this.points.push(n), this.cachePoint = null, e && (this.cachePoint = this.reCalculateDrawGeometryPoint()));
        }
        addLine(t, e) {
          this.addPoint(t);
          const n = 2 * this.radius;
          let i = this.points[this.points.length - 1], r = i.distanceTo(e);
          const o = Math.round(r / n);
          for (let t2 = 0; t2 < o; t2++) {
            r = i.distanceTo(e);
            const t3 = n * (e.x - i.x) / r + i.x, o2 = n * (e.y - i.y) / r + i.y;
            let s = new THREE.Vector3(t3, o2, e.z);
            this.addPoint(s), i = s;
          }
          return this.points[this.points.length - 1];
        }
        reCalculateDrawGeometryPoint() {
          if (this.points.length < 2)
            return null;
          let t = this.points[0], e = this.points.length, n = [];
          for (let i = 1; i < e; i++) {
            let e2 = this.points[i];
            this.createCloudArcCurvePoints(t, e2).forEach((t2) => {
              n.push(new THREE.Vector3(t2.x, t2.y, 0));
            }), t = e2;
          }
          return n;
        }
        worldDraw(t) {
          if (this.cachePoint || (this.cachePoint = this.reCalculateDrawGeometryPoint()), this.cachePoint)
            if (t.getType() === McGiWorldDrawType_default.kSelectDraw) {
              let e = new THREE.Geometry();
              this.cachePoint.forEach((t2) => {
                e.vertices.push(new THREE.Vector3(t2.x, t2.y, 0));
              }), e.computeBoundingBox();
              const n = new THREE.Vector3();
              e.boundingBox.getSize(n);
              let i = new THREE.Vector3();
              e.boundingBox.getCenter(i);
              const r = n.x / 2, o = n.y / 2, s = { x: i.x - r, y: i.y - o }, a = { x: i.x + r, y: i.y - o }, c = { x: i.x + r, y: i.y + o }, h = { x: i.x - r, y: i.y + o };
              t.drawLine(s.x, s.y, a.x, a.y), t.drawLine(a.x, a.y, c.x, c.y), t.drawLine(c.x, c.y, h.x, h.y), t.drawLine(h.x, h.y, s.x, s.y);
            } else
              t.drawLines(this.cachePoint);
        }
        getCenter() {
          const t = new THREE.Geometry();
          t.vertices = this.points;
          let e = new THREE.Vector3();
          return t.computeBoundingBox(), t.boundingBox.getCenter(e), e;
        }
        getGripPoints() {
          return [this.getCenter()];
        }
        moveGripPointsAt(t, e) {
          return this.points.forEach((t2) => {
            t2.add(e);
          }), this.cachePoint = null, true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.dwgInHelp(t, propertyDbKeys3), this.cachePoint = null, true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), this.dwgOutHelp(t, propertyDbKeys3), t.type === MxType_default.MxCloneType.kSaveDwgClone && this.dwgOutHelp(t, ["cachePoint"]), t;
        }
      };
      MxDbCloudLine.isRegister = false, MxDbCloudLine.cmd = "Mx_CloudLine", MxDbCloudLine.draw = drawMxDbCloudLine, addRegisterMxDbEntity(MxDbCloudLine);
      MxDbCloudLine_default = MxDbCloudLine;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadComment/draw.js
  function drawMxDbLeadComment() {
    const t = new MrxDbgUiPrPoint();
    t.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), t.go((e) => {
      if (e != 0)
        return;
      const o = t.value();
      let n = new MxDbLeadComment_default();
      n.point1 = o.clone(), n.textHeight = MxFun_default.screenCoordLong2Doc(50);
      let r = prompt("\u8BF7\u8F93\u5165\u6587\u5B57\u6279\u6CE8", "\u6279\u6CE8");
      if (!r)
        return;
      n.text = r, n.textWidth = MxFun_default.screenCoordLong2Doc(10 * r.length), n.fixedSize = true, n.fixedSize && (n.textHeight = 50, n.textWidth = 50 * r.length);
      const i = new McEdGetPointWorldDrawObject();
      i.setDraw((t2, e2) => {
        n.point2 = t2, e2.drawCustomEntity(n);
      }), t.setBasePt(o), t.setUseBasePt(true), t.setUserDraw(i), t.setMessage("\n\u6307\u5B9A\u7B2C\u4E8C\u70B9:"), t.go((e2) => {
        if (e2 != 0)
          return void console.log(e2);
        const o2 = t.value();
        n.point2 = o2, MxFun_default.addToCurrentSpace(n);
      });
    });
  }
  var init_draw8 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadComment/draw.js"() {
      init_MxDbLeadComment();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadComment/index.js
  var MxDbLeadComment_exports = {};
  __export(MxDbLeadComment_exports, {
    default: () => MxDbLeadComment_default
  });
  var MxDbLeadComment, MxDbLeadComment_default;
  var init_MxDbLeadComment = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbLeadComment/index.js"() {
      init_registerMxDbEntity();
      init_MxDbEntity();
      init_MxThreeJS2();
      init_draw8();
      MxDbLeadComment = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.text = "", this.textHeight = 20, this.textWidth = 0, this.fixedSize = false;
        }
        getTypeName() {
          return "MxDbLeadComment";
        }
        create() {
          return new MxDbLeadComment();
        }
        worldDraw(t) {
          if (t.drawLine(this.point1, this.point2), this.text.length > 0) {
            const e = new THREE.Vector3();
            let i = this.textHeight, n = this.textWidth, o = t.getMxObject();
            this.fixedSize && (i = o.screenCoordLong2Doc(i), n = o.screenCoordLong2Doc(n));
            let h = MxThreeJS_default.clacTextSpriteSize(this.text, i, n);
            e.x = this.point2.x + 0.5 * h.textwidth, e.y = this.point2.y + 0.5 * h.allTextHeight, t.drawText(this.text, i, 0, e, n);
            const s = new THREE.Vector3();
            s.x = this.point2.x + h.textwidth, s.y = this.point2.y, t.drawLine(s, this.point2);
          }
        }
        getGripPoints() {
          let t = [];
          return t.push(this.point1), t.push(this.point2), t;
        }
        moveGripPointsAt(t, e) {
          return t == 0 ? this.point1.add(e) : t == 1 && this.point2.add(e), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.point1.copy(t.point1), this.point2.copy(t.point2), this.text = t.text.substr(0), this.textHeight = t.textHeight, t.textWidth && (this.textWidth = t.textWidth), this.fixedSize = t.fixedSize, true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.point1 = this.point1, t.point2 = this.point2, t.textHeight = this.textHeight, t.text = this.text, t.textWidth = this.textWidth, t.fixedSize = this.fixedSize, t;
        }
        onViewChange() {
          return !!this.fixedSize && (this.setNeedUpdateDisplay(false), true);
        }
      };
      MxDbLeadComment.cmd = "Mx_Comment", MxDbLeadComment.draw = drawMxDbLeadComment, addRegisterMxDbEntity(MxDbLeadComment);
      MxDbLeadComment_default = MxDbLeadComment;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRectBoxLeadComment/draw.js
  function drawMxDbRectBoxLeadComment() {
    const t = new MrxDbgUiPrPoint(), e = MxFun_default.getCurrentDraw(), r = new McEdGetPointWorldDrawObject(), o = new MxDbRectBoxLeadComment_default();
    o.setLineWidth(3), o.setLineWidthByPixels(true), t.setMessage("\n\u4E91\u7EBF\u6846\u8D77\u59CB\u70B9:"), t.go((n) => {
      o.radius = MxFun_default.screenCoordLong2Doc(8), n == MrxDbgUiPrBaseReturn_default.kOk && (o.point1 = t.value(), r.setDraw((t2) => {
        o.point2 = t2, r.drawCustomEntity(o);
      }), t.setUserDraw(r), t.setMessage("\n\u4E91\u7EBF\u6846\u7ED3\u675F\u70B9:"), t.go((n2) => {
        if (n2 != MrxDbgUiPrBaseReturn_default.kOk)
          return;
        o.point2 = t.value(), r.setDraw((t2) => {
          o.point3 = t2, r.drawCustomEntity(o);
        });
        let i = prompt("\u8BF7\u8F93\u5165\u6587\u5B57\u6279\u6CE8", "\u6279\u6CE8");
        i || (i = "\u9ED8\u8BA4\u6279\u6CE8\u6587\u5B57"), o.text = i, o.textWidth = MxFun_default.screenCoordLong2Doc(10 * i.length), o.textHeight = MxFun_default.screenCoordLong2Doc(5 * i.length), o.fixedSize = true, o.fixedSize && (o.textHeight = 20, o.textWidth = 20 * i.length), t.setMessage("\n\u5BA1\u56FE\u6807\u6CE8\u70B9:"), t.go((r2) => {
          r2 == MrxDbgUiPrBaseReturn_default.kOk && (o.point3 = t.value(), e.addMxEntity(o));
        });
      }));
    });
  }
  var init_draw9 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbRectBoxLeadComment/draw.js"() {
      init_MxDbRectBoxLeadComment();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrBaseReturn();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRectBoxLeadComment/index.js
  var MxDbRectBoxLeadComment_exports = {};
  __export(MxDbRectBoxLeadComment_exports, {
    default: () => MxDbRectBoxLeadComment_default
  });
  var MxDbRectBoxLeadComment, MxDbRectBoxLeadComment_default;
  var init_MxDbRectBoxLeadComment = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbRectBoxLeadComment/index.js"() {
      init_MxDbLeadComment();
      init_MxDbCloudLine();
      init_MxDbEntity();
      init_MxType2();
      init_registerMxDbEntity();
      init_draw9();
      MxDbRectBoxLeadComment = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.point3 = new THREE.Vector3(), this.text = "", this.textHeight = 20, this.radius = 16, this.textWidth = 0, this.fixedSize = false;
        }
        getTypeName() {
          return "MxDbRectBoxLeadComment";
        }
        create() {
          return new MxDbRectBoxLeadComment();
        }
        getCloudLine() {
          let t = new MxDbCloudLine_default();
          t.setRadius(this.radius);
          let e = this.point1.clone(), i = this.point2.clone();
          if (e.x > i.x) {
            let t2 = e.x;
            e.x = i.x, i.x = t2;
          }
          if (e.y > i.y) {
            let t2 = e.y;
            e.y = i.y, i.y = t2;
          }
          let o = new THREE.Vector3(e.x, i.y, e.z);
          o = t.addLine(e, o), i = new THREE.Vector3(i.x, o.y, i.z), i = t.addLine(o, i);
          let n = new THREE.Vector3(i.x, e.y, e.z);
          n = t.addLine(i, n);
          let d = e = t.addLine(n, e), s = e.distanceTo(this.point3);
          return s > o.distanceTo(this.point3) && (d = o, s = o.distanceTo(this.point3)), s > i.distanceTo(this.point3) && (d = i, s = i.distanceTo(this.point3)), s > n.distanceTo(this.point3) && (d = n, s = n.distanceTo(this.point3)), { cloudLine: t, pt1: e, pt2: o, pt3: i, pt4: n, leadPt: d };
        }
        worldDraw(t) {
          let e = this.getCloudLine();
          if (e.cloudLine.worldDraw(t), this.text.length > 0) {
            let i = e.leadPt, o = new MxDbLeadComment_default();
            o.point1 = i, o.point2 = this.point3, o.text = this.text, o.textHeight = this.textHeight, o.textWidth = this.textWidth, o.fixedSize = this.fixedSize, o.worldDraw(t);
          }
        }
        getGripPoints() {
          let t = [];
          return t.push(this.point1), t.push(this.point2), t.push(this.point3), t;
        }
        moveGripPointsAt(t, e) {
          return t == 0 ? this.point1.add(e) : t == 1 ? this.point2.add(e) : t == 2 && this.point3.add(e), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.point1.copy(t.point1), this.point2.copy(t.point2), this.point3.copy(t.point3), this.text = t.text.substr(0), this.textHeight = t.textHeight, this.radius = t.radius, t.textWidth && (this.textWidth = t.textWidth), this.fixedSize = t.fixedSize, true;
        }
        dwgOut(t) {
          if (this.onDwgOut(t), t.point1 = this.point1, t.point2 = this.point2, t.point3 = this.point3, t.textHeight = this.textHeight, t.text = this.text, t.radius = this.radius, t.textWidth = this.textWidth, t.fixedSize = this.fixedSize, t.type === MxType_default.MxCloneType.kSaveDwgClone) {
            let e = this.getCloudLine(), i = e.cloudLine.reCalculateDrawGeometryPoint();
            t.cachePoint = i || [], t.leadPt = e.leadPt;
          }
          return t;
        }
        onViewChange() {
          return !!this.fixedSize && (this.setNeedUpdateDisplay(false), true);
        }
      };
      MxDbRectBoxLeadComment.cmd = "Mx_CheckDraw", MxDbRectBoxLeadComment.draw = drawMxDbRectBoxLeadComment, addRegisterMxDbEntity(MxDbRectBoxLeadComment);
      MxDbRectBoxLeadComment_default = MxDbRectBoxLeadComment;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipse/draw.js
  function drawMxDbEllipse() {
    const t = new MrxDbgUiPrPoint(), r = MxFun_default.getCurrentDraw(), e = new McEdGetPointWorldDrawObject(), o = new MxDbEllipse_default();
    t.setMessage("\n\u70B9\u51FB\u5F00\u59CB\u7ED8\u5236\u692D\u5706:"), t.go(() => {
      o.point1 = t.value(), e.setDraw((t2) => {
        o.point2 = t2, e.drawCustomEntity(o);
      }), t.setUserDraw(e), t.setMessage("\n\u518D\u6B21\u70B9\u51FB\u7ED3\u675F\u7ED8\u5236\u692D\u5706:"), t.go(() => {
        r.addMxEntity(o);
      });
    });
  }
  var init_draw10 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipse/draw.js"() {
      init_MxDbEllipse();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipse/index.js
  var MxDbEllipse_exports = {};
  __export(MxDbEllipse_exports, {
    default: () => MxDbEllipse_default
  });
  var MxDbEllipse, MxDbEllipse_default;
  var init_MxDbEllipse = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipse/index.js"() {
      init_registerMxDbEntity();
      init_McGiWorldDrawType();
      init_MxDbEllipseShape();
      init_draw10();
      MxDbEllipse = class extends MxDbEllipseShape {
        constructor() {
          super(), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), this.isClosedToCenter = false, this.closed = false, this._propertyDbKeys = [...this._propertyDbKeys, "point1", "point2"];
        }
        getTypeName() {
          return "MxDbEllipse";
        }
        create() {
          return new MxDbEllipse();
        }
        setPoint1(t) {
          return this.point1 = t, this;
        }
        setPoint2(t) {
          return this.point2 = t, this;
        }
        worldDraw(t) {
          const { point1: i, point2: e } = this, s = i.clone().set(e.x, i.y, e.z), r = e.clone().set(i.x, e.y, i.z);
          this.xRadius = i.distanceTo(s) / 2, this.yRadius = i.distanceTo(r) / 2;
          const o = i.x > e.x, p = i.y > e.y, n = o ? i.x - this.xRadius : i.x + this.xRadius, l = p ? i.y - this.yRadius : i.y + this.yRadius;
          this.center = new THREE.Vector3(n, l, 0), this.drawEllipseShape(t), t.getType() === McGiWorldDrawType_default.kSelectDraw && t.drawLines([i, new THREE.Vector3(i.x, e.y), e, new THREE.Vector3(e.x, i.y), i]);
        }
        getGripPoints() {
          let t = new THREE.Vector3(0.5 * (this.point2.x + this.point1.x), 0.5 * (this.point2.y + this.point1.y), 0);
          return [this.point1, this.point2, t];
        }
        moveGripPointsAt(t, i) {
          return t === 0 ? this.point1.add(i) : t === 1 ? this.point2.add(i) : t === 2 && (this.point1.add(i), this.point2.add(i)), true;
        }
      };
      MxDbEllipse.cmd = "Mx_Ellipse", MxDbEllipse.draw = drawMxDbEllipse, addRegisterMxDbEntity(MxDbEllipse);
      MxDbEllipse_default = MxDbEllipse;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbText/draw.js
  function drawMxDbText() {
    return __awaiter5(this, void 0, void 0, function* () {
      const t = new MrxDbgUiPrPoint();
      t.setMessage("\n \u70B9\u53D6\u6587\u5B57\u63D2\u5165\u70B9:");
      let n = yield t.go();
      if (n == null)
        return;
      let e = prompt("\u8BF7\u8F93\u5165\u6587\u5B57");
      if (!e)
        return;
      let r = new MxDbText();
      r.position = n, r.height = MxFun_default.screenCoordLong2Doc(50), r.text = e;
      MxFun_default.addToCurrentSpace(r);
    });
  }
  var __awaiter5;
  var init_draw11 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbText/draw.js"() {
      init_MrxDbgUiPrPoint();
      init_MxFun();
      init_MxDbText();
      __awaiter5 = function(t, n, e, r) {
        return new (e || (e = Promise))(function(o, i) {
          function u(t2) {
            try {
              x(r.next(t2));
            } catch (t3) {
              i(t3);
            }
          }
          function a(t2) {
            try {
              x(r.throw(t2));
            } catch (t3) {
              i(t3);
            }
          }
          function x(t2) {
            var n2;
            t2.done ? o(t2.value) : (n2 = t2.value, n2 instanceof e ? n2 : new e(function(t3) {
              t3(n2);
            })).then(u, a);
          }
          x((r = r.apply(t, n || [])).next());
        });
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbText/SpriteText.js
  function getSpriteTextColor(t) {
    return t ? t instanceof THREE.Color ? t.getStyle() : typeof t == "number" ? new THREE.Color(t).getStyle() : t : "#fff";
  }
  function toCSSFont(t, e, i, o, s) {
    let h = document.createElement("span");
    return h.style.font = "1px serif", h.style.fontFamily = t, h.style.fontSize = `${e}px`, h.style.fontStyle = i, h.style.fontVariant = o, h.style.fontWeight = s, h.style.font;
  }
  function getSpriteTextClass() {
    if (!_SpriteText) {
      class t extends THREE.Sprite {
        constructor(t2) {
          super(new THREE.SpriteMaterial());
          const { text: e, textHeight: i, color: o, backgroundColor: s, padding: h, borderWidth: r, borderRadius: n, borderColor: a, strokeWidth: d, strokeColor: l, fontFace: g, fontSize: f, fontWeight: c, textAlign: _5, textShadowBlur: u, textShadowColor: x, textShadowOffsetX: S, textShadowOffsetY: C, angle: w, scale: p, underline: b, fontStyle: v, fontVariant: m } = t2 || {};
          this._text = `${e}`, this._textHeight = i || 10, this._color = o, this._backgroundColor = s, this._padding = h || 0, this._borderWidth = r || 0, this._borderRadius = n || 0, this._borderColor = a || "white", this._strokeWidth = d || 0, this._strokeColor = l || "white", this._fontFace = g || "Arial", this._fontSize = f || 90, this._fontWeight = (c === null || c === void 0 ? void 0 : c.toString()) || "normal", this._textAlign = _5 || "start", this._fontStyle = v || "normal", this._fontVariant = m || "normal", this._textShadowBlur = u || 0, this._textShadowColor = x, this._textShadowOffsetX = S || 0, this._textShadowOffsetY = C || 0, this._angle = w || 0, this._textScale = p || 1, this._underline = b || false, this._canvas = document.createElement("canvas"), this._genCanvas();
        }
        get text() {
          return this._text;
        }
        set text(t2) {
          this._text = t2, this._genCanvas();
        }
        get textHeight() {
          return this._textHeight;
        }
        set textHeight(t2) {
          this._textHeight = t2, this._genCanvas();
        }
        get color() {
          return this._color;
        }
        set color(t2) {
          this._color = t2, this._genCanvas();
        }
        get backgroundColor() {
          return this._backgroundColor;
        }
        set backgroundColor(t2) {
          this._backgroundColor = t2, this._genCanvas();
        }
        get padding() {
          return this._padding;
        }
        set padding(t2) {
          this._padding = t2, this._genCanvas();
        }
        get borderWidth() {
          return this._borderWidth;
        }
        set borderWidth(t2) {
          this._borderWidth = t2, this._genCanvas();
        }
        get borderRadius() {
          return this._borderRadius;
        }
        set borderRadius(t2) {
          this._borderRadius = t2, this._genCanvas();
        }
        get borderColor() {
          return this._borderColor;
        }
        set borderColor(t2) {
          this._borderColor = t2, this._genCanvas();
        }
        get fontFace() {
          return this._fontFace;
        }
        set fontFace(t2) {
          this._fontFace = t2, this._genCanvas();
        }
        get fontSize() {
          return this._fontSize;
        }
        set fontSize(t2) {
          this._fontSize = t2, this._genCanvas();
        }
        get fontWeight() {
          return this._fontWeight;
        }
        set fontWeight(t2) {
          this._fontWeight = t2, this._genCanvas();
        }
        get strokeWidth() {
          return this._strokeWidth;
        }
        set strokeWidth(t2) {
          this._strokeWidth = t2, this._genCanvas();
        }
        get strokeColor() {
          return this._strokeColor;
        }
        set strokeColor(t2) {
          this._strokeColor = t2, this._genCanvas();
        }
        get textAlign() {
          return this._textAlign;
        }
        set textAlign(t2) {
          this._textAlign = t2, this._genCanvas();
        }
        get textShadowBlur() {
          return this._textShadowBlur;
        }
        set textShadowBlur(t2) {
          this._textShadowBlur = t2, this._genCanvas();
        }
        get textShadowColor() {
          return this._textShadowColor;
        }
        set textShadowColor(t2) {
          this._textShadowColor = t2, this._genCanvas();
        }
        get textShadowOffsetX() {
          return this._textShadowOffsetX;
        }
        set textShadowOffsetX(t2) {
          this._textShadowOffsetX = t2, this._genCanvas();
        }
        get textShadowOffsetY() {
          return this._textShadowOffsetY;
        }
        set textShadowOffsetY(t2) {
          this._textShadowOffsetY = t2, this._genCanvas();
        }
        get angle() {
          return this._angle;
        }
        set angle(t2) {
          this._angle = t2, this._genCanvas();
        }
        get textScale() {
          return this._textScale;
        }
        set textScale(t2) {
          this._textScale = t2, this._genCanvas();
        }
        get underline() {
          return this._underline;
        }
        set underline(t2) {
          this._underline = t2, this._genCanvas();
        }
        get fontStyle() {
          return this._fontStyle;
        }
        set fontStyle(t2) {
          this._fontStyle = t2, this._genCanvas();
        }
        get fontVariant() {
          return this._fontVariant;
        }
        set fontVariant(t2) {
          this._fontVariant = t2, this._genCanvas();
        }
        _genCanvas() {
          const t2 = this._canvas, e = t2.getContext("2d"), i = Array.isArray(this.borderWidth) ? this.borderWidth : [this.borderWidth, this.borderWidth], o = i.map((t3) => t3 * this.fontSize * 0.1), s = (Array.isArray(this.borderRadius) ? this.borderRadius : [this.borderRadius, this.borderRadius, this.borderRadius, this.borderRadius]).map((t3) => t3 * this.fontSize * 0.1), h = Array.isArray(this.padding) ? this.padding : [this.padding, this.padding], r = h.map((t3) => t3 * this.fontSize * 0.1), n = this.text.split("\n"), a = this.font;
          e.font = a;
          const d = Math.max(...n.map((t3) => e.measureText(t3).width)), l = 4 * this.strokeWidth + (this.underline ? this.fontSize / 15 * 4 : this.fontSize / 15), g = (this.fontSize + l) * n.length;
          if (t2.width = d + 2 * o[0] + 2 * r[0], t2.height = g + 2 * o[1] + 2 * r[1], this.borderWidth) {
            if (e.strokeStyle = getSpriteTextColor(this.borderColor), o[0]) {
              const i2 = o[0] / 2;
              e.lineWidth = o[0], e.beginPath(), e.moveTo(i2, s[0]), e.lineTo(i2, t2.height - s[3]), e.moveTo(t2.width - i2, s[1]), e.lineTo(t2.width - i2, t2.height - s[2]), e.stroke();
            }
            if (o[1]) {
              const i2 = o[1] / 2;
              e.lineWidth = o[1], e.beginPath(), e.moveTo(Math.max(o[0], s[0]), i2), e.lineTo(t2.width - Math.max(o[0], s[1]), i2), e.moveTo(Math.max(o[0], s[3]), t2.height - i2), e.lineTo(t2.width - Math.max(o[0], s[2]), t2.height - i2), e.stroke();
            }
            if (this.borderRadius) {
              const i2 = Math.max(...o), h2 = i2 / 2;
              e.lineWidth = i2, e.beginPath(), [!!s[0] && [s[0], h2, h2, s[0]], !!s[1] && [t2.width - s[1], t2.width - h2, h2, s[1]], !!s[2] && [t2.width - s[2], t2.width - h2, t2.height - h2, t2.height - s[2]], !!s[3] && [s[3], h2, t2.height - h2, t2.height - s[3]]].filter((t3) => t3).forEach((t3) => {
                const [i3, o2, s2, h3] = t3;
                e.moveTo(i3, s2), e.quadraticCurveTo(o2, s2, o2, h3);
              }), e.stroke();
            }
          }
          this.backgroundColor && (e.fillStyle = getSpriteTextColor(this.backgroundColor), this.borderRadius ? (e.beginPath(), e.moveTo(o[0], s[0]), [[o[0], s[0], t2.width - s[1], o[1], o[1], o[1]], [t2.width - o[0], t2.width - o[0], t2.width - o[0], o[1], s[1], t2.height - s[2]], [t2.width - o[0], t2.width - s[2], s[3], t2.height - o[1], t2.height - o[1], t2.height - o[1]], [o[0], o[0], o[0], t2.height - o[1], t2.height - s[3], s[0]]].forEach(([t3, i2, o2, s2, h2, r2]) => {
            e.quadraticCurveTo(t3, s2, i2, h2), e.lineTo(o2, r2);
          }), e.closePath(), e.fill()) : e.fillRect(o[0], o[1], t2.width - 2 * o[0], t2.height - 2 * o[1])), e.translate(o[0], o[1]), e.translate(r[0], r[1]), e.font = a, e.fillStyle = getSpriteTextColor(this.color), e.textBaseline = "bottom", e.shadowBlur = this.textShadowBlur, e.shadowColor = new THREE.Color(this.textShadowColor).getStyle(), e.shadowOffsetX = this.textShadowOffsetX, e.shadowOffsetY = this.textShadowOffsetY;
          const f = this.strokeWidth > 0;
          f && (e.lineWidth = this.strokeWidth * this.fontSize / 10, e.strokeStyle = getSpriteTextColor(this.strokeColor));
          const c = this.textAlign === "center", _5 = this.textAlign === "start" || this.textAlign === "left";
          n.forEach((t3, i2) => __awaiter6(this, void 0, void 0, function* () {
            let o2 = c ? 2 : 1;
            const s2 = e.measureText(t3).width, h2 = _5 ? 0 : (d - s2) / o2, r2 = (i2 + 1) * (this.fontSize + l);
            f && e.strokeText(t3, h2, r2), e.fillText(t3, h2, r2), this.underline && e.fillRect(h2, r2, s2, this.fontSize / 15);
          })), this.material.map && this.material.map.dispose();
          const u = this.material.map = new THREE.Texture(t2);
          u.minFilter = THREE.LinearFilter, u.needsUpdate = true;
          const x = this.textHeight * n.length + 2 * i[1] + 2 * h[1], S = x * t2.width / t2.height;
          this.scale.set(S, x, this.scale.z), this.material.rotation = this.angle, this.scale.applyMatrix4(new THREE.Matrix4().makeScale(this.textScale, this.textScale, 1));
        }
        clone() {
          return new (0, this.constructor)(this.text, this.textHeight, this.color).copy(this);
        }
        copy(t2) {
          return THREE.Sprite.prototype.copy.call(this, t2), this.color = t2.color, this.backgroundColor = t2.backgroundColor, this.padding = t2.padding, this.borderWidth = t2.borderWidth, this.borderColor = t2.borderColor, this.fontFace = t2.fontFace, this.fontSize = t2.fontSize, this.fontWeight = t2.fontWeight, this.strokeWidth = t2.strokeWidth, this.strokeColor = t2.strokeColor, this.textAlign = t2.textAlign, this.textShadowBlur = t2.textShadowBlur, this.textShadowColor = t2.textShadowColor, this.textShadowOffsetX = t2.textShadowOffsetX, this.textShadowOffsetY = t2.textShadowOffsetY, this.angle = t2.angle, this.textScale = t2.textScale, this;
        }
        get font() {
          return toCSSFont(this.fontFace, this.fontSize, this.fontStyle, this.fontVariant, this.fontWeight);
        }
        checkFontFace() {
          try {
            const { fontFace: t2 } = this;
            return document.fonts.check(t2);
          } catch (t2) {
          }
          return true;
        }
        loadFontFace() {
          return __awaiter6(this, void 0, void 0, function* () {
            try {
              const { fontFace: t2 } = this;
              yield document.fonts.load(t2);
            } catch (t2) {
            }
          });
        }
        dispose() {
          var t2;
          (t2 = this.material.map) === null || t2 === void 0 || t2.dispose(), this.material.dispose(), this.geometry.dispose(), this.dispatchEvent({ type: "dispose" });
        }
      }
      _SpriteText = t;
    }
    return _SpriteText;
  }
  var __awaiter6, _SpriteText;
  var init_SpriteText = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbText/SpriteText.js"() {
      __awaiter6 = function(t, e, i, o) {
        return new (i || (i = Promise))(function(s, h) {
          function r(t2) {
            try {
              a(o.next(t2));
            } catch (t3) {
              h(t3);
            }
          }
          function n(t2) {
            try {
              a(o.throw(t2));
            } catch (t3) {
              h(t3);
            }
          }
          function a(t2) {
            var e2;
            t2.done ? s(t2.value) : (e2 = t2.value, e2 instanceof i ? e2 : new i(function(t3) {
              t3(e2);
            })).then(r, n);
          }
          a((o = o.apply(t, e || [])).next());
        });
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbText/MxDbText.js
  var propertyDbKeys4, MxDbText;
  var init_MxDbText = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbText/MxDbText.js"() {
      init_McGiWorldDrawType();
      init_MxDbEntity();
      init_MxType2();
      init_draw11();
      init_SpriteText();
      propertyDbKeys4 = ["text", "position", "height", "backgroundColor", "padding", "borderWidth", "borderRadius", "borderColor", "fontFace", "fontSize", "fontWeight", "strokeWidth", "strokeColor", "angle", "textAlign", "textShadowBlur", "textShadowColor", "textShadowOffsetX", "textShadowOffsetY", "scale", "underline"];
      MxDbText = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.position = new THREE.Vector3(), this._text = "", this._height = 16, this._angle = 0, this._scale = 1, this._underline = false;
        }
        setPosition(t) {
          return this.position = t, this;
        }
        get text() {
          return this.spriteText ? this.spriteText.text : this._text;
        }
        set text(t) {
          this.spriteText ? this.spriteText.text = t : this._text = t;
        }
        setText(t) {
          return this.text = t, this;
        }
        get height() {
          return this.spriteText ? this.spriteText.textHeight : this._height;
        }
        set height(t) {
          this.spriteText ? this.spriteText.textHeight = t : this._height = t;
        }
        setHeight(t) {
          return this.height = t, this;
        }
        get backgroundColor() {
          return this.spriteText ? this.spriteText.backgroundColor : this._backgroundColor;
        }
        set backgroundColor(t) {
          this.spriteText ? this.spriteText.backgroundColor = t : this._backgroundColor = t;
        }
        setBackgroundColor(t) {
          return this.backgroundColor = t, this;
        }
        get padding() {
          return this.spriteText ? this.spriteText.padding : this._padding;
        }
        set padding(t) {
          this.spriteText ? this.spriteText.padding = t : this._padding = t;
        }
        setPadding(t) {
          return this.padding = t, this;
        }
        get borderWidth() {
          return this.spriteText ? this.spriteText.borderWidth : this._borderWidth;
        }
        set borderWidth(t) {
          this.spriteText ? this.spriteText.borderWidth = t : this._borderWidth = t;
        }
        setBorderWidth(t) {
          return this.borderWidth = t, this;
        }
        get borderRadius() {
          return this.spriteText ? this.spriteText.borderRadius : this._borderRadius;
        }
        set borderRadius(t) {
          this.spriteText ? this.spriteText.borderRadius = t : this._borderRadius = t;
        }
        setBorderRadius(t) {
          return this.borderRadius = t, this;
        }
        get borderColor() {
          return this.spriteText ? this.spriteText.borderColor : this._borderColor;
        }
        set borderColor(t) {
          this.spriteText ? this.spriteText.borderColor = t : this._borderColor = t;
        }
        setBorderColor(t) {
          return this.borderColor = t, this;
        }
        get fontFace() {
          return this.spriteText ? this.spriteText.fontFace : this._fontFace;
        }
        set fontFace(t) {
          this.spriteText ? this.spriteText.fontFace = t : this._fontFace = t;
        }
        setFontFace(t) {
          return this.fontFace = t, this;
        }
        get fontSize() {
          return this.spriteText ? this.spriteText.fontSize : this._fontSize;
        }
        set fontSize(t) {
          this.spriteText ? this.spriteText.fontSize = t : this._fontSize = t;
        }
        setFontSize(t) {
          return this.fontSize = t, this;
        }
        get fontWeight() {
          return this.spriteText ? this.spriteText.fontWeight : this._fontWeight;
        }
        set fontWeight(t) {
          this.spriteText ? this.spriteText.fontWeight = t : this._fontWeight = t;
        }
        setFontWeight(t) {
          return this.fontWeight = t, this;
        }
        get strokeWidth() {
          return this.spriteText ? this.spriteText.strokeWidth : this._strokeWidth;
        }
        set strokeWidth(t) {
          this.spriteText ? this.spriteText.strokeWidth = t : this._strokeWidth = t;
        }
        setStrokeWidth(t) {
          return this.strokeWidth = t, this;
        }
        get strokeColor() {
          return this.spriteText ? this.spriteText.strokeColor : this._strokeColor;
        }
        set strokeColor(t) {
          this.spriteText ? this.spriteText.strokeColor = t : this._strokeColor = t;
        }
        setStrokeColor(t) {
          return this.strokeColor = t, this;
        }
        get textAlign() {
          return this.spriteText ? this.spriteText.textAlign : this._textAlign;
        }
        set textAlign(t) {
          this.spriteText ? this.spriteText.textAlign = t : this._textAlign = t;
        }
        setTextAlign(t) {
          return this.textAlign = t, this;
        }
        get textShadowBlur() {
          return this.spriteText ? this.spriteText.textShadowBlur : this._textShadowBlur;
        }
        set textShadowBlur(t) {
          this.spriteText ? this.spriteText.textShadowBlur = t : this._textShadowBlur = t;
        }
        setTextShadowBlur(t) {
          return this.textShadowBlur = t, this;
        }
        get textShadowColor() {
          return this.spriteText ? this.spriteText.textShadowColor : this._textShadowColor;
        }
        set textShadowColor(t) {
          this.spriteText ? this.spriteText.textShadowColor = t : this._textShadowColor = t;
        }
        setTextShadowColor(t) {
          return this.textShadowColor = t, this;
        }
        get textShadowOffsetX() {
          return this.spriteText ? this.spriteText.textShadowOffsetX : this._textShadowOffsetX;
        }
        set textShadowOffsetX(t) {
          this.spriteText ? this.spriteText.textShadowOffsetX = t : this._textShadowOffsetX = t;
        }
        setTextShadowOffsetX(t) {
          return this.textShadowOffsetX = t, this;
        }
        get textShadowOffsetY() {
          return this.spriteText ? this.spriteText.textShadowOffsetY : this._textShadowOffsetY;
        }
        set textShadowOffsetY(t) {
          this.spriteText ? this.spriteText.textShadowOffsetY = t : this._textShadowOffsetY = t;
        }
        setTextShadowOffsetY(t) {
          return this.textShadowOffsetY = t, this;
        }
        get angle() {
          return this.spriteText ? this.spriteText.angle : this._angle;
        }
        set angle(t) {
          this.spriteText ? this.spriteText.angle = t : this._angle = t;
        }
        setAngle(t) {
          return this.angle = t, this;
        }
        get scale() {
          return this.spriteText ? this.spriteText.textScale : this._scale;
        }
        set scale(t) {
          this.spriteText ? this.spriteText.textScale = t : this._scale = t;
        }
        setScale(t) {
          return this.scale = t, this;
        }
        get underline() {
          return this.spriteText ? this.spriteText.underline : this._underline;
        }
        set underline(t) {
          this.spriteText ? this.spriteText.underline = t : this._underline = t;
        }
        setUnderline(t) {
          this.underline = t;
        }
        getTypeName() {
          return "MxDbText";
        }
        worldDraw(t) {
          if (this.text.length > 0) {
            t.getType() !== McGiWorldDrawType_default.kWorldDraw || this.spriteText || this.createSpriteText(), this.color !== this.spriteText.color && (this.spriteText.color = this.color), this.spriteText.material.setValues({ opacity: this.opacity, visible: this.visible });
            const { x: e, y: i, z: s } = this.position;
            this.spriteText.position.set(e, i, s), t.drawEntity(this.spriteText);
          }
        }
        createSpriteText() {
          const t = getSpriteTextClass(), { text: e, height: i, color: s, backgroundColor: r, padding: o, borderWidth: h, borderRadius: x, borderColor: n, strokeWidth: d, strokeColor: p, fontFace: a, fontSize: l, fontWeight: T, textAlign: g, textShadowBlur: u, textShadowColor: f, textShadowOffsetX: S, textShadowOffsetY: w, angle: c, scale: b, underline: C } = this;
          this.spriteText = new t({ text: e, textHeight: i, color: s, backgroundColor: r, padding: o, borderWidth: h, borderRadius: x, borderColor: n, strokeWidth: d, strokeColor: p, fontFace: a, fontSize: l, fontWeight: T, textAlign: g, textShadowBlur: u, textShadowColor: f, textShadowOffsetX: S, textShadowOffsetY: w, angle: c, scale: b, underline: C });
        }
        getGripPoints() {
          return [this.position];
        }
        moveGripPointsAt(t, e) {
          return t === 0 && this.position.add(e), true;
        }
        create() {
          return new MxDbText();
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.dwgInHelp(t, propertyDbKeys4), t.type === MxType_default.MxCloneType.kMxFileClone || t.type === MxType_default.MxCloneType.kSaveDwgClone ? this.createSpriteText() : this.spriteText = t.spriteText, true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), this.dwgOutHelp(t, propertyDbKeys4), t.type === MxType_default.MxCloneType.kMxFileClone || t.type === MxType_default.MxCloneType.kSaveDwgClone ? t.spriteText = void 0 : t.spriteText = this.spriteText, t;
        }
        getGeomExtents() {
          return new THREE.Box3().expandByObject(this.spriteText);
        }
        erase() {
          return super.erase(), this.spriteText && this.spriteText.dispose(), true;
        }
      };
      MxDbText.cmd = "Mx_Text", MxDbText.draw = drawMxDbText;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbText/index.js
  var MxDbText_exports = {};
  __export(MxDbText_exports, {
    default: () => MxDbText_default
  });
  var MxDbText_default;
  var init_MxDbText2 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbText/index.js"() {
      init_registerMxDbEntity();
      init_MxDbText();
      addRegisterMxDbEntity(MxDbText);
      MxDbText_default = MxDbText;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRegularPolygon/draw.js
  function drawMxDbRegularPolygon() {
    const r = new MrxDbgUiPrPoint(), t = MxFun_default.getCurrentDraw(), e = new McEdGetPointWorldDrawObject(), o = new MxDbRegularPolygon_default();
    r.setMessage("\n\u70B9\u51FB\u5F00\u59CB\u7ED8\u5236\u591A\u8FB9\u5F62:"), r.go(() => {
      let n = prompt("\u8BF7\u8F93\u5165\u591A\u8FB9\u5F62\u7684\u8FB9\u6570", "8");
      n && (o.sidesNumber = Number(n), o.centerPoint = r.value(), r.setUserDraw(e), e.setDraw((r2) => {
        o.otherPoint = r2, e.drawCustomEntity(o);
      }), r.setMessage("\n\u518D\u6B21\u70B9\u51FB\u7ED3\u675F\u7ED8\u5236\u591A\u8FB9\u5F62:"), r.go(() => {
        t.addMxEntity(o);
      }));
    });
  }
  var init_draw12 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbRegularPolygon/draw.js"() {
      init_MxDbRegularPolygon();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRegularPolygon/index.js
  var MxDbRegularPolygon_exports = {};
  __export(MxDbRegularPolygon_exports, {
    default: () => MxDbRegularPolygon_default
  });
  var MxDbRegularPolygon, MxDbRegularPolygon_default;
  var init_MxDbRegularPolygon = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbRegularPolygon/index.js"() {
      init_three();
      init_MxDbShape();
      init_registerMxDbEntity();
      init_draw12();
      MxDbRegularPolygon = class extends MxDbShape {
        constructor() {
          super(), this.centerPoint = new THREE.Vector3(), this.otherPoint = new THREE.Vector3(), this.sidesNumber = 5, this._propertyDbKeys = [...this._propertyDbKeys, "centerPoint", "otherPoint", "sidesNumber"];
        }
        getTypeName() {
          return "MxDbRegularPolygon";
        }
        worldDraw(t) {
          const e = computeRegularPolygonVertices(this.centerPoint, this.otherPoint, this.sidesNumber);
          this.closed = false, e.push(e[0]), this._draw(t, e), this._drawStoreLine(t, e);
        }
        getGripPoints() {
          return [this.centerPoint, this.otherPoint];
        }
        moveGripPointsAt(t, e) {
          return t === 0 ? (this.centerPoint.add(e), this.otherPoint.add(e)) : t === 1 && this.otherPoint.add(e), true;
        }
      };
      MxDbRegularPolygon.cmd = "Mx_RegularPolygon", MxDbRegularPolygon.draw = drawMxDbRegularPolygon, addRegisterMxDbEntity(MxDbRegularPolygon);
      MxDbRegularPolygon_default = MxDbRegularPolygon;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbSVGText/index.js
  var MxDbSVGText_exports = {};
  __export(MxDbSVGText_exports, {
    default: () => MxDbSVGText
  });
  var MxDbSVGText;
  var init_MxDbSVGText = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbSVGText/index.js"() {
      MxDbSVGText = class {
        constructor() {
          this.txtPos = new THREE.Vector3(), this.txt = "", this.txtHeight = 1, this.color = void 0, this._txtObject = null, this._txtAspectRatio = -1, this.move = false, this.drawConnectingLine = false, this._connectingLine = null, this.fontStyle = "", this.underline = false, this._underLine = null;
        }
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbSVG/draw.js
  function drawMxDbSVG() {
    return __awaiter7(this, void 0, void 0, function* () {
      const t = new MrxDbgUiPrPoint();
      t.setMessage("\n\u6307\u5B9A\u4E00\u70B9:");
      let e = yield t.go();
      if (!e)
        return;
      let n = new MxDbSVG_default(), r = prompt("\u8BF7\u8F93\u5165svg\u56FE\u7247\u7F51\u7EDC\u6216\u672C\u5730\u5730\u5740", "https://img.alicdn.com/imgextra/i2/O1CN01FF1t1g1Q3PDWpSm4b_!!6000000001920-55-tps-508-135.svg");
      if (!r)
        return;
      n.setSvgPath(r), n.setSvgPostion(e), n.svgReverse = true, n.svgMargin.x = 0.2, n.setSvgAlignmentRatio(new THREE.Vector2(0.5, -1)), n.setRenderOrder(100);
      n.setSvgSize(new THREE.Vector2(50, 0));
      let i = new MxDbSVGText();
      i.txt = "A1";
      i.txtPos = new THREE.Vector3(0, -30, 0), i.txtHeight = 30, n.addText(i), n.fixedSize = true, n.color = 65297, MxFun_default.addToCurrentSpace(n);
    });
  }
  var __awaiter7;
  var init_draw13 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbSVG/draw.js"() {
      init_MxDbSVG();
      init_MrxDbgUiPrPoint();
      init_MxDbSVGText();
      init_MxFun();
      __awaiter7 = function(t, e, n, r) {
        return new (n || (n = Promise))(function(i, o) {
          function a(t2) {
            try {
              s(r.next(t2));
            } catch (t3) {
              o(t3);
            }
          }
          function x(t2) {
            try {
              s(r.throw(t2));
            } catch (t3) {
              o(t3);
            }
          }
          function s(t2) {
            var e2;
            t2.done ? i(t2.value) : (e2 = t2.value, e2 instanceof n ? e2 : new n(function(t3) {
              t3(e2);
            })).then(a, x);
          }
          s((r = r.apply(t, e || [])).next());
        });
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbSVG/index.js
  var MxDbSVG_exports = {};
  __export(MxDbSVG_exports, {
    default: () => MxDbSVG_default
  });
  var __awaiter8, MxDbSVG, MxDbSVG_default;
  var init_MxDbSVG = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbSVG/index.js"() {
      init_registerMxDbEntity();
      init_McGiWorldDrawType();
      init_MxDbEntity();
      init_MxDbSVGText();
      init_MxFun();
      init_MxThreeJS2();
      init_MxType2();
      init_draw13();
      __awaiter8 = function(t, e, i, s) {
        return new (i || (i = Promise))(function(o, r) {
          function n(t2) {
            try {
              a(s.next(t2));
            } catch (t3) {
              r(t3);
            }
          }
          function g(t2) {
            try {
              a(s.throw(t2));
            } catch (t3) {
              r(t3);
            }
          }
          function a(t2) {
            var e2;
            t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof i ? e2 : new i(function(t3) {
              t3(e2);
            })).then(n, g);
          }
          a((s = s.apply(t, e || [])).next());
        });
      };
      MxDbSVG = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.svgPos = new THREE.Vector3(), this.svg = null, this.svgPath = "", this.svgSize = new THREE.Vector2(50, 50), this.svgAlignmentRatio = new THREE.Vector2(0, 0), this.svgRotate = 0, this.svgReverse = false, this.svgMirror = false, this.svgChildColor = [], this.svgMargin = new THREE.Vector2(0, 0), this.isSvgDirtyLocation = false, this.isLoadFromPath = true, this.aryText = [], this.svgBoxSize = null, this.fixedSize = false, this.useSvgColor = false;
        }
        setSvgChildColor(t) {
          if (this.svgChildColor = t, !this.useSvgColor && this.svg) {
            let t2 = new THREE.Color(this.getColor()), e = 0, i = this;
            this.svg.traverse(function(s) {
              s.material && (e < i.svgChildColor.length ? s.material.color = new THREE.Color(i.svgChildColor[e]) : s.material.color = t2, e++);
            }), this.setNeedUpdateDisplay(true);
          }
        }
        getSvgChildColor() {
          return this.svgChildColor;
        }
        calcVewSize(t) {
          let e = this.svgSize.x, i = this.svgSize.y;
          return i <= 0 && (i = this.svgBoxSize ? this.svgBoxSize.y / this.svgBoxSize.x * e : e), this.fixedSize && (e = t.screenCoordLong2Doc(e), i = t.screenCoordLong2Doc(i)), [e, i];
        }
        calcSvgDrawRect(t) {
          if (!t)
            return;
          this.calcSvgPosition(t);
          let [e, i] = this.calcVewSize(t), s = new THREE.Matrix4();
          s.makeScale(this.svgMirror ? -1 : 1, this.svgReverse ? -1 : 1, 1);
          let o = new THREE.Matrix4();
          o.makeRotationZ(this.svgRotate);
          let r = new THREE.Matrix4(), n = new THREE.Vector3(this.svgPos.x - e * this.svgAlignmentRatio.x, this.svgPos.y - i * this.svgAlignmentRatio.y, 0);
          r.makeTranslation(n.x, n.y, n.z), o.multiply(s), o.premultiply(r);
          let g = new THREE.Vector3(0, 0, 0), a = new THREE.Vector3(e, 0, 0), l = new THREE.Vector3(e, i, 0), x = new THREE.Vector3(0, i, 0);
          return g.applyMatrix4(o), a.applyMatrix4(o), l.applyMatrix4(o), x.applyMatrix4(o), { pt1: g, pt2: l, pt3: a, pt4: x, cenpt: l.clone().add(g.clone().sub(l).multiplyScalar(0.5)), sizew: e, sizeh: i };
        }
        worldDraw(t) {
          let e = t.getMxObject(), i = this.calcSvgDrawRect(e), s = i.pt1, o = i.pt2, r = i.pt3, n = i.pt4, g = i.cenpt, a = i.sizew, l = this;
          if (t.getType() != McGiWorldDrawType_default.kSelectDraw && this.aryText.forEach((i2, s2) => {
            if (i2.txt.length > 0) {
              let n2 = new THREE.Vector3(i2.txtPos.x, i2.txtPos.y, 0);
              this.fixedSize && (i2.txtPos.x > 0 ? n2.x = this.svgPos.x + e.screenCoordLong2Doc(i2.txtPos.x) : n2.x = this.svgPos.x - e.screenCoordLong2Doc(i2.txtPos.x), i2.txtPos.y > 0 ? n2.y = this.svgPos.y + e.screenCoordLong2Doc(i2.txtPos.y) : n2.y = this.svgPos.y - e.screenCoordLong2Doc(i2.txtPos.y));
              let x = void 0;
              i2.color && (x = t.getColor(), t.setColor(i2.color));
              let h = i2.txtHeight;
              l.fixedSize && (h = e.screenCoordLong2Doc(i2.txtHeight)), t.setXData({ type: "text", txt: i2.txt, index: s2 });
              let c = t.drawText(i2.txt, h, 0, n2, void 0, (t2) => {
                let e2 = "";
                return e2 = i2.fontStyle.length > 0 ? `${i2.fontStyle} ${t2}px Arial` : `normal ${t2}px Arial`;
              });
              if (t.getType() == McGiWorldDrawType_default.kWorldDraw && (i2._txtObject = c), i2.underline && i2._txtObject) {
                const e2 = new THREE.Box3();
                e2.expandByObject(i2._txtObject);
                let s3 = new THREE.Vector3(e2.min.x, e2.min.y + 0.1 * h, 0), n3 = new THREE.Vector3(e2.max.x, e2.min.y + 0.1 * h, 0);
                var o2 = new THREE.Geometry();
                let g2 = new THREE.LineBasicMaterial({ color: t.getColor(), transparent: true, depthTest: false });
                o2.vertices.push(s3, n3);
                var r2 = new THREE.Line(o2, g2);
                t.drawEntity(r2), t.getType() == McGiWorldDrawType_default.kWorldDraw && (i2._underLine = r2);
              }
              if (i2._txtAspectRatio = -1, x && t.setColor(x), i2.drawConnectingLine) {
                let e2 = g.clone().sub(n2);
                if (e2.length() > h + a) {
                  e2.normalize();
                  let s3 = g.clone().sub(e2.clone().multiplyScalar(a)), l2 = n2.clone().add(e2.clone().multiplyScalar(h));
                  o2 = new THREE.Geometry();
                  let x2 = new THREE.LineBasicMaterial({ color: t.getColor(), transparent: true, depthTest: false });
                  o2.vertices.push(s3, l2);
                  r2 = new THREE.Line(o2, x2);
                  t.setXData({ type: "line" }), t.drawEntity(r2), t.getType() == McGiWorldDrawType_default.kWorldDraw && (i2._connectingLine = r2);
                }
              }
            }
          }), t.getType() == 1) {
            if (this.svg)
              t.setXData({ type: "svg" }), t.drawEntity(this.svg);
            else if (this.svgPath.length > 0 && this.isLoadFromPath) {
              let i2 = this, s2 = t.getMxObject();
              MxThreeJS_default.loadSVG(this.svgPath, void 0, (o2) => {
                if (o2) {
                  let r2 = o2;
                  if (r2.boxSize)
                    i2.svgBoxSize = r2.boxSize.clone();
                  else {
                    let t2 = new THREE.Box3().setFromObject(o2);
                    i2.svgBoxSize || (i2.svgBoxSize = new THREE.Vector3()), i2.svgBoxSize.x = t2.max.x - t2.min.x, i2.svgBoxSize.y = t2.max.y - t2.min.y;
                  }
                  let [n2, g2] = i2.calcVewSize(e);
                  i2.svgBoxSize && (o2.scale.x = n2 / i2.svgBoxSize.x, o2.scale.y = g2 / i2.svgBoxSize.y), o2.scale.z = o2.scale.x, i2.svgReverse && (o2.scale.y *= -1), i2.svgMirror && (o2.scale.x *= -1), o2.rotateZ(i2.svgRotate), i2.isSvgDirtyLocation = true;
                  let a2 = new THREE.Color(t.getColor()), l2 = 0;
                  o2.traverse(function(t2) {
                    t2.material && (t2.material = t2.material.clone(), t2.material.transparent = true, t2.material.depthTest = false, i2.useSvgColor || (l2 < i2.svgChildColor.length ? t2.material.color = new THREE.Color(i2.svgChildColor[l2]) : t2.material.color = a2), l2++);
                  }), i2.svg = o2, i2.setNeedUpdateDisplay(), s2.updateDisplay();
                } else
                  console.log("mx LoadSVG:" + i2.svgPath + " failed");
                i2.isLoadFromPath = false;
              });
            }
            this.fixedSize || (t.drawSelectLine(s, o), t.drawSelectLine(r, n), t.drawSelectLine(s, r), t.drawSelectLine(r, o), t.drawSelectLine(o, n), t.drawSelectLine(n, s));
          } else
            t.drawLine(s, r), t.drawLine(r, o), t.drawLine(o, n), t.drawLine(n, s);
        }
        setSvgPath(t, e = false) {
          return __awaiter8(this, void 0, void 0, function* () {
            this.svgPath = t, this.svg = null, this.isLoadFromPath = true, this.svgBoxSize = null, e && (yield MxThreeJS_default.loadSVG(t));
          });
        }
        getSvgPath() {
          return this.svgPath;
        }
        setSvgPostion(t) {
          this.svgPos = t.clone(), this.isSvgDirtyLocation = true;
        }
        getSvgPostion() {
          return this.svgPos;
        }
        setSvgSize(t) {
          this.svgSize = t, this.isSvgDirtyLocation = true;
        }
        getSvgSize() {
          return this.svgSize;
        }
        setSvgAlignmentRatio(t) {
          this.svgAlignmentRatio = t, this.isSvgDirtyLocation = true;
        }
        getSvgAlignmentRatio() {
          return this.svgAlignmentRatio;
        }
        getText(t) {
          return t < this.aryText.length ? this.aryText[t] : null;
        }
        addText(t) {
          this.aryText.push(t);
        }
        getGripPoints() {
          let t = [];
          t.push(this.svgPos);
          let e = 0;
          for (; e < this.aryText.length; e++) {
            let i = this.aryText[e];
            if (i.move) {
              let e2 = new THREE.Vector3(i.txtPos.x, i.txtPos.y, 0);
              if (this.fixedSize) {
                let t2 = MxFun_default.getCurrentDraw();
                i.txtPos.x > 0 ? e2.x = this.svgPos.x + t2.screenCoordLong2Doc(i.txtPos.x) : e2.x = this.svgPos.x - t2.screenCoordLong2Doc(i.txtPos.x), i.txtPos.y > 0 ? e2.y = this.svgPos.y + t2.screenCoordLong2Doc(i.txtPos.y) : e2.y = this.svgPos.y - t2.screenCoordLong2Doc(i.txtPos.y);
              }
              t.push(e2);
            }
          }
          return t;
        }
        moveGripPointsAt(t, e) {
          if (t == 0)
            this.svgPos.add(e), this.fixedSize || this.aryText.forEach((t2) => {
              t2.txtPos.add(e);
            });
          else if (t - 1 >= 0 && t - 1 < this.aryText.length) {
            let i = this.aryText[t - 1];
            if (i.move)
              if (this.fixedSize) {
                let t2 = MxFun_default.getCurrentDraw();
                i.txtPos.x += t2.docCoordLong2Screen(e.x), i.txtPos.y += t2.docCoordLong2Screen(e.y);
              } else
                i.txtPos.add(e);
          }
          return this.isSvgDirtyLocation = true, true;
        }
        calcSvgPosition(t) {
          if (!this.svg || !this.isSvgDirtyLocation)
            return;
          this.isSvgDirtyLocation = false;
          let [e, i] = this.calcVewSize(t);
          this.svg.position.x = this.svgPos.x - e * this.svgAlignmentRatio.x - this.svgMargin.x * e, this.svg.position.y = this.svgPos.y - i * this.svgAlignmentRatio.y - this.svgMargin.y * i;
        }
        dwgIn(t) {
          this.onDwgIn(t), this.fixedSize = t.fixedSize, this.fixedSize ? this.svg = null : t.type == MxType_default.MxCloneType.kClone && t.svg && (this.svg = t.svg.clone()), this.svgPos.copy(t.svgPos), this.svgPath = t.svgPath.substr(0), this.svgSize.copy(t.svgSize), this.svgAlignmentRatio.copy(t.svgAlignmentRatio), this.isSvgDirtyLocation = true, this.svg || (this.isLoadFromPath = true), this.svgBoxSize = null;
          let e = t.txts;
          return this.aryText = [], e.forEach((t2) => {
            let e2 = new MxDbSVGText();
            e2.txt = t2.txt, e2.txtHeight = t2.txtHeight, e2.txtPos.copy(t2.txtPos), e2.move = t2.move, e2.drawConnectingLine = t2.drawConnectingLine, this.aryText.push(e2);
          }), this.svgRotate = t.svgRotate, this.useSvgColor = t.useSvgColor, this.svgReverse = t.svgReverse, this.svgMirror = t.svgMirror, this.svgMargin = t.svgMargin, t.svgChildColor ? this.svgChildColor = t.svgChildColor : this.svgChildColor = [], true;
        }
        dwgOut(t) {
          this.onDwgOut(t);
          let e, i = this.getMxObject();
          return t.type == MxType_default.MxCloneType.kClone && (t.svg = this.svg), t.svgPath = this.svgPath, t.svgPos = this.svgPos, t.svgSize = this.svgSize, t.svgAlignmentRatio = this.svgAlignmentRatio, t.txts = [], t.type == MxType_default.MxCloneType.kSaveDwgClone && i && (e = this.calcSvgDrawRect(i)), this.aryText.forEach((e2) => {
            let i2 = { txtPos: e2.txtPos, txt: e2.txt, txtHeight: e2.txtHeight, color: e2.color, _txtAspectRatio: e2._txtAspectRatio, move: e2.move, drawConnectingLine: e2.drawConnectingLine };
            t.type == MxType_default.MxCloneType.kSaveDwgClone && (e2._connectingLine && (i2.connectingLine = e2._connectingLine.geometry.vertice), e2._underLine && (i2._underLine = e2._underLine.geometry.vertice)), t.txts.push(i2);
          }), t.fixedSize = this.fixedSize, t.svgRotate = this.svgRotate, t.useSvgColor = this.useSvgColor, t.svgReverse = this.svgReverse, t.svgMirror = this.svgMirror, t.svgMargin = this.svgMargin, t.svgChildColor = this.svgChildColor, t.type == MxType_default.MxCloneType.kSaveDwgClone && (t.svgRect = e), t;
        }
        create() {
          return new MxDbSVG();
        }
        transformBy(t) {
          this.svgPos.applyMatrix4(t), this.isSvgDirtyLocation = true, this.fixedSize || this.aryText.forEach((e) => {
            e.txtPos.applyMatrix4(t);
          });
        }
        getTypeName() {
          return "MxDbSVG";
        }
        setColor(t) {
          if (super.setColor(t), this.svg) {
            let t2 = new THREE.Color(this.color);
            this.svg.traverse(function(e) {
              e.material && (e.material.color = t2);
            });
          }
          return this;
        }
        setSvg(t) {
          this.svg = t, this.isLoadFromPath = false, this.svgBoxSize = null;
        }
        calcSvgBoxSize(t) {
          if (!this.svgBoxSize)
            if (t.boxSize)
              this.svgBoxSize = t.boxSize.clone();
            else {
              let e = new THREE.Box3().setFromObject(t);
              this.svgBoxSize || (this.svgBoxSize = new THREE.Vector3()), this.svgBoxSize.x = e.max.x - e.min.x, this.svgBoxSize.y = e.max.y - e.min.y;
            }
        }
        reComputeSVG() {
          if (!this.svg)
            return;
          let t = this.getMxObject();
          if (!t)
            return;
          this.calcSvgBoxSize(this.svg);
          let [e, i] = this.calcVewSize(t);
          this.svgBoxSize && (this.svg.scale.x = e / this.svgBoxSize.x, this.svg.scale.y = i / this.svgBoxSize.y), this.svg.scale.z = this.svg.scale.x, this.svgReverse && (this.svg.scale.y *= -1), this.svgMirror && (this.svg.scale.x *= -1), this.isSvgDirtyLocation = true, this.calcSvgPosition(t);
        }
        onViewChange() {
          if (!this.fixedSize)
            return false;
          let t = this.getMxObject();
          if (t == null)
            return false;
          if (this.svg) {
            this.calcSvgBoxSize(this.svg);
            let [e2, i2] = this.calcVewSize(t);
            this.svgBoxSize && (this.svg.scale.x = e2 / this.svgBoxSize.x, this.svg.scale.y = i2 / this.svgBoxSize.y), this.svg.scale.z = this.svg.scale.x, this.svgReverse && (this.svg.scale.y *= -1), this.svgMirror && (this.svg.scale.x *= -1), this.isSvgDirtyLocation = true, this.calcSvgPosition(t);
          }
          let e = this.calcSvgDrawRect(t), i = e.cenpt, s = e.sizew, o = this;
          return this.aryText.forEach((e2) => {
            if (e2._txtObject && t) {
              let n = t.screenCoordLong2Doc(e2.txtHeight);
              if (n > 1e-5) {
                e2._txtAspectRatio <= 0 && (e2._txtAspectRatio = e2._txtObject.scale.x / e2._txtObject.scale.y), e2._txtObject.scale.set(e2._txtAspectRatio * n * 1.5, 1.5 * n, 1), e2.txtPos.x > 0 ? e2._txtObject.position.x = o.svgPos.x + t.screenCoordLong2Doc(e2.txtPos.x) : e2._txtObject.position.x = o.svgPos.x - t.screenCoordLong2Doc(e2.txtPos.x), e2.txtPos.y > 0 ? e2._txtObject.position.y = o.svgPos.y + t.screenCoordLong2Doc(e2.txtPos.y) : e2._txtObject.position.y = o.svgPos.y - t.screenCoordLong2Doc(e2.txtPos.y);
                let g = e2._txtObject.position;
                if (e2._txtObject.updateMatrix(), e2._underLine) {
                  const t2 = new THREE.Box3();
                  let i2 = e2._txtObject.parent;
                  e2._txtObject.parent = null, t2.expandByObject(e2._txtObject), e2._txtObject.parent = i2;
                  let s2 = new THREE.Vector3(t2.min.x, t2.min.y + 0.1 * n, 0), o2 = new THREE.Vector3(t2.max.x, t2.min.y + 0.1 * n, 0);
                  (r = new THREE.Geometry()).vertices.push(s2, o2), e2._underLine.geometry = r;
                }
                if (e2._connectingLine) {
                  let t2 = i.clone().sub(g);
                  t2.normalize();
                  let o2 = i.clone().sub(t2.clone().multiplyScalar(s)), a = g.clone().add(t2.clone().multiplyScalar(n));
                  var r;
                  (r = new THREE.Geometry()).vertices.push(o2, a), e2._connectingLine.geometry = r;
                }
              }
            }
          }), true;
        }
      };
      MxDbSVG.cmd = "Mx_ModelFixedSvg", MxDbSVG.draw = drawMxDbSVG, addRegisterMxDbEntity(MxDbSVG);
      MxDbSVG_default = MxDbSVG;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbImage/draw.js
  function drawMxDbImage() {
    const e = new MrxDbgUiPrPoint();
    e.setMessage("\n\u6307\u5B9A\u63D2\u5165\u70B9:");
    let r = MxFun_default.getCurrentDraw();
    e.go((t) => {
      if (t != 0)
        return;
      let n = MxFun_default.screenCoordLong2Doc(300), o = MxFun_default.screenCoordLong2Doc(200);
      const d = e.value();
      let i = MxFun_default.screenCoord2Doc(10, 10);
      d.z = i.z;
      let a = new MxDbImage_default();
      a.setRenderOrder(MxType_default.MxDefaultRenderOrder.kCADMeshRenderOrder - 1), a.setPoint1(d);
      let x = new THREE.Vector3(d.x + n, d.y + o, d.z);
      a.setPoint2(x);
      let M = prompt("\u8BF7\u586B\u5199\u56FE\u7247\u7F51\u7EDC\u5730\u5740", "https://cdn.pixabay.com/photo/2022/11/15/12/23/winter-7593872_960_720.jpg");
      M && (a.setImagePath(M), r.addMxEntity(a), a.addEvent("onStartGripEidt", () => (a.visible = false, a.setNeedUpdateDisplay(), { renderOrder: MxType_default.MxDefaultRenderOrder.kCADMeshRenderOrder - 1 })), a.addEvent("onEndGripEidt", () => {
        a.visible = true, a.setNeedUpdateDisplay();
      }));
    });
  }
  var init_draw14 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbImage/draw.js"() {
      init_MxDbImage();
      init_MrxDbgUiPrPoint();
      init_MxFun();
      init_MxType2();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbImage/index.js
  var MxDbImage_exports = {};
  __export(MxDbImage_exports, {
    default: () => MxDbImage_default
  });
  var MxDbImage, MxDbImage_default;
  var init_MxDbImage = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbImage/index.js"() {
      init_registerMxDbEntity();
      init_MxDbEntity();
      init_MxFun();
      init_MxType2();
      init_draw14();
      MxDbImage = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.pt1 = new THREE.Vector3(), this.pt2 = new THREE.Vector3(), this.imagePath = "", this.isLoadMaterialFromPath = true, this.material = null, this.angle = 0;
        }
        getTypeName() {
          return "MxDbImage";
        }
        getAngle() {
          return this.angle;
        }
        setAngle(t) {
          this.angle = t;
        }
        worldDraw(t) {
          let e = new THREE.Vector3(this.pt1.x, this.pt2.y), i = new THREE.Vector3(this.pt2.x, this.pt1.y);
          if (Math.abs(this.angle) > 1e-5) {
            let e2 = new THREE.Vector3(0.5 * (this.pt1.x - this.pt2.x) + this.pt2.x, 0.5 * (this.pt1.y - this.pt2.y) + this.pt2.y), i2 = new THREE.Matrix4();
            i2.makeRotationZ(this.angle);
            let a = new THREE.Matrix4().makeTranslation(e2.x, e2.y, e2.z).multiply(i2).multiply(new THREE.Matrix4().makeTranslation(-e2.x, -e2.y, -e2.z));
            t.setMatrix(a);
          }
          if (t.getType() == 1) {
            if (t.drawSelectLine(this.pt1, e), t.drawSelectLine(e, this.pt2), t.drawSelectLine(this.pt2, i), t.drawSelectLine(i, this.pt1), this.material) {
              let e2 = Math.abs(this.pt1.x - this.pt2.x), i2 = Math.abs(this.pt1.y - this.pt2.y), a = new THREE.PlaneGeometry(e2, i2), s = Math.min(this.pt1.x, this.pt2.x), h = Math.min(this.pt1.y, this.pt2.y);
              for (let t2 = 0; t2 < a.vertices.length; t2++)
                a.vertices[t2].x += s + 0.5 * e2, a.vertices[t2].y += h + 0.5 * i2, a.vertices[t2].z = 0;
              let r = new THREE.Mesh(a, this.material);
              r.material.depthTest = false, t.drawEntity(r);
            } else if (this.imagePath.length > 0 && this.isLoadMaterialFromPath) {
              let e2 = this, i2 = t.getMxObject();
              MxFun_default.loadImageMaterial(this.imagePath, (t2) => {
                this.isLoadMaterialFromPath = false, t2 && (e2.setMaterial(t2), e2.setNeedUpdateDisplay(), i2.updateDisplay());
              });
            }
          } else if (this.material) {
            let e2 = Math.abs(this.pt1.x - this.pt2.x), i2 = Math.abs(this.pt1.y - this.pt2.y), a = new THREE.PlaneGeometry(e2, i2), s = Math.min(this.pt1.x, this.pt2.x), h = Math.min(this.pt1.y, this.pt2.y);
            for (let t2 = 0; t2 < a.vertices.length; t2++)
              a.vertices[t2].x += s + 0.5 * e2, a.vertices[t2].y += h + 0.5 * i2, a.vertices[t2].z = 0;
            let r = new THREE.Mesh(a, this.material);
            r.material.depthTest = false, t.drawEntity(r);
          } else
            t.drawLine(this.pt1, e), t.drawLine(e, this.pt2), t.drawLine(this.pt2, i), t.drawLine(i, this.pt1);
          t.setMatrix(null);
        }
        setImagePath(t) {
          this.imagePath = t, this.isLoadMaterialFromPath = true, this.material = null;
        }
        getImagePath() {
          return this.imagePath;
        }
        setMaterial(t) {
          this.material = t;
        }
        loadMaterial(t) {
          t && (this.imagePath = t), this.isLoadMaterialFromPath = false, this.material = null;
          let e = this;
          MxFun_default.loadImageMaterial(this.imagePath, (t2) => {
            this.isLoadMaterialFromPath = false, e.setMaterial(t2);
          });
        }
        setPoint1(t) {
          this.pt1 = t;
        }
        getPoint1() {
          return this.pt1;
        }
        setPoint2(t) {
          this.pt2 = t;
        }
        getPoint2() {
          return this.pt2;
        }
        getGripPoints() {
          let t = [];
          t.push(this.pt1), t.push(this.pt2);
          let e = new THREE.Vector3(this.pt1.x + 0.5 * (this.pt2.x - this.pt1.x), this.pt1.y + 0.5 * (this.pt2.y - this.pt1.y));
          return t.push(e), t;
        }
        moveGripPointsAt(t, e) {
          return t == 0 ? this.pt1.add(e) : t == 1 ? this.pt2.add(e) : t == 2 && (this.pt1.add(e), this.pt2.add(e)), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.pt1.copy(t.pt1), this.pt2.copy(t.pt2), this.imagePath = t.imagePath.substr(0), this.isLoadMaterialFromPath = true, t.angle && (this.angle = t.angle), t.material && (this.material = t.material), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.pt1 = this.pt1, t.pt2 = this.pt2, t.imagePath = this.imagePath, t.angle = this.angle, t.type == MxType_default.MxCloneType.kDragClone && (t.material = this.material), t;
        }
        create() {
          return new MxDbImage();
        }
      };
      MxDbImage.cmd = "Mx_DrawImage", MxDbImage.draw = drawMxDbImage, addRegisterMxDbEntity(MxDbImage);
      MxDbImage_default = MxDbImage;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRect/draw.js
  function drawMxDbRect() {
    return __awaiter9(this, void 0, void 0, function* () {
      const t = new MrxDbgUiPrPoint();
      t.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:");
      let e = yield t.go();
      if (!e)
        return;
      let n = new MxDbRect_default();
      n.pt1 = e;
      const r = new McEdGetPointWorldDrawObject();
      r.setDraw((t2) => {
        n.pt2 = t2, r.drawCustomEntity(n);
      }), t.setBasePt(e), t.setUseBasePt(true), t.setUserDraw(r), t.setMessage("\n\u6307\u5B9A\u7B2C\u4E8C\u70B9:"), (yield t.go()) && (n.pt2 = t.value(), MxFun_default.getCurrentDraw().addMxEntity(n));
    });
  }
  var __awaiter9;
  var init_draw15 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbRect/draw.js"() {
      init_MxDbRect();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
      __awaiter9 = function(t, e, n, r) {
        return new (n || (n = Promise))(function(o, i) {
          function a(t2) {
            try {
              s(r.next(t2));
            } catch (t3) {
              i(t3);
            }
          }
          function c(t2) {
            try {
              s(r.throw(t2));
            } catch (t3) {
              i(t3);
            }
          }
          function s(t2) {
            var e2;
            t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof n ? e2 : new n(function(t3) {
              t3(e2);
            })).then(a, c);
          }
          s((r = r.apply(t, e || [])).next());
        });
      };
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRect/index.js
  var MxDbRect_exports = {};
  __export(MxDbRect_exports, {
    default: () => MxDbRect_default
  });
  var MxDbRect, MxDbRect_default;
  var init_MxDbRect = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbRect/index.js"() {
      init_MxDbEntity();
      init_three();
      init_MxFun();
      init_McGiWorldDrawType();
      init_registerMxDbEntity();
      init_draw15();
      MxDbRect = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.cornerRadius = [], this.pt1 = new THREE.Vector3(), this.pt2 = new THREE.Vector3(), this.isSolidColorFill = false, this.isLoadMaterialFromPath = true, this.material = null;
        }
        worldDraw(t) {
          let e = computeRectPoints(this.pt1, this.pt2);
          if (this.cornerRadius.length > 0 && (e = getToGenerateRoundedCorners(e, this.cornerRadius)), t.getType() != McGiWorldDrawType_default.kWorldDraw)
            return e.push(e[0]), void t.drawLines(e);
          const i = { transparent: true, depthTest: false, opacity: this.opacity, visible: this.visible };
          if (this.isSolidColorFill) {
            let r;
            e = e.map(({ x: t2, y: e2 }) => new THREE.Vector2(t2, e2)), r = new THREE.ShapeGeometry(new THREE.Shape(e));
            let a = new THREE.MeshBasicMaterial(Object.assign({ color: this.filter ? this.filter._getFilterColor(this.color, this.opacity) : new THREE.Color(this.color) }, i)), s = new THREE.Mesh(r, a);
            t.drawEntity(s);
          } else if (this.fillImageSrc) {
            if (this.material) {
              e = e.map(({ x: t2, y: e2 }) => new THREE.Vector2(t2, e2));
              let r = this.material, a = new THREE.ShapeGeometry(new THREE.Shape(e));
              if (a = repairGeometryFaceVertexUvs(a), this.filter) {
                const t2 = r.map;
                this.fillImageParam && (this.fillImageParam.center && (t2.center = this.fillImageParam.center), this.fillImageParam.offset && (t2.offset = this.fillImageParam.offset), this.fillImageParam.repeat && (t2.repeat = this.fillImageParam.repeat), this.fillImageParam.rotation && (t2.rotation = this.fillImageParam.rotation));
                const e2 = this.filter._getFilterShaderData(t2);
                r = new THREE.ShaderMaterial(Object.assign(Object.assign({}, e2), i));
              }
              r.depthTest = false, r.transparent = true, r.opacity = this.opacity, r.visible = this.visible;
              let s = new THREE.Mesh(a, r);
              t.drawEntity(s);
            } else if (this.fillImageSrc.length > 0 && this.isLoadMaterialFromPath) {
              let t2 = this;
              MxFun_default.loadImageMaterial(this.fillImageSrc, (e2) => {
                this.isLoadMaterialFromPath = false, e2 && (t2.material = e2, t2.setNeedUpdateDisplay(), MxFun_default.updateDisplay());
              });
            }
          } else {
            let r = new THREE.BufferGeometry().setFromPoints(e), a = new THREE.LineBasicMaterial(Object.assign({ color: this.getColor() }, i)), s = new THREE.LineLoop(r, a);
            t.drawEntity(s);
          }
        }
        getGripPoints() {
          let t = [];
          t.push(this.pt1);
          const e = new THREE.Line3(this.pt1, this.pt2);
          let i = new THREE.Vector3();
          return e.getCenter(i), t.push(i), t.push(this.pt2), t;
        }
        moveGripPointsAt(t, e) {
          return t == 0 ? this.pt1.add(e) : t == 1 ? (this.pt1.add(e), this.pt2.add(e)) : t == 2 && this.pt2.add(e), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.pt1.copy(t.pt1), this.pt2.copy(t.pt2), this.isSolidColorFill = t.isSolidColorFill, this.fillImageSrc = t.fillImageSrc, this.fillImageParam = t.fillImageParam, this.cornerRadius = t.cornerRadius, this.filter = t.filter, this.isLoadMaterialFromPath = true, this.material = null, true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.pt1 = this.pt1, t.pt2 = this.pt2, t.isSolidColorFill = this.isSolidColorFill, t.fillImageSrc = this.fillImageSrc, t.fillImageParam = this.fillImageParam, t.cornerRadius = this.cornerRadius, t.filter = this.filter, t;
        }
        create() {
          return new MxDbRect();
        }
        transformBy(t) {
          this.pt1.applyMatrix4(t), this.pt2.applyMatrix4(t);
        }
        setRadius(t, e = true) {
          t instanceof Array ? this.cornerRadius = t.map((t2) => e ? MxFun_default.screenCoordLong2Doc(t2) : t2) : this.cornerRadius = t > 0 ? e ? [MxFun_default.screenCoordLong2Doc(t), MxFun_default.screenCoordLong2Doc(t), MxFun_default.screenCoordLong2Doc(t), MxFun_default.screenCoordLong2Doc(t)] : [t, t, t, t] : [];
        }
        getTypeName() {
          return "MxDbRect";
        }
        getFilter() {
          return this.filter;
        }
        setFilter(t) {
          this.filter = t, this.isLoadMaterialFromPath = true, this.material = null;
        }
        setFillImagePath(t) {
          this.fillImageSrc = t, this.isLoadMaterialFromPath = true, this.material = null, this.fillImageSrc && (this.isSolidColorFill = false);
        }
        getFillImagePath() {
          return this.fillImageSrc;
        }
      };
      MxDbRect.cmd = "Mx_DrawRect", MxDbRect.draw = drawMxDbRect, addRegisterMxDbEntity(MxDbRect);
      MxDbRect_default = MxDbRect;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbPolyline/draw.js
  function drawMxDbPolyline() {
    const e = new MrxDbgUiPrPoint();
    e.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:");
    let t, r = new MxDbPolyline_default();
    e.go((o) => {
      if (o != 0)
        return;
      let n = e.value();
      t || (t = n.clone());
      let s = n;
      const i = new McEdGetPointWorldDrawObject();
      i.setDraw((e2, t2) => {
        t2.setColor(16711680), t2.drawLine(s, e2), t2.drawCustomEntity(r);
      }), e.setUserDraw(i), e.setMessage("\n\u6307\u5B9A\u4E0B\u4E00\u70B9:");
      let d = 0;
      r.addVertexAt(n), e.goWhile((t2) => {
        if (t2 == 0)
          s = e.value(), r.addVertexAt(s), ++d >= 2 ? (e.setMessage("\n\u6307\u5B9A\u4E0B\u4E00\u70B9:"), e.setKeyWords("[\u95ED\u5408(C)/\u653E\u5F03(U)]")) : d > 0 ? (e.setMessage("\n\u6307\u5B9A\u4E0B\u4E00\u70B9:"), e.setKeyWords("[\u653E\u5F03(U)]")) : (e.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), e.setKeyWords(""));
        else if (t2 == 1) {
          if (e.isKeyWordPicked("C"))
            return { exit: true };
          e.isKeyWordPicked("U") && console.log("Mx_Line undo....");
        }
      }, () => {
        MxFun_default.getCurrentDraw().addMxEntity(r);
      });
    });
  }
  var init_draw16 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbPolyline/draw.js"() {
      init_MxDbPolyline();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbPolyline/index.js
  var MxDbPolyline_exports = {};
  __export(MxDbPolyline_exports, {
    default: () => MxDbPolyline_default
  });
  var MxDbPolyline, MxDbPolyline_default;
  var init_MxDbPolyline = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbPolyline/index.js"() {
      init_registerMxDbEntity();
      init_MxDbEntity();
      init_draw16();
      MxDbPolyline = class extends MxDbEntity {
        constructor() {
          super(...arguments), this.points = [];
        }
        getTypeName() {
          return "MxDbPolyline";
        }
        worldDraw(t) {
          this.points.length < 2 || t.drawLines(this.points);
        }
        getGripPoints() {
          return this.points;
        }
        moveGripPointsAt(t, i) {
          return !(t >= this.points.length) && (this.points[t].add(i), true);
        }
        create() {
          return new MxDbPolyline();
        }
        dwgIn(t) {
          this.onDwgIn(t);
          let i = t.points;
          return this.points = [], i.forEach((t2) => {
            this.points.push(new THREE.Vector3(t2.x, t2.y, t2.z));
          }), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), t.points = this.points, t;
        }
        addVertexAt(t) {
          this.points.push(t);
        }
        numVerts() {
          return this.points.length;
        }
        getPointAt(t) {
          return t < this.points.length ? this.points[t] : null;
        }
        setPointAt(t, i) {
          return t < this.points.length && (this.points[t] = i, true);
        }
      };
      MxDbPolyline.cmd = "Mx_Lines", MxDbPolyline.draw = drawMxDbPolyline, addRegisterMxDbEntity(MxDbPolyline);
      MxDbPolyline_default = MxDbPolyline;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbAlignedDimension/draw.js
  function drawMxDbAlignedDimension() {
    let t = new MxDbAlignedDimension_default();
    const e = new MrxDbgUiPrPoint();
    return e.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), e.go((n) => {
      if (n != 0)
        return;
      const o = e.value();
      t.setPoint1(o), t.setColor(65314);
      const r = new McEdGetPointWorldDrawObject();
      r.setDraw((e2) => {
        t.setPoint2(e2), r.drawCustomEntity(t);
      }), e.setBasePt(o), e.setUseBasePt(true), e.setUserDraw(r), e.setMessage("\n\u6307\u5B9A\u7B2C\u4E8C\u70B9:"), e.setInputToucheType(MxType_default.InputToucheType.kGetEnd), e.go((n2) => {
        if (n2 != 0)
          return void console.log(n2);
        const o2 = e.value();
        t.setPoint2(o2), MxFun_default.getCurrentDraw().addMxEntity(t);
      });
    }), t;
  }
  var init_draw17 = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbAlignedDimension/draw.js"() {
      init_MxDbAlignedDimension();
      init_McEdGetPointWorldDrawObject();
      init_MrxDbgUiPrPoint();
      init_MxFun();
      init_MxType2();
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbAlignedDimension/index.js
  var MxDbAlignedDimension_exports = {};
  __export(MxDbAlignedDimension_exports, {
    default: () => MxDbAlignedDimension_default
  });
  var import_lodash4, propertyDbKeys5, MxDbAlignedDimension, MxDbAlignedDimension_default;
  var init_MxDbAlignedDimension = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/MxModule/MxDbAlignedDimension/index.js"() {
      init_registerMxDbEntity();
      import_lodash4 = __toESM(require_lodash());
      init_McGiWorldDrawType();
      init_MxDbEntity();
      init_MxThreeJS2();
      init_draw17();
      propertyDbKeys5 = ["point1", "point2", "fontColor"];
      MxDbAlignedDimension = class extends MxDbEntity {
        constructor(t) {
          if (super(), this.point1 = new THREE.Vector3(), this.point2 = new THREE.Vector3(), t) {
            const { points: e, fontColor: n } = t;
            e && this.setPoints(e), n && (this.fontColor = n);
          }
        }
        setPoints(t) {
          const [e, n] = t;
          e && (this.point1 = e), n && (this.point2 = n);
        }
        getTypeName() {
          return "MxDbAlignedDimension";
        }
        getDirection(t, e, n) {
          const i = new THREE.Vector3(t.x, t.y, 0), o = new THREE.Vector3(1, 0, 0), r = t.angleTo(o);
          let a = -1;
          (r < 7 * Math.PI / 18 || r > 10 * Math.PI / 18) && e.x > n.x && (a = 1);
          const s = new THREE.Matrix4();
          return s.makeRotationZ(Math.PI / 2 * a), i.applyMatrix4(s), i;
        }
        getDimText() {
          return new THREE.Vector3(this.point1.x - this.point2.x, this.point1.y - this.point2.y, 0).length().toFixed(3);
        }
        worldDraw(t) {
          if (t.getType() == McGiWorldDrawType_default.kWorldDraw || t.getType() == McGiWorldDrawType_default.kDynDragDraw) {
            const e = this.point1, n = this.point2;
            let i, o, r, a, s, x, y;
            const c = new THREE.Vector3(e.x - n.x, e.y - n.y, 0), p = this.getDirection(c, e, n), E = new THREE.Matrix4();
            E.makeScale(0.01, 0.01, 0.01);
            const l = new THREE.Vector3(p.x, p.y, 0);
            l.applyMatrix4(E);
            const h = new THREE.Vector3(e.x + l.x, e.y + l.y, 0), w = new THREE.Vector3(n.x + l.x, n.y + l.y, 0), M = this.getColor();
            x = MxThreeJS_default.createPoint(e, M), y = MxThreeJS_default.createPoint(n, M);
            {
              E.identity(), E.makeScale(0.2, 0.2, 0), new THREE.Vector3(p.x, p.y, 0).applyMatrix4(E), E.identity(), E.makeScale(0.02, 0.02, 0);
              const r2 = new THREE.Vector3(p.x, p.y, 0);
              r2.applyMatrix4(E), t.drawLine(h, w), i = MxThreeJS_default.createLine(new THREE.Vector3(h.x + 2 * r2.x, h.y + 2 * r2.y, 0), new THREE.Vector3(e.x + r2.x, e.y + r2.y, 0), M), o = MxThreeJS_default.createLine(new THREE.Vector3(w.x + 2 * r2.x, w.y + 2 * r2.y, 0), new THREE.Vector3(n.x + r2.x, n.y + r2.y, 0), M);
            }
            {
              const i2 = new THREE.Vector3(1, 0, 0);
              let o2 = c.angleTo(i2);
              const a2 = new THREE.Vector3(p.x, p.y, 0);
              a2.normalize();
              const s2 = e.distanceTo(n);
              c.y < 0 ? o2 = o2 < Math.PI / 2 ? 2 * Math.PI - o2 : Math.PI - o2 : o2 > Math.PI / 2 && (o2 = Math.PI + o2);
              const x2 = t.getMxObject();
              x2 && (o2 -= x2.getViewAngle());
              const y2 = this.getDimText();
              (r = MxThreeJS_default.creatTextSprite(y2, new THREE.Vector3(w.x + c.x / 2 + a2.x * s2 / 30, w.y + c.y / 2 + a2.y * s2 / 30, 0), 0.07 * s2, o2, this.fontColor || M)) != null && t.drawEntity(r);
            }
            {
              E.identity(), E.makeScale(0.08, 0.08, 0.08);
              const t2 = new THREE.Matrix4();
              t2.makeRotationZ(17 * Math.PI / 18);
              let e2 = new THREE.Vector3(c.x, c.y, 0);
              e2.applyMatrix4(E), e2.applyMatrix4(t2), t2.identity(), t2.makeRotationZ(17 * -Math.PI / 18);
              let n2 = new THREE.Vector3(c.x, c.y, 0);
              n2.applyMatrix4(E), n2.applyMatrix4(t2);
              const i2 = new Array();
              i2.push(new THREE.Vector3(h.x, h.y, 0), new THREE.Vector3(h.x + e2.x, h.y + e2.y, 0), new THREE.Vector3(h.x + n2.x, h.y + n2.y, 0)), a = MxThreeJS_default.createTriangle(i2, M), t2.identity(), t2.makeRotationZ(Math.PI / 18), (e2 = new THREE.Vector3(c.x, c.y, 0)).applyMatrix4(E), e2.applyMatrix4(t2), t2.identity(), t2.makeRotationZ(-Math.PI / 18), (n2 = new THREE.Vector3(c.x, c.y, 0)).applyMatrix4(E), n2.applyMatrix4(t2);
              const o2 = new Array();
              o2.push(new THREE.Vector3(w.x, w.y, 0), new THREE.Vector3(w.x + e2.x, w.y + e2.y, 0), new THREE.Vector3(w.x + n2.x, w.y + n2.y, 0)), s = MxThreeJS_default.createTriangle(o2, M);
            }
            t.drawEntity(i), t.drawEntity(o), a && t.drawEntity(a), s && t.drawEntity(s), t.drawEntity(x), t.drawEntity(y);
          } else
            t.drawLine(this.point1, this.point2);
        }
        setPoint1(t) {
          this.point1 = t;
        }
        setPoint2(t) {
          this.point2 = t;
        }
        setColor(t) {
          return import_lodash4.default.isArray(t) ? ([this.color = this.color, this.fontColor = this.fontColor || this.color] = t, console.log("this.fontColor : ", this.fontColor)) : this.color = t, this;
        }
        getGripPoints() {
          let t = [];
          return t.push(this.point1), t.push(this.point2), t;
        }
        moveGripPointsAt(t, e) {
          return t == 0 ? this.point1.add(e) : (t = 1) && this.point2.add(e), true;
        }
        dwgIn(t) {
          return this.onDwgIn(t), this.dwgInHelp(t, propertyDbKeys5), true;
        }
        dwgOut(t) {
          return this.onDwgOut(t), this.dwgOutHelp(t, propertyDbKeys5), t;
        }
        create() {
          return new MxDbAlignedDimension();
        }
      };
      MxDbAlignedDimension.cmd = "Mx_DimensionMeasurement", MxDbAlignedDimension.draw = drawMxDbAlignedDimension, addRegisterMxDbEntity(MxDbAlignedDimension);
      MxDbAlignedDimension_default = MxDbAlignedDimension;
    }
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/tools/dynamicImport/index.js
  function dynamicImport(e) {
    return __awaiter10(this, void 0, void 0, function* () {
      let t;
      switch (e) {
        case "jquery":
          t = yield dynamicImportJquery();
          break;
        case "element-resize-event-polyfill":
          t = yield dynamicImportResize();
      }
      return t;
    });
  }
  function dynamicImportResize() {
    return __awaiter10(this, void 0, void 0, function* () {
      try {
        const e = yield Promise.resolve().then(() => __toESM(require_element_resize_event_polyfill_umd_min()));
        return e.default ? e.default : e;
      } catch (e) {
        console.log("import\u52A8\u6001\u5BFC\u5165\uFF1Aelement-resize-event-polyfill\u5931\u8D25\uFF01", e);
      }
    });
  }
  function dynamicImportJquery() {
    return __awaiter10(this, void 0, void 0, function* () {
      try {
        const e = yield Promise.resolve().then(() => __toESM(require_jquery()));
        return e.default ? e.default : e;
      } catch (e) {
        console.log("import\u52A8\u6001\u5BFC\u5165\uFF1Ajquery\u5931\u8D25\uFF01", e);
      }
    });
  }
  function intiDynamicCreateMxObject() {
    _mapDynamicCreate || ((_mapDynamicCreate = {}).MxDbArea = () => Promise.resolve().then(() => (init_MxDbArea(), MxDbArea_exports)), _mapDynamicCreate.MxDbLeadTag = () => Promise.resolve().then(() => (init_MxDbLeadTag(), MxDbLeadTag_exports)), _mapDynamicCreate.MxDbCoord = () => Promise.resolve().then(() => (init_MxDbCoord(), MxDbCoord_exports)), _mapDynamicCreate.MxDb2LineAngularDimension = () => Promise.resolve().then(() => (init_MxDb2LineAngularDimension(), MxDb2LineAngularDimension_exports)), _mapDynamicCreate.Mx3PointArc = () => Promise.resolve().then(() => (init_Mx3PointArc(), Mx3PointArc_exports)), _mapDynamicCreate.MxDbAnyLine = () => Promise.resolve().then(() => (init_MxDbAnyLine(), MxDbAnyLine_exports)), _mapDynamicCreate.MxDbCloudLine = () => Promise.resolve().then(() => (init_MxDbCloudLine(), MxDbCloudLine_exports)), _mapDynamicCreate.MxDbLeadComment = () => Promise.resolve().then(() => (init_MxDbLeadComment(), MxDbLeadComment_exports)), _mapDynamicCreate.MxDbRectBoxLeadComment = () => Promise.resolve().then(() => (init_MxDbRectBoxLeadComment(), MxDbRectBoxLeadComment_exports)), _mapDynamicCreate.MxDbEllipse = () => Promise.resolve().then(() => (init_MxDbEllipse(), MxDbEllipse_exports)), _mapDynamicCreate.MxDbText = () => Promise.resolve().then(() => (init_MxDbText2(), MxDbText_exports)), _mapDynamicCreate.MxDbRegularPolygon = () => Promise.resolve().then(() => (init_MxDbRegularPolygon(), MxDbRegularPolygon_exports)), _mapDynamicCreate.MxDbHatch = () => Promise.resolve().then(() => (init_MxDbHatch(), MxDbHatch_exports)), _mapDynamicCreate.MxDbHatch = () => Promise.resolve().then(() => (init_MxDbHatch(), MxDbHatch_exports)));
  }
  function dynamicCreateMxObject(e) {
    return __awaiter10(this, void 0, void 0, function* () {
      let t;
      switch (intiDynamicCreateMxObject(), e) {
        case "MxDbSVG":
          try {
            t = yield Promise.resolve().then(() => (init_MxDbSVG(), MxDbSVG_exports));
          } catch (t2) {
            console.log("import\uFF1A" + e + "error\uFF01", t2);
          }
          break;
        case "MxDbImage":
          try {
            t = yield Promise.resolve().then(() => (init_MxDbImage(), MxDbImage_exports));
          } catch (t2) {
            console.log("import\uFF1A" + e + "error\uFF01", t2);
          }
          break;
        case "MxDbRect":
          try {
            t = yield Promise.resolve().then(() => (init_MxDbRect(), MxDbRect_exports));
          } catch (t2) {
            console.log("import\uFF1A" + e + "error\uFF01", t2);
          }
          break;
        case "MxDbSVGText":
          try {
            t = yield Promise.resolve().then(() => (init_MxDbSVGText(), MxDbSVGText_exports));
          } catch (t2) {
            console.log("import\uFF1A" + e + "error\uFF01", t2);
          }
          break;
        case "MxDbPolyline":
          try {
            t = yield Promise.resolve().then(() => (init_MxDbPolyline(), MxDbPolyline_exports));
          } catch (t2) {
            console.log("import\uFF1A" + e + "error\uFF01", t2);
          }
          break;
        case "MxDbAlignedDimension":
          try {
            t = yield Promise.resolve().then(() => (init_MxDbAlignedDimension(), MxDbAlignedDimension_exports));
          } catch (t2) {
            console.log("import\uFF1A" + e + "error\uFF01", t2);
          }
      }
      if (!t && _mapDynamicCreate[e])
        try {
          t = yield _mapDynamicCreate[e]();
        } catch (t2) {
          console.log("import\uFF1A" + e + "error\uFF01", t2);
        }
      return t ? t.default ? t.default : t : (console.log("mx dynmac load:" + e + " failed"), null);
    });
  }
  var __awaiter10, _mapDynamicCreate;
  var init_dynamicImport = __esm({
    "C:/Users/MxDev/Documents/HBuilderProjects/demo\u6D4B\u8BD5/node_modules/mxdraw/dist/lib/tools/dynamicImport/index.js"() {
      __awaiter10 = function(e, t, o, i) {
        return new (o || (o = Promise))(function(r, a) {
          function n(e2) {
            try {
              m(i.next(e2));
            } catch (e3) {
              a(e3);
            }
          }
          function c(e2) {
            try {
              m(i.throw(e2));
            } catch (e3) {
              a(e3);
            }
          }
          function m(e2) {
            var t2;
            e2.done ? r(e2.value) : (t2 = e2.value, t2 instanceof o ? t2 : new o(function(e3) {
              e3(t2);
            })).then(n, c);
          }
          m((i = i.apply(e, t || [])).next());
        });
      };
      _mapDynamicCreate = null;
    }
  });

  // <stdin>
  var stdin_exports = {};
  __export(stdin_exports, {
    default: () => stdin_default
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/mxdraw.js
  var mxdraw_exports = {};
  __export(mxdraw_exports, {
    McEdGetPointWorldDrawObject: () => McEdGetPointWorldDrawObject,
    McGeTool: () => McGeTool_default,
    McGiWorldDrawType: () => McGiWorldDrawType_default,
    MrxDbgUiPrBaseReturn: () => MrxDbgUiPrBaseReturn_default,
    MrxDbgUiPrPoint: () => MrxDbgUiPrPoint,
    MrxDbgUtils: () => MrxDbgUtils_default,
    Mx3PointArc: () => Mx3PointArc_default,
    MxCADObject: () => MxCADObject,
    MxDb2LineAngularDimension: () => MxDb2LineAngularDimension_default,
    MxDbAlignedDimension: () => MxDbAlignedDimension_default,
    MxDbAnyLine: () => MxDbAnyLine_default,
    MxDbArcShapeDraw: () => MxDbArcShapeDraw_default,
    MxDbArea: () => MxDbArea_default,
    MxDbArrow: () => MxDbArrow_default,
    MxDbCircleArc: () => MxDbCircleArc_default,
    MxDbCircleShape: () => MxDbCircleShape,
    MxDbCloudLine: () => MxDbCloudLine_default,
    MxDbCoord: () => MxDbCoord_default,
    MxDbDatabase: () => MxDbDatabase,
    MxDbEllipse: () => MxDbEllipse_default,
    MxDbEllipseArc: () => MxDbEllipseArc_default,
    MxDbEllipseShape: () => MxDbEllipseShape,
    MxDbEntity: () => MxDbEntity,
    MxDbGradientLine: () => MxDbGradientLine_default,
    MxDbHatch: () => MxDbHatch_default,
    MxDbImage: () => MxDbImage_default,
    MxDbLeadComment: () => MxDbLeadComment_default,
    MxDbLeadTag: () => MxDbLeadTag_default,
    MxDbLine: () => MxDbLine_default,
    MxDbLineShape: () => MxDbLineShape_default,
    MxDbPolyline: () => MxDbPolyline_default,
    MxDbRect: () => MxDbRect_default,
    MxDbRectBoxLeadComment: () => MxDbRectBoxLeadComment_default,
    MxDbRegularPolygon: () => MxDbRegularPolygon_default,
    MxDbRegularPolygonShape: () => MxDbRegularPolygonShape_default,
    MxDbRingShape: () => MxDbRingShape_default,
    MxDbSVG: () => MxDbSVG_default,
    MxDbSVGText: () => MxDbSVGText,
    MxDbShape: () => MxDbShape,
    MxDbStarShape: () => MxDbStarShape_default,
    MxDbText: () => MxDbText_default,
    MxDrawObject: () => MxDrawObject,
    MxFilters: () => MxFilters,
    MxFun: () => MxFun_default,
    MxPaintBrush: () => MxPaintBrush_default,
    MxThreeJS: () => MxThreeJS_default,
    MxType: () => MxType_default,
    Mxassembly: () => Mxassembly_default,
    loadCoreCode: () => loadCoreCode,
    store: () => store_default,
    useCanvasResizeListener: () => useCanvasResizeListener
  });

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/loadCoreCode/index.js
  init_dynamicImport();
  init_store();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/loadCoreCode/mxfun.es5.js
  function mxfun() {
    !function t(e, n, i) {
      function r(o2, s) {
        if (!n[o2]) {
          if (!e[o2]) {
            var l = typeof __require == "function" && __require;
            if (!s && l)
              return l(o2, true);
            if (a)
              return a(o2, true);
            var c = new Error("Cannot find module '" + o2 + "'");
            throw c.code = "MODULE_NOT_FOUND", c;
          }
          var u = n[o2] = { exports: {} };
          e[o2][0].call(u.exports, function(t2) {
            return r(e[o2][1][t2] || t2);
          }, u, u.exports, t, e, n, i);
        }
        return n[o2].exports;
      }
      for (var a = typeof __require == "function" && __require, o = 0; o < i.length; o++)
        r(i[o]);
      return r;
    }({ 1: [function(t, e, n) {
      "use strict";
      var i = {};
      (0, t("./lib/utils/common").assign)(i, t("./lib/deflate"), t("./lib/inflate"), t("./lib/zlib/constants")), e.exports = i;
    }, { "./lib/deflate": 2, "./lib/inflate": 3, "./lib/utils/common": 4, "./lib/zlib/constants": 7 }], 2: [function(t, e, n) {
      "use strict";
      var i = t("./zlib/deflate"), r = t("./utils/common"), a = t("./utils/strings"), o = t("./zlib/messages"), s = t("./zlib/zstream"), l = Object.prototype.toString, c = 0, u = -1, h = 0, d = 8;
      function p(t2) {
        if (!(this instanceof p))
          return new p(t2);
        this.options = r.assign({ level: u, method: d, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: h, to: "" }, t2 || {});
        var e2 = this.options;
        e2.raw && 0 < e2.windowBits ? e2.windowBits = -e2.windowBits : e2.gzip && 0 < e2.windowBits && e2.windowBits < 16 && (e2.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new s(), this.strm.avail_out = 0;
        var n2 = i.deflateInit2(this.strm, e2.level, e2.method, e2.windowBits, e2.memLevel, e2.strategy);
        if (n2 !== c)
          throw new Error(o[n2]);
        if (e2.header && i.deflateSetHeader(this.strm, e2.header), e2.dictionary) {
          var f2;
          if (f2 = typeof e2.dictionary == "string" ? a.string2buf(e2.dictionary) : l.call(e2.dictionary) === "[object ArrayBuffer]" ? new Uint8Array(e2.dictionary) : e2.dictionary, (n2 = i.deflateSetDictionary(this.strm, f2)) !== c)
            throw new Error(o[n2]);
          this._dict_set = true;
        }
      }
      function f(t2, e2) {
        var n2 = new p(e2);
        if (n2.push(t2, true), n2.err)
          throw n2.msg || o[n2.err];
        return n2.result;
      }
      p.prototype.push = function(t2, e2) {
        var n2, o2, s2 = this.strm, u2 = this.options.chunkSize;
        if (this.ended)
          return false;
        o2 = e2 === ~~e2 ? e2 : e2 === true ? 4 : 0, typeof t2 == "string" ? s2.input = a.string2buf(t2) : l.call(t2) === "[object ArrayBuffer]" ? s2.input = new Uint8Array(t2) : s2.input = t2, s2.next_in = 0, s2.avail_in = s2.input.length;
        do {
          if (s2.avail_out === 0 && (s2.output = new r.Buf8(u2), s2.next_out = 0, s2.avail_out = u2), (n2 = i.deflate(s2, o2)) !== 1 && n2 !== c)
            return this.onEnd(n2), !(this.ended = true);
          s2.avail_out !== 0 && (s2.avail_in !== 0 || o2 !== 4 && o2 !== 2) || (this.options.to === "string" ? this.onData(a.buf2binstring(r.shrinkBuf(s2.output, s2.next_out))) : this.onData(r.shrinkBuf(s2.output, s2.next_out)));
        } while ((0 < s2.avail_in || s2.avail_out === 0) && n2 !== 1);
        return o2 === 4 ? (n2 = i.deflateEnd(this.strm), this.onEnd(n2), this.ended = true, n2 === c) : o2 !== 2 || (this.onEnd(c), !(s2.avail_out = 0));
      }, p.prototype.onData = function(t2) {
        this.chunks.push(t2);
      }, p.prototype.onEnd = function(t2) {
        t2 === c && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = r.flattenChunks(this.chunks)), this.chunks = [], this.err = t2, this.msg = this.strm.msg;
      }, n.Deflate = p, n.deflate = f, n.deflateRaw = function(t2, e2) {
        return (e2 = e2 || {}).raw = true, f(t2, e2);
      }, n.gzip = function(t2, e2) {
        return (e2 = e2 || {}).gzip = true, f(t2, e2);
      };
    }, { "./utils/common": 4, "./utils/strings": 5, "./zlib/deflate": 9, "./zlib/messages": 14, "./zlib/zstream": 16 }], 3: [function(t, e, n) {
      "use strict";
      var i = t("./zlib/inflate"), r = t("./utils/common"), a = t("./utils/strings"), o = t("./zlib/constants"), s = t("./zlib/messages"), l = t("./zlib/zstream"), c = t("./zlib/gzheader"), u = Object.prototype.toString;
      function h(t2) {
        if (!(this instanceof h))
          return new h(t2);
        this.options = r.assign({ chunkSize: 16384, windowBits: 0, to: "" }, t2 || {});
        var e2 = this.options;
        e2.raw && 0 <= e2.windowBits && e2.windowBits < 16 && (e2.windowBits = -e2.windowBits, e2.windowBits === 0 && (e2.windowBits = -15)), !(0 <= e2.windowBits && e2.windowBits < 16) || t2 && t2.windowBits || (e2.windowBits += 32), 15 < e2.windowBits && e2.windowBits < 48 && (15 & e2.windowBits) == 0 && (e2.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new l(), this.strm.avail_out = 0;
        var n2 = i.inflateInit2(this.strm, e2.windowBits);
        if (n2 !== o.Z_OK)
          throw new Error(s[n2]);
        if (this.header = new c(), i.inflateGetHeader(this.strm, this.header), e2.dictionary && (typeof e2.dictionary == "string" ? e2.dictionary = a.string2buf(e2.dictionary) : u.call(e2.dictionary) === "[object ArrayBuffer]" && (e2.dictionary = new Uint8Array(e2.dictionary)), e2.raw && (n2 = i.inflateSetDictionary(this.strm, e2.dictionary)) !== o.Z_OK))
          throw new Error(s[n2]);
      }
      function d(t2, e2) {
        var n2 = new h(e2);
        if (n2.push(t2, true), n2.err)
          throw n2.msg || s[n2.err];
        return n2.result;
      }
      h.prototype.push = function(t2, e2) {
        var n2, s2, l2, c2, h2, d2 = this.strm, p = this.options.chunkSize, f = this.options.dictionary, m = false;
        if (this.ended)
          return false;
        s2 = e2 === ~~e2 ? e2 : e2 === true ? o.Z_FINISH : o.Z_NO_FLUSH, typeof t2 == "string" ? d2.input = a.binstring2buf(t2) : u.call(t2) === "[object ArrayBuffer]" ? d2.input = new Uint8Array(t2) : d2.input = t2, d2.next_in = 0, d2.avail_in = d2.input.length;
        do {
          if (d2.avail_out === 0 && (d2.output = new r.Buf8(p), d2.next_out = 0, d2.avail_out = p), (n2 = i.inflate(d2, o.Z_NO_FLUSH)) === o.Z_NEED_DICT && f && (n2 = i.inflateSetDictionary(this.strm, f)), n2 === o.Z_BUF_ERROR && m === true && (n2 = o.Z_OK, m = false), n2 !== o.Z_STREAM_END && n2 !== o.Z_OK)
            return this.onEnd(n2), !(this.ended = true);
          d2.next_out && (d2.avail_out !== 0 && n2 !== o.Z_STREAM_END && (d2.avail_in !== 0 || s2 !== o.Z_FINISH && s2 !== o.Z_SYNC_FLUSH) || (this.options.to === "string" ? (l2 = a.utf8border(d2.output, d2.next_out), c2 = d2.next_out - l2, h2 = a.buf2string(d2.output, l2), d2.next_out = c2, d2.avail_out = p - c2, c2 && r.arraySet(d2.output, d2.output, l2, c2, 0), this.onData(h2)) : this.onData(r.shrinkBuf(d2.output, d2.next_out)))), d2.avail_in === 0 && d2.avail_out === 0 && (m = true);
        } while ((0 < d2.avail_in || d2.avail_out === 0) && n2 !== o.Z_STREAM_END);
        return n2 === o.Z_STREAM_END && (s2 = o.Z_FINISH), s2 === o.Z_FINISH ? (n2 = i.inflateEnd(this.strm), this.onEnd(n2), this.ended = true, n2 === o.Z_OK) : s2 !== o.Z_SYNC_FLUSH || (this.onEnd(o.Z_OK), !(d2.avail_out = 0));
      }, h.prototype.onData = function(t2) {
        this.chunks.push(t2);
      }, h.prototype.onEnd = function(t2) {
        t2 === o.Z_OK && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = r.flattenChunks(this.chunks)), this.chunks = [], this.err = t2, this.msg = this.strm.msg;
      }, n.Inflate = h, n.inflate = d, n.inflateRaw = function(t2, e2) {
        return (e2 = e2 || {}).raw = true, d(t2, e2);
      }, n.ungzip = d;
    }, { "./utils/common": 4, "./utils/strings": 5, "./zlib/constants": 7, "./zlib/gzheader": 10, "./zlib/inflate": 12, "./zlib/messages": 14, "./zlib/zstream": 16 }], 4: [function(t, e, n) {
      "use strict";
      var i = typeof Uint8Array != "undefined" && typeof Uint16Array != "undefined" && typeof Int32Array != "undefined";
      n.assign = function(t2) {
        for (var e2, n2, i2 = Array.prototype.slice.call(arguments, 1); i2.length; ) {
          var r2 = i2.shift();
          if (r2) {
            if (typeof r2 != "object")
              throw new TypeError(r2 + "must be non-object");
            for (var a2 in r2)
              e2 = r2, n2 = a2, Object.prototype.hasOwnProperty.call(e2, n2) && (t2[a2] = r2[a2]);
          }
        }
        return t2;
      }, n.shrinkBuf = function(t2, e2) {
        return t2.length === e2 ? t2 : t2.subarray ? t2.subarray(0, e2) : (t2.length = e2, t2);
      };
      var r = { arraySet: function(t2, e2, n2, i2, r2) {
        if (e2.subarray && t2.subarray)
          t2.set(e2.subarray(n2, n2 + i2), r2);
        else
          for (var a2 = 0; a2 < i2; a2++)
            t2[r2 + a2] = e2[n2 + a2];
      }, flattenChunks: function(t2) {
        var e2, n2, i2, r2, a2, o;
        for (e2 = i2 = 0, n2 = t2.length; e2 < n2; e2++)
          i2 += t2[e2].length;
        for (o = new Uint8Array(i2), e2 = r2 = 0, n2 = t2.length; e2 < n2; e2++)
          a2 = t2[e2], o.set(a2, r2), r2 += a2.length;
        return o;
      } }, a = { arraySet: function(t2, e2, n2, i2, r2) {
        for (var a2 = 0; a2 < i2; a2++)
          t2[r2 + a2] = e2[n2 + a2];
      }, flattenChunks: function(t2) {
        return [].concat.apply([], t2);
      } };
      n.setTyped = function(t2) {
        t2 ? (n.Buf8 = Uint8Array, n.Buf16 = Uint16Array, n.Buf32 = Int32Array, n.assign(n, r)) : (n.Buf8 = Array, n.Buf16 = Array, n.Buf32 = Array, n.assign(n, a));
      }, n.setTyped(i);
    }, {}], 5: [function(t, e, n) {
      "use strict";
      var i = t("./common"), r = true, a = true;
      try {
        String.fromCharCode.apply(null, [0]);
      } catch (t2) {
        r = false;
      }
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (t2) {
        a = false;
      }
      for (var o = new i.Buf8(256), s = 0; s < 256; s++)
        o[s] = 252 <= s ? 6 : 248 <= s ? 5 : 240 <= s ? 4 : 224 <= s ? 3 : 192 <= s ? 2 : 1;
      function l(t2, e2) {
        if (e2 < 65534 && (t2.subarray && a || !t2.subarray && r))
          return String.fromCharCode.apply(null, i.shrinkBuf(t2, e2));
        for (var n2 = "", o2 = 0; o2 < e2; o2++)
          n2 += String.fromCharCode(t2[o2]);
        return n2;
      }
      o[254] = o[254] = 1, n.string2buf = function(t2) {
        var e2, n2, r2, a2, o2, s2 = t2.length, l2 = 0;
        for (a2 = 0; a2 < s2; a2++)
          (64512 & (n2 = t2.charCodeAt(a2))) == 55296 && a2 + 1 < s2 && (64512 & (r2 = t2.charCodeAt(a2 + 1))) == 56320 && (n2 = 65536 + (n2 - 55296 << 10) + (r2 - 56320), a2++), l2 += n2 < 128 ? 1 : n2 < 2048 ? 2 : n2 < 65536 ? 3 : 4;
        for (e2 = new i.Buf8(l2), a2 = o2 = 0; o2 < l2; a2++)
          (64512 & (n2 = t2.charCodeAt(a2))) == 55296 && a2 + 1 < s2 && (64512 & (r2 = t2.charCodeAt(a2 + 1))) == 56320 && (n2 = 65536 + (n2 - 55296 << 10) + (r2 - 56320), a2++), n2 < 128 ? e2[o2++] = n2 : (n2 < 2048 ? e2[o2++] = 192 | n2 >>> 6 : (n2 < 65536 ? e2[o2++] = 224 | n2 >>> 12 : (e2[o2++] = 240 | n2 >>> 18, e2[o2++] = 128 | n2 >>> 12 & 63), e2[o2++] = 128 | n2 >>> 6 & 63), e2[o2++] = 128 | 63 & n2);
        return e2;
      }, n.buf2binstring = function(t2) {
        return l(t2, t2.length);
      }, n.binstring2buf = function(t2) {
        for (var e2 = new i.Buf8(t2.length), n2 = 0, r2 = e2.length; n2 < r2; n2++)
          e2[n2] = t2.charCodeAt(n2);
        return e2;
      }, n.buf2string = function(t2, e2) {
        var n2, i2, r2, a2, s2 = e2 || t2.length, c = new Array(2 * s2);
        for (n2 = i2 = 0; n2 < s2; )
          if ((r2 = t2[n2++]) < 128)
            c[i2++] = r2;
          else if (4 < (a2 = o[r2]))
            c[i2++] = 65533, n2 += a2 - 1;
          else {
            for (r2 &= a2 === 2 ? 31 : a2 === 3 ? 15 : 7; 1 < a2 && n2 < s2; )
              r2 = r2 << 6 | 63 & t2[n2++], a2--;
            1 < a2 ? c[i2++] = 65533 : r2 < 65536 ? c[i2++] = r2 : (r2 -= 65536, c[i2++] = 55296 | r2 >> 10 & 1023, c[i2++] = 56320 | 1023 & r2);
          }
        return l(c, i2);
      }, n.utf8border = function(t2, e2) {
        var n2;
        for ((e2 = e2 || t2.length) > t2.length && (e2 = t2.length), n2 = e2 - 1; 0 <= n2 && (192 & t2[n2]) == 128; )
          n2--;
        return !(n2 < 0) && n2 !== 0 && n2 + o[t2[n2]] > e2 ? n2 : e2;
      };
    }, { "./common": 4 }], 6: [function(t, e, n) {
      "use strict";
      e.exports = function(t2, e2, n2, i) {
        for (var r = 65535 & t2 | 0, a = t2 >>> 16 & 65535 | 0, o = 0; n2 !== 0; ) {
          for (n2 -= o = 2e3 < n2 ? 2e3 : n2; a = a + (r = r + e2[i++] | 0) | 0, --o; )
            ;
          r %= 65521, a %= 65521;
        }
        return r | a << 16 | 0;
      };
    }, {}], 7: [function(t, e, n) {
      "use strict";
      e.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
    }, {}], 8: [function(t, e, n) {
      "use strict";
      var i = function() {
        for (var t2, e2 = [], n2 = 0; n2 < 256; n2++) {
          t2 = n2;
          for (var i2 = 0; i2 < 8; i2++)
            t2 = 1 & t2 ? 3988292384 ^ t2 >>> 1 : t2 >>> 1;
          e2[n2] = t2;
        }
        return e2;
      }();
      e.exports = function(t2, e2, n2, r) {
        var a = i, o = r + n2;
        t2 ^= -1;
        for (var s = r; s < o; s++)
          t2 = t2 >>> 8 ^ a[255 & (t2 ^ e2[s])];
        return -1 ^ t2;
      };
    }, {}], 9: [function(t, e, n) {
      "use strict";
      var i, r = t("../utils/common"), a = t("./trees"), o = t("./adler32"), s = t("./crc32"), l = t("./messages"), c = 0, u = 4, h = 0, d = -2, p = -1, f = 4, m = 2, g = 8, v = 9, y = 286, x = 30, b = 19, w = 2 * y + 1, M = 15, _5 = 3, S = 258, C = S + _5 + 1, T = 42, E = 113, D = 1, A = 2, O = 3, L = 4;
      function I(t2, e2) {
        return t2.msg = l[e2], e2;
      }
      function P(t2) {
        return (t2 << 1) - (4 < t2 ? 9 : 0);
      }
      function R(t2) {
        for (var e2 = t2.length; 0 <= --e2; )
          t2[e2] = 0;
      }
      function k(t2) {
        var e2 = t2.state, n2 = e2.pending;
        n2 > t2.avail_out && (n2 = t2.avail_out), n2 !== 0 && (r.arraySet(t2.output, e2.pending_buf, e2.pending_out, n2, t2.next_out), t2.next_out += n2, e2.pending_out += n2, t2.total_out += n2, t2.avail_out -= n2, e2.pending -= n2, e2.pending === 0 && (e2.pending_out = 0));
      }
      function B(t2, e2) {
        a._tr_flush_block(t2, 0 <= t2.block_start ? t2.block_start : -1, t2.strstart - t2.block_start, e2), t2.block_start = t2.strstart, k(t2.strm);
      }
      function N(t2, e2) {
        t2.pending_buf[t2.pending++] = e2;
      }
      function F(t2, e2) {
        t2.pending_buf[t2.pending++] = e2 >>> 8 & 255, t2.pending_buf[t2.pending++] = 255 & e2;
      }
      function j(t2, e2) {
        var n2, i2, r2 = t2.max_chain_length, a2 = t2.strstart, o2 = t2.prev_length, s2 = t2.nice_match, l2 = t2.strstart > t2.w_size - C ? t2.strstart - (t2.w_size - C) : 0, c2 = t2.window, u2 = t2.w_mask, h2 = t2.prev, d2 = t2.strstart + S, p2 = c2[a2 + o2 - 1], f2 = c2[a2 + o2];
        t2.prev_length >= t2.good_match && (r2 >>= 2), s2 > t2.lookahead && (s2 = t2.lookahead);
        do {
          if (c2[(n2 = e2) + o2] === f2 && c2[n2 + o2 - 1] === p2 && c2[n2] === c2[a2] && c2[++n2] === c2[a2 + 1]) {
            a2 += 2, n2++;
            do {
            } while (c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && c2[++a2] === c2[++n2] && a2 < d2);
            if (i2 = S - (d2 - a2), a2 = d2 - S, o2 < i2) {
              if (t2.match_start = e2, s2 <= (o2 = i2))
                break;
              p2 = c2[a2 + o2 - 1], f2 = c2[a2 + o2];
            }
          }
        } while ((e2 = h2[e2 & u2]) > l2 && --r2 != 0);
        return o2 <= t2.lookahead ? o2 : t2.lookahead;
      }
      function V(t2) {
        var e2, n2, i2, a2, l2, c2, u2, h2, d2, p2, f2 = t2.w_size;
        do {
          if (a2 = t2.window_size - t2.lookahead - t2.strstart, t2.strstart >= f2 + (f2 - C)) {
            for (r.arraySet(t2.window, t2.window, f2, f2, 0), t2.match_start -= f2, t2.strstart -= f2, t2.block_start -= f2, e2 = n2 = t2.hash_size; i2 = t2.head[--e2], t2.head[e2] = f2 <= i2 ? i2 - f2 : 0, --n2; )
              ;
            for (e2 = n2 = f2; i2 = t2.prev[--e2], t2.prev[e2] = f2 <= i2 ? i2 - f2 : 0, --n2; )
              ;
            a2 += f2;
          }
          if (t2.strm.avail_in === 0)
            break;
          if (c2 = t2.strm, u2 = t2.window, h2 = t2.strstart + t2.lookahead, p2 = void 0, (d2 = a2) < (p2 = c2.avail_in) && (p2 = d2), n2 = p2 === 0 ? 0 : (c2.avail_in -= p2, r.arraySet(u2, c2.input, c2.next_in, p2, h2), c2.state.wrap === 1 ? c2.adler = o(c2.adler, u2, p2, h2) : c2.state.wrap === 2 && (c2.adler = s(c2.adler, u2, p2, h2)), c2.next_in += p2, c2.total_in += p2, p2), t2.lookahead += n2, t2.lookahead + t2.insert >= _5)
            for (l2 = t2.strstart - t2.insert, t2.ins_h = t2.window[l2], t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[l2 + 1]) & t2.hash_mask; t2.insert && (t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[l2 + _5 - 1]) & t2.hash_mask, t2.prev[l2 & t2.w_mask] = t2.head[t2.ins_h], t2.head[t2.ins_h] = l2, l2++, t2.insert--, !(t2.lookahead + t2.insert < _5)); )
              ;
        } while (t2.lookahead < C && t2.strm.avail_in !== 0);
      }
      function z(t2, e2) {
        for (var n2, i2; ; ) {
          if (t2.lookahead < C) {
            if (V(t2), t2.lookahead < C && e2 === c)
              return D;
            if (t2.lookahead === 0)
              break;
          }
          if (n2 = 0, t2.lookahead >= _5 && (t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[t2.strstart + _5 - 1]) & t2.hash_mask, n2 = t2.prev[t2.strstart & t2.w_mask] = t2.head[t2.ins_h], t2.head[t2.ins_h] = t2.strstart), n2 !== 0 && t2.strstart - n2 <= t2.w_size - C && (t2.match_length = j(t2, n2)), t2.match_length >= _5)
            if (i2 = a._tr_tally(t2, t2.strstart - t2.match_start, t2.match_length - _5), t2.lookahead -= t2.match_length, t2.match_length <= t2.max_lazy_match && t2.lookahead >= _5) {
              for (t2.match_length--; t2.strstart++, t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[t2.strstart + _5 - 1]) & t2.hash_mask, n2 = t2.prev[t2.strstart & t2.w_mask] = t2.head[t2.ins_h], t2.head[t2.ins_h] = t2.strstart, --t2.match_length != 0; )
                ;
              t2.strstart++;
            } else
              t2.strstart += t2.match_length, t2.match_length = 0, t2.ins_h = t2.window[t2.strstart], t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[t2.strstart + 1]) & t2.hash_mask;
          else
            i2 = a._tr_tally(t2, 0, t2.window[t2.strstart]), t2.lookahead--, t2.strstart++;
          if (i2 && (B(t2, false), t2.strm.avail_out === 0))
            return D;
        }
        return t2.insert = t2.strstart < _5 - 1 ? t2.strstart : _5 - 1, e2 === u ? (B(t2, true), t2.strm.avail_out === 0 ? O : L) : t2.last_lit && (B(t2, false), t2.strm.avail_out === 0) ? D : A;
      }
      function G(t2, e2) {
        for (var n2, i2, r2; ; ) {
          if (t2.lookahead < C) {
            if (V(t2), t2.lookahead < C && e2 === c)
              return D;
            if (t2.lookahead === 0)
              break;
          }
          if (n2 = 0, t2.lookahead >= _5 && (t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[t2.strstart + _5 - 1]) & t2.hash_mask, n2 = t2.prev[t2.strstart & t2.w_mask] = t2.head[t2.ins_h], t2.head[t2.ins_h] = t2.strstart), t2.prev_length = t2.match_length, t2.prev_match = t2.match_start, t2.match_length = _5 - 1, n2 !== 0 && t2.prev_length < t2.max_lazy_match && t2.strstart - n2 <= t2.w_size - C && (t2.match_length = j(t2, n2), t2.match_length <= 5 && (t2.strategy === 1 || t2.match_length === _5 && 4096 < t2.strstart - t2.match_start) && (t2.match_length = _5 - 1)), t2.prev_length >= _5 && t2.match_length <= t2.prev_length) {
            for (r2 = t2.strstart + t2.lookahead - _5, i2 = a._tr_tally(t2, t2.strstart - 1 - t2.prev_match, t2.prev_length - _5), t2.lookahead -= t2.prev_length - 1, t2.prev_length -= 2; ++t2.strstart <= r2 && (t2.ins_h = (t2.ins_h << t2.hash_shift ^ t2.window[t2.strstart + _5 - 1]) & t2.hash_mask, n2 = t2.prev[t2.strstart & t2.w_mask] = t2.head[t2.ins_h], t2.head[t2.ins_h] = t2.strstart), --t2.prev_length != 0; )
              ;
            if (t2.match_available = 0, t2.match_length = _5 - 1, t2.strstart++, i2 && (B(t2, false), t2.strm.avail_out === 0))
              return D;
          } else if (t2.match_available) {
            if ((i2 = a._tr_tally(t2, 0, t2.window[t2.strstart - 1])) && B(t2, false), t2.strstart++, t2.lookahead--, t2.strm.avail_out === 0)
              return D;
          } else
            t2.match_available = 1, t2.strstart++, t2.lookahead--;
        }
        return t2.match_available && (i2 = a._tr_tally(t2, 0, t2.window[t2.strstart - 1]), t2.match_available = 0), t2.insert = t2.strstart < _5 - 1 ? t2.strstart : _5 - 1, e2 === u ? (B(t2, true), t2.strm.avail_out === 0 ? O : L) : t2.last_lit && (B(t2, false), t2.strm.avail_out === 0) ? D : A;
      }
      function U(t2, e2, n2, i2, r2) {
        this.good_length = t2, this.max_lazy = e2, this.nice_length = n2, this.max_chain = i2, this.func = r2;
      }
      function H() {
        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = g, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new r.Buf16(2 * w), this.dyn_dtree = new r.Buf16(2 * (2 * x + 1)), this.bl_tree = new r.Buf16(2 * (2 * b + 1)), R(this.dyn_ltree), R(this.dyn_dtree), R(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new r.Buf16(M + 1), this.heap = new r.Buf16(2 * y + 1), R(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new r.Buf16(2 * y + 1), R(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
      }
      function W(t2) {
        var e2;
        return t2 && t2.state ? (t2.total_in = t2.total_out = 0, t2.data_type = m, (e2 = t2.state).pending = 0, e2.pending_out = 0, e2.wrap < 0 && (e2.wrap = -e2.wrap), e2.status = e2.wrap ? T : E, t2.adler = e2.wrap === 2 ? 0 : 1, e2.last_flush = c, a._tr_init(e2), h) : I(t2, d);
      }
      function J(t2) {
        var e2, n2 = W(t2);
        return n2 === h && ((e2 = t2.state).window_size = 2 * e2.w_size, R(e2.head), e2.max_lazy_match = i[e2.level].max_lazy, e2.good_match = i[e2.level].good_length, e2.nice_match = i[e2.level].nice_length, e2.max_chain_length = i[e2.level].max_chain, e2.strstart = 0, e2.block_start = 0, e2.lookahead = 0, e2.insert = 0, e2.match_length = e2.prev_length = _5 - 1, e2.match_available = 0, e2.ins_h = 0), n2;
      }
      function q(t2, e2, n2, i2, a2, o2) {
        if (!t2)
          return d;
        var s2 = 1;
        if (e2 === p && (e2 = 6), i2 < 0 ? (s2 = 0, i2 = -i2) : 15 < i2 && (s2 = 2, i2 -= 16), a2 < 1 || v < a2 || n2 !== g || i2 < 8 || 15 < i2 || e2 < 0 || 9 < e2 || o2 < 0 || f < o2)
          return I(t2, d);
        i2 === 8 && (i2 = 9);
        var l2 = new H();
        return (t2.state = l2).strm = t2, l2.wrap = s2, l2.gzhead = null, l2.w_bits = i2, l2.w_size = 1 << l2.w_bits, l2.w_mask = l2.w_size - 1, l2.hash_bits = a2 + 7, l2.hash_size = 1 << l2.hash_bits, l2.hash_mask = l2.hash_size - 1, l2.hash_shift = ~~((l2.hash_bits + _5 - 1) / _5), l2.window = new r.Buf8(2 * l2.w_size), l2.head = new r.Buf16(l2.hash_size), l2.prev = new r.Buf16(l2.w_size), l2.lit_bufsize = 1 << a2 + 6, l2.pending_buf_size = 4 * l2.lit_bufsize, l2.pending_buf = new r.Buf8(l2.pending_buf_size), l2.d_buf = +l2.lit_bufsize, l2.l_buf = 3 * l2.lit_bufsize, l2.level = e2, l2.strategy = o2, l2.method = n2, J(t2);
      }
      i = [new U(0, 0, 0, 0, function(t2, e2) {
        var n2 = 65535;
        for (n2 > t2.pending_buf_size - 5 && (n2 = t2.pending_buf_size - 5); ; ) {
          if (t2.lookahead <= 1) {
            if (V(t2), t2.lookahead === 0 && e2 === c)
              return D;
            if (t2.lookahead === 0)
              break;
          }
          t2.strstart += t2.lookahead, t2.lookahead = 0;
          var i2 = t2.block_start + n2;
          if ((t2.strstart === 0 || t2.strstart >= i2) && (t2.lookahead = t2.strstart - i2, t2.strstart = i2, B(t2, false), t2.strm.avail_out === 0))
            return D;
          if (t2.strstart - t2.block_start >= t2.w_size - C && (B(t2, false), t2.strm.avail_out === 0))
            return D;
        }
        return t2.insert = 0, e2 === u ? (B(t2, true), t2.strm.avail_out === 0 ? O : L) : (t2.strstart > t2.block_start && (B(t2, false), t2.strm.avail_out), D);
      }), new U(4, 4, 8, 4, z), new U(4, 5, 16, 8, z), new U(4, 6, 32, 32, z), new U(4, 4, 16, 16, G), new U(8, 16, 32, 32, G), new U(8, 16, 128, 128, G), new U(8, 32, 128, 256, G), new U(32, 128, 258, 1024, G), new U(32, 258, 258, 4096, G)], n.deflateInit = function(t2, e2) {
        return q(t2, e2, g, 15, 8, 0);
      }, n.deflateInit2 = q, n.deflateReset = J, n.deflateResetKeep = W, n.deflateSetHeader = function(t2, e2) {
        return t2 && t2.state && t2.state.wrap === 2 ? (t2.state.gzhead = e2, h) : d;
      }, n.deflate = function(t2, e2) {
        var n2, r2, o2, l2;
        if (!t2 || !t2.state || 5 < e2 || e2 < 0)
          return t2 ? I(t2, d) : d;
        if (r2 = t2.state, !t2.output || !t2.input && t2.avail_in !== 0 || r2.status === 666 && e2 !== u)
          return I(t2, t2.avail_out === 0 ? -5 : d);
        if (r2.strm = t2, n2 = r2.last_flush, r2.last_flush = e2, r2.status === T)
          if (r2.wrap === 2)
            t2.adler = 0, N(r2, 31), N(r2, 139), N(r2, 8), r2.gzhead ? (N(r2, (r2.gzhead.text ? 1 : 0) + (r2.gzhead.hcrc ? 2 : 0) + (r2.gzhead.extra ? 4 : 0) + (r2.gzhead.name ? 8 : 0) + (r2.gzhead.comment ? 16 : 0)), N(r2, 255 & r2.gzhead.time), N(r2, r2.gzhead.time >> 8 & 255), N(r2, r2.gzhead.time >> 16 & 255), N(r2, r2.gzhead.time >> 24 & 255), N(r2, r2.level === 9 ? 2 : 2 <= r2.strategy || r2.level < 2 ? 4 : 0), N(r2, 255 & r2.gzhead.os), r2.gzhead.extra && r2.gzhead.extra.length && (N(r2, 255 & r2.gzhead.extra.length), N(r2, r2.gzhead.extra.length >> 8 & 255)), r2.gzhead.hcrc && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending, 0)), r2.gzindex = 0, r2.status = 69) : (N(r2, 0), N(r2, 0), N(r2, 0), N(r2, 0), N(r2, 0), N(r2, r2.level === 9 ? 2 : 2 <= r2.strategy || r2.level < 2 ? 4 : 0), N(r2, 3), r2.status = E);
          else {
            var p2 = g + (r2.w_bits - 8 << 4) << 8;
            p2 |= (2 <= r2.strategy || r2.level < 2 ? 0 : r2.level < 6 ? 1 : r2.level === 6 ? 2 : 3) << 6, r2.strstart !== 0 && (p2 |= 32), p2 += 31 - p2 % 31, r2.status = E, F(r2, p2), r2.strstart !== 0 && (F(r2, t2.adler >>> 16), F(r2, 65535 & t2.adler)), t2.adler = 1;
          }
        if (r2.status === 69)
          if (r2.gzhead.extra) {
            for (o2 = r2.pending; r2.gzindex < (65535 & r2.gzhead.extra.length) && (r2.pending !== r2.pending_buf_size || (r2.gzhead.hcrc && r2.pending > o2 && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending - o2, o2)), k(t2), o2 = r2.pending, r2.pending !== r2.pending_buf_size)); )
              N(r2, 255 & r2.gzhead.extra[r2.gzindex]), r2.gzindex++;
            r2.gzhead.hcrc && r2.pending > o2 && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending - o2, o2)), r2.gzindex === r2.gzhead.extra.length && (r2.gzindex = 0, r2.status = 73);
          } else
            r2.status = 73;
        if (r2.status === 73)
          if (r2.gzhead.name) {
            o2 = r2.pending;
            do {
              if (r2.pending === r2.pending_buf_size && (r2.gzhead.hcrc && r2.pending > o2 && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending - o2, o2)), k(t2), o2 = r2.pending, r2.pending === r2.pending_buf_size)) {
                l2 = 1;
                break;
              }
              l2 = r2.gzindex < r2.gzhead.name.length ? 255 & r2.gzhead.name.charCodeAt(r2.gzindex++) : 0, N(r2, l2);
            } while (l2 !== 0);
            r2.gzhead.hcrc && r2.pending > o2 && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending - o2, o2)), l2 === 0 && (r2.gzindex = 0, r2.status = 91);
          } else
            r2.status = 91;
        if (r2.status === 91)
          if (r2.gzhead.comment) {
            o2 = r2.pending;
            do {
              if (r2.pending === r2.pending_buf_size && (r2.gzhead.hcrc && r2.pending > o2 && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending - o2, o2)), k(t2), o2 = r2.pending, r2.pending === r2.pending_buf_size)) {
                l2 = 1;
                break;
              }
              l2 = r2.gzindex < r2.gzhead.comment.length ? 255 & r2.gzhead.comment.charCodeAt(r2.gzindex++) : 0, N(r2, l2);
            } while (l2 !== 0);
            r2.gzhead.hcrc && r2.pending > o2 && (t2.adler = s(t2.adler, r2.pending_buf, r2.pending - o2, o2)), l2 === 0 && (r2.status = 103);
          } else
            r2.status = 103;
        if (r2.status === 103 && (r2.gzhead.hcrc ? (r2.pending + 2 > r2.pending_buf_size && k(t2), r2.pending + 2 <= r2.pending_buf_size && (N(r2, 255 & t2.adler), N(r2, t2.adler >> 8 & 255), t2.adler = 0, r2.status = E)) : r2.status = E), r2.pending !== 0) {
          if (k(t2), t2.avail_out === 0)
            return r2.last_flush = -1, h;
        } else if (t2.avail_in === 0 && P(e2) <= P(n2) && e2 !== u)
          return I(t2, -5);
        if (r2.status === 666 && t2.avail_in !== 0)
          return I(t2, -5);
        if (t2.avail_in !== 0 || r2.lookahead !== 0 || e2 !== c && r2.status !== 666) {
          var f2 = r2.strategy === 2 ? function(t3, e3) {
            for (var n3; ; ) {
              if (t3.lookahead === 0 && (V(t3), t3.lookahead === 0)) {
                if (e3 === c)
                  return D;
                break;
              }
              if (t3.match_length = 0, n3 = a._tr_tally(t3, 0, t3.window[t3.strstart]), t3.lookahead--, t3.strstart++, n3 && (B(t3, false), t3.strm.avail_out === 0))
                return D;
            }
            return t3.insert = 0, e3 === u ? (B(t3, true), t3.strm.avail_out === 0 ? O : L) : t3.last_lit && (B(t3, false), t3.strm.avail_out === 0) ? D : A;
          }(r2, e2) : r2.strategy === 3 ? function(t3, e3) {
            for (var n3, i2, r3, o3, s2 = t3.window; ; ) {
              if (t3.lookahead <= S) {
                if (V(t3), t3.lookahead <= S && e3 === c)
                  return D;
                if (t3.lookahead === 0)
                  break;
              }
              if (t3.match_length = 0, t3.lookahead >= _5 && 0 < t3.strstart && (i2 = s2[r3 = t3.strstart - 1]) === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3]) {
                o3 = t3.strstart + S;
                do {
                } while (i2 === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3] && i2 === s2[++r3] && r3 < o3);
                t3.match_length = S - (o3 - r3), t3.match_length > t3.lookahead && (t3.match_length = t3.lookahead);
              }
              if (t3.match_length >= _5 ? (n3 = a._tr_tally(t3, 1, t3.match_length - _5), t3.lookahead -= t3.match_length, t3.strstart += t3.match_length, t3.match_length = 0) : (n3 = a._tr_tally(t3, 0, t3.window[t3.strstart]), t3.lookahead--, t3.strstart++), n3 && (B(t3, false), t3.strm.avail_out === 0))
                return D;
            }
            return t3.insert = 0, e3 === u ? (B(t3, true), t3.strm.avail_out === 0 ? O : L) : t3.last_lit && (B(t3, false), t3.strm.avail_out === 0) ? D : A;
          }(r2, e2) : i[r2.level].func(r2, e2);
          if (f2 !== O && f2 !== L || (r2.status = 666), f2 === D || f2 === O)
            return t2.avail_out === 0 && (r2.last_flush = -1), h;
          if (f2 === A && (e2 === 1 ? a._tr_align(r2) : e2 !== 5 && (a._tr_stored_block(r2, 0, 0, false), e2 === 3 && (R(r2.head), r2.lookahead === 0 && (r2.strstart = 0, r2.block_start = 0, r2.insert = 0))), k(t2), t2.avail_out === 0))
            return r2.last_flush = -1, h;
        }
        return e2 !== u ? h : r2.wrap <= 0 ? 1 : (r2.wrap === 2 ? (N(r2, 255 & t2.adler), N(r2, t2.adler >> 8 & 255), N(r2, t2.adler >> 16 & 255), N(r2, t2.adler >> 24 & 255), N(r2, 255 & t2.total_in), N(r2, t2.total_in >> 8 & 255), N(r2, t2.total_in >> 16 & 255), N(r2, t2.total_in >> 24 & 255)) : (F(r2, t2.adler >>> 16), F(r2, 65535 & t2.adler)), k(t2), 0 < r2.wrap && (r2.wrap = -r2.wrap), r2.pending !== 0 ? h : 1);
      }, n.deflateEnd = function(t2) {
        var e2;
        return t2 && t2.state ? (e2 = t2.state.status) !== T && e2 !== 69 && e2 !== 73 && e2 !== 91 && e2 !== 103 && e2 !== E && e2 !== 666 ? I(t2, d) : (t2.state = null, e2 === E ? I(t2, -3) : h) : d;
      }, n.deflateSetDictionary = function(t2, e2) {
        var n2, i2, a2, s2, l2, c2, u2, p2, f2 = e2.length;
        if (!t2 || !t2.state)
          return d;
        if ((s2 = (n2 = t2.state).wrap) === 2 || s2 === 1 && n2.status !== T || n2.lookahead)
          return d;
        for (s2 === 1 && (t2.adler = o(t2.adler, e2, f2, 0)), n2.wrap = 0, f2 >= n2.w_size && (s2 === 0 && (R(n2.head), n2.strstart = 0, n2.block_start = 0, n2.insert = 0), p2 = new r.Buf8(n2.w_size), r.arraySet(p2, e2, f2 - n2.w_size, n2.w_size, 0), e2 = p2, f2 = n2.w_size), l2 = t2.avail_in, c2 = t2.next_in, u2 = t2.input, t2.avail_in = f2, t2.next_in = 0, t2.input = e2, V(n2); n2.lookahead >= _5; ) {
          for (i2 = n2.strstart, a2 = n2.lookahead - (_5 - 1); n2.ins_h = (n2.ins_h << n2.hash_shift ^ n2.window[i2 + _5 - 1]) & n2.hash_mask, n2.prev[i2 & n2.w_mask] = n2.head[n2.ins_h], n2.head[n2.ins_h] = i2, i2++, --a2; )
            ;
          n2.strstart = i2, n2.lookahead = _5 - 1, V(n2);
        }
        return n2.strstart += n2.lookahead, n2.block_start = n2.strstart, n2.insert = n2.lookahead, n2.lookahead = 0, n2.match_length = n2.prev_length = _5 - 1, n2.match_available = 0, t2.next_in = c2, t2.input = u2, t2.avail_in = l2, n2.wrap = s2, h;
      }, n.deflateInfo = "pako deflate (from Nodeca project)";
    }, { "../utils/common": 4, "./adler32": 6, "./crc32": 8, "./messages": 14, "./trees": 15 }], 10: [function(t, e, n) {
      "use strict";
      e.exports = function() {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
      };
    }, {}], 11: [function(t, e, n) {
      "use strict";
      e.exports = function(t2, e2) {
        var n2, i, r, a, o, s, l, c, u, h, d, p, f, m, g, v, y, x, b, w, M, _5, S, C, T;
        n2 = t2.state, i = t2.next_in, C = t2.input, r = i + (t2.avail_in - 5), a = t2.next_out, T = t2.output, o = a - (e2 - t2.avail_out), s = a + (t2.avail_out - 257), l = n2.dmax, c = n2.wsize, u = n2.whave, h = n2.wnext, d = n2.window, p = n2.hold, f = n2.bits, m = n2.lencode, g = n2.distcode, v = (1 << n2.lenbits) - 1, y = (1 << n2.distbits) - 1;
        t:
          do {
            f < 15 && (p += C[i++] << f, f += 8, p += C[i++] << f, f += 8), x = m[p & v];
            e:
              for (; ; ) {
                if (p >>>= b = x >>> 24, f -= b, (b = x >>> 16 & 255) == 0)
                  T[a++] = 65535 & x;
                else {
                  if (!(16 & b)) {
                    if ((64 & b) == 0) {
                      x = m[(65535 & x) + (p & (1 << b) - 1)];
                      continue e;
                    }
                    if (32 & b) {
                      n2.mode = 12;
                      break t;
                    }
                    t2.msg = "invalid literal/length code", n2.mode = 30;
                    break t;
                  }
                  w = 65535 & x, (b &= 15) && (f < b && (p += C[i++] << f, f += 8), w += p & (1 << b) - 1, p >>>= b, f -= b), f < 15 && (p += C[i++] << f, f += 8, p += C[i++] << f, f += 8), x = g[p & y];
                  n:
                    for (; ; ) {
                      if (p >>>= b = x >>> 24, f -= b, !(16 & (b = x >>> 16 & 255))) {
                        if ((64 & b) == 0) {
                          x = g[(65535 & x) + (p & (1 << b) - 1)];
                          continue n;
                        }
                        t2.msg = "invalid distance code", n2.mode = 30;
                        break t;
                      }
                      if (M = 65535 & x, f < (b &= 15) && (p += C[i++] << f, (f += 8) < b && (p += C[i++] << f, f += 8)), l < (M += p & (1 << b) - 1)) {
                        t2.msg = "invalid distance too far back", n2.mode = 30;
                        break t;
                      }
                      if (p >>>= b, f -= b, (b = a - o) < M) {
                        if (u < (b = M - b) && n2.sane) {
                          t2.msg = "invalid distance too far back", n2.mode = 30;
                          break t;
                        }
                        if (S = d, (_5 = 0) === h) {
                          if (_5 += c - b, b < w) {
                            for (w -= b; T[a++] = d[_5++], --b; )
                              ;
                            _5 = a - M, S = T;
                          }
                        } else if (h < b) {
                          if (_5 += c + h - b, (b -= h) < w) {
                            for (w -= b; T[a++] = d[_5++], --b; )
                              ;
                            if (_5 = 0, h < w) {
                              for (w -= b = h; T[a++] = d[_5++], --b; )
                                ;
                              _5 = a - M, S = T;
                            }
                          }
                        } else if (_5 += h - b, b < w) {
                          for (w -= b; T[a++] = d[_5++], --b; )
                            ;
                          _5 = a - M, S = T;
                        }
                        for (; 2 < w; )
                          T[a++] = S[_5++], T[a++] = S[_5++], T[a++] = S[_5++], w -= 3;
                        w && (T[a++] = S[_5++], 1 < w && (T[a++] = S[_5++]));
                      } else {
                        for (_5 = a - M; T[a++] = T[_5++], T[a++] = T[_5++], T[a++] = T[_5++], 2 < (w -= 3); )
                          ;
                        w && (T[a++] = T[_5++], 1 < w && (T[a++] = T[_5++]));
                      }
                      break;
                    }
                }
                break;
              }
          } while (i < r && a < s);
        i -= w = f >> 3, p &= (1 << (f -= w << 3)) - 1, t2.next_in = i, t2.next_out = a, t2.avail_in = i < r ? r - i + 5 : 5 - (i - r), t2.avail_out = a < s ? s - a + 257 : 257 - (a - s), n2.hold = p, n2.bits = f;
      };
    }, {}], 12: [function(t, e, n) {
      "use strict";
      var i = t("../utils/common"), r = t("./adler32"), a = t("./crc32"), o = t("./inffast"), s = t("./inftrees"), l = 1, c = 2, u = 0, h = -2, d = 1, p = 852, f = 592;
      function m(t2) {
        return (t2 >>> 24 & 255) + (t2 >>> 8 & 65280) + ((65280 & t2) << 8) + ((255 & t2) << 24);
      }
      function g(t2) {
        var e2;
        return t2 && t2.state ? (e2 = t2.state, t2.total_in = t2.total_out = e2.total = 0, t2.msg = "", e2.wrap && (t2.adler = 1 & e2.wrap), e2.mode = d, e2.last = 0, e2.havedict = 0, e2.dmax = 32768, e2.head = null, e2.hold = 0, e2.bits = 0, e2.lencode = e2.lendyn = new i.Buf32(p), e2.distcode = e2.distdyn = new i.Buf32(f), e2.sane = 1, e2.back = -1, u) : h;
      }
      function v(t2) {
        var e2;
        return t2 && t2.state ? ((e2 = t2.state).wsize = 0, e2.whave = 0, e2.wnext = 0, g(t2)) : h;
      }
      function y(t2, e2) {
        var n2, i2;
        return t2 && t2.state ? (i2 = t2.state, e2 < 0 ? (n2 = 0, e2 = -e2) : (n2 = 1 + (e2 >> 4), e2 < 48 && (e2 &= 15)), e2 && (e2 < 8 || 15 < e2) ? h : (i2.window !== null && i2.wbits !== e2 && (i2.window = null), i2.wrap = n2, i2.wbits = e2, v(t2))) : h;
      }
      function x(t2, e2) {
        var n2, r2;
        return t2 ? (r2 = new function() {
          this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new i.Buf16(320), this.work = new i.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
        }(), (t2.state = r2).window = null, (n2 = y(t2, e2)) !== u && (t2.state = null), n2) : h;
      }
      var b, w, M = true;
      function _5(t2) {
        if (M) {
          var e2;
          for (b = new i.Buf32(512), w = new i.Buf32(32), e2 = 0; e2 < 144; )
            t2.lens[e2++] = 8;
          for (; e2 < 256; )
            t2.lens[e2++] = 9;
          for (; e2 < 280; )
            t2.lens[e2++] = 7;
          for (; e2 < 288; )
            t2.lens[e2++] = 8;
          for (s(l, t2.lens, 0, 288, b, 0, t2.work, { bits: 9 }), e2 = 0; e2 < 32; )
            t2.lens[e2++] = 5;
          s(c, t2.lens, 0, 32, w, 0, t2.work, { bits: 5 }), M = false;
        }
        t2.lencode = b, t2.lenbits = 9, t2.distcode = w, t2.distbits = 5;
      }
      function S(t2, e2, n2, r2) {
        var a2, o2 = t2.state;
        return o2.window === null && (o2.wsize = 1 << o2.wbits, o2.wnext = 0, o2.whave = 0, o2.window = new i.Buf8(o2.wsize)), r2 >= o2.wsize ? (i.arraySet(o2.window, e2, n2 - o2.wsize, o2.wsize, 0), o2.wnext = 0, o2.whave = o2.wsize) : (r2 < (a2 = o2.wsize - o2.wnext) && (a2 = r2), i.arraySet(o2.window, e2, n2 - r2, a2, o2.wnext), (r2 -= a2) ? (i.arraySet(o2.window, e2, n2 - r2, r2, 0), o2.wnext = r2, o2.whave = o2.wsize) : (o2.wnext += a2, o2.wnext === o2.wsize && (o2.wnext = 0), o2.whave < o2.wsize && (o2.whave += a2))), 0;
      }
      n.inflateReset = v, n.inflateReset2 = y, n.inflateResetKeep = g, n.inflateInit = function(t2) {
        return x(t2, 15);
      }, n.inflateInit2 = x, n.inflate = function(t2, e2) {
        var n2, p2, f2, g2, v2, y2, x2, b2, w2, M2, C, T, E, D, A, O, L, I, P, R, k, B, N, F, j = 0, V = new i.Buf8(4), z = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        if (!t2 || !t2.state || !t2.output || !t2.input && t2.avail_in !== 0)
          return h;
        (n2 = t2.state).mode === 12 && (n2.mode = 13), v2 = t2.next_out, f2 = t2.output, x2 = t2.avail_out, g2 = t2.next_in, p2 = t2.input, y2 = t2.avail_in, b2 = n2.hold, w2 = n2.bits, M2 = y2, C = x2, B = u;
        t:
          for (; ; )
            switch (n2.mode) {
              case d:
                if (n2.wrap === 0) {
                  n2.mode = 13;
                  break;
                }
                for (; w2 < 16; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                if (2 & n2.wrap && b2 === 35615) {
                  V[n2.check = 0] = 255 & b2, V[1] = b2 >>> 8 & 255, n2.check = a(n2.check, V, 2, 0), w2 = b2 = 0, n2.mode = 2;
                  break;
                }
                if (n2.flags = 0, n2.head && (n2.head.done = false), !(1 & n2.wrap) || (((255 & b2) << 8) + (b2 >> 8)) % 31) {
                  t2.msg = "incorrect header check", n2.mode = 30;
                  break;
                }
                if ((15 & b2) != 8) {
                  t2.msg = "unknown compression method", n2.mode = 30;
                  break;
                }
                if (w2 -= 4, k = 8 + (15 & (b2 >>>= 4)), n2.wbits === 0)
                  n2.wbits = k;
                else if (k > n2.wbits) {
                  t2.msg = "invalid window size", n2.mode = 30;
                  break;
                }
                n2.dmax = 1 << k, t2.adler = n2.check = 1, n2.mode = 512 & b2 ? 10 : 12, w2 = b2 = 0;
                break;
              case 2:
                for (; w2 < 16; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                if (n2.flags = b2, (255 & n2.flags) != 8) {
                  t2.msg = "unknown compression method", n2.mode = 30;
                  break;
                }
                if (57344 & n2.flags) {
                  t2.msg = "unknown header flags set", n2.mode = 30;
                  break;
                }
                n2.head && (n2.head.text = b2 >> 8 & 1), 512 & n2.flags && (V[0] = 255 & b2, V[1] = b2 >>> 8 & 255, n2.check = a(n2.check, V, 2, 0)), w2 = b2 = 0, n2.mode = 3;
              case 3:
                for (; w2 < 32; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                n2.head && (n2.head.time = b2), 512 & n2.flags && (V[0] = 255 & b2, V[1] = b2 >>> 8 & 255, V[2] = b2 >>> 16 & 255, V[3] = b2 >>> 24 & 255, n2.check = a(n2.check, V, 4, 0)), w2 = b2 = 0, n2.mode = 4;
              case 4:
                for (; w2 < 16; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                n2.head && (n2.head.xflags = 255 & b2, n2.head.os = b2 >> 8), 512 & n2.flags && (V[0] = 255 & b2, V[1] = b2 >>> 8 & 255, n2.check = a(n2.check, V, 2, 0)), w2 = b2 = 0, n2.mode = 5;
              case 5:
                if (1024 & n2.flags) {
                  for (; w2 < 16; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  n2.length = b2, n2.head && (n2.head.extra_len = b2), 512 & n2.flags && (V[0] = 255 & b2, V[1] = b2 >>> 8 & 255, n2.check = a(n2.check, V, 2, 0)), w2 = b2 = 0;
                } else
                  n2.head && (n2.head.extra = null);
                n2.mode = 6;
              case 6:
                if (1024 & n2.flags && (y2 < (T = n2.length) && (T = y2), T && (n2.head && (k = n2.head.extra_len - n2.length, n2.head.extra || (n2.head.extra = new Array(n2.head.extra_len)), i.arraySet(n2.head.extra, p2, g2, T, k)), 512 & n2.flags && (n2.check = a(n2.check, p2, T, g2)), y2 -= T, g2 += T, n2.length -= T), n2.length))
                  break t;
                n2.length = 0, n2.mode = 7;
              case 7:
                if (2048 & n2.flags) {
                  if (y2 === 0)
                    break t;
                  for (T = 0; k = p2[g2 + T++], n2.head && k && n2.length < 65536 && (n2.head.name += String.fromCharCode(k)), k && T < y2; )
                    ;
                  if (512 & n2.flags && (n2.check = a(n2.check, p2, T, g2)), y2 -= T, g2 += T, k)
                    break t;
                } else
                  n2.head && (n2.head.name = null);
                n2.length = 0, n2.mode = 8;
              case 8:
                if (4096 & n2.flags) {
                  if (y2 === 0)
                    break t;
                  for (T = 0; k = p2[g2 + T++], n2.head && k && n2.length < 65536 && (n2.head.comment += String.fromCharCode(k)), k && T < y2; )
                    ;
                  if (512 & n2.flags && (n2.check = a(n2.check, p2, T, g2)), y2 -= T, g2 += T, k)
                    break t;
                } else
                  n2.head && (n2.head.comment = null);
                n2.mode = 9;
              case 9:
                if (512 & n2.flags) {
                  for (; w2 < 16; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  if (b2 !== (65535 & n2.check)) {
                    t2.msg = "header crc mismatch", n2.mode = 30;
                    break;
                  }
                  w2 = b2 = 0;
                }
                n2.head && (n2.head.hcrc = n2.flags >> 9 & 1, n2.head.done = true), t2.adler = n2.check = 0, n2.mode = 12;
                break;
              case 10:
                for (; w2 < 32; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                t2.adler = n2.check = m(b2), w2 = b2 = 0, n2.mode = 11;
              case 11:
                if (n2.havedict === 0)
                  return t2.next_out = v2, t2.avail_out = x2, t2.next_in = g2, t2.avail_in = y2, n2.hold = b2, n2.bits = w2, 2;
                t2.adler = n2.check = 1, n2.mode = 12;
              case 12:
                if (e2 === 5 || e2 === 6)
                  break t;
              case 13:
                if (n2.last) {
                  b2 >>>= 7 & w2, w2 -= 7 & w2, n2.mode = 27;
                  break;
                }
                for (; w2 < 3; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                switch (n2.last = 1 & b2, --w2, 3 & (b2 >>>= 1)) {
                  case 0:
                    n2.mode = 14;
                    break;
                  case 1:
                    if (_5(n2), n2.mode = 20, e2 !== 6)
                      break;
                    b2 >>>= 2, w2 -= 2;
                    break t;
                  case 2:
                    n2.mode = 17;
                    break;
                  case 3:
                    t2.msg = "invalid block type", n2.mode = 30;
                }
                b2 >>>= 2, w2 -= 2;
                break;
              case 14:
                for (b2 >>>= 7 & w2, w2 -= 7 & w2; w2 < 32; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                if ((65535 & b2) != (b2 >>> 16 ^ 65535)) {
                  t2.msg = "invalid stored block lengths", n2.mode = 30;
                  break;
                }
                if (n2.length = 65535 & b2, w2 = b2 = 0, n2.mode = 15, e2 === 6)
                  break t;
              case 15:
                n2.mode = 16;
              case 16:
                if (T = n2.length) {
                  if (y2 < T && (T = y2), x2 < T && (T = x2), T === 0)
                    break t;
                  i.arraySet(f2, p2, g2, T, v2), y2 -= T, g2 += T, x2 -= T, v2 += T, n2.length -= T;
                  break;
                }
                n2.mode = 12;
                break;
              case 17:
                for (; w2 < 14; ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                if (n2.nlen = 257 + (31 & b2), b2 >>>= 5, w2 -= 5, n2.ndist = 1 + (31 & b2), b2 >>>= 5, w2 -= 5, n2.ncode = 4 + (15 & b2), b2 >>>= 4, w2 -= 4, 286 < n2.nlen || 30 < n2.ndist) {
                  t2.msg = "too many length or distance symbols", n2.mode = 30;
                  break;
                }
                n2.have = 0, n2.mode = 18;
              case 18:
                for (; n2.have < n2.ncode; ) {
                  for (; w2 < 3; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  n2.lens[z[n2.have++]] = 7 & b2, b2 >>>= 3, w2 -= 3;
                }
                for (; n2.have < 19; )
                  n2.lens[z[n2.have++]] = 0;
                if (n2.lencode = n2.lendyn, n2.lenbits = 7, N = { bits: n2.lenbits }, B = s(0, n2.lens, 0, 19, n2.lencode, 0, n2.work, N), n2.lenbits = N.bits, B) {
                  t2.msg = "invalid code lengths set", n2.mode = 30;
                  break;
                }
                n2.have = 0, n2.mode = 19;
              case 19:
                for (; n2.have < n2.nlen + n2.ndist; ) {
                  for (; O = (j = n2.lencode[b2 & (1 << n2.lenbits) - 1]) >>> 16 & 255, L = 65535 & j, !((A = j >>> 24) <= w2); ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  if (L < 16)
                    b2 >>>= A, w2 -= A, n2.lens[n2.have++] = L;
                  else {
                    if (L === 16) {
                      for (F = A + 2; w2 < F; ) {
                        if (y2 === 0)
                          break t;
                        y2--, b2 += p2[g2++] << w2, w2 += 8;
                      }
                      if (b2 >>>= A, w2 -= A, n2.have === 0) {
                        t2.msg = "invalid bit length repeat", n2.mode = 30;
                        break;
                      }
                      k = n2.lens[n2.have - 1], T = 3 + (3 & b2), b2 >>>= 2, w2 -= 2;
                    } else if (L === 17) {
                      for (F = A + 3; w2 < F; ) {
                        if (y2 === 0)
                          break t;
                        y2--, b2 += p2[g2++] << w2, w2 += 8;
                      }
                      w2 -= A, k = 0, T = 3 + (7 & (b2 >>>= A)), b2 >>>= 3, w2 -= 3;
                    } else {
                      for (F = A + 7; w2 < F; ) {
                        if (y2 === 0)
                          break t;
                        y2--, b2 += p2[g2++] << w2, w2 += 8;
                      }
                      w2 -= A, k = 0, T = 11 + (127 & (b2 >>>= A)), b2 >>>= 7, w2 -= 7;
                    }
                    if (n2.have + T > n2.nlen + n2.ndist) {
                      t2.msg = "invalid bit length repeat", n2.mode = 30;
                      break;
                    }
                    for (; T--; )
                      n2.lens[n2.have++] = k;
                  }
                }
                if (n2.mode === 30)
                  break;
                if (n2.lens[256] === 0) {
                  t2.msg = "invalid code -- missing end-of-block", n2.mode = 30;
                  break;
                }
                if (n2.lenbits = 9, N = { bits: n2.lenbits }, B = s(l, n2.lens, 0, n2.nlen, n2.lencode, 0, n2.work, N), n2.lenbits = N.bits, B) {
                  t2.msg = "invalid literal/lengths set", n2.mode = 30;
                  break;
                }
                if (n2.distbits = 6, n2.distcode = n2.distdyn, N = { bits: n2.distbits }, B = s(c, n2.lens, n2.nlen, n2.ndist, n2.distcode, 0, n2.work, N), n2.distbits = N.bits, B) {
                  t2.msg = "invalid distances set", n2.mode = 30;
                  break;
                }
                if (n2.mode = 20, e2 === 6)
                  break t;
              case 20:
                n2.mode = 21;
              case 21:
                if (6 <= y2 && 258 <= x2) {
                  t2.next_out = v2, t2.avail_out = x2, t2.next_in = g2, t2.avail_in = y2, n2.hold = b2, n2.bits = w2, o(t2, C), v2 = t2.next_out, f2 = t2.output, x2 = t2.avail_out, g2 = t2.next_in, p2 = t2.input, y2 = t2.avail_in, b2 = n2.hold, w2 = n2.bits, n2.mode === 12 && (n2.back = -1);
                  break;
                }
                for (n2.back = 0; O = (j = n2.lencode[b2 & (1 << n2.lenbits) - 1]) >>> 16 & 255, L = 65535 & j, !((A = j >>> 24) <= w2); ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                if (O && (240 & O) == 0) {
                  for (I = A, P = O, R = L; O = (j = n2.lencode[R + ((b2 & (1 << I + P) - 1) >> I)]) >>> 16 & 255, L = 65535 & j, !(I + (A = j >>> 24) <= w2); ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  b2 >>>= I, w2 -= I, n2.back += I;
                }
                if (b2 >>>= A, w2 -= A, n2.back += A, n2.length = L, O === 0) {
                  n2.mode = 26;
                  break;
                }
                if (32 & O) {
                  n2.back = -1, n2.mode = 12;
                  break;
                }
                if (64 & O) {
                  t2.msg = "invalid literal/length code", n2.mode = 30;
                  break;
                }
                n2.extra = 15 & O, n2.mode = 22;
              case 22:
                if (n2.extra) {
                  for (F = n2.extra; w2 < F; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  n2.length += b2 & (1 << n2.extra) - 1, b2 >>>= n2.extra, w2 -= n2.extra, n2.back += n2.extra;
                }
                n2.was = n2.length, n2.mode = 23;
              case 23:
                for (; O = (j = n2.distcode[b2 & (1 << n2.distbits) - 1]) >>> 16 & 255, L = 65535 & j, !((A = j >>> 24) <= w2); ) {
                  if (y2 === 0)
                    break t;
                  y2--, b2 += p2[g2++] << w2, w2 += 8;
                }
                if ((240 & O) == 0) {
                  for (I = A, P = O, R = L; O = (j = n2.distcode[R + ((b2 & (1 << I + P) - 1) >> I)]) >>> 16 & 255, L = 65535 & j, !(I + (A = j >>> 24) <= w2); ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  b2 >>>= I, w2 -= I, n2.back += I;
                }
                if (b2 >>>= A, w2 -= A, n2.back += A, 64 & O) {
                  t2.msg = "invalid distance code", n2.mode = 30;
                  break;
                }
                n2.offset = L, n2.extra = 15 & O, n2.mode = 24;
              case 24:
                if (n2.extra) {
                  for (F = n2.extra; w2 < F; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  n2.offset += b2 & (1 << n2.extra) - 1, b2 >>>= n2.extra, w2 -= n2.extra, n2.back += n2.extra;
                }
                if (n2.offset > n2.dmax) {
                  t2.msg = "invalid distance too far back", n2.mode = 30;
                  break;
                }
                n2.mode = 25;
              case 25:
                if (x2 === 0)
                  break t;
                if (T = C - x2, n2.offset > T) {
                  if ((T = n2.offset - T) > n2.whave && n2.sane) {
                    t2.msg = "invalid distance too far back", n2.mode = 30;
                    break;
                  }
                  E = T > n2.wnext ? (T -= n2.wnext, n2.wsize - T) : n2.wnext - T, T > n2.length && (T = n2.length), D = n2.window;
                } else
                  D = f2, E = v2 - n2.offset, T = n2.length;
                for (x2 < T && (T = x2), x2 -= T, n2.length -= T; f2[v2++] = D[E++], --T; )
                  ;
                n2.length === 0 && (n2.mode = 21);
                break;
              case 26:
                if (x2 === 0)
                  break t;
                f2[v2++] = n2.length, x2--, n2.mode = 21;
                break;
              case 27:
                if (n2.wrap) {
                  for (; w2 < 32; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 |= p2[g2++] << w2, w2 += 8;
                  }
                  if (C -= x2, t2.total_out += C, n2.total += C, C && (t2.adler = n2.check = (n2.flags ? a : r)(n2.check, f2, C, v2 - C)), C = x2, (n2.flags ? b2 : m(b2)) !== n2.check) {
                    t2.msg = "incorrect data check", n2.mode = 30;
                    break;
                  }
                  w2 = b2 = 0;
                }
                n2.mode = 28;
              case 28:
                if (n2.wrap && n2.flags) {
                  for (; w2 < 32; ) {
                    if (y2 === 0)
                      break t;
                    y2--, b2 += p2[g2++] << w2, w2 += 8;
                  }
                  if (b2 !== (4294967295 & n2.total)) {
                    t2.msg = "incorrect length check", n2.mode = 30;
                    break;
                  }
                  w2 = b2 = 0;
                }
                n2.mode = 29;
              case 29:
                B = 1;
                break t;
              case 30:
                B = -3;
                break t;
              case 31:
                return -4;
              case 32:
              default:
                return h;
            }
        return t2.next_out = v2, t2.avail_out = x2, t2.next_in = g2, t2.avail_in = y2, n2.hold = b2, n2.bits = w2, (n2.wsize || C !== t2.avail_out && n2.mode < 30 && (n2.mode < 27 || e2 !== 4)) && S(t2, t2.output, t2.next_out, C - t2.avail_out) ? (n2.mode = 31, -4) : (M2 -= t2.avail_in, C -= t2.avail_out, t2.total_in += M2, t2.total_out += C, n2.total += C, n2.wrap && C && (t2.adler = n2.check = (n2.flags ? a : r)(n2.check, f2, C, t2.next_out - C)), t2.data_type = n2.bits + (n2.last ? 64 : 0) + (n2.mode === 12 ? 128 : 0) + (n2.mode === 20 || n2.mode === 15 ? 256 : 0), (M2 == 0 && C === 0 || e2 === 4) && B === u && (B = -5), B);
      }, n.inflateEnd = function(t2) {
        if (!t2 || !t2.state)
          return h;
        var e2 = t2.state;
        return e2.window && (e2.window = null), t2.state = null, u;
      }, n.inflateGetHeader = function(t2, e2) {
        var n2;
        return t2 && t2.state && (2 & (n2 = t2.state).wrap) != 0 ? ((n2.head = e2).done = false, u) : h;
      }, n.inflateSetDictionary = function(t2, e2) {
        var n2, i2 = e2.length;
        return !t2 || !t2.state || (n2 = t2.state).wrap !== 0 && n2.mode !== 11 ? h : n2.mode === 11 && r(1, e2, i2, 0) !== n2.check ? -3 : S(t2, e2, i2, i2) ? (n2.mode = 31, -4) : (n2.havedict = 1, u);
      }, n.inflateInfo = "pako inflate (from Nodeca project)";
    }, { "../utils/common": 4, "./adler32": 6, "./crc32": 8, "./inffast": 11, "./inftrees": 13 }], 13: [function(t, e, n) {
      "use strict";
      var i = t("../utils/common"), r = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], a = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], o = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], s = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
      e.exports = function(t2, e2, n2, l, c, u, h, d) {
        var p, f, m, g, v, y, x, b, w, M = d.bits, _5 = 0, S = 0, C = 0, T = 0, E = 0, D = 0, A = 0, O = 0, L = 0, I = 0, P = null, R = 0, k = new i.Buf16(16), B = new i.Buf16(16), N = null, F = 0;
        for (_5 = 0; _5 <= 15; _5++)
          k[_5] = 0;
        for (S = 0; S < l; S++)
          k[e2[n2 + S]]++;
        for (E = M, T = 15; 1 <= T && k[T] === 0; T--)
          ;
        if (T < E && (E = T), T === 0)
          return c[u++] = 20971520, c[u++] = 20971520, d.bits = 1, 0;
        for (C = 1; C < T && k[C] === 0; C++)
          ;
        for (E < C && (E = C), _5 = O = 1; _5 <= 15; _5++)
          if (O <<= 1, (O -= k[_5]) < 0)
            return -1;
        if (0 < O && (t2 === 0 || T !== 1))
          return -1;
        for (B[1] = 0, _5 = 1; _5 < 15; _5++)
          B[_5 + 1] = B[_5] + k[_5];
        for (S = 0; S < l; S++)
          e2[n2 + S] !== 0 && (h[B[e2[n2 + S]]++] = S);
        if (y = t2 === 0 ? (P = N = h, 19) : t2 === 1 ? (P = r, R -= 257, N = a, F -= 257, 256) : (P = o, N = s, -1), _5 = C, v = u, A = S = I = 0, m = -1, g = (L = 1 << (D = E)) - 1, t2 === 1 && 852 < L || t2 === 2 && 592 < L)
          return 1;
        for (; ; ) {
          for (x = _5 - A, w = h[S] < y ? (b = 0, h[S]) : h[S] > y ? (b = N[F + h[S]], P[R + h[S]]) : (b = 96, 0), p = 1 << _5 - A, C = f = 1 << D; c[v + (I >> A) + (f -= p)] = x << 24 | b << 16 | w | 0, f !== 0; )
            ;
          for (p = 1 << _5 - 1; I & p; )
            p >>= 1;
          if (p !== 0 ? (I &= p - 1, I += p) : I = 0, S++, --k[_5] == 0) {
            if (_5 === T)
              break;
            _5 = e2[n2 + h[S]];
          }
          if (E < _5 && (I & g) !== m) {
            for (A === 0 && (A = E), v += C, O = 1 << (D = _5 - A); D + A < T && !((O -= k[D + A]) <= 0); )
              D++, O <<= 1;
            if (L += 1 << D, t2 === 1 && 852 < L || t2 === 2 && 592 < L)
              return 1;
            c[m = I & g] = E << 24 | D << 16 | v - u | 0;
          }
        }
        return I !== 0 && (c[v + I] = _5 - A << 24 | 64 << 16 | 0), d.bits = E, 0;
      };
    }, { "../utils/common": 4 }], 14: [function(t, e, n) {
      "use strict";
      e.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
    }, {}], 15: [function(t, e, n) {
      "use strict";
      var i = t("../utils/common");
      function r(t2) {
        for (var e2 = t2.length; 0 <= --e2; )
          t2[e2] = 0;
      }
      var a = 0, o = 256, s = o + 1 + 29, l = 30, c = 19, u = 2 * s + 1, h = 15, d = 16, p = 256, f = 16, m = 17, g = 18, v = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], y = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], b = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], w = new Array(2 * (s + 2));
      r(w);
      var M = new Array(2 * l);
      r(M);
      var _5 = new Array(512);
      r(_5);
      var S = new Array(256);
      r(S);
      var C = new Array(29);
      r(C);
      var T, E, D, A = new Array(l);
      function O(t2, e2, n2, i2, r2) {
        this.static_tree = t2, this.extra_bits = e2, this.extra_base = n2, this.elems = i2, this.max_length = r2, this.has_stree = t2 && t2.length;
      }
      function L(t2, e2) {
        this.dyn_tree = t2, this.max_code = 0, this.stat_desc = e2;
      }
      function I(t2) {
        return t2 < 256 ? _5[t2] : _5[256 + (t2 >>> 7)];
      }
      function P(t2, e2) {
        t2.pending_buf[t2.pending++] = 255 & e2, t2.pending_buf[t2.pending++] = e2 >>> 8 & 255;
      }
      function R(t2, e2, n2) {
        t2.bi_valid > d - n2 ? (t2.bi_buf |= e2 << t2.bi_valid & 65535, P(t2, t2.bi_buf), t2.bi_buf = e2 >> d - t2.bi_valid, t2.bi_valid += n2 - d) : (t2.bi_buf |= e2 << t2.bi_valid & 65535, t2.bi_valid += n2);
      }
      function k(t2, e2, n2) {
        R(t2, n2[2 * e2], n2[2 * e2 + 1]);
      }
      function B(t2, e2) {
        for (var n2 = 0; n2 |= 1 & t2, t2 >>>= 1, n2 <<= 1, 0 < --e2; )
          ;
        return n2 >>> 1;
      }
      function N(t2, e2, n2) {
        var i2, r2, a2 = new Array(h + 1), o2 = 0;
        for (i2 = 1; i2 <= h; i2++)
          a2[i2] = o2 = o2 + n2[i2 - 1] << 1;
        for (r2 = 0; r2 <= e2; r2++) {
          var s2 = t2[2 * r2 + 1];
          s2 !== 0 && (t2[2 * r2] = B(a2[s2]++, s2));
        }
      }
      function F(t2) {
        var e2;
        for (e2 = 0; e2 < s; e2++)
          t2.dyn_ltree[2 * e2] = 0;
        for (e2 = 0; e2 < l; e2++)
          t2.dyn_dtree[2 * e2] = 0;
        for (e2 = 0; e2 < c; e2++)
          t2.bl_tree[2 * e2] = 0;
        t2.dyn_ltree[2 * p] = 1, t2.opt_len = t2.static_len = 0, t2.last_lit = t2.matches = 0;
      }
      function j(t2) {
        8 < t2.bi_valid ? P(t2, t2.bi_buf) : 0 < t2.bi_valid && (t2.pending_buf[t2.pending++] = t2.bi_buf), t2.bi_buf = 0, t2.bi_valid = 0;
      }
      function V(t2, e2, n2, i2) {
        var r2 = 2 * e2, a2 = 2 * n2;
        return t2[r2] < t2[a2] || t2[r2] === t2[a2] && i2[e2] <= i2[n2];
      }
      function z(t2, e2, n2) {
        for (var i2 = t2.heap[n2], r2 = n2 << 1; r2 <= t2.heap_len && (r2 < t2.heap_len && V(e2, t2.heap[r2 + 1], t2.heap[r2], t2.depth) && r2++, !V(e2, i2, t2.heap[r2], t2.depth)); )
          t2.heap[n2] = t2.heap[r2], n2 = r2, r2 <<= 1;
        t2.heap[n2] = i2;
      }
      function G(t2, e2, n2) {
        var i2, r2, a2, s2, l2 = 0;
        if (t2.last_lit !== 0)
          for (; i2 = t2.pending_buf[t2.d_buf + 2 * l2] << 8 | t2.pending_buf[t2.d_buf + 2 * l2 + 1], r2 = t2.pending_buf[t2.l_buf + l2], l2++, i2 === 0 ? k(t2, r2, e2) : (k(t2, (a2 = S[r2]) + o + 1, e2), (s2 = v[a2]) !== 0 && R(t2, r2 -= C[a2], s2), k(t2, a2 = I(--i2), n2), (s2 = y[a2]) !== 0 && R(t2, i2 -= A[a2], s2)), l2 < t2.last_lit; )
            ;
        k(t2, p, e2);
      }
      function U(t2, e2) {
        var n2, i2, r2, a2 = e2.dyn_tree, o2 = e2.stat_desc.static_tree, s2 = e2.stat_desc.has_stree, l2 = e2.stat_desc.elems, c2 = -1;
        for (t2.heap_len = 0, t2.heap_max = u, n2 = 0; n2 < l2; n2++)
          a2[2 * n2] !== 0 ? (t2.heap[++t2.heap_len] = c2 = n2, t2.depth[n2] = 0) : a2[2 * n2 + 1] = 0;
        for (; t2.heap_len < 2; )
          a2[2 * (r2 = t2.heap[++t2.heap_len] = c2 < 2 ? ++c2 : 0)] = 1, t2.depth[r2] = 0, t2.opt_len--, s2 && (t2.static_len -= o2[2 * r2 + 1]);
        for (e2.max_code = c2, n2 = t2.heap_len >> 1; 1 <= n2; n2--)
          z(t2, a2, n2);
        for (r2 = l2; n2 = t2.heap[1], t2.heap[1] = t2.heap[t2.heap_len--], z(t2, a2, 1), i2 = t2.heap[1], t2.heap[--t2.heap_max] = n2, t2.heap[--t2.heap_max] = i2, a2[2 * r2] = a2[2 * n2] + a2[2 * i2], t2.depth[r2] = (t2.depth[n2] >= t2.depth[i2] ? t2.depth[n2] : t2.depth[i2]) + 1, a2[2 * n2 + 1] = a2[2 * i2 + 1] = r2, t2.heap[1] = r2++, z(t2, a2, 1), 2 <= t2.heap_len; )
          ;
        t2.heap[--t2.heap_max] = t2.heap[1], function(t3, e3) {
          var n3, i3, r3, a3, o3, s3, l3 = e3.dyn_tree, c3 = e3.max_code, d2 = e3.stat_desc.static_tree, p2 = e3.stat_desc.has_stree, f2 = e3.stat_desc.extra_bits, m2 = e3.stat_desc.extra_base, g2 = e3.stat_desc.max_length, v2 = 0;
          for (a3 = 0; a3 <= h; a3++)
            t3.bl_count[a3] = 0;
          for (l3[2 * t3.heap[t3.heap_max] + 1] = 0, n3 = t3.heap_max + 1; n3 < u; n3++)
            g2 < (a3 = l3[2 * l3[2 * (i3 = t3.heap[n3]) + 1] + 1] + 1) && (a3 = g2, v2++), l3[2 * i3 + 1] = a3, c3 < i3 || (t3.bl_count[a3]++, o3 = 0, m2 <= i3 && (o3 = f2[i3 - m2]), s3 = l3[2 * i3], t3.opt_len += s3 * (a3 + o3), p2 && (t3.static_len += s3 * (d2[2 * i3 + 1] + o3)));
          if (v2 !== 0) {
            do {
              for (a3 = g2 - 1; t3.bl_count[a3] === 0; )
                a3--;
              t3.bl_count[a3]--, t3.bl_count[a3 + 1] += 2, t3.bl_count[g2]--, v2 -= 2;
            } while (0 < v2);
            for (a3 = g2; a3 !== 0; a3--)
              for (i3 = t3.bl_count[a3]; i3 !== 0; )
                c3 < (r3 = t3.heap[--n3]) || (l3[2 * r3 + 1] !== a3 && (t3.opt_len += (a3 - l3[2 * r3 + 1]) * l3[2 * r3], l3[2 * r3 + 1] = a3), i3--);
          }
        }(t2, e2), N(a2, c2, t2.bl_count);
      }
      function H(t2, e2, n2) {
        var i2, r2, a2 = -1, o2 = e2[1], s2 = 0, l2 = 7, c2 = 4;
        for (o2 === 0 && (l2 = 138, c2 = 3), e2[2 * (n2 + 1) + 1] = 65535, i2 = 0; i2 <= n2; i2++)
          r2 = o2, o2 = e2[2 * (i2 + 1) + 1], ++s2 < l2 && r2 === o2 || (s2 < c2 ? t2.bl_tree[2 * r2] += s2 : r2 !== 0 ? (r2 !== a2 && t2.bl_tree[2 * r2]++, t2.bl_tree[2 * f]++) : s2 <= 10 ? t2.bl_tree[2 * m]++ : t2.bl_tree[2 * g]++, a2 = r2, c2 = (s2 = 0) === o2 ? (l2 = 138, 3) : r2 === o2 ? (l2 = 6, 3) : (l2 = 7, 4));
      }
      function W(t2, e2, n2) {
        var i2, r2, a2 = -1, o2 = e2[1], s2 = 0, l2 = 7, c2 = 4;
        for (o2 === 0 && (l2 = 138, c2 = 3), i2 = 0; i2 <= n2; i2++)
          if (r2 = o2, o2 = e2[2 * (i2 + 1) + 1], !(++s2 < l2 && r2 === o2)) {
            if (s2 < c2)
              for (; k(t2, r2, t2.bl_tree), --s2 != 0; )
                ;
            else
              r2 !== 0 ? (r2 !== a2 && (k(t2, r2, t2.bl_tree), s2--), k(t2, f, t2.bl_tree), R(t2, s2 - 3, 2)) : s2 <= 10 ? (k(t2, m, t2.bl_tree), R(t2, s2 - 3, 3)) : (k(t2, g, t2.bl_tree), R(t2, s2 - 11, 7));
            a2 = r2, c2 = (s2 = 0) === o2 ? (l2 = 138, 3) : r2 === o2 ? (l2 = 6, 3) : (l2 = 7, 4);
          }
      }
      r(A);
      var J = false;
      function q(t2, e2, n2, r2) {
        var o2, s2, l2;
        R(t2, (a << 1) + (r2 ? 1 : 0), 3), s2 = e2, l2 = n2, j(o2 = t2), P(o2, l2), P(o2, ~l2), i.arraySet(o2.pending_buf, o2.window, s2, l2, o2.pending), o2.pending += l2;
      }
      n._tr_init = function(t2) {
        J || (function() {
          var t3, e2, n2, i2, r2, a2 = new Array(h + 1);
          for (i2 = n2 = 0; i2 < 28; i2++)
            for (C[i2] = n2, t3 = 0; t3 < 1 << v[i2]; t3++)
              S[n2++] = i2;
          for (S[n2 - 1] = i2, i2 = r2 = 0; i2 < 16; i2++)
            for (A[i2] = r2, t3 = 0; t3 < 1 << y[i2]; t3++)
              _5[r2++] = i2;
          for (r2 >>= 7; i2 < l; i2++)
            for (A[i2] = r2 << 7, t3 = 0; t3 < 1 << y[i2] - 7; t3++)
              _5[256 + r2++] = i2;
          for (e2 = 0; e2 <= h; e2++)
            a2[e2] = 0;
          for (t3 = 0; t3 <= 143; )
            w[2 * t3 + 1] = 8, t3++, a2[8]++;
          for (; t3 <= 255; )
            w[2 * t3 + 1] = 9, t3++, a2[9]++;
          for (; t3 <= 279; )
            w[2 * t3 + 1] = 7, t3++, a2[7]++;
          for (; t3 <= 287; )
            w[2 * t3 + 1] = 8, t3++, a2[8]++;
          for (N(w, s + 1, a2), t3 = 0; t3 < l; t3++)
            M[2 * t3 + 1] = 5, M[2 * t3] = B(t3, 5);
          T = new O(w, v, o + 1, s, h), E = new O(M, y, 0, l, h), D = new O(new Array(0), x, 0, c, 7);
        }(), J = true), t2.l_desc = new L(t2.dyn_ltree, T), t2.d_desc = new L(t2.dyn_dtree, E), t2.bl_desc = new L(t2.bl_tree, D), t2.bi_buf = 0, t2.bi_valid = 0, F(t2);
      }, n._tr_stored_block = q, n._tr_flush_block = function(t2, e2, n2, i2) {
        var r2, a2, s2 = 0;
        0 < t2.level ? (t2.strm.data_type === 2 && (t2.strm.data_type = function(t3) {
          var e3, n3 = 4093624447;
          for (e3 = 0; e3 <= 31; e3++, n3 >>>= 1)
            if (1 & n3 && t3.dyn_ltree[2 * e3] !== 0)
              return 0;
          if (t3.dyn_ltree[18] !== 0 || t3.dyn_ltree[20] !== 0 || t3.dyn_ltree[26] !== 0)
            return 1;
          for (e3 = 32; e3 < o; e3++)
            if (t3.dyn_ltree[2 * e3] !== 0)
              return 1;
          return 0;
        }(t2)), U(t2, t2.l_desc), U(t2, t2.d_desc), s2 = function(t3) {
          var e3;
          for (H(t3, t3.dyn_ltree, t3.l_desc.max_code), H(t3, t3.dyn_dtree, t3.d_desc.max_code), U(t3, t3.bl_desc), e3 = c - 1; 3 <= e3 && t3.bl_tree[2 * b[e3] + 1] === 0; e3--)
            ;
          return t3.opt_len += 3 * (e3 + 1) + 5 + 5 + 4, e3;
        }(t2), r2 = t2.opt_len + 3 + 7 >>> 3, (a2 = t2.static_len + 3 + 7 >>> 3) <= r2 && (r2 = a2)) : r2 = a2 = n2 + 5, n2 + 4 <= r2 && e2 !== -1 ? q(t2, e2, n2, i2) : t2.strategy === 4 || a2 === r2 ? (R(t2, 2 + (i2 ? 1 : 0), 3), G(t2, w, M)) : (R(t2, 4 + (i2 ? 1 : 0), 3), function(t3, e3, n3, i3) {
          var r3;
          for (R(t3, e3 - 257, 5), R(t3, n3 - 1, 5), R(t3, i3 - 4, 4), r3 = 0; r3 < i3; r3++)
            R(t3, t3.bl_tree[2 * b[r3] + 1], 3);
          W(t3, t3.dyn_ltree, e3 - 1), W(t3, t3.dyn_dtree, n3 - 1);
        }(t2, t2.l_desc.max_code + 1, t2.d_desc.max_code + 1, s2 + 1), G(t2, t2.dyn_ltree, t2.dyn_dtree)), F(t2), i2 && j(t2);
      }, n._tr_tally = function(t2, e2, n2) {
        return t2.pending_buf[t2.d_buf + 2 * t2.last_lit] = e2 >>> 8 & 255, t2.pending_buf[t2.d_buf + 2 * t2.last_lit + 1] = 255 & e2, t2.pending_buf[t2.l_buf + t2.last_lit] = 255 & n2, t2.last_lit++, e2 === 0 ? t2.dyn_ltree[2 * n2]++ : (t2.matches++, e2--, t2.dyn_ltree[2 * (S[n2] + o + 1)]++, t2.dyn_dtree[2 * I(e2)]++), t2.last_lit === t2.lit_bufsize - 1;
      }, n._tr_align = function(t2) {
        var e2;
        R(t2, 2, 3), k(t2, p, w), (e2 = t2).bi_valid === 16 ? (P(e2, e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0) : 8 <= e2.bi_valid && (e2.pending_buf[e2.pending++] = 255 & e2.bi_buf, e2.bi_buf >>= 8, e2.bi_valid -= 8);
      };
    }, { "../utils/common": 4 }], 16: [function(t, e, n) {
      "use strict";
      e.exports = function() {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      };
    }, {}], 17: [function(t, e, n) {
      var i = t("three");
      i.OrbitControls = function(t2, e2) {
        var n2, r, a, o, s;
        e2 === void 0 && console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'), e2 === document && console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'), this.object = t2, this.domElement = e2, this.enabled = true, this.target = new i.Vector3(), this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.enableDamping = false, this.dampingFactor = 0.05, this.enableZoom = true, this.zoomSpeed = 1, this.enableRotate = true, this.rotateSpeed = 1, this.enablePan = true, this.panSpeed = 1, this.screenSpacePanning = false, this.keyPanSpeed = 7, this.autoRotate = false, this.autoRotateSpeed = 2, this.enableKeys = true, this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 }, this.mouseButtons = { LEFT: i.MOUSE.ROTATE, MIDDLE: i.MOUSE.DOLLY, RIGHT: i.MOUSE.PAN }, this.touches = { ONE: i.TOUCH.ROTATE, TWO: i.TOUCH.DOLLY_PAN }, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = function() {
          return m.phi;
        }, this.getAzimuthalAngle = function() {
          return m.theta;
        }, this.saveState = function() {
          l.target0.copy(l.target), l.position0.copy(l.object.position), l.zoom0 = l.object.zoom;
        }, this.resetStatusValue = function() {
          p = d.NONE;
        }, this.reset = function() {
          l.target.copy(l.target0), l.object.position.copy(l.position0), l.object.zoom = l.zoom0, l.object.updateProjectionMatrix(), l.dispatchEvent(c), l.update(), p = d.NONE;
        }, this.update = (n2 = new i.Vector3(), r = new i.Quaternion().setFromUnitVectors(t2.up, new i.Vector3(0, 1, 0)), a = r.clone().inverse(), o = new i.Vector3(), s = new i.Quaternion(), function() {
          var t3 = l.object.position;
          return n2.copy(t3).sub(l.target), n2.applyQuaternion(r), m.setFromVector3(n2), l.autoRotate && p === d.NONE && O(2 * Math.PI / 60 / 60 * l.autoRotateSpeed), l.enableDamping ? (m.theta += g.theta * l.dampingFactor, m.phi += g.phi * l.dampingFactor) : (m.theta += g.theta, m.phi += g.phi), m.theta = Math.max(l.minAzimuthAngle, Math.min(l.maxAzimuthAngle, m.theta)), m.phi = Math.max(l.minPolarAngle, Math.min(l.maxPolarAngle, m.phi)), m.makeSafe(), m.radius *= v, m.radius = Math.max(l.minDistance, Math.min(l.maxDistance, m.radius)), l.enableDamping === true ? l.target.addScaledVector(y, l.dampingFactor) : l.target.add(y), n2.setFromSpherical(m), n2.applyQuaternion(a), t3.copy(l.target).add(n2), l.object.lookAt(l.target), l.enableDamping === true ? (g.theta *= 1 - l.dampingFactor, g.phi *= 1 - l.dampingFactor, y.multiplyScalar(1 - l.dampingFactor)) : (g.set(0, 0, 0), y.set(0, 0, 0)), v = 1, !(!(x || o.distanceToSquared(l.object.position) > f || 8 * (1 - s.dot(l.object.quaternion)) > f) || (l.dispatchEvent(c), o.copy(l.object.position), s.copy(l.object.quaternion), x = false));
        }), this.dispose = function() {
          l.domElement.removeEventListener("contextmenu", nt, false), l.domElement.removeEventListener("mousedown", X, false), l.domElement.removeEventListener("wheel", $2, false), l.domElement.removeEventListener("touchstart", Q, false), l.domElement.removeEventListener("touchend", et, false), l.domElement.removeEventListener("touchmove", tt, false), document.removeEventListener("mousemove", Y, false), document.removeEventListener("mouseup", Z, false), l.domElement.removeEventListener("keydown", K, false);
        };
        var l = this, c = { type: "change" }, u = { type: "start" }, h = { type: "end" }, d = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_PAN: 4, TOUCH_DOLLY_PAN: 5, TOUCH_DOLLY_ROTATE: 6 }, p = d.NONE, f = 1e-6, m = new i.Spherical(), g = new i.Spherical(), v = 1, y = new i.Vector3(), x = false, b = new i.Vector2(), w = new i.Vector2(), M = new i.Vector2(), _5 = new i.Vector2(), S = new i.Vector2(), C = new i.Vector2(), T = new i.Vector2(), E = new i.Vector2(), D = new i.Vector2();
        function A() {
          return Math.pow(0.95, l.zoomSpeed);
        }
        function O(t3) {
          g.theta -= t3;
        }
        function L(t3) {
          g.phi -= t3;
        }
        var I, P, R, k = (I = new i.Vector3(), function(t3, e3) {
          I.setFromMatrixColumn(e3, 0), I.multiplyScalar(-t3), y.add(I);
        }), B = (P = new i.Vector3(), function(t3, e3) {
          l.screenSpacePanning === true ? P.setFromMatrixColumn(e3, 1) : (P.setFromMatrixColumn(e3, 0), P.crossVectors(l.object.up, P)), P.multiplyScalar(t3), y.add(P);
        }), N = (R = new i.Vector3(), function(t3, e3) {
          var n3 = l.domElement;
          if (l.object.isPerspectiveCamera) {
            var i2 = l.object.position;
            R.copy(i2).sub(l.target);
            var r2 = R.length();
            r2 *= Math.tan(l.object.fov / 2 * Math.PI / 180), k(2 * t3 * r2 / n3.clientHeight, l.object.matrix), B(2 * e3 * r2 / n3.clientHeight, l.object.matrix);
          } else
            l.object.isOrthographicCamera ? (k(t3 * (l.object.right - l.object.left) / l.object.zoom / n3.clientWidth, l.object.matrix), B(e3 * (l.object.top - l.object.bottom) / l.object.zoom / n3.clientHeight, l.object.matrix)) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), l.enablePan = false);
        });
        function F(t3) {
          l.object.isPerspectiveCamera ? v /= t3 : l.object.isOrthographicCamera ? (l.object.zoom = Math.max(l.minZoom, Math.min(l.maxZoom, l.object.zoom * t3)), l.object.updateProjectionMatrix(), x = true) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), l.enableZoom = false);
        }
        function j(t3) {
          l.object.isPerspectiveCamera ? v *= t3 : l.object.isOrthographicCamera ? (l.object.zoom = Math.max(l.minZoom, Math.min(l.maxZoom, l.object.zoom / t3)), l.object.updateProjectionMatrix(), x = true) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), l.enableZoom = false);
        }
        function V(t3) {
          b.set(t3.clientX, t3.clientY);
        }
        function z(t3) {
          _5.set(t3.clientX, t3.clientY);
        }
        function G(t3) {
          if (t3.touches.length == 1)
            b.set(t3.touches[0].pageX, t3.touches[0].pageY);
          else {
            var e3 = 0.5 * (t3.touches[0].pageX + t3.touches[1].pageX), n3 = 0.5 * (t3.touches[0].pageY + t3.touches[1].pageY);
            b.set(e3, n3);
          }
        }
        function U(t3) {
          if (t3.touches.length == 1)
            _5.set(t3.touches[0].pageX, t3.touches[0].pageY);
          else {
            var e3 = 0.5 * (t3.touches[0].pageX + t3.touches[1].pageX), n3 = 0.5 * (t3.touches[0].pageY + t3.touches[1].pageY);
            _5.set(e3, n3);
          }
        }
        function H(t3) {
          var e3 = t3.touches[0].pageX - t3.touches[1].pageX, n3 = t3.touches[0].pageY - t3.touches[1].pageY, i2 = Math.sqrt(e3 * e3 + n3 * n3);
          T.set(0, i2);
        }
        function W(t3) {
          if (t3.touches.length == 1)
            w.set(t3.touches[0].pageX, t3.touches[0].pageY);
          else {
            var e3 = 0.5 * (t3.touches[0].pageX + t3.touches[1].pageX), n3 = 0.5 * (t3.touches[0].pageY + t3.touches[1].pageY);
            w.set(e3, n3);
          }
          M.subVectors(w, b).multiplyScalar(l.rotateSpeed);
          var i2 = l.domElement;
          O(2 * Math.PI * M.x / i2.clientHeight), L(2 * Math.PI * M.y / i2.clientHeight), b.copy(w);
        }
        function J(t3) {
          if (t3.touches.length == 1)
            S.set(t3.touches[0].pageX, t3.touches[0].pageY);
          else {
            var e3 = 0.5 * (t3.touches[0].pageX + t3.touches[1].pageX), n3 = 0.5 * (t3.touches[0].pageY + t3.touches[1].pageY);
            S.set(e3, n3);
          }
          C.subVectors(S, _5).multiplyScalar(l.panSpeed), N(C.x, C.y), _5.copy(S);
        }
        function q(t3) {
          var e3 = t3.touches[0].pageX - t3.touches[1].pageX, n3 = t3.touches[0].pageY - t3.touches[1].pageY, i2 = Math.sqrt(e3 * e3 + n3 * n3);
          E.set(0, i2), D.set(0, Math.pow(E.y / T.y, l.zoomSpeed)), F(D.y), T.copy(E);
        }
        function X(t3) {
          if (l.enabled !== false) {
            switch (t3.preventDefault(), l.domElement.focus ? l.domElement.focus() : window.focus(), t3.button) {
              case 0:
                switch (l.mouseButtons.LEFT) {
                  case i.MOUSE.ROTATE:
                    if (t3.ctrlKey || t3.metaKey || t3.shiftKey) {
                      if (l.enablePan === false)
                        return;
                      z(t3), p = d.PAN;
                    } else {
                      if (l.enableRotate === false)
                        return;
                      V(t3), p = d.ROTATE;
                    }
                    break;
                  case i.MOUSE.PAN:
                    if (t3.ctrlKey || t3.metaKey || t3.shiftKey) {
                      if (l.enableRotate === false)
                        return;
                      V(t3), p = d.ROTATE;
                    } else {
                      if (l.enablePan === false)
                        return;
                      z(t3), p = d.PAN;
                    }
                    break;
                  default:
                    p = d.NONE;
                }
                break;
              case 1:
                switch (l.mouseButtons.MIDDLE) {
                  case i.MOUSE.DOLLY:
                    if (l.enableZoom === false)
                      return;
                    e3 = t3, T.set(e3.clientX, e3.clientY), p = d.DOLLY;
                    break;
                  case i.MOUSE.PAN:
                    if (l.enablePan === false)
                      return;
                    z(t3), p = d.PAN;
                    break;
                  default:
                    p = d.NONE;
                }
                break;
              case 2:
                switch (l.mouseButtons.RIGHT) {
                  case i.MOUSE.ROTATE:
                    if (l.enableRotate === false)
                      return;
                    V(t3), p = d.ROTATE;
                    break;
                  case i.MOUSE.PAN:
                    if (l.enablePan === false)
                      return;
                    z(t3), p = d.PAN;
                    break;
                  default:
                    p = d.NONE;
                }
            }
            var e3;
            p !== d.NONE && (document.addEventListener("mousemove", Y, false), document.addEventListener("mouseup", Z, false), l.dispatchEvent(u));
          }
        }
        function Y(t3) {
          var e3, n3;
          if (l.enabled !== false)
            switch (t3.preventDefault(), p) {
              case d.ROTATE:
                if (l.enableRotate === false)
                  return;
                !function(t4) {
                  w.set(t4.clientX, t4.clientY), M.subVectors(w, b).multiplyScalar(l.rotateSpeed);
                  var e4 = l.domElement;
                  O(2 * Math.PI * M.x / e4.clientHeight), L(2 * Math.PI * M.y / e4.clientHeight), b.copy(w), l.update();
                }(t3);
                break;
              case d.DOLLY:
                if (l.enableZoom === false)
                  return;
                n3 = t3, E.set(n3.clientX, n3.clientY), D.subVectors(E, T), 0 < D.y ? F(A()) : D.y < 0 && j(A()), T.copy(E), l.update();
                break;
              case d.PAN:
                if (l.enablePan === false)
                  return;
                e3 = t3, S.set(e3.clientX, e3.clientY), C.subVectors(S, _5).multiplyScalar(l.panSpeed), N(C.x, C.y), _5.copy(S), l.update();
            }
        }
        function Z(t3) {
          l.enabled !== false && (document.removeEventListener("mousemove", Y, false), document.removeEventListener("mouseup", Z, false), l.dispatchEvent(h), p = d.NONE);
        }
        function $2(t3) {
          var e3;
          l.enabled === false || l.enableZoom === false || p !== d.NONE && p !== d.ROTATE || (t3.preventDefault(), t3.stopPropagation(), l.dispatchEvent(u), (e3 = t3).deltaY < 0 ? j(A()) : 0 < e3.deltaY && F(A()), l.update(), l.dispatchEvent(h));
        }
        function K(t3) {
          l.enabled !== false && l.enableKeys !== false && l.enablePan !== false && function(t4) {
            var e3 = false;
            switch (t4.keyCode) {
              case l.keys.UP:
                N(0, l.keyPanSpeed), e3 = true;
                break;
              case l.keys.BOTTOM:
                N(0, -l.keyPanSpeed), e3 = true;
                break;
              case l.keys.LEFT:
                N(l.keyPanSpeed, 0), e3 = true;
                break;
              case l.keys.RIGHT:
                N(-l.keyPanSpeed, 0), e3 = true;
            }
            e3 && (t4.preventDefault(), l.update());
          }(t3);
        }
        function Q(t3) {
          if (l.enabled !== false) {
            switch (t3.preventDefault(), t3.touches.length) {
              case 1:
                switch (l.touches.ONE) {
                  case i.TOUCH.ROTATE:
                    if (l.enableRotate === false)
                      return;
                    G(t3), p = d.TOUCH_ROTATE;
                    break;
                  case i.TOUCH.PAN:
                    if (l.enablePan === false)
                      return;
                    U(t3), p = d.TOUCH_PAN;
                    break;
                  default:
                    p = d.NONE;
                }
                break;
              case 2:
                switch (l.touches.TWO) {
                  case i.TOUCH.DOLLY_PAN:
                    if (l.enableZoom === false && l.enablePan === false)
                      return;
                    n3 = t3, l.enableZoom && H(n3), l.enablePan && U(n3), p = d.TOUCH_DOLLY_PAN;
                    break;
                  case i.TOUCH.DOLLY_ROTATE:
                    if (l.enableZoom === false && l.enableRotate === false)
                      return;
                    e3 = t3, l.enableZoom && H(e3), l.enableRotate && G(e3), p = d.TOUCH_DOLLY_ROTATE;
                    break;
                  default:
                    p = d.NONE;
                }
                break;
              default:
                p = d.NONE;
            }
            var e3, n3;
            p !== d.NONE && l.dispatchEvent(u);
          }
        }
        function tt(t3) {
          var e3, n3;
          if (l.enabled !== false)
            switch (t3.preventDefault(), t3.stopPropagation(), p) {
              case d.TOUCH_ROTATE:
                if (l.enableRotate === false)
                  return;
                W(t3), l.update();
                break;
              case d.TOUCH_PAN:
                if (l.enablePan === false)
                  return;
                J(t3), l.update();
                break;
              case d.TOUCH_DOLLY_PAN:
                if (l.enableZoom === false && l.enablePan === false)
                  return;
                n3 = t3, l.enableZoom && q(n3), l.enablePan && J(n3), l.update();
                break;
              case d.TOUCH_DOLLY_ROTATE:
                if (l.enableZoom === false && l.enableRotate === false)
                  return;
                e3 = t3, l.enableZoom && q(e3), l.enableRotate && W(e3), l.update();
                break;
              default:
                p = d.NONE;
            }
        }
        function et(t3) {
          l.enabled !== false && (l.dispatchEvent(h), p = d.NONE);
        }
        function nt(t3) {
          l.enabled !== false && t3.preventDefault();
        }
        l.domElement.addEventListener("contextmenu", nt, false), l.domElement.addEventListener("mousedown", X, false), l.domElement.addEventListener("wheel", $2, false), l.domElement.addEventListener("touchstart", Q, false), l.domElement.addEventListener("touchend", et, false), l.domElement.addEventListener("touchmove", tt, false), l.domElement.addEventListener("keydown", K, false), l.domElement.tabIndex === -1 && (l.domElement.tabIndex = 0), this.update();
      }, i.OrbitControls.prototype = Object.create(i.EventDispatcher.prototype), i.OrbitControls.prototype.constructor = i.OrbitControls, i.MapControls = function(t2, e2) {
        i.OrbitControls.call(this, t2, e2), this.mouseButtons.LEFT = i.MOUSE.PAN, this.mouseButtons.RIGHT = i.MOUSE.ROTATE, this.touches.ONE = i.TOUCH.PAN, this.touches.TWO = i.TOUCH.DOLLY_ROTATE;
      }, i.MapControls.prototype = Object.create(i.EventDispatcher.prototype), i.MapControls.prototype.constructor = i.MapControls, n !== void 0 && (e !== void 0 && e.exports && (n = e.exports = { OrbitControls: i.OrbitControls, MapControls: i.MapControls }), n.OrbitControls = i.OrbitControls, n.MapControls = i.MapControls);
    }, { three: 19 }], 18: [function(t, e, n) {
      (function() {
        "use strict";
        var i, r, a, o = t !== void 0, s = this.THREE || o && t("three");
        if (!s)
          throw new Error("MeshLine requires three.js");
        function l() {
          this.positions = [], this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [], this.counters = [], this.geometry = new s.BufferGeometry(), this.widthCallback = null, this.matrixWorld = new s.Matrix4();
        }
        function c(t2, e2, n2, i2, r2) {
          var a2;
          if (t2 = t2.subarray || t2.slice ? t2 : t2.buffer, n2 = n2.subarray || n2.slice ? n2 : n2.buffer, t2 = e2 ? t2.subarray ? t2.subarray(e2, r2 && e2 + r2) : t2.slice(e2, r2 && e2 + r2) : t2, n2.set)
            n2.set(t2, i2);
          else
            for (a2 = 0; a2 < t2.length; a2++)
              n2[a2 + i2] = t2[a2];
          return n2;
        }
        function u(t2) {
          s.ShaderMaterial.call(this, { uniforms: Object.assign({}, s.UniformsLib.fog, { lineWidth: { value: 1 }, map: { value: null }, useMap: { value: 0 }, alphaMap: { value: null }, useAlphaMap: { value: 0 }, color: { value: new s.Color(16777215) }, opacity: { value: 1 }, resolution: { value: new s.Vector2(1, 1) }, sizeAttenuation: { value: 1 }, near: { value: 1 }, far: { value: 1 }, dashArray: { value: 0 }, dashOffset: { value: 0 }, dashRatio: { value: 0.5 }, useDash: { value: 0 }, visibility: { value: 1 }, alphaTest: { value: 0 }, repeat: { value: new s.Vector2(1, 1) } }), vertexShader: s.ShaderChunk.meshline_vert, fragmentShader: s.ShaderChunk.meshline_frag }), this.type = "MeshLineMaterial", Object.defineProperties(this, { lineWidth: { enumerable: true, get: function() {
            return this.uniforms.lineWidth.value;
          }, set: function(t3) {
            this.uniforms.lineWidth.value = t3;
          } }, map: { enumerable: true, get: function() {
            return this.uniforms.map.value;
          }, set: function(t3) {
            this.uniforms.map.value = t3;
          } }, useMap: { enumerable: true, get: function() {
            return this.uniforms.useMap.value;
          }, set: function(t3) {
            this.uniforms.useMap.value = t3;
          } }, alphaMap: { enumerable: true, get: function() {
            return this.uniforms.alphaMap.value;
          }, set: function(t3) {
            this.uniforms.alphaMap.value = t3;
          } }, useAlphaMap: { enumerable: true, get: function() {
            return this.uniforms.useAlphaMap.value;
          }, set: function(t3) {
            this.uniforms.useAlphaMap.value = t3;
          } }, color: { enumerable: true, get: function() {
            return this.uniforms.color.value;
          }, set: function(t3) {
            this.uniforms.color.value = t3;
          } }, opacity: { enumerable: true, get: function() {
            return this.uniforms.opacity.value;
          }, set: function(t3) {
            this.uniforms.opacity.value = t3;
          } }, resolution: { enumerable: true, get: function() {
            return this.uniforms.resolution.value;
          }, set: function(t3) {
            this.uniforms.resolution.value.copy(t3);
          } }, sizeAttenuation: { enumerable: true, get: function() {
            return this.uniforms.sizeAttenuation.value;
          }, set: function(t3) {
            this.uniforms.sizeAttenuation.value = t3;
          } }, near: { enumerable: true, get: function() {
            return this.uniforms.near.value;
          }, set: function(t3) {
            this.uniforms.near.value = t3;
          } }, far: { enumerable: true, get: function() {
            return this.uniforms.far.value;
          }, set: function(t3) {
            this.uniforms.far.value = t3;
          } }, dashArray: { enumerable: true, get: function() {
            return this.uniforms.dashArray.value;
          }, set: function(t3) {
            this.uniforms.dashArray.value = t3, this.useDash = t3 !== 0 ? 1 : 0;
          } }, dashOffset: { enumerable: true, get: function() {
            return this.uniforms.dashOffset.value;
          }, set: function(t3) {
            this.uniforms.dashOffset.value = t3;
          } }, dashRatio: { enumerable: true, get: function() {
            return this.uniforms.dashRatio.value;
          }, set: function(t3) {
            this.uniforms.dashRatio.value = t3;
          } }, useDash: { enumerable: true, get: function() {
            return this.uniforms.useDash.value;
          }, set: function(t3) {
            this.uniforms.useDash.value = t3;
          } }, visibility: { enumerable: true, get: function() {
            return this.uniforms.visibility.value;
          }, set: function(t3) {
            this.uniforms.visibility.value = t3;
          } }, alphaTest: { enumerable: true, get: function() {
            return this.uniforms.alphaTest.value;
          }, set: function(t3) {
            this.uniforms.alphaTest.value = t3;
          } }, repeat: { enumerable: true, get: function() {
            return this.uniforms.repeat.value;
          }, set: function(t3) {
            this.uniforms.repeat.value.copy(t3);
          } } }), this.setValues(t2);
        }
        l.prototype.setMatrixWorld = function(t2) {
          this.matrixWorld = t2;
        }, l.prototype.setGeometry = function(t2, e2) {
          if (this.widthCallback = e2, this.positions = [], this.counters = [], t2 instanceof s.Geometry)
            for (var n2 = 0; n2 < t2.vertices.length; n2++) {
              var i2 = t2.vertices[n2];
              e2 = n2 / t2.vertices.length, this.positions.push(i2.x, i2.y, i2.z), this.positions.push(i2.x, i2.y, i2.z), this.counters.push(e2), this.counters.push(e2);
            }
          if (s.BufferGeometry, t2 instanceof Float32Array || t2 instanceof Array)
            for (n2 = 0; n2 < t2.length; n2 += 3)
              e2 = n2 / t2.length, this.positions.push(t2[n2], t2[n2 + 1], t2[n2 + 2]), this.positions.push(t2[n2], t2[n2 + 1], t2[n2 + 2]), this.counters.push(e2), this.counters.push(e2);
          this.process();
        }, l.prototype.raycast = (i = new s.Matrix4(), r = new s.Ray(), a = new s.Sphere(), function(t2, e2) {
          var n2 = t2.linePrecision, o2 = n2 * n2, l2 = this.geometry;
          if (l2.boundingSphere === null && l2.computeBoundingSphere(), a.copy(l2.boundingSphere), a.applyMatrix4(this.matrixWorld), t2.ray.intersectSphere(a) !== false) {
            i.getInverse(this.matrixWorld), r.copy(t2.ray).applyMatrix4(i);
            var c2 = new s.Vector3(), u2 = new s.Vector3(), h = new s.Vector3(), d = new s.Vector3(), p = this instanceof s.LineSegments ? 2 : 1;
            if (l2 instanceof s.BufferGeometry) {
              var f = l2.index, m = l2.attributes;
              if (f !== null)
                for (var g = f.array, v = m.position.array, y = 0, x = g.length - 1; y < x; y += p) {
                  var b = g[y], w = g[y + 1];
                  c2.fromArray(v, 3 * b), u2.fromArray(v, 3 * w), o2 < r.distanceSqToSegment(c2, u2, d, h) || (d.applyMatrix4(this.matrixWorld), (S = t2.ray.origin.distanceTo(d)) < t2.near || S > t2.far || e2.push({ distance: S, point: h.clone().applyMatrix4(this.matrixWorld), index: y, face: null, faceIndex: null, object: this }));
                }
              else
                for (y = 0, x = (v = m.position.array).length / 3 - 1; y < x; y += p)
                  c2.fromArray(v, 3 * y), u2.fromArray(v, 3 * y + 3), o2 < r.distanceSqToSegment(c2, u2, d, h) || (d.applyMatrix4(this.matrixWorld), (S = t2.ray.origin.distanceTo(d)) < t2.near || S > t2.far || e2.push({ distance: S, point: h.clone().applyMatrix4(this.matrixWorld), index: y, face: null, faceIndex: null, object: this }));
            } else if (l2 instanceof s.Geometry) {
              var M = l2.vertices, _5 = M.length;
              for (y = 0; y < _5 - 1; y += p) {
                var S;
                o2 < r.distanceSqToSegment(M[y], M[y + 1], d, h) || (d.applyMatrix4(this.matrixWorld), (S = t2.ray.origin.distanceTo(d)) < t2.near || S > t2.far || e2.push({ distance: S, point: h.clone().applyMatrix4(this.matrixWorld), index: y, face: null, faceIndex: null, object: this }));
              }
            }
          }
        }), l.prototype.compareV3 = function(t2, e2) {
          var n2 = 6 * t2, i2 = 6 * e2;
          return this.positions[n2] === this.positions[i2] && this.positions[1 + n2] === this.positions[1 + i2] && this.positions[2 + n2] === this.positions[2 + i2];
        }, l.prototype.copyV3 = function(t2) {
          var e2 = 6 * t2;
          return [this.positions[e2], this.positions[1 + e2], this.positions[2 + e2]];
        }, l.prototype.process = function() {
          var t2, e2, n2 = this.positions.length / 6;
          this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [];
          for (var i2 = 0; i2 < n2; i2++)
            this.side.push(1), this.side.push(-1);
          for (i2 = 0; i2 < n2; i2++)
            t2 = this.widthCallback ? this.widthCallback(i2 / (n2 - 1)) : 1, this.width.push(t2), this.width.push(t2);
          for (i2 = 0; i2 < n2; i2++)
            this.uvs.push(i2 / (n2 - 1), 0), this.uvs.push(i2 / (n2 - 1), 1);
          for (e2 = this.compareV3(0, n2 - 1) ? this.copyV3(n2 - 2) : this.copyV3(0), this.previous.push(e2[0], e2[1], e2[2]), this.previous.push(e2[0], e2[1], e2[2]), i2 = 0; i2 < n2 - 1; i2++)
            e2 = this.copyV3(i2), this.previous.push(e2[0], e2[1], e2[2]), this.previous.push(e2[0], e2[1], e2[2]);
          for (i2 = 1; i2 < n2; i2++)
            e2 = this.copyV3(i2), this.next.push(e2[0], e2[1], e2[2]), this.next.push(e2[0], e2[1], e2[2]);
          for (e2 = this.compareV3(n2 - 1, 0) ? this.copyV3(1) : this.copyV3(n2 - 1), this.next.push(e2[0], e2[1], e2[2]), this.next.push(e2[0], e2[1], e2[2]), i2 = 0; i2 < n2 - 1; i2++) {
            var r2 = 2 * i2;
            this.indices_array.push(r2, 1 + r2, 2 + r2), this.indices_array.push(2 + r2, 1 + r2, 3 + r2);
          }
          this.attributes ? (this.attributes.position.copyArray(new Float32Array(this.positions)), this.attributes.position.needsUpdate = true, this.attributes.previous.copyArray(new Float32Array(this.previous)), this.attributes.previous.needsUpdate = true, this.attributes.next.copyArray(new Float32Array(this.next)), this.attributes.next.needsUpdate = true, this.attributes.side.copyArray(new Float32Array(this.side)), this.attributes.side.needsUpdate = true, this.attributes.width.copyArray(new Float32Array(this.width)), this.attributes.width.needsUpdate = true, this.attributes.uv.copyArray(new Float32Array(this.uvs)), this.attributes.uv.needsUpdate = true, this.attributes.index.copyArray(new Uint16Array(this.indices_array)), this.attributes.index.needsUpdate = true) : this.attributes = { position: new s.BufferAttribute(new Float32Array(this.positions), 3), previous: new s.BufferAttribute(new Float32Array(this.previous), 3), next: new s.BufferAttribute(new Float32Array(this.next), 3), side: new s.BufferAttribute(new Float32Array(this.side), 1), width: new s.BufferAttribute(new Float32Array(this.width), 1), uv: new s.BufferAttribute(new Float32Array(this.uvs), 2), index: new s.BufferAttribute(new Uint16Array(this.indices_array), 1), counters: new s.BufferAttribute(new Float32Array(this.counters), 1) }, this.geometry.setAttribute("position", this.attributes.position), this.geometry.setAttribute("previous", this.attributes.previous), this.geometry.setAttribute("next", this.attributes.next), this.geometry.setAttribute("side", this.attributes.side), this.geometry.setAttribute("width", this.attributes.width), this.geometry.setAttribute("uv", this.attributes.uv), this.geometry.setAttribute("counters", this.attributes.counters), this.geometry.setIndex(this.attributes.index);
        }, l.prototype.advance = function(t2) {
          var e2 = this.attributes.position.array, n2 = this.attributes.previous.array, i2 = this.attributes.next.array, r2 = e2.length;
          c(e2, 0, n2, 0, r2), c(e2, 6, e2, 0, r2 - 6), e2[r2 - 6] = t2.x, e2[r2 - 5] = t2.y, e2[r2 - 4] = t2.z, e2[r2 - 3] = t2.x, e2[r2 - 2] = t2.y, e2[r2 - 1] = t2.z, c(e2, 6, i2, 0, r2 - 6), i2[r2 - 6] = t2.x, i2[r2 - 5] = t2.y, i2[r2 - 4] = t2.z, i2[r2 - 3] = t2.x, i2[r2 - 2] = t2.y, i2[r2 - 1] = t2.z, this.attributes.position.needsUpdate = true, this.attributes.previous.needsUpdate = true, this.attributes.next.needsUpdate = true;
        }, s.ShaderChunk.meshline_vert = ["", s.ShaderChunk.logdepthbuf_pars_vertex, s.ShaderChunk.fog_pars_vertex, "", "attribute vec3 previous;", "attribute vec3 next;", "attribute float side;", "attribute float width;", "attribute float counters;", "", "uniform vec2 resolution;", "uniform float lineWidth;", "uniform vec3 color;", "uniform float opacity;", "uniform float sizeAttenuation;", "", "varying vec2 vUV;", "varying vec4 vColor;", "varying float vCounters;", "", "vec2 fix( vec4 i, float aspect ) {", "", "    vec2 res = i.xy / i.w;", "    res.x *= aspect;", "	 vCounters = counters;", "    return res;", "", "}", "", "void main() {", "", "    float aspect = resolution.x / resolution.y;", "", "    vColor = vec4( color, opacity );", "    vUV = uv;", "", "    mat4 m = projectionMatrix * modelViewMatrix;", "    vec4 finalPosition = m * vec4( position, 1.0 );", "    vec4 prevPos = m * vec4( previous, 1.0 );", "    vec4 nextPos = m * vec4( next, 1.0 );", "", "    vec2 currentP = fix( finalPosition, aspect );", "    vec2 prevP = fix( prevPos, aspect );", "    vec2 nextP = fix( nextPos, aspect );", "", "    float w = lineWidth * width;", "", "    vec2 dir;", "    if( nextP == currentP ) dir = normalize( currentP - prevP );", "    else if( prevP == currentP ) dir = normalize( nextP - currentP );", "    else {", "        vec2 dir1 = normalize( currentP - prevP );", "        vec2 dir2 = normalize( nextP - currentP );", "        dir = normalize( dir1 + dir2 );", "", "        vec2 perp = vec2( -dir1.y, dir1.x );", "        vec2 miter = vec2( -dir.y, dir.x );", "        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );", "", "    }", "", "    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;", "    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );", "    normal.xy *= .5 * w;", "    normal *= projectionMatrix;", "    if( sizeAttenuation == 0. ) {", "        normal.xy *= finalPosition.w;", "        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;", "    }", "", "    finalPosition.xy += normal.xy * side;", "", "    gl_Position = finalPosition;", "", s.ShaderChunk.logdepthbuf_vertex, s.ShaderChunk.fog_vertex && "    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", s.ShaderChunk.fog_vertex, "}"].join("\n"), s.ShaderChunk.meshline_frag = ["", s.ShaderChunk.fog_pars_fragment, s.ShaderChunk.logdepthbuf_pars_fragment, "", "uniform sampler2D map;", "uniform sampler2D alphaMap;", "uniform float useMap;", "uniform float useAlphaMap;", "uniform float useDash;", "uniform float dashArray;", "uniform float dashOffset;", "uniform float dashRatio;", "uniform float visibility;", "uniform float alphaTest;", "uniform vec2 repeat;", "", "varying vec2 vUV;", "varying vec4 vColor;", "varying float vCounters;", "", "void main() {", "", s.ShaderChunk.logdepthbuf_fragment, "", "    vec4 c = vColor;", "    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );", "    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;", "    if( c.a < alphaTest ) discard;", "    if( useDash == 1. ){", "        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));", "    }", "    gl_FragColor = c;", "    gl_FragColor.a *= step(vCounters, visibility);", "", s.ShaderChunk.fog_fragment, "}"].join("\n"), ((u.prototype = Object.create(s.ShaderMaterial.prototype)).constructor = u).prototype.isMeshLineMaterial = true, u.prototype.copy = function(t2) {
          return s.ShaderMaterial.prototype.copy.call(this, t2), this.lineWidth = t2.lineWidth, this.map = t2.map, this.useMap = t2.useMap, this.alphaMap = t2.alphaMap, this.useAlphaMap = t2.useAlphaMap, this.color.copy(t2.color), this.opacity = t2.opacity, this.resolution.copy(t2.resolution), this.sizeAttenuation = t2.sizeAttenuation, this.near = t2.near, this.far = t2.far, this.dashArray.copy(t2.dashArray), this.dashOffset.copy(t2.dashOffset), this.dashRatio.copy(t2.dashRatio), this.useDash = t2.useDash, this.visibility = t2.visibility, this.alphaTest = t2.alphaTest, this.repeat.copy(t2.repeat), this;
        }, n !== void 0 ? (e !== void 0 && e.exports && (n = e.exports = { MeshLine: l, MeshLineMaterial: u }), n.MeshLine = l, n.MeshLineMaterial = u) : (this.MeshLine = l, this.MeshLineMaterial = u);
      }).call(this);
    }, { three: 19 }], 19: [function(t, e, n) {
      var i, r;
      i = this, r = function(t2) {
        "use strict";
        Number.EPSILON === void 0 && (Number.EPSILON = Math.pow(2, -52)), Number.isInteger === void 0 && (Number.isInteger = function(t3) {
          return typeof t3 == "number" && isFinite(t3) && Math.floor(t3) === t3;
        }), Math.sign === void 0 && (Math.sign = function(t3) {
          return t3 < 0 ? -1 : 0 < t3 ? 1 : +t3;
        }), "name" in Function.prototype == 0 && Object.defineProperty(Function.prototype, "name", { get: function() {
          return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
        } }), Object.assign === void 0 && (Object.assign = function(t3) {
          if (t3 == null)
            throw new TypeError("Cannot convert undefined or null to object");
          for (var e3 = Object(t3), n3 = 1; n3 < arguments.length; n3++) {
            var i3 = arguments[n3];
            if (i3 != null)
              for (var r3 in i3)
                Object.prototype.hasOwnProperty.call(i3, r3) && (e3[r3] = i3[r3]);
          }
          return e3;
        });
        var e2 = 0, n2 = 1, i2 = 2, r2 = 1, a = 2, o = 3, s = 0, l = 1, c = 2, u = 0, h = 2, d = 0, p = 1, f = 2, m = 3, g = 4, v = 5, y = 100, x = 101, b = 102, w = 103, M = 104, _5 = 200, S = 201, C = 202, T = 203, E = 204, D = 205, A = 206, O = 207, L = 208, I = 209, P = 210, R = 0, k = 1, B = 2, N = 3, F = 4, j = 5, V = 6, z = 7, G = 0, U = 1, H = 2, W = 0, J = 1, q = 2, X = 3, Y = 4, Z = 5, $2 = 301, K = 302, Q = 303, tt = 304, et = 305, nt = 306, it = 307, rt = 1e3, at = 1001, ot = 1002, st = 1003, lt = 1004, ct = 1005, ut = 1006, ht = 1007, dt = 1008, pt = 1009, ft = 1010, mt = 1011, gt = 1012, vt = 1013, yt = 1014, xt = 1015, bt = 1016, wt = 1017, Mt = 1018, _t = 1019, St = 1020, Ct = 1021, Tt = 1022, Et = 1023, Dt = 1024, At = 1025, Ot = Et, Lt = 1026, It = 1027, Pt = 1028, Rt = 1029, kt = 1030, Bt = 1031, Nt = 1032, Ft = 1033, jt = 33776, Vt = 33777, zt = 33778, Gt = 33779, Ut = 35840, Ht = 35841, Wt = 35842, Jt = 35843, qt = 36196, Xt = 37808, Yt = 37809, Zt = 37810, $t = 37811, Kt = 37812, Qt = 37813, te = 37814, ee = 37815, ne = 37816, ie = 37817, re = 37818, ae = 37819, oe = 37820, se = 37821, le = 2300, ce = 2301, ue = 2400, he = 2401, de = 2402, pe = 3e3, fe = 3001, me = 3007, ge = 3002, ve = 3003, ye = 3004, xe = 3005, be = 3006, we = 3200, Me = 3201, _e = 0, Se = 1, Ce = 7680, Te = 519, Ee = 35044, De = 35048;
        function Ae() {
        }
        Object.assign(Ae.prototype, { addEventListener: function(t3, e3) {
          this._listeners === void 0 && (this._listeners = {});
          var n3 = this._listeners;
          n3[t3] === void 0 && (n3[t3] = []), n3[t3].indexOf(e3) === -1 && n3[t3].push(e3);
        }, hasEventListener: function(t3, e3) {
          if (this._listeners === void 0)
            return false;
          var n3 = this._listeners;
          return n3[t3] !== void 0 && n3[t3].indexOf(e3) !== -1;
        }, removeEventListener: function(t3, e3) {
          if (this._listeners !== void 0) {
            var n3 = this._listeners[t3];
            if (n3 !== void 0) {
              var i3 = n3.indexOf(e3);
              i3 !== -1 && n3.splice(i3, 1);
            }
          }
        }, dispatchEvent: function(t3) {
          if (this._listeners !== void 0) {
            var e3 = this._listeners[t3.type];
            if (e3 !== void 0) {
              t3.target = this;
              for (var n3 = e3.slice(0), i3 = 0, r3 = n3.length; i3 < r3; i3++)
                n3[i3].call(this, t3);
            }
          }
        } });
        for (var Oe = [], Le = 0; Le < 256; Le++)
          Oe[Le] = (Le < 16 ? "0" : "") + Le.toString(16);
        var Ie, Pe = { DEG2RAD: Math.PI / 180, RAD2DEG: 180 / Math.PI, generateUUID: function() {
          var t3 = 4294967295 * Math.random() | 0, e3 = 4294967295 * Math.random() | 0, n3 = 4294967295 * Math.random() | 0, i3 = 4294967295 * Math.random() | 0;
          return (Oe[255 & t3] + Oe[t3 >> 8 & 255] + Oe[t3 >> 16 & 255] + Oe[t3 >> 24 & 255] + "-" + Oe[255 & e3] + Oe[e3 >> 8 & 255] + "-" + Oe[e3 >> 16 & 15 | 64] + Oe[e3 >> 24 & 255] + "-" + Oe[63 & n3 | 128] + Oe[n3 >> 8 & 255] + "-" + Oe[n3 >> 16 & 255] + Oe[n3 >> 24 & 255] + Oe[255 & i3] + Oe[i3 >> 8 & 255] + Oe[i3 >> 16 & 255] + Oe[i3 >> 24 & 255]).toUpperCase();
        }, clamp: function(t3, e3, n3) {
          return Math.max(e3, Math.min(n3, t3));
        }, euclideanModulo: function(t3, e3) {
          return (t3 % e3 + e3) % e3;
        }, mapLinear: function(t3, e3, n3, i3, r3) {
          return i3 + (t3 - e3) * (r3 - i3) / (n3 - e3);
        }, lerp: function(t3, e3, n3) {
          return (1 - n3) * t3 + n3 * e3;
        }, smoothstep: function(t3, e3, n3) {
          return t3 <= e3 ? 0 : n3 <= t3 ? 1 : (t3 = (t3 - e3) / (n3 - e3)) * t3 * (3 - 2 * t3);
        }, smootherstep: function(t3, e3, n3) {
          return t3 <= e3 ? 0 : n3 <= t3 ? 1 : (t3 = (t3 - e3) / (n3 - e3)) * t3 * t3 * (t3 * (6 * t3 - 15) + 10);
        }, randInt: function(t3, e3) {
          return t3 + Math.floor(Math.random() * (e3 - t3 + 1));
        }, randFloat: function(t3, e3) {
          return t3 + Math.random() * (e3 - t3);
        }, randFloatSpread: function(t3) {
          return t3 * (0.5 - Math.random());
        }, degToRad: function(t3) {
          return t3 * Pe.DEG2RAD;
        }, radToDeg: function(t3) {
          return t3 * Pe.RAD2DEG;
        }, isPowerOfTwo: function(t3) {
          return (t3 & t3 - 1) == 0 && t3 !== 0;
        }, ceilPowerOfTwo: function(t3) {
          return Math.pow(2, Math.ceil(Math.log(t3) / Math.LN2));
        }, floorPowerOfTwo: function(t3) {
          return Math.pow(2, Math.floor(Math.log(t3) / Math.LN2));
        }, setQuaternionFromProperEuler: function(t3, e3, n3, i3, r3) {
          var a2 = Math.cos, o2 = Math.sin, s2 = a2(n3 / 2), l2 = o2(n3 / 2), c2 = a2((e3 + i3) / 2), u2 = o2((e3 + i3) / 2), h2 = a2((e3 - i3) / 2), d2 = o2((e3 - i3) / 2), p2 = a2((i3 - e3) / 2), f2 = o2((i3 - e3) / 2);
          r3 === "XYX" ? t3.set(s2 * u2, l2 * h2, l2 * d2, s2 * c2) : r3 === "YZY" ? t3.set(l2 * d2, s2 * u2, l2 * h2, s2 * c2) : r3 === "ZXZ" ? t3.set(l2 * h2, l2 * d2, s2 * u2, s2 * c2) : r3 === "XZX" ? t3.set(s2 * u2, l2 * f2, l2 * p2, s2 * c2) : r3 === "YXY" ? t3.set(l2 * p2, s2 * u2, l2 * f2, s2 * c2) : r3 === "ZYZ" ? t3.set(l2 * f2, l2 * p2, s2 * u2, s2 * c2) : console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.");
        } };
        function Re(t3, e3) {
          this.x = t3 || 0, this.y = e3 || 0;
        }
        function ke() {
          this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], 0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
        }
        Object.defineProperties(Re.prototype, { width: { get: function() {
          return this.x;
        }, set: function(t3) {
          this.x = t3;
        } }, height: { get: function() {
          return this.y;
        }, set: function(t3) {
          this.y = t3;
        } } }), Object.assign(Re.prototype, { isVector2: true, set: function(t3, e3) {
          return this.x = t3, this.y = e3, this;
        }, setScalar: function(t3) {
          return this.x = t3, this.y = t3, this;
        }, setX: function(t3) {
          return this.x = t3, this;
        }, setY: function(t3) {
          return this.y = t3, this;
        }, setComponent: function(t3, e3) {
          switch (t3) {
            case 0:
              this.x = e3;
              break;
            case 1:
              this.y = e3;
              break;
            default:
              throw new Error("index is out of range: " + t3);
          }
          return this;
        }, getComponent: function(t3) {
          switch (t3) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            default:
              throw new Error("index is out of range: " + t3);
          }
        }, clone: function() {
          return new this.constructor(this.x, this.y);
        }, copy: function(t3) {
          return this.x = t3.x, this.y = t3.y, this;
        }, add: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t3, e3)) : (this.x += t3.x, this.y += t3.y, this);
        }, addScalar: function(t3) {
          return this.x += t3, this.y += t3, this;
        }, addVectors: function(t3, e3) {
          return this.x = t3.x + e3.x, this.y = t3.y + e3.y, this;
        }, addScaledVector: function(t3, e3) {
          return this.x += t3.x * e3, this.y += t3.y * e3, this;
        }, sub: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t3, e3)) : (this.x -= t3.x, this.y -= t3.y, this);
        }, subScalar: function(t3) {
          return this.x -= t3, this.y -= t3, this;
        }, subVectors: function(t3, e3) {
          return this.x = t3.x - e3.x, this.y = t3.y - e3.y, this;
        }, multiply: function(t3) {
          return this.x *= t3.x, this.y *= t3.y, this;
        }, multiplyScalar: function(t3) {
          return this.x *= t3, this.y *= t3, this;
        }, divide: function(t3) {
          return this.x /= t3.x, this.y /= t3.y, this;
        }, divideScalar: function(t3) {
          return this.multiplyScalar(1 / t3);
        }, applyMatrix3: function(t3) {
          var e3 = this.x, n3 = this.y, i3 = t3.elements;
          return this.x = i3[0] * e3 + i3[3] * n3 + i3[6], this.y = i3[1] * e3 + i3[4] * n3 + i3[7], this;
        }, min: function(t3) {
          return this.x = Math.min(this.x, t3.x), this.y = Math.min(this.y, t3.y), this;
        }, max: function(t3) {
          return this.x = Math.max(this.x, t3.x), this.y = Math.max(this.y, t3.y), this;
        }, clamp: function(t3, e3) {
          return this.x = Math.max(t3.x, Math.min(e3.x, this.x)), this.y = Math.max(t3.y, Math.min(e3.y, this.y)), this;
        }, clampScalar: function(t3, e3) {
          return this.x = Math.max(t3, Math.min(e3, this.x)), this.y = Math.max(t3, Math.min(e3, this.y)), this;
        }, clampLength: function(t3, e3) {
          var n3 = this.length();
          return this.divideScalar(n3 || 1).multiplyScalar(Math.max(t3, Math.min(e3, n3)));
        }, floor: function() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
        }, ceil: function() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
        }, round: function() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
        }, roundToZero: function() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
        }, negate: function() {
          return this.x = -this.x, this.y = -this.y, this;
        }, dot: function(t3) {
          return this.x * t3.x + this.y * t3.y;
        }, cross: function(t3) {
          return this.x * t3.y - this.y * t3.x;
        }, lengthSq: function() {
          return this.x * this.x + this.y * this.y;
        }, length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }, manhattanLength: function() {
          return Math.abs(this.x) + Math.abs(this.y);
        }, normalize: function() {
          return this.divideScalar(this.length() || 1);
        }, angle: function() {
          var t3 = Math.atan2(this.y, this.x);
          return t3 < 0 && (t3 += 2 * Math.PI), t3;
        }, distanceTo: function(t3) {
          return Math.sqrt(this.distanceToSquared(t3));
        }, distanceToSquared: function(t3) {
          var e3 = this.x - t3.x, n3 = this.y - t3.y;
          return e3 * e3 + n3 * n3;
        }, manhattanDistanceTo: function(t3) {
          return Math.abs(this.x - t3.x) + Math.abs(this.y - t3.y);
        }, setLength: function(t3) {
          return this.normalize().multiplyScalar(t3);
        }, lerp: function(t3, e3) {
          return this.x += (t3.x - this.x) * e3, this.y += (t3.y - this.y) * e3, this;
        }, lerpVectors: function(t3, e3, n3) {
          return this.subVectors(e3, t3).multiplyScalar(n3).add(t3);
        }, equals: function(t3) {
          return t3.x === this.x && t3.y === this.y;
        }, fromArray: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this.x = t3[e3], this.y = t3[e3 + 1], this;
        }, toArray: function(t3, e3) {
          return t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0), t3[e3] = this.x, t3[e3 + 1] = this.y, t3;
        }, fromBufferAttribute: function(t3, e3, n3) {
          return n3 !== void 0 && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = t3.getX(e3), this.y = t3.getY(e3), this;
        }, rotateAround: function(t3, e3) {
          var n3 = Math.cos(e3), i3 = Math.sin(e3), r3 = this.x - t3.x, a2 = this.y - t3.y;
          return this.x = r3 * n3 - a2 * i3 + t3.x, this.y = r3 * i3 + a2 * n3 + t3.y, this;
        } }), Object.assign(ke.prototype, { isMatrix3: true, set: function(t3, e3, n3, i3, r3, a2, o2, s2, l2) {
          var c2 = this.elements;
          return c2[0] = t3, c2[1] = i3, c2[2] = o2, c2[3] = e3, c2[4] = r3, c2[5] = s2, c2[6] = n3, c2[7] = a2, c2[8] = l2, this;
        }, identity: function() {
          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }, clone: function() {
          return new this.constructor().fromArray(this.elements);
        }, copy: function(t3) {
          var e3 = this.elements, n3 = t3.elements;
          return e3[0] = n3[0], e3[1] = n3[1], e3[2] = n3[2], e3[3] = n3[3], e3[4] = n3[4], e3[5] = n3[5], e3[6] = n3[6], e3[7] = n3[7], e3[8] = n3[8], this;
        }, setFromMatrix4: function(t3) {
          var e3 = t3.elements;
          return this.set(e3[0], e3[4], e3[8], e3[1], e3[5], e3[9], e3[2], e3[6], e3[10]), this;
        }, multiply: function(t3) {
          return this.multiplyMatrices(this, t3);
        }, premultiply: function(t3) {
          return this.multiplyMatrices(t3, this);
        }, multiplyMatrices: function(t3, e3) {
          var n3 = t3.elements, i3 = e3.elements, r3 = this.elements, a2 = n3[0], o2 = n3[3], s2 = n3[6], l2 = n3[1], c2 = n3[4], u2 = n3[7], h2 = n3[2], d2 = n3[5], p2 = n3[8], f2 = i3[0], m2 = i3[3], g2 = i3[6], v2 = i3[1], y2 = i3[4], x2 = i3[7], b2 = i3[2], w2 = i3[5], M2 = i3[8];
          return r3[0] = a2 * f2 + o2 * v2 + s2 * b2, r3[3] = a2 * m2 + o2 * y2 + s2 * w2, r3[6] = a2 * g2 + o2 * x2 + s2 * M2, r3[1] = l2 * f2 + c2 * v2 + u2 * b2, r3[4] = l2 * m2 + c2 * y2 + u2 * w2, r3[7] = l2 * g2 + c2 * x2 + u2 * M2, r3[2] = h2 * f2 + d2 * v2 + p2 * b2, r3[5] = h2 * m2 + d2 * y2 + p2 * w2, r3[8] = h2 * g2 + d2 * x2 + p2 * M2, this;
        }, multiplyScalar: function(t3) {
          var e3 = this.elements;
          return e3[0] *= t3, e3[3] *= t3, e3[6] *= t3, e3[1] *= t3, e3[4] *= t3, e3[7] *= t3, e3[2] *= t3, e3[5] *= t3, e3[8] *= t3, this;
        }, determinant: function() {
          var t3 = this.elements, e3 = t3[0], n3 = t3[1], i3 = t3[2], r3 = t3[3], a2 = t3[4], o2 = t3[5], s2 = t3[6], l2 = t3[7], c2 = t3[8];
          return e3 * a2 * c2 - e3 * o2 * l2 - n3 * r3 * c2 + n3 * o2 * s2 + i3 * r3 * l2 - i3 * a2 * s2;
        }, getInverse: function(t3, e3) {
          t3 && t3.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
          var n3 = t3.elements, i3 = this.elements, r3 = n3[0], a2 = n3[1], o2 = n3[2], s2 = n3[3], l2 = n3[4], c2 = n3[5], u2 = n3[6], h2 = n3[7], d2 = n3[8], p2 = d2 * l2 - c2 * h2, f2 = c2 * u2 - d2 * s2, m2 = h2 * s2 - l2 * u2, g2 = r3 * p2 + a2 * f2 + o2 * m2;
          if (g2 == 0) {
            var v2 = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
            if (e3 === true)
              throw new Error(v2);
            return console.warn(v2), this.identity();
          }
          var y2 = 1 / g2;
          return i3[0] = p2 * y2, i3[1] = (o2 * h2 - d2 * a2) * y2, i3[2] = (c2 * a2 - o2 * l2) * y2, i3[3] = f2 * y2, i3[4] = (d2 * r3 - o2 * u2) * y2, i3[5] = (o2 * s2 - c2 * r3) * y2, i3[6] = m2 * y2, i3[7] = (a2 * u2 - h2 * r3) * y2, i3[8] = (l2 * r3 - a2 * s2) * y2, this;
        }, transpose: function() {
          var t3, e3 = this.elements;
          return t3 = e3[1], e3[1] = e3[3], e3[3] = t3, t3 = e3[2], e3[2] = e3[6], e3[6] = t3, t3 = e3[5], e3[5] = e3[7], e3[7] = t3, this;
        }, getNormalMatrix: function(t3) {
          return this.setFromMatrix4(t3).getInverse(this).transpose();
        }, transposeIntoArray: function(t3) {
          var e3 = this.elements;
          return t3[0] = e3[0], t3[1] = e3[3], t3[2] = e3[6], t3[3] = e3[1], t3[4] = e3[4], t3[5] = e3[7], t3[6] = e3[2], t3[7] = e3[5], t3[8] = e3[8], this;
        }, setUvTransform: function(t3, e3, n3, i3, r3, a2, o2) {
          var s2 = Math.cos(r3), l2 = Math.sin(r3);
          this.set(n3 * s2, n3 * l2, -n3 * (s2 * a2 + l2 * o2) + a2 + t3, -i3 * l2, i3 * s2, -i3 * (-l2 * a2 + s2 * o2) + o2 + e3, 0, 0, 1);
        }, scale: function(t3, e3) {
          var n3 = this.elements;
          return n3[0] *= t3, n3[3] *= t3, n3[6] *= t3, n3[1] *= e3, n3[4] *= e3, n3[7] *= e3, this;
        }, rotate: function(t3) {
          var e3 = Math.cos(t3), n3 = Math.sin(t3), i3 = this.elements, r3 = i3[0], a2 = i3[3], o2 = i3[6], s2 = i3[1], l2 = i3[4], c2 = i3[7];
          return i3[0] = e3 * r3 + n3 * s2, i3[3] = e3 * a2 + n3 * l2, i3[6] = e3 * o2 + n3 * c2, i3[1] = -n3 * r3 + e3 * s2, i3[4] = -n3 * a2 + e3 * l2, i3[7] = -n3 * o2 + e3 * c2, this;
        }, translate: function(t3, e3) {
          var n3 = this.elements;
          return n3[0] += t3 * n3[2], n3[3] += t3 * n3[5], n3[6] += t3 * n3[8], n3[1] += e3 * n3[2], n3[4] += e3 * n3[5], n3[7] += e3 * n3[8], this;
        }, equals: function(t3) {
          for (var e3 = this.elements, n3 = t3.elements, i3 = 0; i3 < 9; i3++)
            if (e3[i3] !== n3[i3])
              return false;
          return true;
        }, fromArray: function(t3, e3) {
          e3 === void 0 && (e3 = 0);
          for (var n3 = 0; n3 < 9; n3++)
            this.elements[n3] = t3[n3 + e3];
          return this;
        }, toArray: function(t3, e3) {
          t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0);
          var n3 = this.elements;
          return t3[e3] = n3[0], t3[e3 + 1] = n3[1], t3[e3 + 2] = n3[2], t3[e3 + 3] = n3[3], t3[e3 + 4] = n3[4], t3[e3 + 5] = n3[5], t3[e3 + 6] = n3[6], t3[e3 + 7] = n3[7], t3[e3 + 8] = n3[8], t3;
        } });
        var Be = { getDataURL: function(t3) {
          var e3;
          if (typeof HTMLCanvasElement == "undefined")
            return t3.src;
          if (t3 instanceof HTMLCanvasElement)
            e3 = t3;
          else {
            Ie === void 0 && (Ie = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), Ie.width = t3.width, Ie.height = t3.height;
            var n3 = Ie.getContext("2d");
            t3 instanceof ImageData ? n3.putImageData(t3, 0, 0) : n3.drawImage(t3, 0, 0, t3.width, t3.height), e3 = Ie;
          }
          return 2048 < e3.width || 2048 < e3.height ? e3.toDataURL("image/jpeg", 0.6) : e3.toDataURL("image/png");
        } }, Ne = 0;
        function Fe(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2) {
          Object.defineProperty(this, "id", { value: Ne++ }), this.uuid = Pe.generateUUID(), this.name = "", this.image = t3 !== void 0 ? t3 : Fe.DEFAULT_IMAGE, this.mipmaps = [], this.mapping = e3 !== void 0 ? e3 : Fe.DEFAULT_MAPPING, this.wrapS = n3 !== void 0 ? n3 : at, this.wrapT = i3 !== void 0 ? i3 : at, this.magFilter = r3 !== void 0 ? r3 : ut, this.minFilter = a2 !== void 0 ? a2 : dt, this.anisotropy = l2 !== void 0 ? l2 : 1, this.format = o2 !== void 0 ? o2 : Et, this.internalFormat = null, this.type = s2 !== void 0 ? s2 : pt, this.offset = new Re(0, 0), this.repeat = new Re(1, 1), this.center = new Re(0, 0), this.rotation = 0, this.matrixAutoUpdate = true, this.matrix = new ke(), this.generateMipmaps = true, this.premultiplyAlpha = false, this.flipY = true, this.unpackAlignment = 4, this.encoding = c2 !== void 0 ? c2 : pe, this.version = 0, this.onUpdate = null;
        }
        function je(t3, e3, n3, i3) {
          this.x = t3 || 0, this.y = e3 || 0, this.z = n3 || 0, this.w = i3 !== void 0 ? i3 : 1;
        }
        function Ve(t3, e3, n3) {
          this.width = t3, this.height = e3, this.scissor = new je(0, 0, t3, e3), this.scissorTest = false, this.viewport = new je(0, 0, t3, e3), n3 = n3 || {}, this.texture = new Fe(void 0, n3.mapping, n3.wrapS, n3.wrapT, n3.magFilter, n3.minFilter, n3.format, n3.type, n3.anisotropy, n3.encoding), this.texture.image = {}, this.texture.image.width = t3, this.texture.image.height = e3, this.texture.generateMipmaps = n3.generateMipmaps !== void 0 && n3.generateMipmaps, this.texture.minFilter = n3.minFilter !== void 0 ? n3.minFilter : ut, this.depthBuffer = n3.depthBuffer === void 0 || n3.depthBuffer, this.stencilBuffer = n3.stencilBuffer === void 0 || n3.stencilBuffer, this.depthTexture = n3.depthTexture !== void 0 ? n3.depthTexture : null;
        }
        function ze(t3, e3, n3) {
          Ve.call(this, t3, e3, n3), this.samples = 4;
        }
        function Ge(t3, e3, n3, i3) {
          this._x = t3 || 0, this._y = e3 || 0, this._z = n3 || 0, this._w = i3 !== void 0 ? i3 : 1;
        }
        Fe.DEFAULT_IMAGE = void 0, Fe.DEFAULT_MAPPING = 300, Fe.prototype = Object.assign(Object.create(Ae.prototype), { constructor: Fe, isTexture: true, updateMatrix: function() {
          this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.name = t3.name, this.image = t3.image, this.mipmaps = t3.mipmaps.slice(0), this.mapping = t3.mapping, this.wrapS = t3.wrapS, this.wrapT = t3.wrapT, this.magFilter = t3.magFilter, this.minFilter = t3.minFilter, this.anisotropy = t3.anisotropy, this.format = t3.format, this.internalFormat = t3.internalFormat, this.type = t3.type, this.offset.copy(t3.offset), this.repeat.copy(t3.repeat), this.center.copy(t3.center), this.rotation = t3.rotation, this.matrixAutoUpdate = t3.matrixAutoUpdate, this.matrix.copy(t3.matrix), this.generateMipmaps = t3.generateMipmaps, this.premultiplyAlpha = t3.premultiplyAlpha, this.flipY = t3.flipY, this.unpackAlignment = t3.unpackAlignment, this.encoding = t3.encoding, this;
        }, toJSON: function(t3) {
          var e3 = t3 === void 0 || typeof t3 == "string";
          if (!e3 && t3.textures[this.uuid] !== void 0)
            return t3.textures[this.uuid];
          var n3 = { metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, type: this.type, encoding: this.encoding, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY, premultiplyAlpha: this.premultiplyAlpha, unpackAlignment: this.unpackAlignment };
          if (this.image !== void 0) {
            var i3 = this.image;
            if (i3.uuid === void 0 && (i3.uuid = Pe.generateUUID()), !e3 && t3.images[i3.uuid] === void 0) {
              var r3;
              if (Array.isArray(i3)) {
                r3 = [];
                for (var a2 = 0, o2 = i3.length; a2 < o2; a2++)
                  r3.push(Be.getDataURL(i3[a2]));
              } else
                r3 = Be.getDataURL(i3);
              t3.images[i3.uuid] = { uuid: i3.uuid, url: r3 };
            }
            n3.image = i3.uuid;
          }
          return e3 || (t3.textures[this.uuid] = n3), n3;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        }, transformUv: function(t3) {
          if (this.mapping !== 300)
            return t3;
          if (t3.applyMatrix3(this.matrix), t3.x < 0 || 1 < t3.x)
            switch (this.wrapS) {
              case rt:
                t3.x = t3.x - Math.floor(t3.x);
                break;
              case at:
                t3.x = t3.x < 0 ? 0 : 1;
                break;
              case ot:
                Math.abs(Math.floor(t3.x) % 2) === 1 ? t3.x = Math.ceil(t3.x) - t3.x : t3.x = t3.x - Math.floor(t3.x);
            }
          if (t3.y < 0 || 1 < t3.y)
            switch (this.wrapT) {
              case rt:
                t3.y = t3.y - Math.floor(t3.y);
                break;
              case at:
                t3.y = t3.y < 0 ? 0 : 1;
                break;
              case ot:
                Math.abs(Math.floor(t3.y) % 2) === 1 ? t3.y = Math.ceil(t3.y) - t3.y : t3.y = t3.y - Math.floor(t3.y);
            }
          return this.flipY && (t3.y = 1 - t3.y), t3;
        } }), Object.defineProperty(Fe.prototype, "needsUpdate", { set: function(t3) {
          t3 === true && this.version++;
        } }), Object.defineProperties(je.prototype, { width: { get: function() {
          return this.z;
        }, set: function(t3) {
          this.z = t3;
        } }, height: { get: function() {
          return this.w;
        }, set: function(t3) {
          this.w = t3;
        } } }), Object.assign(je.prototype, { isVector4: true, set: function(t3, e3, n3, i3) {
          return this.x = t3, this.y = e3, this.z = n3, this.w = i3, this;
        }, setScalar: function(t3) {
          return this.x = t3, this.y = t3, this.z = t3, this.w = t3, this;
        }, setX: function(t3) {
          return this.x = t3, this;
        }, setY: function(t3) {
          return this.y = t3, this;
        }, setZ: function(t3) {
          return this.z = t3, this;
        }, setW: function(t3) {
          return this.w = t3, this;
        }, setComponent: function(t3, e3) {
          switch (t3) {
            case 0:
              this.x = e3;
              break;
            case 1:
              this.y = e3;
              break;
            case 2:
              this.z = e3;
              break;
            case 3:
              this.w = e3;
              break;
            default:
              throw new Error("index is out of range: " + t3);
          }
          return this;
        }, getComponent: function(t3) {
          switch (t3) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("index is out of range: " + t3);
          }
        }, clone: function() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }, copy: function(t3) {
          return this.x = t3.x, this.y = t3.y, this.z = t3.z, this.w = t3.w !== void 0 ? t3.w : 1, this;
        }, add: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t3, e3)) : (this.x += t3.x, this.y += t3.y, this.z += t3.z, this.w += t3.w, this);
        }, addScalar: function(t3) {
          return this.x += t3, this.y += t3, this.z += t3, this.w += t3, this;
        }, addVectors: function(t3, e3) {
          return this.x = t3.x + e3.x, this.y = t3.y + e3.y, this.z = t3.z + e3.z, this.w = t3.w + e3.w, this;
        }, addScaledVector: function(t3, e3) {
          return this.x += t3.x * e3, this.y += t3.y * e3, this.z += t3.z * e3, this.w += t3.w * e3, this;
        }, sub: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t3, e3)) : (this.x -= t3.x, this.y -= t3.y, this.z -= t3.z, this.w -= t3.w, this);
        }, subScalar: function(t3) {
          return this.x -= t3, this.y -= t3, this.z -= t3, this.w -= t3, this;
        }, subVectors: function(t3, e3) {
          return this.x = t3.x - e3.x, this.y = t3.y - e3.y, this.z = t3.z - e3.z, this.w = t3.w - e3.w, this;
        }, multiplyScalar: function(t3) {
          return this.x *= t3, this.y *= t3, this.z *= t3, this.w *= t3, this;
        }, applyMatrix4: function(t3) {
          var e3 = this.x, n3 = this.y, i3 = this.z, r3 = this.w, a2 = t3.elements;
          return this.x = a2[0] * e3 + a2[4] * n3 + a2[8] * i3 + a2[12] * r3, this.y = a2[1] * e3 + a2[5] * n3 + a2[9] * i3 + a2[13] * r3, this.z = a2[2] * e3 + a2[6] * n3 + a2[10] * i3 + a2[14] * r3, this.w = a2[3] * e3 + a2[7] * n3 + a2[11] * i3 + a2[15] * r3, this;
        }, divideScalar: function(t3) {
          return this.multiplyScalar(1 / t3);
        }, setAxisAngleFromQuaternion: function(t3) {
          this.w = 2 * Math.acos(t3.w);
          var e3 = Math.sqrt(1 - t3.w * t3.w);
          return e3 < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t3.x / e3, this.y = t3.y / e3, this.z = t3.z / e3), this;
        }, setAxisAngleFromRotationMatrix: function(t3) {
          var e3, n3, i3, r3, a2 = t3.elements, o2 = a2[0], s2 = a2[4], l2 = a2[8], c2 = a2[1], u2 = a2[5], h2 = a2[9], d2 = a2[2], p2 = a2[6], f2 = a2[10];
          if (Math.abs(s2 - c2) < 0.01 && Math.abs(l2 - d2) < 0.01 && Math.abs(h2 - p2) < 0.01) {
            if (Math.abs(s2 + c2) < 0.1 && Math.abs(l2 + d2) < 0.1 && Math.abs(h2 + p2) < 0.1 && Math.abs(o2 + u2 + f2 - 3) < 0.1)
              return this.set(1, 0, 0, 0), this;
            e3 = Math.PI;
            var m2 = (o2 + 1) / 2, g2 = (u2 + 1) / 2, v2 = (f2 + 1) / 2, y2 = (s2 + c2) / 4, x2 = (l2 + d2) / 4, b2 = (h2 + p2) / 4;
            return g2 < m2 && v2 < m2 ? r3 = m2 < 0.01 ? (n3 = 0, i3 = 0.707106781) : (i3 = y2 / (n3 = Math.sqrt(m2)), x2 / n3) : v2 < g2 ? r3 = g2 < 0.01 ? (i3 = 0, n3 = 0.707106781) : (n3 = y2 / (i3 = Math.sqrt(g2)), b2 / i3) : v2 < 0.01 ? (i3 = n3 = 0.707106781, r3 = 0) : (n3 = x2 / (r3 = Math.sqrt(v2)), i3 = b2 / r3), this.set(n3, i3, r3, e3), this;
          }
          var w2 = Math.sqrt((p2 - h2) * (p2 - h2) + (l2 - d2) * (l2 - d2) + (c2 - s2) * (c2 - s2));
          return Math.abs(w2) < 1e-3 && (w2 = 1), this.x = (p2 - h2) / w2, this.y = (l2 - d2) / w2, this.z = (c2 - s2) / w2, this.w = Math.acos((o2 + u2 + f2 - 1) / 2), this;
        }, min: function(t3) {
          return this.x = Math.min(this.x, t3.x), this.y = Math.min(this.y, t3.y), this.z = Math.min(this.z, t3.z), this.w = Math.min(this.w, t3.w), this;
        }, max: function(t3) {
          return this.x = Math.max(this.x, t3.x), this.y = Math.max(this.y, t3.y), this.z = Math.max(this.z, t3.z), this.w = Math.max(this.w, t3.w), this;
        }, clamp: function(t3, e3) {
          return this.x = Math.max(t3.x, Math.min(e3.x, this.x)), this.y = Math.max(t3.y, Math.min(e3.y, this.y)), this.z = Math.max(t3.z, Math.min(e3.z, this.z)), this.w = Math.max(t3.w, Math.min(e3.w, this.w)), this;
        }, clampScalar: function(t3, e3) {
          return this.x = Math.max(t3, Math.min(e3, this.x)), this.y = Math.max(t3, Math.min(e3, this.y)), this.z = Math.max(t3, Math.min(e3, this.z)), this.w = Math.max(t3, Math.min(e3, this.w)), this;
        }, clampLength: function(t3, e3) {
          var n3 = this.length();
          return this.divideScalar(n3 || 1).multiplyScalar(Math.max(t3, Math.min(e3, n3)));
        }, floor: function() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
        }, ceil: function() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
        }, round: function() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
        }, roundToZero: function() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
        }, negate: function() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
        }, dot: function(t3) {
          return this.x * t3.x + this.y * t3.y + this.z * t3.z + this.w * t3.w;
        }, lengthSq: function() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, manhattanLength: function() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }, normalize: function() {
          return this.divideScalar(this.length() || 1);
        }, setLength: function(t3) {
          return this.normalize().multiplyScalar(t3);
        }, lerp: function(t3, e3) {
          return this.x += (t3.x - this.x) * e3, this.y += (t3.y - this.y) * e3, this.z += (t3.z - this.z) * e3, this.w += (t3.w - this.w) * e3, this;
        }, lerpVectors: function(t3, e3, n3) {
          return this.subVectors(e3, t3).multiplyScalar(n3).add(t3);
        }, equals: function(t3) {
          return t3.x === this.x && t3.y === this.y && t3.z === this.z && t3.w === this.w;
        }, fromArray: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this.x = t3[e3], this.y = t3[e3 + 1], this.z = t3[e3 + 2], this.w = t3[e3 + 3], this;
        }, toArray: function(t3, e3) {
          return t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0), t3[e3] = this.x, t3[e3 + 1] = this.y, t3[e3 + 2] = this.z, t3[e3 + 3] = this.w, t3;
        }, fromBufferAttribute: function(t3, e3, n3) {
          return n3 !== void 0 && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = t3.getX(e3), this.y = t3.getY(e3), this.z = t3.getZ(e3), this.w = t3.getW(e3), this;
        } }), Ve.prototype = Object.assign(Object.create(Ae.prototype), { constructor: Ve, isWebGLRenderTarget: true, setSize: function(t3, e3) {
          this.width === t3 && this.height === e3 || (this.width = t3, this.height = e3, this.texture.image.width = t3, this.texture.image.height = e3, this.dispose()), this.viewport.set(0, 0, t3, e3), this.scissor.set(0, 0, t3, e3);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.width = t3.width, this.height = t3.height, this.viewport.copy(t3.viewport), this.texture = t3.texture.clone(), this.depthBuffer = t3.depthBuffer, this.stencilBuffer = t3.stencilBuffer, this.depthTexture = t3.depthTexture, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } }), ze.prototype = Object.assign(Object.create(Ve.prototype), { constructor: ze, isWebGLMultisampleRenderTarget: true, copy: function(t3) {
          return Ve.prototype.copy.call(this, t3), this.samples = t3.samples, this;
        } }), Object.assign(Ge, { slerp: function(t3, e3, n3, i3) {
          return n3.copy(t3).slerp(e3, i3);
        }, slerpFlat: function(t3, e3, n3, i3, r3, a2, o2) {
          var s2 = n3[i3 + 0], l2 = n3[i3 + 1], c2 = n3[i3 + 2], u2 = n3[i3 + 3], h2 = r3[a2 + 0], d2 = r3[a2 + 1], p2 = r3[a2 + 2], f2 = r3[a2 + 3];
          if (u2 !== f2 || s2 !== h2 || l2 !== d2 || c2 !== p2) {
            var m2 = 1 - o2, g2 = s2 * h2 + l2 * d2 + c2 * p2 + u2 * f2, v2 = 0 <= g2 ? 1 : -1, y2 = 1 - g2 * g2;
            if (y2 > Number.EPSILON) {
              var x2 = Math.sqrt(y2), b2 = Math.atan2(x2, g2 * v2);
              m2 = Math.sin(m2 * b2) / x2, o2 = Math.sin(o2 * b2) / x2;
            }
            var w2 = o2 * v2;
            if (s2 = s2 * m2 + h2 * w2, l2 = l2 * m2 + d2 * w2, c2 = c2 * m2 + p2 * w2, u2 = u2 * m2 + f2 * w2, m2 === 1 - o2) {
              var M2 = 1 / Math.sqrt(s2 * s2 + l2 * l2 + c2 * c2 + u2 * u2);
              s2 *= M2, l2 *= M2, c2 *= M2, u2 *= M2;
            }
          }
          t3[e3] = s2, t3[e3 + 1] = l2, t3[e3 + 2] = c2, t3[e3 + 3] = u2;
        } }), Object.defineProperties(Ge.prototype, { x: { get: function() {
          return this._x;
        }, set: function(t3) {
          this._x = t3, this._onChangeCallback();
        } }, y: { get: function() {
          return this._y;
        }, set: function(t3) {
          this._y = t3, this._onChangeCallback();
        } }, z: { get: function() {
          return this._z;
        }, set: function(t3) {
          this._z = t3, this._onChangeCallback();
        } }, w: { get: function() {
          return this._w;
        }, set: function(t3) {
          this._w = t3, this._onChangeCallback();
        } } }), Object.assign(Ge.prototype, { isQuaternion: true, set: function(t3, e3, n3, i3) {
          return this._x = t3, this._y = e3, this._z = n3, this._w = i3, this._onChangeCallback(), this;
        }, clone: function() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }, copy: function(t3) {
          return this._x = t3.x, this._y = t3.y, this._z = t3.z, this._w = t3.w, this._onChangeCallback(), this;
        }, setFromEuler: function(t3, e3) {
          if (!t3 || !t3.isEuler)
            throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
          var n3 = t3._x, i3 = t3._y, r3 = t3._z, a2 = t3.order, o2 = Math.cos, s2 = Math.sin, l2 = o2(n3 / 2), c2 = o2(i3 / 2), u2 = o2(r3 / 2), h2 = s2(n3 / 2), d2 = s2(i3 / 2), p2 = s2(r3 / 2);
          return a2 === "XYZ" ? (this._x = h2 * c2 * u2 + l2 * d2 * p2, this._y = l2 * d2 * u2 - h2 * c2 * p2, this._z = l2 * c2 * p2 + h2 * d2 * u2, this._w = l2 * c2 * u2 - h2 * d2 * p2) : a2 === "YXZ" ? (this._x = h2 * c2 * u2 + l2 * d2 * p2, this._y = l2 * d2 * u2 - h2 * c2 * p2, this._z = l2 * c2 * p2 - h2 * d2 * u2, this._w = l2 * c2 * u2 + h2 * d2 * p2) : a2 === "ZXY" ? (this._x = h2 * c2 * u2 - l2 * d2 * p2, this._y = l2 * d2 * u2 + h2 * c2 * p2, this._z = l2 * c2 * p2 + h2 * d2 * u2, this._w = l2 * c2 * u2 - h2 * d2 * p2) : a2 === "ZYX" ? (this._x = h2 * c2 * u2 - l2 * d2 * p2, this._y = l2 * d2 * u2 + h2 * c2 * p2, this._z = l2 * c2 * p2 - h2 * d2 * u2, this._w = l2 * c2 * u2 + h2 * d2 * p2) : a2 === "YZX" ? (this._x = h2 * c2 * u2 + l2 * d2 * p2, this._y = l2 * d2 * u2 + h2 * c2 * p2, this._z = l2 * c2 * p2 - h2 * d2 * u2, this._w = l2 * c2 * u2 - h2 * d2 * p2) : a2 === "XZY" && (this._x = h2 * c2 * u2 - l2 * d2 * p2, this._y = l2 * d2 * u2 - h2 * c2 * p2, this._z = l2 * c2 * p2 + h2 * d2 * u2, this._w = l2 * c2 * u2 + h2 * d2 * p2), e3 !== false && this._onChangeCallback(), this;
        }, setFromAxisAngle: function(t3, e3) {
          var n3 = e3 / 2, i3 = Math.sin(n3);
          return this._x = t3.x * i3, this._y = t3.y * i3, this._z = t3.z * i3, this._w = Math.cos(n3), this._onChangeCallback(), this;
        }, setFromRotationMatrix: function(t3) {
          var e3, n3 = t3.elements, i3 = n3[0], r3 = n3[4], a2 = n3[8], o2 = n3[1], s2 = n3[5], l2 = n3[9], c2 = n3[2], u2 = n3[6], h2 = n3[10], d2 = i3 + s2 + h2;
          return 0 < d2 ? (e3 = 0.5 / Math.sqrt(d2 + 1), this._w = 0.25 / e3, this._x = (u2 - l2) * e3, this._y = (a2 - c2) * e3, this._z = (o2 - r3) * e3) : s2 < i3 && h2 < i3 ? (e3 = 2 * Math.sqrt(1 + i3 - s2 - h2), this._w = (u2 - l2) / e3, this._x = 0.25 * e3, this._y = (r3 + o2) / e3, this._z = (a2 + c2) / e3) : h2 < s2 ? (e3 = 2 * Math.sqrt(1 + s2 - i3 - h2), this._w = (a2 - c2) / e3, this._x = (r3 + o2) / e3, this._y = 0.25 * e3, this._z = (l2 + u2) / e3) : (e3 = 2 * Math.sqrt(1 + h2 - i3 - s2), this._w = (o2 - r3) / e3, this._x = (a2 + c2) / e3, this._y = (l2 + u2) / e3, this._z = 0.25 * e3), this._onChangeCallback(), this;
        }, setFromUnitVectors: function(t3, e3) {
          var n3 = t3.dot(e3) + 1;
          return n3 < 1e-6 ? (n3 = 0, Math.abs(t3.x) > Math.abs(t3.z) ? (this._x = -t3.y, this._y = t3.x, this._z = 0) : (this._x = 0, this._y = -t3.z, this._z = t3.y)) : (this._x = t3.y * e3.z - t3.z * e3.y, this._y = t3.z * e3.x - t3.x * e3.z, this._z = t3.x * e3.y - t3.y * e3.x), this._w = n3, this.normalize();
        }, angleTo: function(t3) {
          return 2 * Math.acos(Math.abs(Pe.clamp(this.dot(t3), -1, 1)));
        }, rotateTowards: function(t3, e3) {
          var n3 = this.angleTo(t3);
          if (n3 === 0)
            return this;
          var i3 = Math.min(1, e3 / n3);
          return this.slerp(t3, i3), this;
        }, inverse: function() {
          return this.conjugate();
        }, conjugate: function() {
          return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
        }, dot: function(t3) {
          return this._x * t3._x + this._y * t3._y + this._z * t3._z + this._w * t3._w;
        }, lengthSq: function() {
          return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }, length: function() {
          return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }, normalize: function() {
          var t3 = this.length();
          return t3 === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t3 = 1 / t3, this._x = this._x * t3, this._y = this._y * t3, this._z = this._z * t3, this._w = this._w * t3), this._onChangeCallback(), this;
        }, multiply: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(t3, e3)) : this.multiplyQuaternions(this, t3);
        }, premultiply: function(t3) {
          return this.multiplyQuaternions(t3, this);
        }, multiplyQuaternions: function(t3, e3) {
          var n3 = t3._x, i3 = t3._y, r3 = t3._z, a2 = t3._w, o2 = e3._x, s2 = e3._y, l2 = e3._z, c2 = e3._w;
          return this._x = n3 * c2 + a2 * o2 + i3 * l2 - r3 * s2, this._y = i3 * c2 + a2 * s2 + r3 * o2 - n3 * l2, this._z = r3 * c2 + a2 * l2 + n3 * s2 - i3 * o2, this._w = a2 * c2 - n3 * o2 - i3 * s2 - r3 * l2, this._onChangeCallback(), this;
        }, slerp: function(t3, e3) {
          if (e3 === 0)
            return this;
          if (e3 === 1)
            return this.copy(t3);
          var n3 = this._x, i3 = this._y, r3 = this._z, a2 = this._w, o2 = a2 * t3._w + n3 * t3._x + i3 * t3._y + r3 * t3._z;
          if (o2 < 0 ? (this._w = -t3._w, this._x = -t3._x, this._y = -t3._y, this._z = -t3._z, o2 = -o2) : this.copy(t3), 1 <= o2)
            return this._w = a2, this._x = n3, this._y = i3, this._z = r3, this;
          var s2 = 1 - o2 * o2;
          if (s2 <= Number.EPSILON) {
            var l2 = 1 - e3;
            return this._w = l2 * a2 + e3 * this._w, this._x = l2 * n3 + e3 * this._x, this._y = l2 * i3 + e3 * this._y, this._z = l2 * r3 + e3 * this._z, this.normalize(), this._onChangeCallback(), this;
          }
          var c2 = Math.sqrt(s2), u2 = Math.atan2(c2, o2), h2 = Math.sin((1 - e3) * u2) / c2, d2 = Math.sin(e3 * u2) / c2;
          return this._w = a2 * h2 + this._w * d2, this._x = n3 * h2 + this._x * d2, this._y = i3 * h2 + this._y * d2, this._z = r3 * h2 + this._z * d2, this._onChangeCallback(), this;
        }, equals: function(t3) {
          return t3._x === this._x && t3._y === this._y && t3._z === this._z && t3._w === this._w;
        }, fromArray: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this._x = t3[e3], this._y = t3[e3 + 1], this._z = t3[e3 + 2], this._w = t3[e3 + 3], this._onChangeCallback(), this;
        }, toArray: function(t3, e3) {
          return t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0), t3[e3] = this._x, t3[e3 + 1] = this._y, t3[e3 + 2] = this._z, t3[e3 + 3] = this._w, t3;
        }, _onChange: function(t3) {
          return this._onChangeCallback = t3, this;
        }, _onChangeCallback: function() {
        } });
        var Ue = new We(), He = new Ge();
        function We(t3, e3, n3) {
          this.x = t3 || 0, this.y = e3 || 0, this.z = n3 || 0;
        }
        Object.assign(We.prototype, { isVector3: true, set: function(t3, e3, n3) {
          return this.x = t3, this.y = e3, this.z = n3, this;
        }, setScalar: function(t3) {
          return this.x = t3, this.y = t3, this.z = t3, this;
        }, setX: function(t3) {
          return this.x = t3, this;
        }, setY: function(t3) {
          return this.y = t3, this;
        }, setZ: function(t3) {
          return this.z = t3, this;
        }, setComponent: function(t3, e3) {
          switch (t3) {
            case 0:
              this.x = e3;
              break;
            case 1:
              this.y = e3;
              break;
            case 2:
              this.z = e3;
              break;
            default:
              throw new Error("index is out of range: " + t3);
          }
          return this;
        }, getComponent: function(t3) {
          switch (t3) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            default:
              throw new Error("index is out of range: " + t3);
          }
        }, clone: function() {
          return new this.constructor(this.x, this.y, this.z);
        }, copy: function(t3) {
          return this.x = t3.x, this.y = t3.y, this.z = t3.z, this;
        }, add: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t3, e3)) : (this.x += t3.x, this.y += t3.y, this.z += t3.z, this);
        }, addScalar: function(t3) {
          return this.x += t3, this.y += t3, this.z += t3, this;
        }, addVectors: function(t3, e3) {
          return this.x = t3.x + e3.x, this.y = t3.y + e3.y, this.z = t3.z + e3.z, this;
        }, addScaledVector: function(t3, e3) {
          return this.x += t3.x * e3, this.y += t3.y * e3, this.z += t3.z * e3, this;
        }, sub: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t3, e3)) : (this.x -= t3.x, this.y -= t3.y, this.z -= t3.z, this);
        }, subScalar: function(t3) {
          return this.x -= t3, this.y -= t3, this.z -= t3, this;
        }, subVectors: function(t3, e3) {
          return this.x = t3.x - e3.x, this.y = t3.y - e3.y, this.z = t3.z - e3.z, this;
        }, multiply: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t3, e3)) : (this.x *= t3.x, this.y *= t3.y, this.z *= t3.z, this);
        }, multiplyScalar: function(t3) {
          return this.x *= t3, this.y *= t3, this.z *= t3, this;
        }, multiplyVectors: function(t3, e3) {
          return this.x = t3.x * e3.x, this.y = t3.y * e3.y, this.z = t3.z * e3.z, this;
        }, applyEuler: function(t3) {
          return t3 && t3.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(He.setFromEuler(t3));
        }, applyAxisAngle: function(t3, e3) {
          return this.applyQuaternion(He.setFromAxisAngle(t3, e3));
        }, applyMatrix3: function(t3) {
          var e3 = this.x, n3 = this.y, i3 = this.z, r3 = t3.elements;
          return this.x = r3[0] * e3 + r3[3] * n3 + r3[6] * i3, this.y = r3[1] * e3 + r3[4] * n3 + r3[7] * i3, this.z = r3[2] * e3 + r3[5] * n3 + r3[8] * i3, this;
        }, applyNormalMatrix: function(t3) {
          return this.applyMatrix3(t3).normalize();
        }, applyMatrix4: function(t3) {
          var e3 = this.x, n3 = this.y, i3 = this.z, r3 = t3.elements, a2 = 1 / (r3[3] * e3 + r3[7] * n3 + r3[11] * i3 + r3[15]);
          return this.x = (r3[0] * e3 + r3[4] * n3 + r3[8] * i3 + r3[12]) * a2, this.y = (r3[1] * e3 + r3[5] * n3 + r3[9] * i3 + r3[13]) * a2, this.z = (r3[2] * e3 + r3[6] * n3 + r3[10] * i3 + r3[14]) * a2, this;
        }, applyQuaternion: function(t3) {
          var e3 = this.x, n3 = this.y, i3 = this.z, r3 = t3.x, a2 = t3.y, o2 = t3.z, s2 = t3.w, l2 = s2 * e3 + a2 * i3 - o2 * n3, c2 = s2 * n3 + o2 * e3 - r3 * i3, u2 = s2 * i3 + r3 * n3 - a2 * e3, h2 = -r3 * e3 - a2 * n3 - o2 * i3;
          return this.x = l2 * s2 + h2 * -r3 + c2 * -o2 - u2 * -a2, this.y = c2 * s2 + h2 * -a2 + u2 * -r3 - l2 * -o2, this.z = u2 * s2 + h2 * -o2 + l2 * -a2 - c2 * -r3, this;
        }, project: function(t3) {
          return this.applyMatrix4(t3.matrixWorldInverse).applyMatrix4(t3.projectionMatrix);
        }, unproject: function(t3) {
          return this.applyMatrix4(t3.projectionMatrixInverse).applyMatrix4(t3.matrixWorld);
        }, transformDirection: function(t3) {
          var e3 = this.x, n3 = this.y, i3 = this.z, r3 = t3.elements;
          return this.x = r3[0] * e3 + r3[4] * n3 + r3[8] * i3, this.y = r3[1] * e3 + r3[5] * n3 + r3[9] * i3, this.z = r3[2] * e3 + r3[6] * n3 + r3[10] * i3, this.normalize();
        }, divide: function(t3) {
          return this.x /= t3.x, this.y /= t3.y, this.z /= t3.z, this;
        }, divideScalar: function(t3) {
          return this.multiplyScalar(1 / t3);
        }, min: function(t3) {
          return this.x = Math.min(this.x, t3.x), this.y = Math.min(this.y, t3.y), this.z = Math.min(this.z, t3.z), this;
        }, max: function(t3) {
          return this.x = Math.max(this.x, t3.x), this.y = Math.max(this.y, t3.y), this.z = Math.max(this.z, t3.z), this;
        }, clamp: function(t3, e3) {
          return this.x = Math.max(t3.x, Math.min(e3.x, this.x)), this.y = Math.max(t3.y, Math.min(e3.y, this.y)), this.z = Math.max(t3.z, Math.min(e3.z, this.z)), this;
        }, clampScalar: function(t3, e3) {
          return this.x = Math.max(t3, Math.min(e3, this.x)), this.y = Math.max(t3, Math.min(e3, this.y)), this.z = Math.max(t3, Math.min(e3, this.z)), this;
        }, clampLength: function(t3, e3) {
          var n3 = this.length();
          return this.divideScalar(n3 || 1).multiplyScalar(Math.max(t3, Math.min(e3, n3)));
        }, floor: function() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
        }, ceil: function() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
        }, round: function() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
        }, roundToZero: function() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
        }, negate: function() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
        }, dot: function(t3) {
          return this.x * t3.x + this.y * t3.y + this.z * t3.z;
        }, lengthSq: function() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }, length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }, manhattanLength: function() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }, normalize: function() {
          return this.divideScalar(this.length() || 1);
        }, setLength: function(t3) {
          return this.normalize().multiplyScalar(t3);
        }, lerp: function(t3, e3) {
          return this.x += (t3.x - this.x) * e3, this.y += (t3.y - this.y) * e3, this.z += (t3.z - this.z) * e3, this;
        }, lerpVectors: function(t3, e3, n3) {
          return this.subVectors(e3, t3).multiplyScalar(n3).add(t3);
        }, cross: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t3, e3)) : this.crossVectors(this, t3);
        }, crossVectors: function(t3, e3) {
          var n3 = t3.x, i3 = t3.y, r3 = t3.z, a2 = e3.x, o2 = e3.y, s2 = e3.z;
          return this.x = i3 * s2 - r3 * o2, this.y = r3 * a2 - n3 * s2, this.z = n3 * o2 - i3 * a2, this;
        }, projectOnVector: function(t3) {
          var e3 = t3.lengthSq();
          if (e3 === 0)
            return this.set(0, 0, 0);
          var n3 = t3.dot(this) / e3;
          return this.copy(t3).multiplyScalar(n3);
        }, projectOnPlane: function(t3) {
          return Ue.copy(this).projectOnVector(t3), this.sub(Ue);
        }, reflect: function(t3) {
          return this.sub(Ue.copy(t3).multiplyScalar(2 * this.dot(t3)));
        }, angleTo: function(t3) {
          var e3 = Math.sqrt(this.lengthSq() * t3.lengthSq());
          if (e3 === 0)
            return Math.PI / 2;
          var n3 = this.dot(t3) / e3;
          return Math.acos(Pe.clamp(n3, -1, 1));
        }, distanceTo: function(t3) {
          return Math.sqrt(this.distanceToSquared(t3));
        }, distanceToSquared: function(t3) {
          var e3 = this.x - t3.x, n3 = this.y - t3.y, i3 = this.z - t3.z;
          return e3 * e3 + n3 * n3 + i3 * i3;
        }, manhattanDistanceTo: function(t3) {
          return Math.abs(this.x - t3.x) + Math.abs(this.y - t3.y) + Math.abs(this.z - t3.z);
        }, setFromSpherical: function(t3) {
          return this.setFromSphericalCoords(t3.radius, t3.phi, t3.theta);
        }, setFromSphericalCoords: function(t3, e3, n3) {
          var i3 = Math.sin(e3) * t3;
          return this.x = i3 * Math.sin(n3), this.y = Math.cos(e3) * t3, this.z = i3 * Math.cos(n3), this;
        }, setFromCylindrical: function(t3) {
          return this.setFromCylindricalCoords(t3.radius, t3.theta, t3.y);
        }, setFromCylindricalCoords: function(t3, e3, n3) {
          return this.x = t3 * Math.sin(e3), this.y = n3, this.z = t3 * Math.cos(e3), this;
        }, setFromMatrixPosition: function(t3) {
          var e3 = t3.elements;
          return this.x = e3[12], this.y = e3[13], this.z = e3[14], this;
        }, setFromMatrixScale: function(t3) {
          var e3 = this.setFromMatrixColumn(t3, 0).length(), n3 = this.setFromMatrixColumn(t3, 1).length(), i3 = this.setFromMatrixColumn(t3, 2).length();
          return this.x = e3, this.y = n3, this.z = i3, this;
        }, setFromMatrixColumn: function(t3, e3) {
          return this.fromArray(t3.elements, 4 * e3);
        }, setFromMatrix3Column: function(t3, e3) {
          return this.fromArray(t3.elements, 3 * e3);
        }, equals: function(t3) {
          return t3.x === this.x && t3.y === this.y && t3.z === this.z;
        }, fromArray: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this.x = t3[e3], this.y = t3[e3 + 1], this.z = t3[e3 + 2], this;
        }, toArray: function(t3, e3) {
          return t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0), t3[e3] = this.x, t3[e3 + 1] = this.y, t3[e3 + 2] = this.z, t3;
        }, fromBufferAttribute: function(t3, e3, n3) {
          return n3 !== void 0 && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = t3.getX(e3), this.y = t3.getY(e3), this.z = t3.getZ(e3), this;
        } });
        var Je = new We(), qe = new Qe(), Xe = new We(0, 0, 0), Ye = new We(1, 1, 1), Ze = new We(), $e = new We(), Ke = new We();
        function Qe() {
          this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], 0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
        }
        Object.assign(Qe.prototype, { isMatrix4: true, set: function(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2, u2, h2, d2, p2, f2, m2) {
          var g2 = this.elements;
          return g2[0] = t3, g2[4] = e3, g2[8] = n3, g2[12] = i3, g2[1] = r3, g2[5] = a2, g2[9] = o2, g2[13] = s2, g2[2] = l2, g2[6] = c2, g2[10] = u2, g2[14] = h2, g2[3] = d2, g2[7] = p2, g2[11] = f2, g2[15] = m2, this;
        }, identity: function() {
          return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }, clone: function() {
          return new Qe().fromArray(this.elements);
        }, copy: function(t3) {
          var e3 = this.elements, n3 = t3.elements;
          return e3[0] = n3[0], e3[1] = n3[1], e3[2] = n3[2], e3[3] = n3[3], e3[4] = n3[4], e3[5] = n3[5], e3[6] = n3[6], e3[7] = n3[7], e3[8] = n3[8], e3[9] = n3[9], e3[10] = n3[10], e3[11] = n3[11], e3[12] = n3[12], e3[13] = n3[13], e3[14] = n3[14], e3[15] = n3[15], this;
        }, copyPosition: function(t3) {
          var e3 = this.elements, n3 = t3.elements;
          return e3[12] = n3[12], e3[13] = n3[13], e3[14] = n3[14], this;
        }, extractBasis: function(t3, e3, n3) {
          return t3.setFromMatrixColumn(this, 0), e3.setFromMatrixColumn(this, 1), n3.setFromMatrixColumn(this, 2), this;
        }, makeBasis: function(t3, e3, n3) {
          return this.set(t3.x, e3.x, n3.x, 0, t3.y, e3.y, n3.y, 0, t3.z, e3.z, n3.z, 0, 0, 0, 0, 1), this;
        }, extractRotation: function(t3) {
          var e3 = this.elements, n3 = t3.elements, i3 = 1 / Je.setFromMatrixColumn(t3, 0).length(), r3 = 1 / Je.setFromMatrixColumn(t3, 1).length(), a2 = 1 / Je.setFromMatrixColumn(t3, 2).length();
          return e3[0] = n3[0] * i3, e3[1] = n3[1] * i3, e3[2] = n3[2] * i3, e3[3] = 0, e3[4] = n3[4] * r3, e3[5] = n3[5] * r3, e3[6] = n3[6] * r3, e3[7] = 0, e3[8] = n3[8] * a2, e3[9] = n3[9] * a2, e3[10] = n3[10] * a2, e3[11] = 0, e3[12] = 0, e3[13] = 0, e3[14] = 0, e3[15] = 1, this;
        }, makeRotationFromEuler: function(t3) {
          t3 && t3.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
          var e3 = this.elements, n3 = t3.x, i3 = t3.y, r3 = t3.z, a2 = Math.cos(n3), o2 = Math.sin(n3), s2 = Math.cos(i3), l2 = Math.sin(i3), c2 = Math.cos(r3), u2 = Math.sin(r3);
          if (t3.order === "XYZ") {
            var h2 = a2 * c2, d2 = a2 * u2, p2 = o2 * c2, f2 = o2 * u2;
            e3[0] = s2 * c2, e3[4] = -s2 * u2, e3[8] = l2, e3[1] = d2 + p2 * l2, e3[5] = h2 - f2 * l2, e3[9] = -o2 * s2, e3[2] = f2 - h2 * l2, e3[6] = p2 + d2 * l2, e3[10] = a2 * s2;
          } else if (t3.order === "YXZ") {
            var m2 = s2 * c2, g2 = s2 * u2, v2 = l2 * c2, y2 = l2 * u2;
            e3[0] = m2 + y2 * o2, e3[4] = v2 * o2 - g2, e3[8] = a2 * l2, e3[1] = a2 * u2, e3[5] = a2 * c2, e3[9] = -o2, e3[2] = g2 * o2 - v2, e3[6] = y2 + m2 * o2, e3[10] = a2 * s2;
          } else if (t3.order === "ZXY")
            m2 = s2 * c2, g2 = s2 * u2, v2 = l2 * c2, y2 = l2 * u2, e3[0] = m2 - y2 * o2, e3[4] = -a2 * u2, e3[8] = v2 + g2 * o2, e3[1] = g2 + v2 * o2, e3[5] = a2 * c2, e3[9] = y2 - m2 * o2, e3[2] = -a2 * l2, e3[6] = o2, e3[10] = a2 * s2;
          else if (t3.order === "ZYX")
            h2 = a2 * c2, d2 = a2 * u2, p2 = o2 * c2, f2 = o2 * u2, e3[0] = s2 * c2, e3[4] = p2 * l2 - d2, e3[8] = h2 * l2 + f2, e3[1] = s2 * u2, e3[5] = f2 * l2 + h2, e3[9] = d2 * l2 - p2, e3[2] = -l2, e3[6] = o2 * s2, e3[10] = a2 * s2;
          else if (t3.order === "YZX") {
            var x2 = a2 * s2, b2 = a2 * l2, w2 = o2 * s2, M2 = o2 * l2;
            e3[0] = s2 * c2, e3[4] = M2 - x2 * u2, e3[8] = w2 * u2 + b2, e3[1] = u2, e3[5] = a2 * c2, e3[9] = -o2 * c2, e3[2] = -l2 * c2, e3[6] = b2 * u2 + w2, e3[10] = x2 - M2 * u2;
          } else
            t3.order === "XZY" && (x2 = a2 * s2, b2 = a2 * l2, w2 = o2 * s2, M2 = o2 * l2, e3[0] = s2 * c2, e3[4] = -u2, e3[8] = l2 * c2, e3[1] = x2 * u2 + M2, e3[5] = a2 * c2, e3[9] = b2 * u2 - w2, e3[2] = w2 * u2 - b2, e3[6] = o2 * c2, e3[10] = M2 * u2 + x2);
          return e3[3] = 0, e3[7] = 0, e3[11] = 0, e3[12] = 0, e3[13] = 0, e3[14] = 0, e3[15] = 1, this;
        }, makeRotationFromQuaternion: function(t3) {
          return this.compose(Xe, t3, Ye);
        }, lookAt: function(t3, e3, n3) {
          var i3 = this.elements;
          return Ke.subVectors(t3, e3), Ke.lengthSq() === 0 && (Ke.z = 1), Ke.normalize(), Ze.crossVectors(n3, Ke), Ze.lengthSq() === 0 && (Math.abs(n3.z) === 1 ? Ke.x += 1e-4 : Ke.z += 1e-4, Ke.normalize(), Ze.crossVectors(n3, Ke)), Ze.normalize(), $e.crossVectors(Ke, Ze), i3[0] = Ze.x, i3[4] = $e.x, i3[8] = Ke.x, i3[1] = Ze.y, i3[5] = $e.y, i3[9] = Ke.y, i3[2] = Ze.z, i3[6] = $e.z, i3[10] = Ke.z, this;
        }, multiply: function(t3, e3) {
          return e3 !== void 0 ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t3, e3)) : this.multiplyMatrices(this, t3);
        }, premultiply: function(t3) {
          return this.multiplyMatrices(t3, this);
        }, multiplyMatrices: function(t3, e3) {
          var n3 = t3.elements, i3 = e3.elements, r3 = this.elements, a2 = n3[0], o2 = n3[4], s2 = n3[8], l2 = n3[12], c2 = n3[1], u2 = n3[5], h2 = n3[9], d2 = n3[13], p2 = n3[2], f2 = n3[6], m2 = n3[10], g2 = n3[14], v2 = n3[3], y2 = n3[7], x2 = n3[11], b2 = n3[15], w2 = i3[0], M2 = i3[4], _6 = i3[8], S2 = i3[12], C2 = i3[1], T2 = i3[5], E2 = i3[9], D2 = i3[13], A2 = i3[2], O2 = i3[6], L2 = i3[10], I2 = i3[14], P2 = i3[3], R2 = i3[7], k2 = i3[11], B2 = i3[15];
          return r3[0] = a2 * w2 + o2 * C2 + s2 * A2 + l2 * P2, r3[4] = a2 * M2 + o2 * T2 + s2 * O2 + l2 * R2, r3[8] = a2 * _6 + o2 * E2 + s2 * L2 + l2 * k2, r3[12] = a2 * S2 + o2 * D2 + s2 * I2 + l2 * B2, r3[1] = c2 * w2 + u2 * C2 + h2 * A2 + d2 * P2, r3[5] = c2 * M2 + u2 * T2 + h2 * O2 + d2 * R2, r3[9] = c2 * _6 + u2 * E2 + h2 * L2 + d2 * k2, r3[13] = c2 * S2 + u2 * D2 + h2 * I2 + d2 * B2, r3[2] = p2 * w2 + f2 * C2 + m2 * A2 + g2 * P2, r3[6] = p2 * M2 + f2 * T2 + m2 * O2 + g2 * R2, r3[10] = p2 * _6 + f2 * E2 + m2 * L2 + g2 * k2, r3[14] = p2 * S2 + f2 * D2 + m2 * I2 + g2 * B2, r3[3] = v2 * w2 + y2 * C2 + x2 * A2 + b2 * P2, r3[7] = v2 * M2 + y2 * T2 + x2 * O2 + b2 * R2, r3[11] = v2 * _6 + y2 * E2 + x2 * L2 + b2 * k2, r3[15] = v2 * S2 + y2 * D2 + x2 * I2 + b2 * B2, this;
        }, multiplyScalar: function(t3) {
          var e3 = this.elements;
          return e3[0] *= t3, e3[4] *= t3, e3[8] *= t3, e3[12] *= t3, e3[1] *= t3, e3[5] *= t3, e3[9] *= t3, e3[13] *= t3, e3[2] *= t3, e3[6] *= t3, e3[10] *= t3, e3[14] *= t3, e3[3] *= t3, e3[7] *= t3, e3[11] *= t3, e3[15] *= t3, this;
        }, determinant: function() {
          var t3 = this.elements, e3 = t3[0], n3 = t3[4], i3 = t3[8], r3 = t3[12], a2 = t3[1], o2 = t3[5], s2 = t3[9], l2 = t3[13], c2 = t3[2], u2 = t3[6], h2 = t3[10], d2 = t3[14];
          return t3[3] * (r3 * s2 * u2 - i3 * l2 * u2 - r3 * o2 * h2 + n3 * l2 * h2 + i3 * o2 * d2 - n3 * s2 * d2) + t3[7] * (e3 * s2 * d2 - e3 * l2 * h2 + r3 * a2 * h2 - i3 * a2 * d2 + i3 * l2 * c2 - r3 * s2 * c2) + t3[11] * (e3 * l2 * u2 - e3 * o2 * d2 - r3 * a2 * u2 + n3 * a2 * d2 + r3 * o2 * c2 - n3 * l2 * c2) + t3[15] * (-i3 * o2 * c2 - e3 * s2 * u2 + e3 * o2 * h2 + i3 * a2 * u2 - n3 * a2 * h2 + n3 * s2 * c2);
        }, transpose: function() {
          var t3, e3 = this.elements;
          return t3 = e3[1], e3[1] = e3[4], e3[4] = t3, t3 = e3[2], e3[2] = e3[8], e3[8] = t3, t3 = e3[6], e3[6] = e3[9], e3[9] = t3, t3 = e3[3], e3[3] = e3[12], e3[12] = t3, t3 = e3[7], e3[7] = e3[13], e3[13] = t3, t3 = e3[11], e3[11] = e3[14], e3[14] = t3, this;
        }, setPosition: function(t3, e3, n3) {
          var i3 = this.elements;
          return t3.isVector3 ? (i3[12] = t3.x, i3[13] = t3.y, i3[14] = t3.z) : (i3[12] = t3, i3[13] = e3, i3[14] = n3), this;
        }, getInverse: function(t3, e3) {
          var n3 = this.elements, i3 = t3.elements, r3 = i3[0], a2 = i3[1], o2 = i3[2], s2 = i3[3], l2 = i3[4], c2 = i3[5], u2 = i3[6], h2 = i3[7], d2 = i3[8], p2 = i3[9], f2 = i3[10], m2 = i3[11], g2 = i3[12], v2 = i3[13], y2 = i3[14], x2 = i3[15], b2 = p2 * y2 * h2 - v2 * f2 * h2 + v2 * u2 * m2 - c2 * y2 * m2 - p2 * u2 * x2 + c2 * f2 * x2, w2 = g2 * f2 * h2 - d2 * y2 * h2 - g2 * u2 * m2 + l2 * y2 * m2 + d2 * u2 * x2 - l2 * f2 * x2, M2 = d2 * v2 * h2 - g2 * p2 * h2 + g2 * c2 * m2 - l2 * v2 * m2 - d2 * c2 * x2 + l2 * p2 * x2, _6 = g2 * p2 * u2 - d2 * v2 * u2 - g2 * c2 * f2 + l2 * v2 * f2 + d2 * c2 * y2 - l2 * p2 * y2, S2 = r3 * b2 + a2 * w2 + o2 * M2 + s2 * _6;
          if (S2 == 0) {
            var C2 = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
            if (e3 === true)
              throw new Error(C2);
            return console.warn(C2), this.identity();
          }
          var T2 = 1 / S2;
          return n3[0] = b2 * T2, n3[1] = (v2 * f2 * s2 - p2 * y2 * s2 - v2 * o2 * m2 + a2 * y2 * m2 + p2 * o2 * x2 - a2 * f2 * x2) * T2, n3[2] = (c2 * y2 * s2 - v2 * u2 * s2 + v2 * o2 * h2 - a2 * y2 * h2 - c2 * o2 * x2 + a2 * u2 * x2) * T2, n3[3] = (p2 * u2 * s2 - c2 * f2 * s2 - p2 * o2 * h2 + a2 * f2 * h2 + c2 * o2 * m2 - a2 * u2 * m2) * T2, n3[4] = w2 * T2, n3[5] = (d2 * y2 * s2 - g2 * f2 * s2 + g2 * o2 * m2 - r3 * y2 * m2 - d2 * o2 * x2 + r3 * f2 * x2) * T2, n3[6] = (g2 * u2 * s2 - l2 * y2 * s2 - g2 * o2 * h2 + r3 * y2 * h2 + l2 * o2 * x2 - r3 * u2 * x2) * T2, n3[7] = (l2 * f2 * s2 - d2 * u2 * s2 + d2 * o2 * h2 - r3 * f2 * h2 - l2 * o2 * m2 + r3 * u2 * m2) * T2, n3[8] = M2 * T2, n3[9] = (g2 * p2 * s2 - d2 * v2 * s2 - g2 * a2 * m2 + r3 * v2 * m2 + d2 * a2 * x2 - r3 * p2 * x2) * T2, n3[10] = (l2 * v2 * s2 - g2 * c2 * s2 + g2 * a2 * h2 - r3 * v2 * h2 - l2 * a2 * x2 + r3 * c2 * x2) * T2, n3[11] = (d2 * c2 * s2 - l2 * p2 * s2 - d2 * a2 * h2 + r3 * p2 * h2 + l2 * a2 * m2 - r3 * c2 * m2) * T2, n3[12] = _6 * T2, n3[13] = (d2 * v2 * o2 - g2 * p2 * o2 + g2 * a2 * f2 - r3 * v2 * f2 - d2 * a2 * y2 + r3 * p2 * y2) * T2, n3[14] = (g2 * c2 * o2 - l2 * v2 * o2 - g2 * a2 * u2 + r3 * v2 * u2 + l2 * a2 * y2 - r3 * c2 * y2) * T2, n3[15] = (l2 * p2 * o2 - d2 * c2 * o2 + d2 * a2 * u2 - r3 * p2 * u2 - l2 * a2 * f2 + r3 * c2 * f2) * T2, this;
        }, scale: function(t3) {
          var e3 = this.elements, n3 = t3.x, i3 = t3.y, r3 = t3.z;
          return e3[0] *= n3, e3[4] *= i3, e3[8] *= r3, e3[1] *= n3, e3[5] *= i3, e3[9] *= r3, e3[2] *= n3, e3[6] *= i3, e3[10] *= r3, e3[3] *= n3, e3[7] *= i3, e3[11] *= r3, this;
        }, getMaxScaleOnAxis: function() {
          var t3 = this.elements, e3 = t3[0] * t3[0] + t3[1] * t3[1] + t3[2] * t3[2], n3 = t3[4] * t3[4] + t3[5] * t3[5] + t3[6] * t3[6], i3 = t3[8] * t3[8] + t3[9] * t3[9] + t3[10] * t3[10];
          return Math.sqrt(Math.max(e3, n3, i3));
        }, makeTranslation: function(t3, e3, n3) {
          return this.set(1, 0, 0, t3, 0, 1, 0, e3, 0, 0, 1, n3, 0, 0, 0, 1), this;
        }, makeRotationX: function(t3) {
          var e3 = Math.cos(t3), n3 = Math.sin(t3);
          return this.set(1, 0, 0, 0, 0, e3, -n3, 0, 0, n3, e3, 0, 0, 0, 0, 1), this;
        }, makeRotationY: function(t3) {
          var e3 = Math.cos(t3), n3 = Math.sin(t3);
          return this.set(e3, 0, n3, 0, 0, 1, 0, 0, -n3, 0, e3, 0, 0, 0, 0, 1), this;
        }, makeRotationZ: function(t3) {
          var e3 = Math.cos(t3), n3 = Math.sin(t3);
          return this.set(e3, -n3, 0, 0, n3, e3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }, makeRotationAxis: function(t3, e3) {
          var n3 = Math.cos(e3), i3 = Math.sin(e3), r3 = 1 - n3, a2 = t3.x, o2 = t3.y, s2 = t3.z, l2 = r3 * a2, c2 = r3 * o2;
          return this.set(l2 * a2 + n3, l2 * o2 - i3 * s2, l2 * s2 + i3 * o2, 0, l2 * o2 + i3 * s2, c2 * o2 + n3, c2 * s2 - i3 * a2, 0, l2 * s2 - i3 * o2, c2 * s2 + i3 * a2, r3 * s2 * s2 + n3, 0, 0, 0, 0, 1), this;
        }, makeScale: function(t3, e3, n3) {
          return this.set(t3, 0, 0, 0, 0, e3, 0, 0, 0, 0, n3, 0, 0, 0, 0, 1), this;
        }, makeShear: function(t3, e3, n3) {
          return this.set(1, e3, n3, 0, t3, 1, n3, 0, t3, e3, 1, 0, 0, 0, 0, 1), this;
        }, compose: function(t3, e3, n3) {
          var i3 = this.elements, r3 = e3._x, a2 = e3._y, o2 = e3._z, s2 = e3._w, l2 = r3 + r3, c2 = a2 + a2, u2 = o2 + o2, h2 = r3 * l2, d2 = r3 * c2, p2 = r3 * u2, f2 = a2 * c2, m2 = a2 * u2, g2 = o2 * u2, v2 = s2 * l2, y2 = s2 * c2, x2 = s2 * u2, b2 = n3.x, w2 = n3.y, M2 = n3.z;
          return i3[0] = (1 - (f2 + g2)) * b2, i3[1] = (d2 + x2) * b2, i3[2] = (p2 - y2) * b2, i3[3] = 0, i3[4] = (d2 - x2) * w2, i3[5] = (1 - (h2 + g2)) * w2, i3[6] = (m2 + v2) * w2, i3[7] = 0, i3[8] = (p2 + y2) * M2, i3[9] = (m2 - v2) * M2, i3[10] = (1 - (h2 + f2)) * M2, i3[11] = 0, i3[12] = t3.x, i3[13] = t3.y, i3[14] = t3.z, i3[15] = 1, this;
        }, decompose: function(t3, e3, n3) {
          var i3 = this.elements, r3 = Je.set(i3[0], i3[1], i3[2]).length(), a2 = Je.set(i3[4], i3[5], i3[6]).length(), o2 = Je.set(i3[8], i3[9], i3[10]).length();
          this.determinant() < 0 && (r3 = -r3), t3.x = i3[12], t3.y = i3[13], t3.z = i3[14], qe.copy(this);
          var s2 = 1 / r3, l2 = 1 / a2, c2 = 1 / o2;
          return qe.elements[0] *= s2, qe.elements[1] *= s2, qe.elements[2] *= s2, qe.elements[4] *= l2, qe.elements[5] *= l2, qe.elements[6] *= l2, qe.elements[8] *= c2, qe.elements[9] *= c2, qe.elements[10] *= c2, e3.setFromRotationMatrix(qe), n3.x = r3, n3.y = a2, n3.z = o2, this;
        }, makePerspective: function(t3, e3, n3, i3, r3, a2) {
          a2 === void 0 && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
          var o2 = this.elements, s2 = 2 * r3 / (e3 - t3), l2 = 2 * r3 / (n3 - i3), c2 = (e3 + t3) / (e3 - t3), u2 = (n3 + i3) / (n3 - i3), h2 = -(a2 + r3) / (a2 - r3), d2 = -2 * a2 * r3 / (a2 - r3);
          return o2[0] = s2, o2[4] = 0, o2[8] = c2, o2[12] = 0, o2[1] = 0, o2[5] = l2, o2[9] = u2, o2[13] = 0, o2[2] = 0, o2[6] = 0, o2[10] = h2, o2[14] = d2, o2[3] = 0, o2[7] = 0, o2[11] = -1, o2[15] = 0, this;
        }, makeOrthographic: function(t3, e3, n3, i3, r3, a2) {
          var o2 = this.elements, s2 = 1 / (e3 - t3), l2 = 1 / (n3 - i3), c2 = 1 / (a2 - r3), u2 = (e3 + t3) * s2, h2 = (n3 + i3) * l2, d2 = (a2 + r3) * c2;
          return o2[0] = 2 * s2, o2[4] = 0, o2[8] = 0, o2[12] = -u2, o2[1] = 0, o2[5] = 2 * l2, o2[9] = 0, o2[13] = -h2, o2[2] = 0, o2[6] = 0, o2[10] = -2 * c2, o2[14] = -d2, o2[3] = 0, o2[7] = 0, o2[11] = 0, o2[15] = 1, this;
        }, equals: function(t3) {
          for (var e3 = this.elements, n3 = t3.elements, i3 = 0; i3 < 16; i3++)
            if (e3[i3] !== n3[i3])
              return false;
          return true;
        }, fromArray: function(t3, e3) {
          e3 === void 0 && (e3 = 0);
          for (var n3 = 0; n3 < 16; n3++)
            this.elements[n3] = t3[n3 + e3];
          return this;
        }, toArray: function(t3, e3) {
          t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0);
          var n3 = this.elements;
          return t3[e3] = n3[0], t3[e3 + 1] = n3[1], t3[e3 + 2] = n3[2], t3[e3 + 3] = n3[3], t3[e3 + 4] = n3[4], t3[e3 + 5] = n3[5], t3[e3 + 6] = n3[6], t3[e3 + 7] = n3[7], t3[e3 + 8] = n3[8], t3[e3 + 9] = n3[9], t3[e3 + 10] = n3[10], t3[e3 + 11] = n3[11], t3[e3 + 12] = n3[12], t3[e3 + 13] = n3[13], t3[e3 + 14] = n3[14], t3[e3 + 15] = n3[15], t3;
        } });
        var tn = new Qe(), en = new Ge();
        function nn(t3, e3, n3, i3) {
          this._x = t3 || 0, this._y = e3 || 0, this._z = n3 || 0, this._order = i3 || nn.DefaultOrder;
        }
        function rn() {
          this.mask = 1;
        }
        nn.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"], nn.DefaultOrder = "XYZ", Object.defineProperties(nn.prototype, { x: { get: function() {
          return this._x;
        }, set: function(t3) {
          this._x = t3, this._onChangeCallback();
        } }, y: { get: function() {
          return this._y;
        }, set: function(t3) {
          this._y = t3, this._onChangeCallback();
        } }, z: { get: function() {
          return this._z;
        }, set: function(t3) {
          this._z = t3, this._onChangeCallback();
        } }, order: { get: function() {
          return this._order;
        }, set: function(t3) {
          this._order = t3, this._onChangeCallback();
        } } }), Object.assign(nn.prototype, { isEuler: true, set: function(t3, e3, n3, i3) {
          return this._x = t3, this._y = e3, this._z = n3, this._order = i3 || this._order, this._onChangeCallback(), this;
        }, clone: function() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }, copy: function(t3) {
          return this._x = t3._x, this._y = t3._y, this._z = t3._z, this._order = t3._order, this._onChangeCallback(), this;
        }, setFromRotationMatrix: function(t3, e3, n3) {
          var i3 = Pe.clamp, r3 = t3.elements, a2 = r3[0], o2 = r3[4], s2 = r3[8], l2 = r3[1], c2 = r3[5], u2 = r3[9], h2 = r3[2], d2 = r3[6], p2 = r3[10];
          return (e3 = e3 || this._order) === "XYZ" ? (this._y = Math.asin(i3(s2, -1, 1)), Math.abs(s2) < 0.9999999 ? (this._x = Math.atan2(-u2, p2), this._z = Math.atan2(-o2, a2)) : (this._x = Math.atan2(d2, c2), this._z = 0)) : e3 === "YXZ" ? (this._x = Math.asin(-i3(u2, -1, 1)), Math.abs(u2) < 0.9999999 ? (this._y = Math.atan2(s2, p2), this._z = Math.atan2(l2, c2)) : (this._y = Math.atan2(-h2, a2), this._z = 0)) : e3 === "ZXY" ? (this._x = Math.asin(i3(d2, -1, 1)), Math.abs(d2) < 0.9999999 ? (this._y = Math.atan2(-h2, p2), this._z = Math.atan2(-o2, c2)) : (this._y = 0, this._z = Math.atan2(l2, a2))) : e3 === "ZYX" ? (this._y = Math.asin(-i3(h2, -1, 1)), Math.abs(h2) < 0.9999999 ? (this._x = Math.atan2(d2, p2), this._z = Math.atan2(l2, a2)) : (this._x = 0, this._z = Math.atan2(-o2, c2))) : e3 === "YZX" ? (this._z = Math.asin(i3(l2, -1, 1)), Math.abs(l2) < 0.9999999 ? (this._x = Math.atan2(-u2, c2), this._y = Math.atan2(-h2, a2)) : (this._x = 0, this._y = Math.atan2(s2, p2))) : e3 === "XZY" ? (this._z = Math.asin(-i3(o2, -1, 1)), Math.abs(o2) < 0.9999999 ? (this._x = Math.atan2(d2, c2), this._y = Math.atan2(s2, a2)) : (this._x = Math.atan2(-u2, p2), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + e3), this._order = e3, n3 !== false && this._onChangeCallback(), this;
        }, setFromQuaternion: function(t3, e3, n3) {
          return tn.makeRotationFromQuaternion(t3), this.setFromRotationMatrix(tn, e3, n3);
        }, setFromVector3: function(t3, e3) {
          return this.set(t3.x, t3.y, t3.z, e3 || this._order);
        }, reorder: function(t3) {
          return en.setFromEuler(this), this.setFromQuaternion(en, t3);
        }, equals: function(t3) {
          return t3._x === this._x && t3._y === this._y && t3._z === this._z && t3._order === this._order;
        }, fromArray: function(t3) {
          return this._x = t3[0], this._y = t3[1], this._z = t3[2], t3[3] !== void 0 && (this._order = t3[3]), this._onChangeCallback(), this;
        }, toArray: function(t3, e3) {
          return t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0), t3[e3] = this._x, t3[e3 + 1] = this._y, t3[e3 + 2] = this._z, t3[e3 + 3] = this._order, t3;
        }, toVector3: function(t3) {
          return t3 ? t3.set(this._x, this._y, this._z) : new We(this._x, this._y, this._z);
        }, _onChange: function(t3) {
          return this._onChangeCallback = t3, this;
        }, _onChangeCallback: function() {
        } }), Object.assign(rn.prototype, { set: function(t3) {
          this.mask = 1 << t3 | 0;
        }, enable: function(t3) {
          this.mask |= 1 << t3 | 0;
        }, enableAll: function() {
          this.mask = -1;
        }, toggle: function(t3) {
          this.mask ^= 1 << t3 | 0;
        }, disable: function(t3) {
          this.mask &= ~(1 << t3 | 0);
        }, disableAll: function() {
          this.mask = 0;
        }, test: function(t3) {
          return (this.mask & t3.mask) != 0;
        } });
        var an = 0, on = new We(), sn = new Ge(), ln = new Qe(), cn = new We(), un = new We(), hn = new We(), dn = new Ge(), pn = new We(1, 0, 0), fn = new We(0, 1, 0), mn = new We(0, 0, 1), gn = { type: "added" }, vn = { type: "removed" };
        function yn() {
          Object.defineProperty(this, "id", { value: an++ }), this.uuid = Pe.generateUUID(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = yn.DefaultUp.clone();
          var t3 = new We(), e3 = new nn(), n3 = new Ge(), i3 = new We(1, 1, 1);
          e3._onChange(function() {
            n3.setFromEuler(e3, false);
          }), n3._onChange(function() {
            e3.setFromQuaternion(n3, void 0, false);
          }), Object.defineProperties(this, { position: { configurable: true, enumerable: true, value: t3 }, rotation: { configurable: true, enumerable: true, value: e3 }, quaternion: { configurable: true, enumerable: true, value: n3 }, scale: { configurable: true, enumerable: true, value: i3 }, modelViewMatrix: { value: new Qe() }, normalMatrix: { value: new ke() } }), this.matrix = new Qe(), this.matrixWorld = new Qe(), this.matrixAutoUpdate = yn.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = false, this.layers = new rn(), this.visible = true, this.castShadow = false, this.receiveShadow = false, this.frustumCulled = true, this.renderOrder = 0, this.userData = {};
        }
        function xn() {
          yn.call(this), this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = true, typeof __THREE_DEVTOOLS__ != "undefined" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
        }
        yn.DefaultUp = new We(0, 1, 0), yn.DefaultMatrixAutoUpdate = true, yn.prototype = Object.assign(Object.create(Ae.prototype), { constructor: yn, isObject3D: true, onBeforeRender: function() {
        }, onAfterRender: function() {
        }, applyMatrix4: function(t3) {
          this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t3), this.matrix.decompose(this.position, this.quaternion, this.scale);
        }, applyQuaternion: function(t3) {
          return this.quaternion.premultiply(t3), this;
        }, setRotationFromAxisAngle: function(t3, e3) {
          this.quaternion.setFromAxisAngle(t3, e3);
        }, setRotationFromEuler: function(t3) {
          this.quaternion.setFromEuler(t3, true);
        }, setRotationFromMatrix: function(t3) {
          this.quaternion.setFromRotationMatrix(t3);
        }, setRotationFromQuaternion: function(t3) {
          this.quaternion.copy(t3);
        }, rotateOnAxis: function(t3, e3) {
          return sn.setFromAxisAngle(t3, e3), this.quaternion.multiply(sn), this;
        }, rotateOnWorldAxis: function(t3, e3) {
          return sn.setFromAxisAngle(t3, e3), this.quaternion.premultiply(sn), this;
        }, rotateX: function(t3) {
          return this.rotateOnAxis(pn, t3);
        }, rotateY: function(t3) {
          return this.rotateOnAxis(fn, t3);
        }, rotateZ: function(t3) {
          return this.rotateOnAxis(mn, t3);
        }, translateOnAxis: function(t3, e3) {
          return on.copy(t3).applyQuaternion(this.quaternion), this.position.add(on.multiplyScalar(e3)), this;
        }, translateX: function(t3) {
          return this.translateOnAxis(pn, t3);
        }, translateY: function(t3) {
          return this.translateOnAxis(fn, t3);
        }, translateZ: function(t3) {
          return this.translateOnAxis(mn, t3);
        }, localToWorld: function(t3) {
          return t3.applyMatrix4(this.matrixWorld);
        }, worldToLocal: function(t3) {
          return t3.applyMatrix4(ln.getInverse(this.matrixWorld));
        }, lookAt: function(t3, e3, n3) {
          t3.isVector3 ? cn.copy(t3) : cn.set(t3, e3, n3);
          var i3 = this.parent;
          this.updateWorldMatrix(true, false), un.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? ln.lookAt(un, cn, this.up) : ln.lookAt(cn, un, this.up), this.quaternion.setFromRotationMatrix(ln), i3 && (ln.extractRotation(i3.matrixWorld), sn.setFromRotationMatrix(ln), this.quaternion.premultiply(sn.inverse()));
        }, add: function(t3) {
          if (1 < arguments.length) {
            for (var e3 = 0; e3 < arguments.length; e3++)
              this.add(arguments[e3]);
            return this;
          }
          return t3 === this ? console.error("THREE.Object3D.add: object can't be added as a child of itself.", t3) : t3 && t3.isObject3D ? (t3.parent !== null && t3.parent.remove(t3), (t3.parent = this).children.push(t3), t3.dispatchEvent(gn)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t3), this;
        }, remove: function(t3) {
          if (1 < arguments.length) {
            for (var e3 = 0; e3 < arguments.length; e3++)
              this.remove(arguments[e3]);
            return this;
          }
          var n3 = this.children.indexOf(t3);
          return n3 !== -1 && (t3.parent = null, this.children.splice(n3, 1), t3.dispatchEvent(vn)), this;
        }, attach: function(t3) {
          return this.updateWorldMatrix(true, false), ln.getInverse(this.matrixWorld), t3.parent !== null && (t3.parent.updateWorldMatrix(true, false), ln.multiply(t3.parent.matrixWorld)), t3.applyMatrix4(ln), t3.updateWorldMatrix(false, false), this.add(t3), this;
        }, getObjectById: function(t3) {
          return this.getObjectByProperty("id", t3);
        }, getObjectByName: function(t3) {
          return this.getObjectByProperty("name", t3);
        }, getObjectByProperty: function(t3, e3) {
          if (this[t3] === e3)
            return this;
          for (var n3 = 0, i3 = this.children.length; n3 < i3; n3++) {
            var r3 = this.children[n3].getObjectByProperty(t3, e3);
            if (r3 !== void 0)
              return r3;
          }
        }, getWorldPosition: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), t3 = new We()), this.updateMatrixWorld(true), t3.setFromMatrixPosition(this.matrixWorld);
        }, getWorldQuaternion: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), t3 = new Ge()), this.updateMatrixWorld(true), this.matrixWorld.decompose(un, t3, hn), t3;
        }, getWorldScale: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), t3 = new We()), this.updateMatrixWorld(true), this.matrixWorld.decompose(un, dn, t3), t3;
        }, getWorldDirection: function(t3) {
          t3 === void 0 && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), t3 = new We()), this.updateMatrixWorld(true);
          var e3 = this.matrixWorld.elements;
          return t3.set(e3[8], e3[9], e3[10]).normalize();
        }, raycast: function() {
        }, traverse: function(t3) {
          t3(this);
          for (var e3 = this.children, n3 = 0, i3 = e3.length; n3 < i3; n3++)
            e3[n3].traverse(t3);
        }, traverseVisible: function(t3) {
          if (this.visible !== false) {
            t3(this);
            for (var e3 = this.children, n3 = 0, i3 = e3.length; n3 < i3; n3++)
              e3[n3].traverseVisible(t3);
          }
        }, traverseAncestors: function(t3) {
          var e3 = this.parent;
          e3 !== null && (t3(e3), e3.traverseAncestors(t3));
        }, updateMatrix: function() {
          this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = true;
        }, updateMatrixWorld: function(t3) {
          this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t3) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t3 = !(this.matrixWorldNeedsUpdate = false));
          for (var e3 = this.children, n3 = 0, i3 = e3.length; n3 < i3; n3++)
            e3[n3].updateMatrixWorld(t3);
        }, updateWorldMatrix: function(t3, e3) {
          var n3 = this.parent;
          if (t3 === true && n3 !== null && n3.updateWorldMatrix(true, false), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), e3 === true)
            for (var i3 = this.children, r3 = 0, a2 = i3.length; r3 < a2; r3++)
              i3[r3].updateWorldMatrix(false, true);
        }, toJSON: function(t3) {
          var e3 = t3 === void 0 || typeof t3 == "string", n3 = {};
          e3 && (t3 = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {} }, n3.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" });
          var i3 = {};
          function r3(e4, n4) {
            return e4[n4.uuid] === void 0 && (e4[n4.uuid] = n4.toJSON(t3)), n4.uuid;
          }
          if (i3.uuid = this.uuid, i3.type = this.type, this.name !== "" && (i3.name = this.name), this.castShadow === true && (i3.castShadow = true), this.receiveShadow === true && (i3.receiveShadow = true), this.visible === false && (i3.visible = false), this.frustumCulled === false && (i3.frustumCulled = false), this.renderOrder !== 0 && (i3.renderOrder = this.renderOrder), JSON.stringify(this.userData) !== "{}" && (i3.userData = this.userData), i3.layers = this.layers.mask, i3.matrix = this.matrix.toArray(), this.matrixAutoUpdate === false && (i3.matrixAutoUpdate = false), this.isInstancedMesh && (i3.type = "InstancedMesh", i3.count = this.count, i3.instanceMatrix = this.instanceMatrix.toJSON()), this.isMesh || this.isLine || this.isPoints) {
            i3.geometry = r3(t3.geometries, this.geometry);
            var a2 = this.geometry.parameters;
            if (a2 !== void 0 && a2.shapes !== void 0) {
              var o2 = a2.shapes;
              if (Array.isArray(o2))
                for (var s2 = 0, l2 = o2.length; s2 < l2; s2++) {
                  var c2 = o2[s2];
                  r3(t3.shapes, c2);
                }
              else
                r3(t3.shapes, o2);
            }
          }
          if (this.material !== void 0)
            if (Array.isArray(this.material)) {
              var u2 = [];
              for (s2 = 0, l2 = this.material.length; s2 < l2; s2++)
                u2.push(r3(t3.materials, this.material[s2]));
              i3.material = u2;
            } else
              i3.material = r3(t3.materials, this.material);
          if (0 < this.children.length)
            for (i3.children = [], s2 = 0; s2 < this.children.length; s2++)
              i3.children.push(this.children[s2].toJSON(t3).object);
          if (e3) {
            var h2 = m2(t3.geometries), d2 = m2(t3.materials), p2 = m2(t3.textures), f2 = m2(t3.images);
            o2 = m2(t3.shapes), 0 < h2.length && (n3.geometries = h2), 0 < d2.length && (n3.materials = d2), 0 < p2.length && (n3.textures = p2), 0 < f2.length && (n3.images = f2), 0 < o2.length && (n3.shapes = o2);
          }
          return n3.object = i3, n3;
          function m2(t4) {
            var e4 = [];
            for (var n4 in t4) {
              var i4 = t4[n4];
              delete i4.metadata, e4.push(i4);
            }
            return e4;
          }
        }, clone: function(t3) {
          return new this.constructor().copy(this, t3);
        }, copy: function(t3, e3) {
          if (e3 === void 0 && (e3 = true), this.name = t3.name, this.up.copy(t3.up), this.position.copy(t3.position), this.quaternion.copy(t3.quaternion), this.scale.copy(t3.scale), this.matrix.copy(t3.matrix), this.matrixWorld.copy(t3.matrixWorld), this.matrixAutoUpdate = t3.matrixAutoUpdate, this.matrixWorldNeedsUpdate = t3.matrixWorldNeedsUpdate, this.layers.mask = t3.layers.mask, this.visible = t3.visible, this.castShadow = t3.castShadow, this.receiveShadow = t3.receiveShadow, this.frustumCulled = t3.frustumCulled, this.renderOrder = t3.renderOrder, this.userData = JSON.parse(JSON.stringify(t3.userData)), e3 === true)
            for (var n3 = 0; n3 < t3.children.length; n3++) {
              var i3 = t3.children[n3];
              this.add(i3.clone());
            }
          return this;
        } }), xn.prototype = Object.assign(Object.create(yn.prototype), { constructor: xn, isScene: true, copy: function(t3, e3) {
          return yn.prototype.copy.call(this, t3, e3), t3.background !== null && (this.background = t3.background.clone()), t3.environment !== null && (this.environment = t3.environment.clone()), t3.fog !== null && (this.fog = t3.fog.clone()), t3.overrideMaterial !== null && (this.overrideMaterial = t3.overrideMaterial.clone()), this.autoUpdate = t3.autoUpdate, this.matrixAutoUpdate = t3.matrixAutoUpdate, this;
        }, toJSON: function(t3) {
          var e3 = yn.prototype.toJSON.call(this, t3);
          return this.background !== null && (e3.object.background = this.background.toJSON(t3)), this.environment !== null && (e3.object.environment = this.environment.toJSON(t3)), this.fog !== null && (e3.object.fog = this.fog.toJSON()), e3;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } });
        var bn = [new We(), new We(), new We(), new We(), new We(), new We(), new We(), new We()], wn = new We(), Mn = new Pn(), _n = new We(), Sn = new We(), Cn = new We(), Tn = new We(), En = new We(), Dn = new We(), An = new We(), On = new We(), Ln = new We(), In = new We();
        function Pn(t3, e3) {
          this.min = t3 !== void 0 ? t3 : new We(1 / 0, 1 / 0, 1 / 0), this.max = e3 !== void 0 ? e3 : new We(-1 / 0, -1 / 0, -1 / 0);
        }
        function Rn(t3, e3, n3, i3, r3) {
          var a2, o2;
          for (a2 = 0, o2 = t3.length - 3; a2 <= o2; a2 += 3) {
            In.fromArray(t3, a2);
            var s2 = r3.x * Math.abs(In.x) + r3.y * Math.abs(In.y) + r3.z * Math.abs(In.z), l2 = e3.dot(In), c2 = n3.dot(In), u2 = i3.dot(In);
            if (Math.max(-Math.max(l2, c2, u2), Math.min(l2, c2, u2)) > s2)
              return false;
          }
          return true;
        }
        Object.assign(Pn.prototype, { isBox3: true, set: function(t3, e3) {
          return this.min.copy(t3), this.max.copy(e3), this;
        }, setFromArray: function(t3) {
          for (var e3 = 1 / 0, n3 = 1 / 0, i3 = 1 / 0, r3 = -1 / 0, a2 = -1 / 0, o2 = -1 / 0, s2 = 0, l2 = t3.length; s2 < l2; s2 += 3) {
            var c2 = t3[s2], u2 = t3[s2 + 1], h2 = t3[s2 + 2];
            c2 < e3 && (e3 = c2), u2 < n3 && (n3 = u2), h2 < i3 && (i3 = h2), r3 < c2 && (r3 = c2), a2 < u2 && (a2 = u2), o2 < h2 && (o2 = h2);
          }
          return this.min.set(e3, n3, i3), this.max.set(r3, a2, o2), this;
        }, setFromBufferAttribute: function(t3) {
          for (var e3 = 1 / 0, n3 = 1 / 0, i3 = 1 / 0, r3 = -1 / 0, a2 = -1 / 0, o2 = -1 / 0, s2 = 0, l2 = t3.count; s2 < l2; s2++) {
            var c2 = t3.getX(s2), u2 = t3.getY(s2), h2 = t3.getZ(s2);
            c2 < e3 && (e3 = c2), u2 < n3 && (n3 = u2), h2 < i3 && (i3 = h2), r3 < c2 && (r3 = c2), a2 < u2 && (a2 = u2), o2 < h2 && (o2 = h2);
          }
          return this.min.set(e3, n3, i3), this.max.set(r3, a2, o2), this;
        }, setFromPoints: function(t3) {
          this.makeEmpty();
          for (var e3 = 0, n3 = t3.length; e3 < n3; e3++)
            this.expandByPoint(t3[e3]);
          return this;
        }, setFromCenterAndSize: function(t3, e3) {
          var n3 = wn.copy(e3).multiplyScalar(0.5);
          return this.min.copy(t3).sub(n3), this.max.copy(t3).add(n3), this;
        }, setFromObject: function(t3) {
          return this.makeEmpty(), this.expandByObject(t3);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.min.copy(t3.min), this.max.copy(t3.max), this;
        }, makeEmpty: function() {
          return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
        }, isEmpty: function() {
          return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }, getCenter: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Box3: .getCenter() target is now required"), t3 = new We()), this.isEmpty() ? t3.set(0, 0, 0) : t3.addVectors(this.min, this.max).multiplyScalar(0.5);
        }, getSize: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Box3: .getSize() target is now required"), t3 = new We()), this.isEmpty() ? t3.set(0, 0, 0) : t3.subVectors(this.max, this.min);
        }, expandByPoint: function(t3) {
          return this.min.min(t3), this.max.max(t3), this;
        }, expandByVector: function(t3) {
          return this.min.sub(t3), this.max.add(t3), this;
        }, expandByScalar: function(t3) {
          return this.min.addScalar(-t3), this.max.addScalar(t3), this;
        }, expandByObject: function(t3) {
          t3.updateWorldMatrix(false, false);
          var e3 = t3.geometry;
          e3 !== void 0 && (e3.boundingBox === null && e3.computeBoundingBox(), Mn.copy(e3.boundingBox), Mn.applyMatrix4(t3.matrixWorld), this.expandByPoint(Mn.min), this.expandByPoint(Mn.max));
          for (var n3 = t3.children, i3 = 0, r3 = n3.length; i3 < r3; i3++)
            this.expandByObject(n3[i3]);
          return this;
        }, containsPoint: function(t3) {
          return !(t3.x < this.min.x || t3.x > this.max.x || t3.y < this.min.y || t3.y > this.max.y || t3.z < this.min.z || t3.z > this.max.z);
        }, containsBox: function(t3) {
          return this.min.x <= t3.min.x && t3.max.x <= this.max.x && this.min.y <= t3.min.y && t3.max.y <= this.max.y && this.min.z <= t3.min.z && t3.max.z <= this.max.z;
        }, getParameter: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Box3: .getParameter() target is now required"), e3 = new We()), e3.set((t3.x - this.min.x) / (this.max.x - this.min.x), (t3.y - this.min.y) / (this.max.y - this.min.y), (t3.z - this.min.z) / (this.max.z - this.min.z));
        }, intersectsBox: function(t3) {
          return !(t3.max.x < this.min.x || t3.min.x > this.max.x || t3.max.y < this.min.y || t3.min.y > this.max.y || t3.max.z < this.min.z || t3.min.z > this.max.z);
        }, intersectsSphere: function(t3) {
          return this.clampPoint(t3.center, wn), wn.distanceToSquared(t3.center) <= t3.radius * t3.radius;
        }, intersectsPlane: function(t3) {
          var e3, n3;
          return n3 = 0 < t3.normal.x ? (e3 = t3.normal.x * this.min.x, t3.normal.x * this.max.x) : (e3 = t3.normal.x * this.max.x, t3.normal.x * this.min.x), 0 < t3.normal.y ? (e3 += t3.normal.y * this.min.y, n3 += t3.normal.y * this.max.y) : (e3 += t3.normal.y * this.max.y, n3 += t3.normal.y * this.min.y), 0 < t3.normal.z ? (e3 += t3.normal.z * this.min.z, n3 += t3.normal.z * this.max.z) : (e3 += t3.normal.z * this.max.z, n3 += t3.normal.z * this.min.z), e3 <= -t3.constant && n3 >= -t3.constant;
        }, intersectsTriangle: function(t3) {
          if (this.isEmpty())
            return false;
          this.getCenter(An), On.subVectors(this.max, An), _n.subVectors(t3.a, An), Sn.subVectors(t3.b, An), Cn.subVectors(t3.c, An), Tn.subVectors(Sn, _n), En.subVectors(Cn, Sn), Dn.subVectors(_n, Cn);
          var e3 = [0, -Tn.z, Tn.y, 0, -En.z, En.y, 0, -Dn.z, Dn.y, Tn.z, 0, -Tn.x, En.z, 0, -En.x, Dn.z, 0, -Dn.x, -Tn.y, Tn.x, 0, -En.y, En.x, 0, -Dn.y, Dn.x, 0];
          return !!Rn(e3, _n, Sn, Cn, On) && !!Rn(e3 = [1, 0, 0, 0, 1, 0, 0, 0, 1], _n, Sn, Cn, On) && (Ln.crossVectors(Tn, En), Rn(e3 = [Ln.x, Ln.y, Ln.z], _n, Sn, Cn, On));
        }, clampPoint: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Box3: .clampPoint() target is now required"), e3 = new We()), e3.copy(t3).clamp(this.min, this.max);
        }, distanceToPoint: function(t3) {
          return wn.copy(t3).clamp(this.min, this.max).sub(t3).length();
        }, getBoundingSphere: function(t3) {
          return t3 === void 0 && console.error("THREE.Box3: .getBoundingSphere() target is now required"), this.getCenter(t3.center), t3.radius = 0.5 * this.getSize(wn).length(), t3;
        }, intersect: function(t3) {
          return this.min.max(t3.min), this.max.min(t3.max), this.isEmpty() && this.makeEmpty(), this;
        }, union: function(t3) {
          return this.min.min(t3.min), this.max.max(t3.max), this;
        }, applyMatrix4: function(t3) {
          return this.isEmpty() || (bn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t3), bn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t3), bn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t3), bn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t3), bn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t3), bn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t3), bn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t3), bn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t3), this.setFromPoints(bn)), this;
        }, translate: function(t3) {
          return this.min.add(t3), this.max.add(t3), this;
        }, equals: function(t3) {
          return t3.min.equals(this.min) && t3.max.equals(this.max);
        } });
        var kn = new Pn();
        function Bn(t3, e3) {
          this.center = t3 !== void 0 ? t3 : new We(), this.radius = e3 !== void 0 ? e3 : 0;
        }
        Object.assign(Bn.prototype, { set: function(t3, e3) {
          return this.center.copy(t3), this.radius = e3, this;
        }, setFromPoints: function(t3, e3) {
          var n3 = this.center;
          e3 !== void 0 ? n3.copy(e3) : kn.setFromPoints(t3).getCenter(n3);
          for (var i3 = 0, r3 = 0, a2 = t3.length; r3 < a2; r3++)
            i3 = Math.max(i3, n3.distanceToSquared(t3[r3]));
          return this.radius = Math.sqrt(i3), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.center.copy(t3.center), this.radius = t3.radius, this;
        }, empty: function() {
          return this.radius <= 0;
        }, containsPoint: function(t3) {
          return t3.distanceToSquared(this.center) <= this.radius * this.radius;
        }, distanceToPoint: function(t3) {
          return t3.distanceTo(this.center) - this.radius;
        }, intersectsSphere: function(t3) {
          var e3 = this.radius + t3.radius;
          return t3.center.distanceToSquared(this.center) <= e3 * e3;
        }, intersectsBox: function(t3) {
          return t3.intersectsSphere(this);
        }, intersectsPlane: function(t3) {
          return Math.abs(t3.distanceToPoint(this.center)) <= this.radius;
        }, clampPoint: function(t3, e3) {
          var n3 = this.center.distanceToSquared(t3);
          return e3 === void 0 && (console.warn("THREE.Sphere: .clampPoint() target is now required"), e3 = new We()), e3.copy(t3), n3 > this.radius * this.radius && (e3.sub(this.center).normalize(), e3.multiplyScalar(this.radius).add(this.center)), e3;
        }, getBoundingBox: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), t3 = new Pn()), t3.set(this.center, this.center), t3.expandByScalar(this.radius), t3;
        }, applyMatrix4: function(t3) {
          return this.center.applyMatrix4(t3), this.radius = this.radius * t3.getMaxScaleOnAxis(), this;
        }, translate: function(t3) {
          return this.center.add(t3), this;
        }, equals: function(t3) {
          return t3.center.equals(this.center) && t3.radius === this.radius;
        } });
        var Nn = new We(), Fn = new We(), jn = new We(), Vn = new We(), zn = new We(), Gn = new We(), Un = new We();
        function Hn(t3, e3) {
          this.origin = t3 !== void 0 ? t3 : new We(), this.direction = e3 !== void 0 ? e3 : new We(0, 0, -1);
        }
        Object.assign(Hn.prototype, { set: function(t3, e3) {
          return this.origin.copy(t3), this.direction.copy(e3), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.origin.copy(t3.origin), this.direction.copy(t3.direction), this;
        }, at: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Ray: .at() target is now required"), e3 = new We()), e3.copy(this.direction).multiplyScalar(t3).add(this.origin);
        }, lookAt: function(t3) {
          return this.direction.copy(t3).sub(this.origin).normalize(), this;
        }, recast: function(t3) {
          return this.origin.copy(this.at(t3, Nn)), this;
        }, closestPointToPoint: function(t3, e3) {
          e3 === void 0 && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), e3 = new We()), e3.subVectors(t3, this.origin);
          var n3 = e3.dot(this.direction);
          return n3 < 0 ? e3.copy(this.origin) : e3.copy(this.direction).multiplyScalar(n3).add(this.origin);
        }, distanceToPoint: function(t3) {
          return Math.sqrt(this.distanceSqToPoint(t3));
        }, distanceSqToPoint: function(t3) {
          var e3 = Nn.subVectors(t3, this.origin).dot(this.direction);
          return e3 < 0 ? this.origin.distanceToSquared(t3) : (Nn.copy(this.direction).multiplyScalar(e3).add(this.origin), Nn.distanceToSquared(t3));
        }, distanceSqToSegment: function(t3, e3, n3, i3) {
          Fn.copy(t3).add(e3).multiplyScalar(0.5), jn.copy(e3).sub(t3).normalize(), Vn.copy(this.origin).sub(Fn);
          var r3, a2, o2, s2, l2 = 0.5 * t3.distanceTo(e3), c2 = -this.direction.dot(jn), u2 = Vn.dot(this.direction), h2 = -Vn.dot(jn), d2 = Vn.lengthSq(), p2 = Math.abs(1 - c2 * c2);
          if (0 < p2)
            if (a2 = c2 * u2 - h2, s2 = l2 * p2, 0 <= (r3 = c2 * h2 - u2))
              if (-s2 <= a2)
                if (a2 <= s2) {
                  var f2 = 1 / p2;
                  o2 = (r3 *= f2) * (r3 + c2 * (a2 *= f2) + 2 * u2) + a2 * (c2 * r3 + a2 + 2 * h2) + d2;
                } else
                  a2 = l2, o2 = -(r3 = Math.max(0, -(c2 * a2 + u2))) * r3 + a2 * (a2 + 2 * h2) + d2;
              else
                a2 = -l2, o2 = -(r3 = Math.max(0, -(c2 * a2 + u2))) * r3 + a2 * (a2 + 2 * h2) + d2;
            else
              o2 = a2 <= -s2 ? -(r3 = Math.max(0, -(-c2 * l2 + u2))) * r3 + (a2 = 0 < r3 ? -l2 : Math.min(Math.max(-l2, -h2), l2)) * (a2 + 2 * h2) + d2 : a2 <= s2 ? (r3 = 0, (a2 = Math.min(Math.max(-l2, -h2), l2)) * (a2 + 2 * h2) + d2) : -(r3 = Math.max(0, -(c2 * l2 + u2))) * r3 + (a2 = 0 < r3 ? l2 : Math.min(Math.max(-l2, -h2), l2)) * (a2 + 2 * h2) + d2;
          else
            a2 = 0 < c2 ? -l2 : l2, o2 = -(r3 = Math.max(0, -(c2 * a2 + u2))) * r3 + a2 * (a2 + 2 * h2) + d2;
          return n3 && n3.copy(this.direction).multiplyScalar(r3).add(this.origin), i3 && i3.copy(jn).multiplyScalar(a2).add(Fn), o2;
        }, intersectSphere: function(t3, e3) {
          Nn.subVectors(t3.center, this.origin);
          var n3 = Nn.dot(this.direction), i3 = Nn.dot(Nn) - n3 * n3, r3 = t3.radius * t3.radius;
          if (r3 < i3)
            return null;
          var a2 = Math.sqrt(r3 - i3), o2 = n3 - a2, s2 = n3 + a2;
          return o2 < 0 && s2 < 0 ? null : o2 < 0 ? this.at(s2, e3) : this.at(o2, e3);
        }, intersectsSphere: function(t3) {
          return this.distanceSqToPoint(t3.center) <= t3.radius * t3.radius;
        }, distanceToPlane: function(t3) {
          var e3 = t3.normal.dot(this.direction);
          if (e3 === 0)
            return t3.distanceToPoint(this.origin) === 0 ? 0 : null;
          var n3 = -(this.origin.dot(t3.normal) + t3.constant) / e3;
          return 0 <= n3 ? n3 : null;
        }, intersectPlane: function(t3, e3) {
          var n3 = this.distanceToPlane(t3);
          return n3 === null ? null : this.at(n3, e3);
        }, intersectsPlane: function(t3) {
          var e3 = t3.distanceToPoint(this.origin);
          return e3 === 0 || t3.normal.dot(this.direction) * e3 < 0;
        }, intersectBox: function(t3, e3) {
          var n3, i3, r3, a2, o2, s2, l2 = 1 / this.direction.x, c2 = 1 / this.direction.y, u2 = 1 / this.direction.z, h2 = this.origin;
          return i3 = 0 <= l2 ? (n3 = (t3.min.x - h2.x) * l2, (t3.max.x - h2.x) * l2) : (n3 = (t3.max.x - h2.x) * l2, (t3.min.x - h2.x) * l2), (a2 = 0 <= c2 ? (r3 = (t3.min.y - h2.y) * c2, (t3.max.y - h2.y) * c2) : (r3 = (t3.max.y - h2.y) * c2, (t3.min.y - h2.y) * c2)) < n3 || i3 < r3 ? null : ((n3 < r3 || n3 != n3) && (n3 = r3), (a2 < i3 || i3 != i3) && (i3 = a2), (s2 = 0 <= u2 ? (o2 = (t3.min.z - h2.z) * u2, (t3.max.z - h2.z) * u2) : (o2 = (t3.max.z - h2.z) * u2, (t3.min.z - h2.z) * u2)) < n3 || i3 < o2 ? null : ((n3 < o2 || n3 != n3) && (n3 = o2), (s2 < i3 || i3 != i3) && (i3 = s2), i3 < 0 ? null : this.at(0 <= n3 ? n3 : i3, e3)));
        }, intersectsBox: function(t3) {
          return this.intersectBox(t3, Nn) !== null;
        }, intersectTriangle: function(t3, e3, n3, i3, r3) {
          zn.subVectors(e3, t3), Gn.subVectors(n3, t3), Un.crossVectors(zn, Gn);
          var a2, o2 = this.direction.dot(Un);
          if (0 < o2) {
            if (i3)
              return null;
            a2 = 1;
          } else {
            if (!(o2 < 0))
              return null;
            a2 = -1, o2 = -o2;
          }
          Vn.subVectors(this.origin, t3);
          var s2 = a2 * this.direction.dot(Gn.crossVectors(Vn, Gn));
          if (s2 < 0)
            return null;
          var l2 = a2 * this.direction.dot(zn.cross(Vn));
          if (l2 < 0)
            return null;
          if (o2 < s2 + l2)
            return null;
          var c2 = -a2 * Vn.dot(Un);
          return c2 < 0 ? null : this.at(c2 / o2, r3);
        }, applyMatrix4: function(t3) {
          return this.origin.applyMatrix4(t3), this.direction.transformDirection(t3), this;
        }, equals: function(t3) {
          return t3.origin.equals(this.origin) && t3.direction.equals(this.direction);
        } });
        var Wn = new We(), Jn = new We(), qn = new ke();
        function Xn(t3, e3) {
          this.normal = t3 !== void 0 ? t3 : new We(1, 0, 0), this.constant = e3 !== void 0 ? e3 : 0;
        }
        Object.assign(Xn.prototype, { isPlane: true, set: function(t3, e3) {
          return this.normal.copy(t3), this.constant = e3, this;
        }, setComponents: function(t3, e3, n3, i3) {
          return this.normal.set(t3, e3, n3), this.constant = i3, this;
        }, setFromNormalAndCoplanarPoint: function(t3, e3) {
          return this.normal.copy(t3), this.constant = -e3.dot(this.normal), this;
        }, setFromCoplanarPoints: function(t3, e3, n3) {
          var i3 = Wn.subVectors(n3, e3).cross(Jn.subVectors(t3, e3)).normalize();
          return this.setFromNormalAndCoplanarPoint(i3, t3), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.normal.copy(t3.normal), this.constant = t3.constant, this;
        }, normalize: function() {
          var t3 = 1 / this.normal.length();
          return this.normal.multiplyScalar(t3), this.constant *= t3, this;
        }, negate: function() {
          return this.constant *= -1, this.normal.negate(), this;
        }, distanceToPoint: function(t3) {
          return this.normal.dot(t3) + this.constant;
        }, distanceToSphere: function(t3) {
          return this.distanceToPoint(t3.center) - t3.radius;
        }, projectPoint: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Plane: .projectPoint() target is now required"), e3 = new We()), e3.copy(this.normal).multiplyScalar(-this.distanceToPoint(t3)).add(t3);
        }, intersectLine: function(t3, e3) {
          e3 === void 0 && (console.warn("THREE.Plane: .intersectLine() target is now required"), e3 = new We());
          var n3 = t3.delta(Wn), i3 = this.normal.dot(n3);
          if (i3 === 0)
            return this.distanceToPoint(t3.start) === 0 ? e3.copy(t3.start) : void 0;
          var r3 = -(t3.start.dot(this.normal) + this.constant) / i3;
          return r3 < 0 || 1 < r3 ? void 0 : e3.copy(n3).multiplyScalar(r3).add(t3.start);
        }, intersectsLine: function(t3) {
          var e3 = this.distanceToPoint(t3.start), n3 = this.distanceToPoint(t3.end);
          return e3 < 0 && 0 < n3 || n3 < 0 && 0 < e3;
        }, intersectsBox: function(t3) {
          return t3.intersectsPlane(this);
        }, intersectsSphere: function(t3) {
          return t3.intersectsPlane(this);
        }, coplanarPoint: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), t3 = new We()), t3.copy(this.normal).multiplyScalar(-this.constant);
        }, applyMatrix4: function(t3, e3) {
          var n3 = e3 || qn.getNormalMatrix(t3), i3 = this.coplanarPoint(Wn).applyMatrix4(t3), r3 = this.normal.applyMatrix3(n3).normalize();
          return this.constant = -i3.dot(r3), this;
        }, translate: function(t3) {
          return this.constant -= t3.dot(this.normal), this;
        }, equals: function(t3) {
          return t3.normal.equals(this.normal) && t3.constant === this.constant;
        } });
        var Yn = new We(), Zn = new We(), $n = new We(), Kn = new We(), Qn = new We(), ti = new We(), ei = new We(), ni = new We(), ii = new We(), ri = new We();
        function ai(t3, e3, n3) {
          this.a = t3 !== void 0 ? t3 : new We(), this.b = e3 !== void 0 ? e3 : new We(), this.c = n3 !== void 0 ? n3 : new We();
        }
        Object.assign(ai, { getNormal: function(t3, e3, n3, i3) {
          i3 === void 0 && (console.warn("THREE.Triangle: .getNormal() target is now required"), i3 = new We()), i3.subVectors(n3, e3), Yn.subVectors(t3, e3), i3.cross(Yn);
          var r3 = i3.lengthSq();
          return 0 < r3 ? i3.multiplyScalar(1 / Math.sqrt(r3)) : i3.set(0, 0, 0);
        }, getBarycoord: function(t3, e3, n3, i3, r3) {
          Yn.subVectors(i3, e3), Zn.subVectors(n3, e3), $n.subVectors(t3, e3);
          var a2 = Yn.dot(Yn), o2 = Yn.dot(Zn), s2 = Yn.dot($n), l2 = Zn.dot(Zn), c2 = Zn.dot($n), u2 = a2 * l2 - o2 * o2;
          if (r3 === void 0 && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), r3 = new We()), u2 == 0)
            return r3.set(-2, -1, -1);
          var h2 = 1 / u2, d2 = (l2 * s2 - o2 * c2) * h2, p2 = (a2 * c2 - o2 * s2) * h2;
          return r3.set(1 - d2 - p2, p2, d2);
        }, containsPoint: function(t3, e3, n3, i3) {
          return ai.getBarycoord(t3, e3, n3, i3, Kn), 0 <= Kn.x && 0 <= Kn.y && Kn.x + Kn.y <= 1;
        }, getUV: function(t3, e3, n3, i3, r3, a2, o2, s2) {
          return this.getBarycoord(t3, e3, n3, i3, Kn), s2.set(0, 0), s2.addScaledVector(r3, Kn.x), s2.addScaledVector(a2, Kn.y), s2.addScaledVector(o2, Kn.z), s2;
        }, isFrontFacing: function(t3, e3, n3, i3) {
          return Yn.subVectors(n3, e3), Zn.subVectors(t3, e3), Yn.cross(Zn).dot(i3) < 0;
        } }), Object.assign(ai.prototype, { set: function(t3, e3, n3) {
          return this.a.copy(t3), this.b.copy(e3), this.c.copy(n3), this;
        }, setFromPointsAndIndices: function(t3, e3, n3, i3) {
          return this.a.copy(t3[e3]), this.b.copy(t3[n3]), this.c.copy(t3[i3]), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.a.copy(t3.a), this.b.copy(t3.b), this.c.copy(t3.c), this;
        }, getArea: function() {
          return Yn.subVectors(this.c, this.b), Zn.subVectors(this.a, this.b), 0.5 * Yn.cross(Zn).length();
        }, getMidpoint: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), t3 = new We()), t3.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }, getNormal: function(t3) {
          return ai.getNormal(this.a, this.b, this.c, t3);
        }, getPlane: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Triangle: .getPlane() target is now required"), t3 = new Xn()), t3.setFromCoplanarPoints(this.a, this.b, this.c);
        }, getBarycoord: function(t3, e3) {
          return ai.getBarycoord(t3, this.a, this.b, this.c, e3);
        }, getUV: function(t3, e3, n3, i3, r3) {
          return ai.getUV(t3, this.a, this.b, this.c, e3, n3, i3, r3);
        }, containsPoint: function(t3) {
          return ai.containsPoint(t3, this.a, this.b, this.c);
        }, isFrontFacing: function(t3) {
          return ai.isFrontFacing(this.a, this.b, this.c, t3);
        }, intersectsBox: function(t3) {
          return t3.intersectsTriangle(this);
        }, closestPointToPoint: function(t3, e3) {
          e3 === void 0 && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), e3 = new We());
          var n3, i3, r3 = this.a, a2 = this.b, o2 = this.c;
          Qn.subVectors(a2, r3), ti.subVectors(o2, r3), ni.subVectors(t3, r3);
          var s2 = Qn.dot(ni), l2 = ti.dot(ni);
          if (s2 <= 0 && l2 <= 0)
            return e3.copy(r3);
          ii.subVectors(t3, a2);
          var c2 = Qn.dot(ii), u2 = ti.dot(ii);
          if (0 <= c2 && u2 <= c2)
            return e3.copy(a2);
          var h2 = s2 * u2 - c2 * l2;
          if (h2 <= 0 && 0 <= s2 && c2 <= 0)
            return n3 = s2 / (s2 - c2), e3.copy(r3).addScaledVector(Qn, n3);
          ri.subVectors(t3, o2);
          var d2 = Qn.dot(ri), p2 = ti.dot(ri);
          if (0 <= p2 && d2 <= p2)
            return e3.copy(o2);
          var f2 = d2 * l2 - s2 * p2;
          if (f2 <= 0 && 0 <= l2 && p2 <= 0)
            return i3 = l2 / (l2 - p2), e3.copy(r3).addScaledVector(ti, i3);
          var m2 = c2 * p2 - d2 * u2;
          if (m2 <= 0 && 0 <= u2 - c2 && 0 <= d2 - p2)
            return ei.subVectors(o2, a2), i3 = (u2 - c2) / (u2 - c2 + (d2 - p2)), e3.copy(a2).addScaledVector(ei, i3);
          var g2 = 1 / (m2 + f2 + h2);
          return n3 = f2 * g2, i3 = h2 * g2, e3.copy(r3).addScaledVector(Qn, n3).addScaledVector(ti, i3);
        }, equals: function(t3) {
          return t3.a.equals(this.a) && t3.b.equals(this.b) && t3.c.equals(this.c);
        } });
        var oi = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 }, si = { h: 0, s: 0, l: 0 }, li = { h: 0, s: 0, l: 0 };
        function ci(t3, e3, n3) {
          return e3 === void 0 && n3 === void 0 ? this.set(t3) : this.setRGB(t3, e3, n3);
        }
        function ui(t3, e3, n3) {
          return n3 < 0 && (n3 += 1), 1 < n3 && --n3, n3 < 1 / 6 ? t3 + 6 * (e3 - t3) * n3 : n3 < 0.5 ? e3 : n3 < 2 / 3 ? t3 + 6 * (e3 - t3) * (2 / 3 - n3) : t3;
        }
        function hi(t3) {
          return t3 < 0.04045 ? 0.0773993808 * t3 : Math.pow(0.9478672986 * t3 + 0.0521327014, 2.4);
        }
        function di(t3) {
          return t3 < 31308e-7 ? 12.92 * t3 : 1.055 * Math.pow(t3, 0.41666) - 0.055;
        }
        function pi(t3, e3, n3, i3, r3, a2) {
          this.a = t3, this.b = e3, this.c = n3, this.normal = i3 && i3.isVector3 ? i3 : new We(), this.vertexNormals = Array.isArray(i3) ? i3 : [], this.color = r3 && r3.isColor ? r3 : new ci(), this.vertexColors = Array.isArray(r3) ? r3 : [], this.materialIndex = a2 !== void 0 ? a2 : 0;
        }
        Object.assign(ci.prototype, { isColor: true, r: 1, g: 1, b: 1, set: function(t3) {
          return t3 && t3.isColor ? this.copy(t3) : typeof t3 == "number" ? this.setHex(t3) : typeof t3 == "string" && this.setStyle(t3), this;
        }, setScalar: function(t3) {
          return this.r = t3, this.g = t3, this.b = t3, this;
        }, setHex: function(t3) {
          return t3 = Math.floor(t3), this.r = (t3 >> 16 & 255) / 255, this.g = (t3 >> 8 & 255) / 255, this.b = (255 & t3) / 255, this;
        }, setRGB: function(t3, e3, n3) {
          return this.r = t3, this.g = e3, this.b = n3, this;
        }, setHSL: function(t3, e3, n3) {
          if (t3 = Pe.euclideanModulo(t3, 1), e3 = Pe.clamp(e3, 0, 1), n3 = Pe.clamp(n3, 0, 1), e3 === 0)
            this.r = this.g = this.b = n3;
          else {
            var i3 = n3 <= 0.5 ? n3 * (1 + e3) : n3 + e3 - n3 * e3, r3 = 2 * n3 - i3;
            this.r = ui(r3, i3, t3 + 1 / 3), this.g = ui(r3, i3, t3), this.b = ui(r3, i3, t3 - 1 / 3);
          }
          return this;
        }, setStyle: function(t3) {
          function e3(e4) {
            e4 !== void 0 && parseFloat(e4) < 1 && console.warn("THREE.Color: Alpha component of " + t3 + " will be ignored.");
          }
          var n3;
          if (n3 = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t3)) {
            var i3, r3 = n3[1], a2 = n3[2];
            switch (r3) {
              case "rgb":
              case "rgba":
                if (i3 = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a2))
                  return this.r = Math.min(255, parseInt(i3[1], 10)) / 255, this.g = Math.min(255, parseInt(i3[2], 10)) / 255, this.b = Math.min(255, parseInt(i3[3], 10)) / 255, e3(i3[5]), this;
                if (i3 = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a2))
                  return this.r = Math.min(100, parseInt(i3[1], 10)) / 100, this.g = Math.min(100, parseInt(i3[2], 10)) / 100, this.b = Math.min(100, parseInt(i3[3], 10)) / 100, e3(i3[5]), this;
                break;
              case "hsl":
              case "hsla":
                if (i3 = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a2)) {
                  var o2 = parseFloat(i3[1]) / 360, s2 = parseInt(i3[2], 10) / 100, l2 = parseInt(i3[3], 10) / 100;
                  return e3(i3[5]), this.setHSL(o2, s2, l2);
                }
            }
          } else if (n3 = /^\#([A-Fa-f0-9]+)$/.exec(t3)) {
            var c2 = n3[1], u2 = c2.length;
            if (u2 === 3)
              return this.r = parseInt(c2.charAt(0) + c2.charAt(0), 16) / 255, this.g = parseInt(c2.charAt(1) + c2.charAt(1), 16) / 255, this.b = parseInt(c2.charAt(2) + c2.charAt(2), 16) / 255, this;
            if (u2 === 6)
              return this.r = parseInt(c2.charAt(0) + c2.charAt(1), 16) / 255, this.g = parseInt(c2.charAt(2) + c2.charAt(3), 16) / 255, this.b = parseInt(c2.charAt(4) + c2.charAt(5), 16) / 255, this;
          }
          return t3 && 0 < t3.length ? this.setColorName(t3) : this;
        }, setColorName: function(t3) {
          var e3 = oi[t3];
          return e3 !== void 0 ? this.setHex(e3) : console.warn("THREE.Color: Unknown color " + t3), this;
        }, clone: function() {
          return new this.constructor(this.r, this.g, this.b);
        }, copy: function(t3) {
          return this.r = t3.r, this.g = t3.g, this.b = t3.b, this;
        }, copyGammaToLinear: function(t3, e3) {
          return e3 === void 0 && (e3 = 2), this.r = Math.pow(t3.r, e3), this.g = Math.pow(t3.g, e3), this.b = Math.pow(t3.b, e3), this;
        }, copyLinearToGamma: function(t3, e3) {
          e3 === void 0 && (e3 = 2);
          var n3 = 0 < e3 ? 1 / e3 : 1;
          return this.r = Math.pow(t3.r, n3), this.g = Math.pow(t3.g, n3), this.b = Math.pow(t3.b, n3), this;
        }, convertGammaToLinear: function(t3) {
          return this.copyGammaToLinear(this, t3), this;
        }, convertLinearToGamma: function(t3) {
          return this.copyLinearToGamma(this, t3), this;
        }, copySRGBToLinear: function(t3) {
          return this.r = hi(t3.r), this.g = hi(t3.g), this.b = hi(t3.b), this;
        }, copyLinearToSRGB: function(t3) {
          return this.r = di(t3.r), this.g = di(t3.g), this.b = di(t3.b), this;
        }, convertSRGBToLinear: function() {
          return this.copySRGBToLinear(this), this;
        }, convertLinearToSRGB: function() {
          return this.copyLinearToSRGB(this), this;
        }, getHex: function() {
          return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
        }, getHexString: function() {
          return ("000000" + this.getHex().toString(16)).slice(-6);
        }, getHSL: function(t3) {
          t3 === void 0 && (console.warn("THREE.Color: .getHSL() target is now required"), t3 = { h: 0, s: 0, l: 0 });
          var e3, n3, i3 = this.r, r3 = this.g, a2 = this.b, o2 = Math.max(i3, r3, a2), s2 = Math.min(i3, r3, a2), l2 = (s2 + o2) / 2;
          if (s2 === o2)
            n3 = e3 = 0;
          else {
            var c2 = o2 - s2;
            switch (n3 = l2 <= 0.5 ? c2 / (o2 + s2) : c2 / (2 - o2 - s2), o2) {
              case i3:
                e3 = (r3 - a2) / c2 + (r3 < a2 ? 6 : 0);
                break;
              case r3:
                e3 = (a2 - i3) / c2 + 2;
                break;
              case a2:
                e3 = (i3 - r3) / c2 + 4;
            }
            e3 /= 6;
          }
          return t3.h = e3, t3.s = n3, t3.l = l2, t3;
        }, getStyle: function() {
          return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
        }, offsetHSL: function(t3, e3, n3) {
          return this.getHSL(si), si.h += t3, si.s += e3, si.l += n3, this.setHSL(si.h, si.s, si.l), this;
        }, add: function(t3) {
          return this.r += t3.r, this.g += t3.g, this.b += t3.b, this;
        }, addColors: function(t3, e3) {
          return this.r = t3.r + e3.r, this.g = t3.g + e3.g, this.b = t3.b + e3.b, this;
        }, addScalar: function(t3) {
          return this.r += t3, this.g += t3, this.b += t3, this;
        }, sub: function(t3) {
          return this.r = Math.max(0, this.r - t3.r), this.g = Math.max(0, this.g - t3.g), this.b = Math.max(0, this.b - t3.b), this;
        }, multiply: function(t3) {
          return this.r *= t3.r, this.g *= t3.g, this.b *= t3.b, this;
        }, multiplyScalar: function(t3) {
          return this.r *= t3, this.g *= t3, this.b *= t3, this;
        }, lerp: function(t3, e3) {
          return this.r += (t3.r - this.r) * e3, this.g += (t3.g - this.g) * e3, this.b += (t3.b - this.b) * e3, this;
        }, lerpHSL: function(t3, e3) {
          this.getHSL(si), t3.getHSL(li);
          var n3 = Pe.lerp(si.h, li.h, e3), i3 = Pe.lerp(si.s, li.s, e3), r3 = Pe.lerp(si.l, li.l, e3);
          return this.setHSL(n3, i3, r3), this;
        }, equals: function(t3) {
          return t3.r === this.r && t3.g === this.g && t3.b === this.b;
        }, fromArray: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this.r = t3[e3], this.g = t3[e3 + 1], this.b = t3[e3 + 2], this;
        }, toArray: function(t3, e3) {
          return t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0), t3[e3] = this.r, t3[e3 + 1] = this.g, t3[e3 + 2] = this.b, t3;
        }, toJSON: function() {
          return this.getHex();
        } }), ci.NAMES = oi, Object.assign(pi.prototype, { clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          this.a = t3.a, this.b = t3.b, this.c = t3.c, this.normal.copy(t3.normal), this.color.copy(t3.color), this.materialIndex = t3.materialIndex;
          for (var e3 = 0, n3 = t3.vertexNormals.length; e3 < n3; e3++)
            this.vertexNormals[e3] = t3.vertexNormals[e3].clone();
          for (e3 = 0, n3 = t3.vertexColors.length; e3 < n3; e3++)
            this.vertexColors[e3] = t3.vertexColors[e3].clone();
          return this;
        } });
        var fi = 0;
        function mi() {
          Object.defineProperty(this, "id", { value: fi++ }), this.uuid = Pe.generateUUID(), this.name = "", this.type = "Material", this.fog = true, this.blending = p, this.side = s, this.flatShading = false, this.vertexTangents = false, this.vertexColors = u, this.opacity = 1, this.transparent = false, this.blendSrc = E, this.blendDst = D, this.blendEquation = y, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = N, this.depthTest = true, this.depthWrite = true, this.stencilWriteMask = 255, this.stencilFunc = Te, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Ce, this.stencilZFail = Ce, this.stencilZPass = Ce, this.stencilWrite = false, this.clippingPlanes = null, this.clipIntersection = false, this.clipShadows = false, this.shadowSide = null, this.colorWrite = true, this.precision = null, this.polygonOffset = false, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = false, this.alphaTest = 0, this.premultipliedAlpha = false, this.visible = true, this.toneMapped = true, this.userData = {}, this.version = 0;
        }
        function gi(t3) {
          mi.call(this), this.type = "MeshBasicMaterial", this.color = new ci(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = G, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.setValues(t3);
        }
        mi.prototype = Object.assign(Object.create(Ae.prototype), { constructor: mi, isMaterial: true, onBeforeCompile: function() {
        }, setValues: function(t3) {
          if (t3 !== void 0)
            for (var e3 in t3) {
              var n3 = t3[e3];
              if (n3 !== void 0)
                if (e3 !== "shading") {
                  var i3 = this[e3];
                  i3 !== void 0 ? i3 && i3.isColor ? i3.set(n3) : i3 && i3.isVector3 && n3 && n3.isVector3 ? i3.copy(n3) : this[e3] = n3 : console.warn("THREE." + this.type + ": '" + e3 + "' is not a property of this material.");
                } else
                  console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = n3 === 1;
              else
                console.warn("THREE.Material: '" + e3 + "' parameter is undefined.");
            }
        }, toJSON: function(t3) {
          var e3 = t3 === void 0 || typeof t3 == "string";
          e3 && (t3 = { textures: {}, images: {} });
          var n3 = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } };
          function i3(t4) {
            var e4 = [];
            for (var n4 in t4) {
              var i4 = t4[n4];
              delete i4.metadata, e4.push(i4);
            }
            return e4;
          }
          if (n3.uuid = this.uuid, n3.type = this.type, this.name !== "" && (n3.name = this.name), this.color && this.color.isColor && (n3.color = this.color.getHex()), this.roughness !== void 0 && (n3.roughness = this.roughness), this.metalness !== void 0 && (n3.metalness = this.metalness), this.sheen && this.sheen.isColor && (n3.sheen = this.sheen.getHex()), this.emissive && this.emissive.isColor && (n3.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n3.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n3.specular = this.specular.getHex()), this.shininess !== void 0 && (n3.shininess = this.shininess), this.clearcoat !== void 0 && (n3.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n3.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n3.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t3).uuid, n3.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.map && this.map.isTexture && (n3.map = this.map.toJSON(t3).uuid), this.matcap && this.matcap.isTexture && (n3.matcap = this.matcap.toJSON(t3).uuid), this.alphaMap && this.alphaMap.isTexture && (n3.alphaMap = this.alphaMap.toJSON(t3).uuid), this.lightMap && this.lightMap.isTexture && (n3.lightMap = this.lightMap.toJSON(t3).uuid), this.aoMap && this.aoMap.isTexture && (n3.aoMap = this.aoMap.toJSON(t3).uuid, n3.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n3.bumpMap = this.bumpMap.toJSON(t3).uuid, n3.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n3.normalMap = this.normalMap.toJSON(t3).uuid, n3.normalMapType = this.normalMapType, n3.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n3.displacementMap = this.displacementMap.toJSON(t3).uuid, n3.displacementScale = this.displacementScale, n3.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n3.roughnessMap = this.roughnessMap.toJSON(t3).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n3.metalnessMap = this.metalnessMap.toJSON(t3).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n3.emissiveMap = this.emissiveMap.toJSON(t3).uuid), this.specularMap && this.specularMap.isTexture && (n3.specularMap = this.specularMap.toJSON(t3).uuid), this.envMap && this.envMap.isTexture && (n3.envMap = this.envMap.toJSON(t3).uuid, n3.reflectivity = this.reflectivity, n3.refractionRatio = this.refractionRatio, this.combine !== void 0 && (n3.combine = this.combine), this.envMapIntensity !== void 0 && (n3.envMapIntensity = this.envMapIntensity)), this.gradientMap && this.gradientMap.isTexture && (n3.gradientMap = this.gradientMap.toJSON(t3).uuid), this.size !== void 0 && (n3.size = this.size), this.sizeAttenuation !== void 0 && (n3.sizeAttenuation = this.sizeAttenuation), this.blending !== p && (n3.blending = this.blending), this.flatShading === true && (n3.flatShading = this.flatShading), this.side !== s && (n3.side = this.side), this.vertexColors !== u && (n3.vertexColors = this.vertexColors), this.opacity < 1 && (n3.opacity = this.opacity), this.transparent === true && (n3.transparent = this.transparent), n3.depthFunc = this.depthFunc, n3.depthTest = this.depthTest, n3.depthWrite = this.depthWrite, n3.stencilWrite = this.stencilWrite, n3.stencilWriteMask = this.stencilWriteMask, n3.stencilFunc = this.stencilFunc, n3.stencilRef = this.stencilRef, n3.stencilFuncMask = this.stencilFuncMask, n3.stencilFail = this.stencilFail, n3.stencilZFail = this.stencilZFail, n3.stencilZPass = this.stencilZPass, this.rotation && this.rotation !== 0 && (n3.rotation = this.rotation), this.polygonOffset === true && (n3.polygonOffset = true), this.polygonOffsetFactor !== 0 && (n3.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n3.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth && this.linewidth !== 1 && (n3.linewidth = this.linewidth), this.dashSize !== void 0 && (n3.dashSize = this.dashSize), this.gapSize !== void 0 && (n3.gapSize = this.gapSize), this.scale !== void 0 && (n3.scale = this.scale), this.dithering === true && (n3.dithering = true), 0 < this.alphaTest && (n3.alphaTest = this.alphaTest), this.premultipliedAlpha === true && (n3.premultipliedAlpha = this.premultipliedAlpha), this.wireframe === true && (n3.wireframe = this.wireframe), 1 < this.wireframeLinewidth && (n3.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n3.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n3.wireframeLinejoin = this.wireframeLinejoin), this.morphTargets === true && (n3.morphTargets = true), this.morphNormals === true && (n3.morphNormals = true), this.skinning === true && (n3.skinning = true), this.visible === false && (n3.visible = false), this.toneMapped === false && (n3.toneMapped = false), JSON.stringify(this.userData) !== "{}" && (n3.userData = this.userData), e3) {
            var r3 = i3(t3.textures), a2 = i3(t3.images);
            0 < r3.length && (n3.textures = r3), 0 < a2.length && (n3.images = a2);
          }
          return n3;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          this.name = t3.name, this.fog = t3.fog, this.blending = t3.blending, this.side = t3.side, this.flatShading = t3.flatShading, this.vertexTangents = t3.vertexTangents, this.vertexColors = t3.vertexColors, this.opacity = t3.opacity, this.transparent = t3.transparent, this.blendSrc = t3.blendSrc, this.blendDst = t3.blendDst, this.blendEquation = t3.blendEquation, this.blendSrcAlpha = t3.blendSrcAlpha, this.blendDstAlpha = t3.blendDstAlpha, this.blendEquationAlpha = t3.blendEquationAlpha, this.depthFunc = t3.depthFunc, this.depthTest = t3.depthTest, this.depthWrite = t3.depthWrite, this.stencilWriteMask = t3.stencilWriteMask, this.stencilFunc = t3.stencilFunc, this.stencilRef = t3.stencilRef, this.stencilFuncMask = t3.stencilFuncMask, this.stencilFail = t3.stencilFail, this.stencilZFail = t3.stencilZFail, this.stencilZPass = t3.stencilZPass, this.stencilWrite = t3.stencilWrite;
          var e3 = t3.clippingPlanes, n3 = null;
          if (e3 !== null) {
            var i3 = e3.length;
            n3 = new Array(i3);
            for (var r3 = 0; r3 !== i3; ++r3)
              n3[r3] = e3[r3].clone();
          }
          return this.clippingPlanes = n3, this.clipIntersection = t3.clipIntersection, this.clipShadows = t3.clipShadows, this.shadowSide = t3.shadowSide, this.colorWrite = t3.colorWrite, this.precision = t3.precision, this.polygonOffset = t3.polygonOffset, this.polygonOffsetFactor = t3.polygonOffsetFactor, this.polygonOffsetUnits = t3.polygonOffsetUnits, this.dithering = t3.dithering, this.alphaTest = t3.alphaTest, this.premultipliedAlpha = t3.premultipliedAlpha, this.visible = t3.visible, this.toneMapped = t3.toneMapped, this.userData = JSON.parse(JSON.stringify(t3.userData)), this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } }), Object.defineProperty(mi.prototype, "needsUpdate", { set: function(t3) {
          t3 === true && this.version++;
        } }), ((gi.prototype = Object.create(mi.prototype)).constructor = gi).prototype.isMeshBasicMaterial = true, gi.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.map = t3.map, this.lightMap = t3.lightMap, this.lightMapIntensity = t3.lightMapIntensity, this.aoMap = t3.aoMap, this.aoMapIntensity = t3.aoMapIntensity, this.specularMap = t3.specularMap, this.alphaMap = t3.alphaMap, this.envMap = t3.envMap, this.combine = t3.combine, this.reflectivity = t3.reflectivity, this.refractionRatio = t3.refractionRatio, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.wireframeLinecap = t3.wireframeLinecap, this.wireframeLinejoin = t3.wireframeLinejoin, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this;
        };
        var vi = new We();
        function yi(t3, e3, n3) {
          if (Array.isArray(t3))
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
          this.name = "", this.array = t3, this.itemSize = e3, this.count = t3 !== void 0 ? t3.length / e3 : 0, this.normalized = n3 === true, this.usage = Ee, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
        }
        function xi(t3, e3, n3) {
          yi.call(this, new Int8Array(t3), e3, n3);
        }
        function bi(t3, e3, n3) {
          yi.call(this, new Uint8Array(t3), e3, n3);
        }
        function wi(t3, e3, n3) {
          yi.call(this, new Uint8ClampedArray(t3), e3, n3);
        }
        function Mi(t3, e3, n3) {
          yi.call(this, new Int16Array(t3), e3, n3);
        }
        function _i(t3, e3, n3) {
          yi.call(this, new Uint16Array(t3), e3, n3);
        }
        function Si(t3, e3, n3) {
          yi.call(this, new Int32Array(t3), e3, n3);
        }
        function Ci(t3, e3, n3) {
          yi.call(this, new Uint32Array(t3), e3, n3);
        }
        function Ti(t3, e3, n3) {
          yi.call(this, new Float32Array(t3), e3, n3);
        }
        function Ei(t3, e3, n3) {
          yi.call(this, new Float64Array(t3), e3, n3);
        }
        function Di() {
          this.vertices = [], this.normals = [], this.colors = [], this.uvs = [], this.uvs2 = [], this.groups = [], this.morphTargets = {}, this.skinWeights = [], this.skinIndices = [], this.boundingBox = null, this.boundingSphere = null, this.verticesNeedUpdate = false, this.normalsNeedUpdate = false, this.colorsNeedUpdate = false, this.uvsNeedUpdate = false, this.groupsNeedUpdate = false;
        }
        function Ai(t3) {
          if (t3.length === 0)
            return -1 / 0;
          for (var e3 = t3[0], n3 = 1, i3 = t3.length; n3 < i3; ++n3)
            t3[n3] > e3 && (e3 = t3[n3]);
          return e3;
        }
        Object.defineProperty(yi.prototype, "needsUpdate", { set: function(t3) {
          t3 === true && this.version++;
        } }), Object.assign(yi.prototype, { isBufferAttribute: true, onUploadCallback: function() {
        }, setUsage: function(t3) {
          return this.usage = t3, this;
        }, copy: function(t3) {
          return this.name = t3.name, this.array = new t3.array.constructor(t3.array), this.itemSize = t3.itemSize, this.count = t3.count, this.normalized = t3.normalized, this.usage = t3.usage, this;
        }, copyAt: function(t3, e3, n3) {
          t3 *= this.itemSize, n3 *= e3.itemSize;
          for (var i3 = 0, r3 = this.itemSize; i3 < r3; i3++)
            this.array[t3 + i3] = e3.array[n3 + i3];
          return this;
        }, copyArray: function(t3) {
          return this.array.set(t3), this;
        }, copyColorsArray: function(t3) {
          for (var e3 = this.array, n3 = 0, i3 = 0, r3 = t3.length; i3 < r3; i3++) {
            var a2 = t3[i3];
            a2 === void 0 && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i3), a2 = new ci()), e3[n3++] = a2.r, e3[n3++] = a2.g, e3[n3++] = a2.b;
          }
          return this;
        }, copyVector2sArray: function(t3) {
          for (var e3 = this.array, n3 = 0, i3 = 0, r3 = t3.length; i3 < r3; i3++) {
            var a2 = t3[i3];
            a2 === void 0 && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i3), a2 = new Re()), e3[n3++] = a2.x, e3[n3++] = a2.y;
          }
          return this;
        }, copyVector3sArray: function(t3) {
          for (var e3 = this.array, n3 = 0, i3 = 0, r3 = t3.length; i3 < r3; i3++) {
            var a2 = t3[i3];
            a2 === void 0 && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i3), a2 = new We()), e3[n3++] = a2.x, e3[n3++] = a2.y, e3[n3++] = a2.z;
          }
          return this;
        }, copyVector4sArray: function(t3) {
          for (var e3 = this.array, n3 = 0, i3 = 0, r3 = t3.length; i3 < r3; i3++) {
            var a2 = t3[i3];
            a2 === void 0 && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i3), a2 = new je()), e3[n3++] = a2.x, e3[n3++] = a2.y, e3[n3++] = a2.z, e3[n3++] = a2.w;
          }
          return this;
        }, applyMatrix3: function(t3) {
          for (var e3 = 0, n3 = this.count; e3 < n3; e3++)
            vi.x = this.getX(e3), vi.y = this.getY(e3), vi.z = this.getZ(e3), vi.applyMatrix3(t3), this.setXYZ(e3, vi.x, vi.y, vi.z);
          return this;
        }, applyMatrix4: function(t3) {
          for (var e3 = 0, n3 = this.count; e3 < n3; e3++)
            vi.x = this.getX(e3), vi.y = this.getY(e3), vi.z = this.getZ(e3), vi.applyMatrix4(t3), this.setXYZ(e3, vi.x, vi.y, vi.z);
          return this;
        }, applyNormalMatrix: function(t3) {
          for (var e3 = 0, n3 = this.count; e3 < n3; e3++)
            vi.x = this.getX(e3), vi.y = this.getY(e3), vi.z = this.getZ(e3), vi.applyNormalMatrix(t3), this.setXYZ(e3, vi.x, vi.y, vi.z);
          return this;
        }, transformDirection: function(t3) {
          for (var e3 = 0, n3 = this.count; e3 < n3; e3++)
            vi.x = this.getX(e3), vi.y = this.getY(e3), vi.z = this.getZ(e3), vi.transformDirection(t3), this.setXYZ(e3, vi.x, vi.y, vi.z);
          return this;
        }, set: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this.array.set(t3, e3), this;
        }, getX: function(t3) {
          return this.array[t3 * this.itemSize];
        }, setX: function(t3, e3) {
          return this.array[t3 * this.itemSize] = e3, this;
        }, getY: function(t3) {
          return this.array[t3 * this.itemSize + 1];
        }, setY: function(t3, e3) {
          return this.array[t3 * this.itemSize + 1] = e3, this;
        }, getZ: function(t3) {
          return this.itemSize < 3 ? 0 : this.array[t3 * this.itemSize + 2];
        }, setZ: function(t3, e3) {
          return this.array[t3 * this.itemSize + 2] = e3, this;
        }, getW: function(t3) {
          return this.array[t3 * this.itemSize + 3];
        }, setW: function(t3, e3) {
          return this.array[t3 * this.itemSize + 3] = e3, this;
        }, setXY: function(t3, e3, n3) {
          return t3 *= this.itemSize, this.array[t3 + 0] = e3, this.array[t3 + 1] = n3, this;
        }, setXYZ: function(t3, e3, n3, i3) {
          return t3 *= this.itemSize, this.array[t3 + 0] = e3, this.array[t3 + 1] = n3, this.array[t3 + 2] = i3, this;
        }, setXYZW: function(t3, e3, n3, i3, r3) {
          return t3 *= this.itemSize, this.array[t3 + 0] = e3, this.array[t3 + 1] = n3, this.array[t3 + 2] = i3, this.array[t3 + 3] = r3, this;
        }, onUpload: function(t3) {
          return this.onUploadCallback = t3, this;
        }, clone: function() {
          return new this.constructor(this.array, this.itemSize).copy(this);
        }, toJSON: function() {
          return { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.prototype.slice.call(this.array), normalized: this.normalized };
        } }), (xi.prototype = Object.create(yi.prototype)).constructor = xi, (bi.prototype = Object.create(yi.prototype)).constructor = bi, (wi.prototype = Object.create(yi.prototype)).constructor = wi, (Mi.prototype = Object.create(yi.prototype)).constructor = Mi, (_i.prototype = Object.create(yi.prototype)).constructor = _i, (Si.prototype = Object.create(yi.prototype)).constructor = Si, (Ci.prototype = Object.create(yi.prototype)).constructor = Ci, (Ti.prototype = Object.create(yi.prototype)).constructor = Ti, (Ei.prototype = Object.create(yi.prototype)).constructor = Ei, Object.assign(Di.prototype, { computeGroups: function(t3) {
          for (var e3, n3 = [], i3 = void 0, r3 = t3.faces, a2 = 0; a2 < r3.length; a2++) {
            var o2 = r3[a2];
            o2.materialIndex !== i3 && (i3 = o2.materialIndex, e3 !== void 0 && (e3.count = 3 * a2 - e3.start, n3.push(e3)), e3 = { start: 3 * a2, materialIndex: i3 });
          }
          e3 !== void 0 && (e3.count = 3 * a2 - e3.start, n3.push(e3)), this.groups = n3;
        }, fromGeometry: function(t3) {
          var e3, n3 = t3.faces, i3 = t3.vertices, r3 = t3.faceVertexUvs, a2 = r3[0] && 0 < r3[0].length, o2 = r3[1] && 0 < r3[1].length, s2 = t3.morphTargets, l2 = s2.length;
          if (0 < l2) {
            e3 = [];
            for (var c2 = 0; c2 < l2; c2++)
              e3[c2] = { name: s2[c2].name, data: [] };
            this.morphTargets.position = e3;
          }
          var u2, h2 = t3.morphNormals, d2 = h2.length;
          if (0 < d2) {
            for (u2 = [], c2 = 0; c2 < d2; c2++)
              u2[c2] = { name: h2[c2].name, data: [] };
            this.morphTargets.normal = u2;
          }
          var p2 = t3.skinIndices, f2 = t3.skinWeights, m2 = p2.length === i3.length, g2 = f2.length === i3.length;
          for (0 < i3.length && n3.length === 0 && console.error("THREE.DirectGeometry: Faceless geometries are not supported."), c2 = 0; c2 < n3.length; c2++) {
            var v2 = n3[c2];
            this.vertices.push(i3[v2.a], i3[v2.b], i3[v2.c]);
            var y2 = v2.vertexNormals;
            if (y2.length === 3)
              this.normals.push(y2[0], y2[1], y2[2]);
            else {
              var x2 = v2.normal;
              this.normals.push(x2, x2, x2);
            }
            var b2, w2 = v2.vertexColors;
            if (w2.length === 3)
              this.colors.push(w2[0], w2[1], w2[2]);
            else {
              var M2 = v2.color;
              this.colors.push(M2, M2, M2);
            }
            a2 === true && ((b2 = r3[0][c2]) !== void 0 ? this.uvs.push(b2[0], b2[1], b2[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", c2), this.uvs.push(new Re(), new Re(), new Re()))), o2 === true && ((b2 = r3[1][c2]) !== void 0 ? this.uvs2.push(b2[0], b2[1], b2[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", c2), this.uvs2.push(new Re(), new Re(), new Re())));
            for (var _6 = 0; _6 < l2; _6++) {
              var S2 = s2[_6].vertices;
              e3[_6].data.push(S2[v2.a], S2[v2.b], S2[v2.c]);
            }
            for (_6 = 0; _6 < d2; _6++) {
              var C2 = h2[_6].vertexNormals[c2];
              u2[_6].data.push(C2.a, C2.b, C2.c);
            }
            m2 && this.skinIndices.push(p2[v2.a], p2[v2.b], p2[v2.c]), g2 && this.skinWeights.push(f2[v2.a], f2[v2.b], f2[v2.c]);
          }
          return this.computeGroups(t3), this.verticesNeedUpdate = t3.verticesNeedUpdate, this.normalsNeedUpdate = t3.normalsNeedUpdate, this.colorsNeedUpdate = t3.colorsNeedUpdate, this.uvsNeedUpdate = t3.uvsNeedUpdate, this.groupsNeedUpdate = t3.groupsNeedUpdate, t3.boundingSphere !== null && (this.boundingSphere = t3.boundingSphere.clone()), t3.boundingBox !== null && (this.boundingBox = t3.boundingBox.clone()), this;
        } });
        var Oi = 2147483647, Li = new Qe(), Ii = new yn(), Pi = new We(), Ri = new Pn(), ki = new Pn(), Bi = new We();
        function Ni() {
          Object.defineProperty(this, "id", { value: Oi += 2 }), this.uuid = Pe.generateUUID(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = false, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
        }
        Ni.prototype = Object.assign(Object.create(Ae.prototype), { constructor: Ni, isBufferGeometry: true, getIndex: function() {
          return this.index;
        }, setIndex: function(t3) {
          Array.isArray(t3) ? this.index = new (65535 < Ai(t3) ? Ci : _i)(t3, 1) : this.index = t3;
        }, getAttribute: function(t3) {
          return this.attributes[t3];
        }, setAttribute: function(t3, e3) {
          return this.attributes[t3] = e3, this;
        }, deleteAttribute: function(t3) {
          return delete this.attributes[t3], this;
        }, addGroup: function(t3, e3, n3) {
          this.groups.push({ start: t3, count: e3, materialIndex: n3 !== void 0 ? n3 : 0 });
        }, clearGroups: function() {
          this.groups = [];
        }, setDrawRange: function(t3, e3) {
          this.drawRange.start = t3, this.drawRange.count = e3;
        }, applyMatrix4: function(t3) {
          var e3 = this.attributes.position;
          e3 !== void 0 && (e3.applyMatrix4(t3), e3.needsUpdate = true);
          var n3 = this.attributes.normal;
          if (n3 !== void 0) {
            var i3 = new ke().getNormalMatrix(t3);
            n3.applyNormalMatrix(i3), n3.needsUpdate = true;
          }
          var r3 = this.attributes.tangent;
          return r3 !== void 0 && (r3.transformDirection(t3), r3.needsUpdate = true), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
        }, rotateX: function(t3) {
          return Li.makeRotationX(t3), this.applyMatrix4(Li), this;
        }, rotateY: function(t3) {
          return Li.makeRotationY(t3), this.applyMatrix4(Li), this;
        }, rotateZ: function(t3) {
          return Li.makeRotationZ(t3), this.applyMatrix4(Li), this;
        }, translate: function(t3, e3, n3) {
          return Li.makeTranslation(t3, e3, n3), this.applyMatrix4(Li), this;
        }, scale: function(t3, e3, n3) {
          return Li.makeScale(t3, e3, n3), this.applyMatrix4(Li), this;
        }, lookAt: function(t3) {
          return Ii.lookAt(t3), Ii.updateMatrix(), this.applyMatrix4(Ii.matrix), this;
        }, center: function() {
          return this.computeBoundingBox(), this.boundingBox.getCenter(Pi).negate(), this.translate(Pi.x, Pi.y, Pi.z), this;
        }, setFromObject: function(t3) {
          var e3 = t3.geometry;
          if (t3.isPoints || t3.isLine) {
            var n3 = new Ti(3 * e3.vertices.length, 3), i3 = new Ti(3 * e3.colors.length, 3);
            if (this.setAttribute("position", n3.copyVector3sArray(e3.vertices)), this.setAttribute("color", i3.copyColorsArray(e3.colors)), e3.lineDistances && e3.lineDistances.length === e3.vertices.length) {
              var r3 = new Ti(e3.lineDistances.length, 1);
              this.setAttribute("lineDistance", r3.copyArray(e3.lineDistances));
            }
            e3.boundingSphere !== null && (this.boundingSphere = e3.boundingSphere.clone()), e3.boundingBox !== null && (this.boundingBox = e3.boundingBox.clone());
          } else
            t3.isMesh && e3 && e3.isGeometry && this.fromGeometry(e3);
          return this;
        }, setFromPoints: function(t3) {
          for (var e3 = [], n3 = 0, i3 = t3.length; n3 < i3; n3++) {
            var r3 = t3[n3];
            e3.push(r3.x, r3.y, r3.z || 0);
          }
          return this.setAttribute("position", new Ti(e3, 3)), this;
        }, updateFromObject: function(t3) {
          var e3, n3 = t3.geometry;
          if (t3.isMesh) {
            var i3 = n3.__directGeometry;
            if (n3.elementsNeedUpdate === true && (i3 = void 0, n3.elementsNeedUpdate = false), i3 === void 0)
              return this.fromGeometry(n3);
            i3.verticesNeedUpdate = n3.verticesNeedUpdate, i3.normalsNeedUpdate = n3.normalsNeedUpdate, i3.colorsNeedUpdate = n3.colorsNeedUpdate, i3.uvsNeedUpdate = n3.uvsNeedUpdate, i3.groupsNeedUpdate = n3.groupsNeedUpdate, n3.verticesNeedUpdate = false, n3.normalsNeedUpdate = false, n3.colorsNeedUpdate = false, n3.uvsNeedUpdate = false, n3.groupsNeedUpdate = false, n3 = i3;
          }
          return n3.verticesNeedUpdate === true && ((e3 = this.attributes.position) !== void 0 && (e3.copyVector3sArray(n3.vertices), e3.needsUpdate = true), n3.verticesNeedUpdate = false), n3.normalsNeedUpdate === true && ((e3 = this.attributes.normal) !== void 0 && (e3.copyVector3sArray(n3.normals), e3.needsUpdate = true), n3.normalsNeedUpdate = false), n3.colorsNeedUpdate === true && ((e3 = this.attributes.color) !== void 0 && (e3.copyColorsArray(n3.colors), e3.needsUpdate = true), n3.colorsNeedUpdate = false), n3.uvsNeedUpdate && ((e3 = this.attributes.uv) !== void 0 && (e3.copyVector2sArray(n3.uvs), e3.needsUpdate = true), n3.uvsNeedUpdate = false), n3.lineDistancesNeedUpdate && ((e3 = this.attributes.lineDistance) !== void 0 && (e3.copyArray(n3.lineDistances), e3.needsUpdate = true), n3.lineDistancesNeedUpdate = false), n3.groupsNeedUpdate && (n3.computeGroups(t3.geometry), this.groups = n3.groups, n3.groupsNeedUpdate = false), this;
        }, fromGeometry: function(t3) {
          return t3.__directGeometry = new Di().fromGeometry(t3), this.fromDirectGeometry(t3.__directGeometry);
        }, fromDirectGeometry: function(t3) {
          var e3 = new Float32Array(3 * t3.vertices.length);
          if (this.setAttribute("position", new yi(e3, 3).copyVector3sArray(t3.vertices)), 0 < t3.normals.length) {
            var n3 = new Float32Array(3 * t3.normals.length);
            this.setAttribute("normal", new yi(n3, 3).copyVector3sArray(t3.normals));
          }
          if (0 < t3.colors.length) {
            var i3 = new Float32Array(3 * t3.colors.length);
            this.setAttribute("color", new yi(i3, 3).copyColorsArray(t3.colors));
          }
          if (0 < t3.uvs.length) {
            var r3 = new Float32Array(2 * t3.uvs.length);
            this.setAttribute("uv", new yi(r3, 2).copyVector2sArray(t3.uvs));
          }
          if (0 < t3.uvs2.length) {
            var a2 = new Float32Array(2 * t3.uvs2.length);
            this.setAttribute("uv2", new yi(a2, 2).copyVector2sArray(t3.uvs2));
          }
          for (var o2 in this.groups = t3.groups, t3.morphTargets) {
            for (var s2 = [], l2 = t3.morphTargets[o2], c2 = 0, u2 = l2.length; c2 < u2; c2++) {
              var h2 = l2[c2], d2 = new Ti(3 * h2.data.length, 3);
              d2.name = h2.name, s2.push(d2.copyVector3sArray(h2.data));
            }
            this.morphAttributes[o2] = s2;
          }
          if (0 < t3.skinIndices.length) {
            var p2 = new Ti(4 * t3.skinIndices.length, 4);
            this.setAttribute("skinIndex", p2.copyVector4sArray(t3.skinIndices));
          }
          if (0 < t3.skinWeights.length) {
            var f2 = new Ti(4 * t3.skinWeights.length, 4);
            this.setAttribute("skinWeight", f2.copyVector4sArray(t3.skinWeights));
          }
          return t3.boundingSphere !== null && (this.boundingSphere = t3.boundingSphere.clone()), t3.boundingBox !== null && (this.boundingBox = t3.boundingBox.clone()), this;
        }, computeBoundingBox: function() {
          this.boundingBox === null && (this.boundingBox = new Pn());
          var t3 = this.attributes.position, e3 = this.morphAttributes.position;
          if (t3 !== void 0) {
            if (this.boundingBox.setFromBufferAttribute(t3), e3)
              for (var n3 = 0, i3 = e3.length; n3 < i3; n3++) {
                var r3 = e3[n3];
                Ri.setFromBufferAttribute(r3), this.morphTargetsRelative ? (Bi.addVectors(this.boundingBox.min, Ri.min), this.boundingBox.expandByPoint(Bi), Bi.addVectors(this.boundingBox.max, Ri.max), this.boundingBox.expandByPoint(Bi)) : (this.boundingBox.expandByPoint(Ri.min), this.boundingBox.expandByPoint(Ri.max));
              }
          } else
            this.boundingBox.makeEmpty();
          (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
        }, computeBoundingSphere: function() {
          this.boundingSphere === null && (this.boundingSphere = new Bn());
          var t3 = this.attributes.position, e3 = this.morphAttributes.position;
          if (t3) {
            var n3 = this.boundingSphere.center;
            if (Ri.setFromBufferAttribute(t3), e3)
              for (var i3 = 0, r3 = e3.length; i3 < r3; i3++) {
                var a2 = e3[i3];
                ki.setFromBufferAttribute(a2), this.morphTargetsRelative ? (Bi.addVectors(Ri.min, ki.min), Ri.expandByPoint(Bi), Bi.addVectors(Ri.max, ki.max), Ri.expandByPoint(Bi)) : (Ri.expandByPoint(ki.min), Ri.expandByPoint(ki.max));
              }
            Ri.getCenter(n3);
            var o2 = 0;
            for (i3 = 0, r3 = t3.count; i3 < r3; i3++)
              Bi.fromBufferAttribute(t3, i3), o2 = Math.max(o2, n3.distanceToSquared(Bi));
            if (e3)
              for (i3 = 0, r3 = e3.length; i3 < r3; i3++) {
                a2 = e3[i3];
                for (var s2 = this.morphTargetsRelative, l2 = 0, c2 = a2.count; l2 < c2; l2++)
                  Bi.fromBufferAttribute(a2, l2), s2 && (Pi.fromBufferAttribute(t3, l2), Bi.add(Pi)), o2 = Math.max(o2, n3.distanceToSquared(Bi));
              }
            this.boundingSphere.radius = Math.sqrt(o2), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
          }
        }, computeFaceNormals: function() {
        }, computeVertexNormals: function() {
          var t3 = this.index, e3 = this.attributes;
          if (e3.position) {
            var n3 = e3.position.array;
            if (e3.normal === void 0)
              this.setAttribute("normal", new yi(new Float32Array(n3.length), 3));
            else
              for (var i3 = e3.normal.array, r3 = 0, a2 = i3.length; r3 < a2; r3++)
                i3[r3] = 0;
            var o2, s2, l2, c2 = e3.normal.array, u2 = new We(), h2 = new We(), d2 = new We(), p2 = new We(), f2 = new We();
            if (t3) {
              var m2 = t3.array;
              for (r3 = 0, a2 = t3.count; r3 < a2; r3 += 3)
                o2 = 3 * m2[r3 + 0], s2 = 3 * m2[r3 + 1], l2 = 3 * m2[r3 + 2], u2.fromArray(n3, o2), h2.fromArray(n3, s2), d2.fromArray(n3, l2), p2.subVectors(d2, h2), f2.subVectors(u2, h2), p2.cross(f2), c2[o2] += p2.x, c2[1 + o2] += p2.y, c2[2 + o2] += p2.z, c2[s2] += p2.x, c2[1 + s2] += p2.y, c2[2 + s2] += p2.z, c2[l2] += p2.x, c2[1 + l2] += p2.y, c2[2 + l2] += p2.z;
            } else
              for (r3 = 0, a2 = n3.length; r3 < a2; r3 += 9)
                u2.fromArray(n3, r3), h2.fromArray(n3, r3 + 3), d2.fromArray(n3, r3 + 6), p2.subVectors(d2, h2), f2.subVectors(u2, h2), p2.cross(f2), c2[r3] = p2.x, c2[r3 + 1] = p2.y, c2[r3 + 2] = p2.z, c2[r3 + 3] = p2.x, c2[r3 + 4] = p2.y, c2[r3 + 5] = p2.z, c2[r3 + 6] = p2.x, c2[r3 + 7] = p2.y, c2[r3 + 8] = p2.z;
            this.normalizeNormals(), e3.normal.needsUpdate = true;
          }
        }, merge: function(t3, e3) {
          if (t3 && t3.isBufferGeometry) {
            e3 === void 0 && (e3 = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
            var n3 = this.attributes;
            for (var i3 in n3)
              if (t3.attributes[i3] !== void 0)
                for (var r3 = n3[i3].array, a2 = t3.attributes[i3], o2 = a2.array, s2 = a2.itemSize * e3, l2 = Math.min(o2.length, r3.length - s2), c2 = 0, u2 = s2; c2 < l2; c2++, u2++)
                  r3[u2] = o2[c2];
            return this;
          }
          console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t3);
        }, normalizeNormals: function() {
          for (var t3 = this.attributes.normal, e3 = 0, n3 = t3.count; e3 < n3; e3++)
            Bi.x = t3.getX(e3), Bi.y = t3.getY(e3), Bi.z = t3.getZ(e3), Bi.normalize(), t3.setXYZ(e3, Bi.x, Bi.y, Bi.z);
        }, toNonIndexed: function() {
          function t3(t4, e4) {
            for (var n4 = t4.array, i4 = t4.itemSize, r4 = new n4.constructor(e4.length * i4), a3 = 0, o3 = 0, s3 = 0, l3 = e4.length; s3 < l3; s3++) {
              a3 = e4[s3] * i4;
              for (var c3 = 0; c3 < i4; c3++)
                r4[o3++] = n4[a3++];
            }
            return new yi(r4, i4);
          }
          if (this.index === null)
            return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
          var e3 = new Ni(), n3 = this.index.array, i3 = this.attributes;
          for (var r3 in i3) {
            var a2 = t3(i3[r3], n3);
            e3.setAttribute(r3, a2);
          }
          var o2 = this.morphAttributes;
          for (r3 in o2) {
            for (var s2 = [], l2 = o2[r3], c2 = 0, u2 = l2.length; c2 < u2; c2++)
              a2 = t3(l2[c2], n3), s2.push(a2);
            e3.morphAttributes[r3] = s2;
          }
          e3.morphTargetsRelative = this.morphTargetsRelative;
          for (var h2 = this.groups, d2 = (c2 = 0, h2.length); c2 < d2; c2++) {
            var p2 = h2[c2];
            e3.addGroup(p2.start, p2.count, p2.materialIndex);
          }
          return e3;
        }, toJSON: function() {
          var t3 = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
          if (t3.uuid = this.uuid, t3.type = this.type, this.name !== "" && (t3.name = this.name), 0 < Object.keys(this.userData).length && (t3.userData = this.userData), this.parameters !== void 0) {
            var e3 = this.parameters;
            for (var n3 in e3)
              e3[n3] !== void 0 && (t3[n3] = e3[n3]);
            return t3;
          }
          t3.data = { attributes: {} };
          var i3 = this.index;
          i3 !== null && (t3.data.index = { type: i3.array.constructor.name, array: Array.prototype.slice.call(i3.array) });
          var r3 = this.attributes;
          for (var n3 in r3) {
            var a2 = (d2 = r3[n3]).toJSON();
            d2.name !== "" && (a2.name = d2.name), t3.data.attributes[n3] = a2;
          }
          var o2 = {}, s2 = false;
          for (var n3 in this.morphAttributes) {
            for (var l2 = this.morphAttributes[n3], c2 = [], u2 = 0, h2 = l2.length; u2 < h2; u2++) {
              var d2;
              a2 = (d2 = l2[u2]).toJSON(), d2.name !== "" && (a2.name = d2.name), c2.push(a2);
            }
            0 < c2.length && (o2[n3] = c2, s2 = true);
          }
          s2 && (t3.data.morphAttributes = o2, t3.data.morphTargetsRelative = this.morphTargetsRelative);
          var p2 = this.groups;
          0 < p2.length && (t3.data.groups = JSON.parse(JSON.stringify(p2)));
          var f2 = this.boundingSphere;
          return f2 !== null && (t3.data.boundingSphere = { center: f2.center.toArray(), radius: f2.radius }), t3;
        }, clone: function() {
          return new Ni().copy(this);
        }, copy: function(t3) {
          var e3, n3, i3;
          this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.name = t3.name;
          var r3 = t3.index;
          r3 !== null && this.setIndex(r3.clone());
          var a2 = t3.attributes;
          for (e3 in a2) {
            var o2 = a2[e3];
            this.setAttribute(e3, o2.clone());
          }
          var s2 = t3.morphAttributes;
          for (e3 in s2) {
            var l2 = [], c2 = s2[e3];
            for (n3 = 0, i3 = c2.length; n3 < i3; n3++)
              l2.push(c2[n3].clone());
            this.morphAttributes[e3] = l2;
          }
          this.morphTargetsRelative = t3.morphTargetsRelative;
          var u2 = t3.groups;
          for (n3 = 0, i3 = u2.length; n3 < i3; n3++) {
            var h2 = u2[n3];
            this.addGroup(h2.start, h2.count, h2.materialIndex);
          }
          var d2 = t3.boundingBox;
          d2 !== null && (this.boundingBox = d2.clone());
          var p2 = t3.boundingSphere;
          return p2 !== null && (this.boundingSphere = p2.clone()), this.drawRange.start = t3.drawRange.start, this.drawRange.count = t3.drawRange.count, this.userData = t3.userData, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } });
        var Fi = new Qe(), ji = new Hn(), Vi = new Bn(), zi = new We(), Gi = new We(), Ui = new We(), Hi = new We(), Wi = new We(), Ji = new We(), qi = new We(), Xi = new We(), Yi = new We(), Zi = new Re(), $i = new Re(), Ki = new Re(), Qi = new We(), tr = new We();
        function er(t3, e3) {
          yn.call(this), this.type = "Mesh", this.geometry = t3 !== void 0 ? t3 : new Ni(), this.material = e3 !== void 0 ? e3 : new gi(), this.updateMorphTargets();
        }
        function nr(t3, e3, n3, i3, r3, a2, o2, s2) {
          if ((e3.side === l ? i3.intersectTriangle(o2, a2, r3, true, s2) : i3.intersectTriangle(r3, a2, o2, e3.side !== c, s2)) === null)
            return null;
          tr.copy(s2), tr.applyMatrix4(t3.matrixWorld);
          var u2 = n3.ray.origin.distanceTo(tr);
          return u2 < n3.near || u2 > n3.far ? null : { distance: u2, point: tr.clone(), object: t3 };
        }
        function ir(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2, u2, h2) {
          zi.fromBufferAttribute(r3, c2), Gi.fromBufferAttribute(r3, u2), Ui.fromBufferAttribute(r3, h2);
          var d2 = t3.morphTargetInfluences;
          if (e3.morphTargets && a2 && d2) {
            qi.set(0, 0, 0), Xi.set(0, 0, 0), Yi.set(0, 0, 0);
            for (var p2 = 0, f2 = a2.length; p2 < f2; p2++) {
              var m2 = d2[p2], g2 = a2[p2];
              m2 !== 0 && (Hi.fromBufferAttribute(g2, c2), Wi.fromBufferAttribute(g2, u2), Ji.fromBufferAttribute(g2, h2), o2 ? (qi.addScaledVector(Hi, m2), Xi.addScaledVector(Wi, m2), Yi.addScaledVector(Ji, m2)) : (qi.addScaledVector(Hi.sub(zi), m2), Xi.addScaledVector(Wi.sub(Gi), m2), Yi.addScaledVector(Ji.sub(Ui), m2)));
            }
            zi.add(qi), Gi.add(Xi), Ui.add(Yi);
          }
          var v2 = nr(t3, e3, n3, i3, zi, Gi, Ui, Qi);
          if (v2) {
            s2 && (Zi.fromBufferAttribute(s2, c2), $i.fromBufferAttribute(s2, u2), Ki.fromBufferAttribute(s2, h2), v2.uv = ai.getUV(Qi, zi, Gi, Ui, Zi, $i, Ki, new Re())), l2 && (Zi.fromBufferAttribute(l2, c2), $i.fromBufferAttribute(l2, u2), Ki.fromBufferAttribute(l2, h2), v2.uv2 = ai.getUV(Qi, zi, Gi, Ui, Zi, $i, Ki, new Re()));
            var y2 = new pi(c2, u2, h2);
            ai.getNormal(zi, Gi, Ui, y2.normal), v2.face = y2;
          }
          return v2;
        }
        er.prototype = Object.assign(Object.create(yn.prototype), { constructor: er, isMesh: true, copy: function(t3) {
          return yn.prototype.copy.call(this, t3), t3.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = t3.morphTargetInfluences.slice()), t3.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, t3.morphTargetDictionary)), this;
        }, updateMorphTargets: function() {
          var t3, e3, n3, i3 = this.geometry;
          if (i3.isBufferGeometry) {
            var r3 = i3.morphAttributes, a2 = Object.keys(r3);
            if (0 < a2.length) {
              var o2 = r3[a2[0]];
              if (o2 !== void 0)
                for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, t3 = 0, e3 = o2.length; t3 < e3; t3++)
                  n3 = o2[t3].name || String(t3), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n3] = t3;
            }
          } else {
            var s2 = i3.morphTargets;
            s2 !== void 0 && 0 < s2.length && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
          }
        }, raycast: function(t3, e3) {
          var n3, i3 = this.geometry, r3 = this.material, a2 = this.matrixWorld;
          if (r3 !== void 0 && (i3.boundingSphere === null && i3.computeBoundingSphere(), Vi.copy(i3.boundingSphere), Vi.applyMatrix4(a2), t3.ray.intersectsSphere(Vi) !== false && (Fi.getInverse(a2), ji.copy(t3.ray).applyMatrix4(Fi), i3.boundingBox === null || ji.intersectsBox(i3.boundingBox) !== false))) {
            if (i3.isBufferGeometry) {
              var o2, s2, l2, c2, u2, h2, d2, p2, f2, m2 = i3.index, g2 = i3.attributes.position, v2 = i3.morphAttributes.position, y2 = i3.morphTargetsRelative, x2 = i3.attributes.uv, b2 = i3.attributes.uv2, w2 = i3.groups, M2 = i3.drawRange;
              if (m2 !== null)
                if (Array.isArray(r3))
                  for (c2 = 0, h2 = w2.length; c2 < h2; c2++)
                    for (f2 = r3[(p2 = w2[c2]).materialIndex], u2 = Math.max(p2.start, M2.start), d2 = Math.min(p2.start + p2.count, M2.start + M2.count); u2 < d2; u2 += 3)
                      o2 = m2.getX(u2), s2 = m2.getX(u2 + 1), l2 = m2.getX(u2 + 2), (n3 = ir(this, f2, t3, ji, g2, v2, y2, x2, b2, o2, s2, l2)) && (n3.faceIndex = Math.floor(u2 / 3), n3.face.materialIndex = p2.materialIndex, e3.push(n3));
                else
                  for (c2 = Math.max(0, M2.start), h2 = Math.min(m2.count, M2.start + M2.count); c2 < h2; c2 += 3)
                    o2 = m2.getX(c2), s2 = m2.getX(c2 + 1), l2 = m2.getX(c2 + 2), (n3 = ir(this, r3, t3, ji, g2, v2, y2, x2, b2, o2, s2, l2)) && (n3.faceIndex = Math.floor(c2 / 3), e3.push(n3));
              else if (g2 !== void 0)
                if (Array.isArray(r3))
                  for (c2 = 0, h2 = w2.length; c2 < h2; c2++)
                    for (f2 = r3[(p2 = w2[c2]).materialIndex], u2 = Math.max(p2.start, M2.start), d2 = Math.min(p2.start + p2.count, M2.start + M2.count); u2 < d2; u2 += 3)
                      (n3 = ir(this, f2, t3, ji, g2, v2, y2, x2, b2, o2 = u2, s2 = u2 + 1, l2 = u2 + 2)) && (n3.faceIndex = Math.floor(u2 / 3), n3.face.materialIndex = p2.materialIndex, e3.push(n3));
                else
                  for (c2 = Math.max(0, M2.start), h2 = Math.min(g2.count, M2.start + M2.count); c2 < h2; c2 += 3)
                    (n3 = ir(this, r3, t3, ji, g2, v2, y2, x2, b2, o2 = c2, s2 = c2 + 1, l2 = c2 + 2)) && (n3.faceIndex = Math.floor(c2 / 3), e3.push(n3));
            } else if (i3.isGeometry) {
              var _6, S2, C2, T2, E2 = Array.isArray(r3), D2 = i3.vertices, A2 = i3.faces, O2 = i3.faceVertexUvs[0];
              0 < O2.length && (T2 = O2);
              for (var L2 = 0, I2 = A2.length; L2 < I2; L2++) {
                var P2 = A2[L2], R2 = E2 ? r3[P2.materialIndex] : r3;
                if (R2 !== void 0 && (_6 = D2[P2.a], S2 = D2[P2.b], C2 = D2[P2.c], n3 = nr(this, R2, t3, ji, _6, S2, C2, Qi))) {
                  if (T2 && T2[L2]) {
                    var k2 = T2[L2];
                    Zi.copy(k2[0]), $i.copy(k2[1]), Ki.copy(k2[2]), n3.uv = ai.getUV(Qi, _6, S2, C2, Zi, $i, Ki, new Re());
                  }
                  n3.face = P2, n3.faceIndex = L2, e3.push(n3);
                }
              }
            }
          }
        }, clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } });
        var rr = 0, ar = new Qe(), or = new yn(), sr = new We();
        function lr() {
          Object.defineProperty(this, "id", { value: rr += 2 }), this.uuid = Pe.generateUUID(), this.name = "", this.type = "Geometry", this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.elementsNeedUpdate = false, this.verticesNeedUpdate = false, this.uvsNeedUpdate = false, this.normalsNeedUpdate = false, this.colorsNeedUpdate = false, this.lineDistancesNeedUpdate = false, this.groupsNeedUpdate = false;
        }
        lr.prototype = Object.assign(Object.create(Ae.prototype), { constructor: lr, isGeometry: true, applyMatrix4: function(t3) {
          for (var e3 = new ke().getNormalMatrix(t3), n3 = 0, i3 = this.vertices.length; n3 < i3; n3++)
            this.vertices[n3].applyMatrix4(t3);
          for (n3 = 0, i3 = this.faces.length; n3 < i3; n3++) {
            var r3 = this.faces[n3];
            r3.normal.applyMatrix3(e3).normalize();
            for (var a2 = 0, o2 = r3.vertexNormals.length; a2 < o2; a2++)
              r3.vertexNormals[a2].applyMatrix3(e3).normalize();
          }
          return this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this.verticesNeedUpdate = true, this.normalsNeedUpdate = true, this;
        }, rotateX: function(t3) {
          return ar.makeRotationX(t3), this.applyMatrix4(ar), this;
        }, rotateY: function(t3) {
          return ar.makeRotationY(t3), this.applyMatrix4(ar), this;
        }, rotateZ: function(t3) {
          return ar.makeRotationZ(t3), this.applyMatrix4(ar), this;
        }, translate: function(t3, e3, n3) {
          return ar.makeTranslation(t3, e3, n3), this.applyMatrix4(ar), this;
        }, scale: function(t3, e3, n3) {
          return ar.makeScale(t3, e3, n3), this.applyMatrix4(ar), this;
        }, lookAt: function(t3) {
          return or.lookAt(t3), or.updateMatrix(), this.applyMatrix4(or.matrix), this;
        }, fromBufferGeometry: function(t3) {
          var e3 = this, n3 = t3.index !== null ? t3.index.array : void 0, i3 = t3.attributes;
          if (i3.position === void 0)
            return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."), this;
          var r3 = i3.position.array, a2 = i3.normal !== void 0 ? i3.normal.array : void 0, o2 = i3.color !== void 0 ? i3.color.array : void 0, s2 = i3.uv !== void 0 ? i3.uv.array : void 0, l2 = i3.uv2 !== void 0 ? i3.uv2.array : void 0;
          l2 !== void 0 && (this.faceVertexUvs[1] = []);
          for (var c2 = 0; c2 < r3.length; c2 += 3)
            e3.vertices.push(new We().fromArray(r3, c2)), o2 !== void 0 && e3.colors.push(new ci().fromArray(o2, c2));
          function u2(t4, n4, i4, r4) {
            var c3 = o2 === void 0 ? [] : [e3.colors[t4].clone(), e3.colors[n4].clone(), e3.colors[i4].clone()], u3 = new pi(t4, n4, i4, a2 === void 0 ? [] : [new We().fromArray(a2, 3 * t4), new We().fromArray(a2, 3 * n4), new We().fromArray(a2, 3 * i4)], c3, r4);
            e3.faces.push(u3), s2 !== void 0 && e3.faceVertexUvs[0].push([new Re().fromArray(s2, 2 * t4), new Re().fromArray(s2, 2 * n4), new Re().fromArray(s2, 2 * i4)]), l2 !== void 0 && e3.faceVertexUvs[1].push([new Re().fromArray(l2, 2 * t4), new Re().fromArray(l2, 2 * n4), new Re().fromArray(l2, 2 * i4)]);
          }
          var h2 = t3.groups;
          if (0 < h2.length)
            for (c2 = 0; c2 < h2.length; c2++)
              for (var d2 = h2[c2], p2 = d2.start, f2 = p2, m2 = p2 + d2.count; f2 < m2; f2 += 3)
                n3 !== void 0 ? u2(n3[f2], n3[f2 + 1], n3[f2 + 2], d2.materialIndex) : u2(f2, f2 + 1, f2 + 2, d2.materialIndex);
          else if (n3 !== void 0)
            for (c2 = 0; c2 < n3.length; c2 += 3)
              u2(n3[c2], n3[c2 + 1], n3[c2 + 2]);
          else
            for (c2 = 0; c2 < r3.length / 3; c2 += 3)
              u2(c2, c2 + 1, c2 + 2);
          return this.computeFaceNormals(), t3.boundingBox !== null && (this.boundingBox = t3.boundingBox.clone()), t3.boundingSphere !== null && (this.boundingSphere = t3.boundingSphere.clone()), this;
        }, center: function() {
          return this.computeBoundingBox(), this.boundingBox.getCenter(sr).negate(), this.translate(sr.x, sr.y, sr.z), this;
        }, normalize: function() {
          this.computeBoundingSphere();
          var t3 = this.boundingSphere.center, e3 = this.boundingSphere.radius, n3 = e3 === 0 ? 1 : 1 / e3, i3 = new Qe();
          return i3.set(n3, 0, 0, -n3 * t3.x, 0, n3, 0, -n3 * t3.y, 0, 0, n3, -n3 * t3.z, 0, 0, 0, 1), this.applyMatrix4(i3), this;
        }, computeFaceNormals: function() {
          for (var t3 = new We(), e3 = new We(), n3 = 0, i3 = this.faces.length; n3 < i3; n3++) {
            var r3 = this.faces[n3], a2 = this.vertices[r3.a], o2 = this.vertices[r3.b], s2 = this.vertices[r3.c];
            t3.subVectors(s2, o2), e3.subVectors(a2, o2), t3.cross(e3), t3.normalize(), r3.normal.copy(t3);
          }
        }, computeVertexNormals: function(t3) {
          var e3, n3, i3, r3, a2, o2;
          for (t3 === void 0 && (t3 = true), o2 = new Array(this.vertices.length), e3 = 0, n3 = this.vertices.length; e3 < n3; e3++)
            o2[e3] = new We();
          if (t3) {
            var s2, l2, c2, u2 = new We(), h2 = new We();
            for (i3 = 0, r3 = this.faces.length; i3 < r3; i3++)
              a2 = this.faces[i3], s2 = this.vertices[a2.a], l2 = this.vertices[a2.b], c2 = this.vertices[a2.c], u2.subVectors(c2, l2), h2.subVectors(s2, l2), u2.cross(h2), o2[a2.a].add(u2), o2[a2.b].add(u2), o2[a2.c].add(u2);
          } else
            for (this.computeFaceNormals(), i3 = 0, r3 = this.faces.length; i3 < r3; i3++)
              o2[(a2 = this.faces[i3]).a].add(a2.normal), o2[a2.b].add(a2.normal), o2[a2.c].add(a2.normal);
          for (e3 = 0, n3 = this.vertices.length; e3 < n3; e3++)
            o2[e3].normalize();
          for (i3 = 0, r3 = this.faces.length; i3 < r3; i3++) {
            var d2 = (a2 = this.faces[i3]).vertexNormals;
            d2.length === 3 ? (d2[0].copy(o2[a2.a]), d2[1].copy(o2[a2.b]), d2[2].copy(o2[a2.c])) : (d2[0] = o2[a2.a].clone(), d2[1] = o2[a2.b].clone(), d2[2] = o2[a2.c].clone());
          }
          0 < this.faces.length && (this.normalsNeedUpdate = true);
        }, computeFlatVertexNormals: function() {
          var t3, e3, n3;
          for (this.computeFaceNormals(), t3 = 0, e3 = this.faces.length; t3 < e3; t3++) {
            var i3 = (n3 = this.faces[t3]).vertexNormals;
            i3.length === 3 ? (i3[0].copy(n3.normal), i3[1].copy(n3.normal), i3[2].copy(n3.normal)) : (i3[0] = n3.normal.clone(), i3[1] = n3.normal.clone(), i3[2] = n3.normal.clone());
          }
          0 < this.faces.length && (this.normalsNeedUpdate = true);
        }, computeMorphNormals: function() {
          var t3, e3, n3, i3, r3;
          for (n3 = 0, i3 = this.faces.length; n3 < i3; n3++)
            for ((r3 = this.faces[n3]).__originalFaceNormal ? r3.__originalFaceNormal.copy(r3.normal) : r3.__originalFaceNormal = r3.normal.clone(), r3.__originalVertexNormals || (r3.__originalVertexNormals = []), t3 = 0, e3 = r3.vertexNormals.length; t3 < e3; t3++)
              r3.__originalVertexNormals[t3] ? r3.__originalVertexNormals[t3].copy(r3.vertexNormals[t3]) : r3.__originalVertexNormals[t3] = r3.vertexNormals[t3].clone();
          var a2 = new lr();
          for (a2.faces = this.faces, t3 = 0, e3 = this.morphTargets.length; t3 < e3; t3++) {
            if (!this.morphNormals[t3]) {
              this.morphNormals[t3] = {}, this.morphNormals[t3].faceNormals = [], this.morphNormals[t3].vertexNormals = [];
              var o2 = this.morphNormals[t3].faceNormals, s2 = this.morphNormals[t3].vertexNormals;
              for (n3 = 0, i3 = this.faces.length; n3 < i3; n3++)
                l2 = new We(), c2 = { a: new We(), b: new We(), c: new We() }, o2.push(l2), s2.push(c2);
            }
            var l2, c2, u2 = this.morphNormals[t3];
            for (a2.vertices = this.morphTargets[t3].vertices, a2.computeFaceNormals(), a2.computeVertexNormals(), n3 = 0, i3 = this.faces.length; n3 < i3; n3++)
              r3 = this.faces[n3], l2 = u2.faceNormals[n3], c2 = u2.vertexNormals[n3], l2.copy(r3.normal), c2.a.copy(r3.vertexNormals[0]), c2.b.copy(r3.vertexNormals[1]), c2.c.copy(r3.vertexNormals[2]);
          }
          for (n3 = 0, i3 = this.faces.length; n3 < i3; n3++)
            (r3 = this.faces[n3]).normal = r3.__originalFaceNormal, r3.vertexNormals = r3.__originalVertexNormals;
        }, computeBoundingBox: function() {
          this.boundingBox === null && (this.boundingBox = new Pn()), this.boundingBox.setFromPoints(this.vertices);
        }, computeBoundingSphere: function() {
          this.boundingSphere === null && (this.boundingSphere = new Bn()), this.boundingSphere.setFromPoints(this.vertices);
        }, merge: function(t3, e3, n3) {
          if (t3 && t3.isGeometry) {
            var i3, r3 = this.vertices.length, a2 = this.vertices, o2 = t3.vertices, s2 = this.faces, l2 = t3.faces, c2 = this.colors, u2 = t3.colors;
            n3 === void 0 && (n3 = 0), e3 !== void 0 && (i3 = new ke().getNormalMatrix(e3));
            for (var h2 = 0, d2 = o2.length; h2 < d2; h2++) {
              var p2 = o2[h2].clone();
              e3 !== void 0 && p2.applyMatrix4(e3), a2.push(p2);
            }
            for (h2 = 0, d2 = u2.length; h2 < d2; h2++)
              c2.push(u2[h2].clone());
            for (h2 = 0, d2 = l2.length; h2 < d2; h2++) {
              var f2, m2, g2, v2 = l2[h2], y2 = v2.vertexNormals, x2 = v2.vertexColors;
              (f2 = new pi(v2.a + r3, v2.b + r3, v2.c + r3)).normal.copy(v2.normal), i3 !== void 0 && f2.normal.applyMatrix3(i3).normalize();
              for (var b2 = 0, w2 = y2.length; b2 < w2; b2++)
                m2 = y2[b2].clone(), i3 !== void 0 && m2.applyMatrix3(i3).normalize(), f2.vertexNormals.push(m2);
              for (f2.color.copy(v2.color), b2 = 0, w2 = x2.length; b2 < w2; b2++)
                g2 = x2[b2], f2.vertexColors.push(g2.clone());
              f2.materialIndex = v2.materialIndex + n3, s2.push(f2);
            }
            for (h2 = 0, d2 = t3.faceVertexUvs.length; h2 < d2; h2++) {
              var M2 = t3.faceVertexUvs[h2];
              for (this.faceVertexUvs[h2] === void 0 && (this.faceVertexUvs[h2] = []), b2 = 0, w2 = M2.length; b2 < w2; b2++) {
                for (var _6 = M2[b2], S2 = [], C2 = 0, T2 = _6.length; C2 < T2; C2++)
                  S2.push(_6[C2].clone());
                this.faceVertexUvs[h2].push(S2);
              }
            }
          } else
            console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", t3);
        }, mergeMesh: function(t3) {
          t3 && t3.isMesh ? (t3.matrixAutoUpdate && t3.updateMatrix(), this.merge(t3.geometry, t3.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", t3);
        }, mergeVertices: function() {
          var t3, e3, n3, i3, r3, a2, o2, s2, l2 = {}, c2 = [], u2 = [], h2 = Math.pow(10, 4);
          for (n3 = 0, i3 = this.vertices.length; n3 < i3; n3++)
            t3 = this.vertices[n3], l2[e3 = Math.round(t3.x * h2) + "_" + Math.round(t3.y * h2) + "_" + Math.round(t3.z * h2)] === void 0 ? (l2[e3] = n3, c2.push(this.vertices[n3]), u2[n3] = c2.length - 1) : u2[n3] = u2[l2[e3]];
          var d2 = [];
          for (n3 = 0, i3 = this.faces.length; n3 < i3; n3++) {
            (r3 = this.faces[n3]).a = u2[r3.a], r3.b = u2[r3.b], r3.c = u2[r3.c], a2 = [r3.a, r3.b, r3.c];
            for (var p2 = 0; p2 < 3; p2++)
              if (a2[p2] === a2[(p2 + 1) % 3]) {
                d2.push(n3);
                break;
              }
          }
          for (n3 = d2.length - 1; 0 <= n3; n3--) {
            var f2 = d2[n3];
            for (this.faces.splice(f2, 1), o2 = 0, s2 = this.faceVertexUvs.length; o2 < s2; o2++)
              this.faceVertexUvs[o2].splice(f2, 1);
          }
          var m2 = this.vertices.length - c2.length;
          return this.vertices = c2, m2;
        }, setFromPoints: function(t3) {
          this.vertices = [];
          for (var e3 = 0, n3 = t3.length; e3 < n3; e3++) {
            var i3 = t3[e3];
            this.vertices.push(new We(i3.x, i3.y, i3.z || 0));
          }
          return this;
        }, sortFacesByMaterialIndex: function() {
          for (var t3 = this.faces, e3 = t3.length, n3 = 0; n3 < e3; n3++)
            t3[n3]._id = n3;
          t3.sort(function(t4, e4) {
            return t4.materialIndex - e4.materialIndex;
          });
          var i3, r3, a2 = this.faceVertexUvs[0], o2 = this.faceVertexUvs[1];
          for (a2 && a2.length === e3 && (i3 = []), o2 && o2.length === e3 && (r3 = []), n3 = 0; n3 < e3; n3++) {
            var s2 = t3[n3]._id;
            i3 && i3.push(a2[s2]), r3 && r3.push(o2[s2]);
          }
          i3 && (this.faceVertexUvs[0] = i3), r3 && (this.faceVertexUvs[1] = r3);
        }, toJSON: function() {
          var t3 = { metadata: { version: 4.5, type: "Geometry", generator: "Geometry.toJSON" } };
          if (t3.uuid = this.uuid, t3.type = this.type, this.name !== "" && (t3.name = this.name), this.parameters !== void 0) {
            var e3 = this.parameters;
            for (var n3 in e3)
              e3[n3] !== void 0 && (t3[n3] = e3[n3]);
            return t3;
          }
          for (var i3 = [], r3 = 0; r3 < this.vertices.length; r3++) {
            var a2 = this.vertices[r3];
            i3.push(a2.x, a2.y, a2.z);
          }
          var o2 = [], s2 = [], l2 = {}, c2 = [], u2 = {}, h2 = [], d2 = {};
          for (r3 = 0; r3 < this.faces.length; r3++) {
            var p2 = this.faces[r3], f2 = this.faceVertexUvs[0][r3] !== void 0, m2 = 0 < p2.normal.length(), g2 = 0 < p2.vertexNormals.length, v2 = p2.color.r !== 1 || p2.color.g !== 1 || p2.color.b !== 1, y2 = 0 < p2.vertexColors.length, x2 = 0;
            if (x2 = _6(x2 = _6(x2 = _6(x2 = _6(x2 = _6(x2 = _6(x2 = _6(x2 = _6(x2, 0, 0), 1, true), 2, false), 3, f2), 4, m2), 5, g2), 6, v2), 7, y2), o2.push(x2), o2.push(p2.a, p2.b, p2.c), o2.push(p2.materialIndex), f2) {
              var b2 = this.faceVertexUvs[0][r3];
              o2.push(T2(b2[0]), T2(b2[1]), T2(b2[2]));
            }
            if (m2 && o2.push(S2(p2.normal)), g2) {
              var w2 = p2.vertexNormals;
              o2.push(S2(w2[0]), S2(w2[1]), S2(w2[2]));
            }
            if (v2 && o2.push(C2(p2.color)), y2) {
              var M2 = p2.vertexColors;
              o2.push(C2(M2[0]), C2(M2[1]), C2(M2[2]));
            }
          }
          function _6(t4, e4, n4) {
            return n4 ? t4 | 1 << e4 : t4 & ~(1 << e4);
          }
          function S2(t4) {
            var e4 = t4.x.toString() + t4.y.toString() + t4.z.toString();
            return l2[e4] !== void 0 || (l2[e4] = s2.length / 3, s2.push(t4.x, t4.y, t4.z)), l2[e4];
          }
          function C2(t4) {
            var e4 = t4.r.toString() + t4.g.toString() + t4.b.toString();
            return u2[e4] !== void 0 || (u2[e4] = c2.length, c2.push(t4.getHex())), u2[e4];
          }
          function T2(t4) {
            var e4 = t4.x.toString() + t4.y.toString();
            return d2[e4] !== void 0 || (d2[e4] = h2.length / 2, h2.push(t4.x, t4.y)), d2[e4];
          }
          return t3.data = {}, t3.data.vertices = i3, t3.data.normals = s2, 0 < c2.length && (t3.data.colors = c2), 0 < h2.length && (t3.data.uvs = [h2]), t3.data.faces = o2, t3;
        }, clone: function() {
          return new lr().copy(this);
        }, copy: function(t3) {
          var e3, n3, i3, r3, a2, o2;
          this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.name = t3.name;
          var s2 = t3.vertices;
          for (e3 = 0, n3 = s2.length; e3 < n3; e3++)
            this.vertices.push(s2[e3].clone());
          var l2 = t3.colors;
          for (e3 = 0, n3 = l2.length; e3 < n3; e3++)
            this.colors.push(l2[e3].clone());
          var c2 = t3.faces;
          for (e3 = 0, n3 = c2.length; e3 < n3; e3++)
            this.faces.push(c2[e3].clone());
          for (e3 = 0, n3 = t3.faceVertexUvs.length; e3 < n3; e3++) {
            var u2 = t3.faceVertexUvs[e3];
            for (this.faceVertexUvs[e3] === void 0 && (this.faceVertexUvs[e3] = []), i3 = 0, r3 = u2.length; i3 < r3; i3++) {
              var h2 = u2[i3], d2 = [];
              for (a2 = 0, o2 = h2.length; a2 < o2; a2++) {
                var p2 = h2[a2];
                d2.push(p2.clone());
              }
              this.faceVertexUvs[e3].push(d2);
            }
          }
          var f2 = t3.morphTargets;
          for (e3 = 0, n3 = f2.length; e3 < n3; e3++) {
            var m2 = {};
            if (m2.name = f2[e3].name, f2[e3].vertices !== void 0)
              for (m2.vertices = [], i3 = 0, r3 = f2[e3].vertices.length; i3 < r3; i3++)
                m2.vertices.push(f2[e3].vertices[i3].clone());
            if (f2[e3].normals !== void 0)
              for (m2.normals = [], i3 = 0, r3 = f2[e3].normals.length; i3 < r3; i3++)
                m2.normals.push(f2[e3].normals[i3].clone());
            this.morphTargets.push(m2);
          }
          var g2 = t3.morphNormals;
          for (e3 = 0, n3 = g2.length; e3 < n3; e3++) {
            var v2 = {};
            if (g2[e3].vertexNormals !== void 0)
              for (v2.vertexNormals = [], i3 = 0, r3 = g2[e3].vertexNormals.length; i3 < r3; i3++) {
                var y2 = g2[e3].vertexNormals[i3], x2 = {};
                x2.a = y2.a.clone(), x2.b = y2.b.clone(), x2.c = y2.c.clone(), v2.vertexNormals.push(x2);
              }
            if (g2[e3].faceNormals !== void 0)
              for (v2.faceNormals = [], i3 = 0, r3 = g2[e3].faceNormals.length; i3 < r3; i3++)
                v2.faceNormals.push(g2[e3].faceNormals[i3].clone());
            this.morphNormals.push(v2);
          }
          var b2 = t3.skinWeights;
          for (e3 = 0, n3 = b2.length; e3 < n3; e3++)
            this.skinWeights.push(b2[e3].clone());
          var w2 = t3.skinIndices;
          for (e3 = 0, n3 = w2.length; e3 < n3; e3++)
            this.skinIndices.push(w2[e3].clone());
          var M2 = t3.lineDistances;
          for (e3 = 0, n3 = M2.length; e3 < n3; e3++)
            this.lineDistances.push(M2[e3]);
          var _6 = t3.boundingBox;
          _6 !== null && (this.boundingBox = _6.clone());
          var S2 = t3.boundingSphere;
          return S2 !== null && (this.boundingSphere = S2.clone()), this.elementsNeedUpdate = t3.elementsNeedUpdate, this.verticesNeedUpdate = t3.verticesNeedUpdate, this.uvsNeedUpdate = t3.uvsNeedUpdate, this.normalsNeedUpdate = t3.normalsNeedUpdate, this.colorsNeedUpdate = t3.colorsNeedUpdate, this.lineDistancesNeedUpdate = t3.lineDistancesNeedUpdate, this.groupsNeedUpdate = t3.groupsNeedUpdate, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } });
        var cr = function(t3) {
          function e3(e4, n3, i3, r3, a2, o2) {
            t3.call(this), this.type = "BoxGeometry", this.parameters = { width: e4, height: n3, depth: i3, widthSegments: r3, heightSegments: a2, depthSegments: o2 }, this.fromBufferGeometry(new ur(e4, n3, i3, r3, a2, o2)), this.mergeVertices();
          }
          return t3 && (e3.__proto__ = t3), (e3.prototype = Object.create(t3 && t3.prototype)).constructor = e3;
        }(lr), ur = function(t3) {
          function e3(e4, n3, i3, r3, a2, o2) {
            t3.call(this), this.type = "BoxBufferGeometry", this.parameters = { width: e4, height: n3, depth: i3, widthSegments: r3, heightSegments: a2, depthSegments: o2 };
            var s2 = this;
            e4 = e4 || 1, n3 = n3 || 1, i3 = i3 || 1, r3 = Math.floor(r3) || 1, a2 = Math.floor(a2) || 1;
            var l2 = [], c2 = [], u2 = [], h2 = [], d2 = 0, p2 = 0;
            function f2(t4, e5, n4, i4, r4, a3, o3, f3, m2, g2, v2) {
              var y2, x2, b2 = a3 / m2, w2 = o3 / g2, M2 = a3 / 2, _6 = o3 / 2, S2 = f3 / 2, C2 = m2 + 1, T2 = g2 + 1, E2 = 0, D2 = 0, A2 = new We();
              for (x2 = 0; x2 < T2; x2++) {
                var O2 = x2 * w2 - _6;
                for (y2 = 0; y2 < C2; y2++) {
                  var L2 = y2 * b2 - M2;
                  A2[t4] = L2 * i4, A2[e5] = O2 * r4, A2[n4] = S2, c2.push(A2.x, A2.y, A2.z), A2[t4] = 0, A2[e5] = 0, A2[n4] = 0 < f3 ? 1 : -1, u2.push(A2.x, A2.y, A2.z), h2.push(y2 / m2), h2.push(1 - x2 / g2), E2 += 1;
                }
              }
              for (x2 = 0; x2 < g2; x2++)
                for (y2 = 0; y2 < m2; y2++) {
                  var I2 = d2 + y2 + C2 * x2, P2 = d2 + y2 + C2 * (x2 + 1), R2 = d2 + (y2 + 1) + C2 * (x2 + 1), k2 = d2 + (y2 + 1) + C2 * x2;
                  l2.push(I2, P2, k2), l2.push(P2, R2, k2), D2 += 6;
                }
              s2.addGroup(p2, D2, v2), p2 += D2, d2 += E2;
            }
            f2("z", "y", "x", -1, -1, i3, n3, e4, o2 = Math.floor(o2) || 1, a2, 0), f2("z", "y", "x", 1, -1, i3, n3, -e4, o2, a2, 1), f2("x", "z", "y", 1, 1, e4, i3, n3, r3, o2, 2), f2("x", "z", "y", 1, -1, e4, i3, -n3, r3, o2, 3), f2("x", "y", "z", 1, -1, e4, n3, i3, r3, a2, 4), f2("x", "y", "z", -1, -1, e4, n3, -i3, r3, a2, 5), this.setIndex(l2), this.setAttribute("position", new Ti(c2, 3)), this.setAttribute("normal", new Ti(u2, 3)), this.setAttribute("uv", new Ti(h2, 2));
          }
          return t3 && (e3.__proto__ = t3), (e3.prototype = Object.create(t3 && t3.prototype)).constructor = e3;
        }(Ni);
        function hr(t3) {
          var e3 = {};
          for (var n3 in t3)
            for (var i3 in e3[n3] = {}, t3[n3]) {
              var r3 = t3[n3][i3];
              r3 && (r3.isColor || r3.isMatrix3 || r3.isMatrix4 || r3.isVector2 || r3.isVector3 || r3.isVector4 || r3.isTexture) ? e3[n3][i3] = r3.clone() : Array.isArray(r3) ? e3[n3][i3] = r3.slice() : e3[n3][i3] = r3;
            }
          return e3;
        }
        function dr(t3) {
          for (var e3 = {}, n3 = 0; n3 < t3.length; n3++) {
            var i3 = hr(t3[n3]);
            for (var r3 in i3)
              e3[r3] = i3[r3];
          }
          return e3;
        }
        var pr = { clone: hr, merge: dr }, fr = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", mr = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
        function gr(t3) {
          mi.call(this), this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = fr, this.fragmentShader = mr, this.linewidth = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.clipping = false, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.extensions = { derivatives: false, fragDepth: false, drawBuffers: false, shaderTextureLOD: false }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = false, t3 !== void 0 && (t3.attributes !== void 0 && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(t3));
        }
        function vr() {
          yn.call(this), this.type = "Camera", this.matrixWorldInverse = new Qe(), this.projectionMatrix = new Qe(), this.projectionMatrixInverse = new Qe();
        }
        function yr(t3, e3, n3, i3) {
          vr.call(this), this.type = "PerspectiveCamera", this.fov = t3 !== void 0 ? t3 : 50, this.zoom = 1, this.near = n3 !== void 0 ? n3 : 0.1, this.far = i3 !== void 0 ? i3 : 2e3, this.focus = 10, this.aspect = e3 !== void 0 ? e3 : 1, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
        }
        function xr(t3, e3, n3, i3) {
          yn.call(this), this.type = "CubeCamera";
          var r3 = new yr(90, 1, t3, e3);
          r3.up.set(0, -1, 0), r3.lookAt(new We(1, 0, 0)), this.add(r3);
          var a2 = new yr(90, 1, t3, e3);
          a2.up.set(0, -1, 0), a2.lookAt(new We(-1, 0, 0)), this.add(a2);
          var o2 = new yr(90, 1, t3, e3);
          o2.up.set(0, 0, 1), o2.lookAt(new We(0, 1, 0)), this.add(o2);
          var s2 = new yr(90, 1, t3, e3);
          s2.up.set(0, 0, -1), s2.lookAt(new We(0, -1, 0)), this.add(s2);
          var l2 = new yr(90, 1, t3, e3);
          l2.up.set(0, -1, 0), l2.lookAt(new We(0, 0, 1)), this.add(l2);
          var c2 = new yr(90, 1, t3, e3);
          c2.up.set(0, -1, 0), c2.lookAt(new We(0, 0, -1)), this.add(c2), i3 = i3 || { format: Tt, magFilter: ut, minFilter: ut }, this.renderTarget = new br(n3, i3), this.renderTarget.texture.name = "CubeCamera", this.update = function(t4, e4) {
            this.parent === null && this.updateMatrixWorld();
            var n4 = t4.getRenderTarget(), i4 = this.renderTarget, u2 = i4.texture.generateMipmaps;
            i4.texture.generateMipmaps = false, t4.setRenderTarget(i4, 0), t4.render(e4, r3), t4.setRenderTarget(i4, 1), t4.render(e4, a2), t4.setRenderTarget(i4, 2), t4.render(e4, o2), t4.setRenderTarget(i4, 3), t4.render(e4, s2), t4.setRenderTarget(i4, 4), t4.render(e4, l2), i4.texture.generateMipmaps = u2, t4.setRenderTarget(i4, 5), t4.render(e4, c2), t4.setRenderTarget(n4);
          }, this.clear = function(t4, e4, n4, i4) {
            for (var r4 = t4.getRenderTarget(), a3 = this.renderTarget, o3 = 0; o3 < 6; o3++)
              t4.setRenderTarget(a3, o3), t4.clear(e4, n4, i4);
            t4.setRenderTarget(r4);
          };
        }
        function br(t3, e3, n3) {
          Number.isInteger(e3) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), e3 = n3), Ve.call(this, t3, t3, e3);
        }
        function wr(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2, u2, h2) {
          Fe.call(this, null, a2, o2, s2, l2, c2, i3, r3, u2, h2), this.image = { data: t3 || null, width: e3 || 1, height: n3 || 1 }, this.magFilter = l2 !== void 0 ? l2 : st, this.minFilter = c2 !== void 0 ? c2 : st, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1, this.needsUpdate = true;
        }
        ((gr.prototype = Object.create(mi.prototype)).constructor = gr).prototype.isShaderMaterial = true, gr.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.fragmentShader = t3.fragmentShader, this.vertexShader = t3.vertexShader, this.uniforms = hr(t3.uniforms), this.defines = Object.assign({}, t3.defines), this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.lights = t3.lights, this.clipping = t3.clipping, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this.extensions = t3.extensions, this;
        }, gr.prototype.toJSON = function(t3) {
          var e3 = mi.prototype.toJSON.call(this, t3);
          for (var n3 in e3.uniforms = {}, this.uniforms) {
            var i3 = this.uniforms[n3].value;
            i3 && i3.isTexture ? e3.uniforms[n3] = { type: "t", value: i3.toJSON(t3).uuid } : i3 && i3.isColor ? e3.uniforms[n3] = { type: "c", value: i3.getHex() } : i3 && i3.isVector2 ? e3.uniforms[n3] = { type: "v2", value: i3.toArray() } : i3 && i3.isVector3 ? e3.uniforms[n3] = { type: "v3", value: i3.toArray() } : i3 && i3.isVector4 ? e3.uniforms[n3] = { type: "v4", value: i3.toArray() } : i3 && i3.isMatrix3 ? e3.uniforms[n3] = { type: "m3", value: i3.toArray() } : i3 && i3.isMatrix4 ? e3.uniforms[n3] = { type: "m4", value: i3.toArray() } : e3.uniforms[n3] = { value: i3 };
          }
          0 < Object.keys(this.defines).length && (e3.defines = this.defines), e3.vertexShader = this.vertexShader, e3.fragmentShader = this.fragmentShader;
          var r3 = {};
          for (var a2 in this.extensions)
            this.extensions[a2] === true && (r3[a2] = true);
          return 0 < Object.keys(r3).length && (e3.extensions = r3), e3;
        }, vr.prototype = Object.assign(Object.create(yn.prototype), { constructor: vr, isCamera: true, copy: function(t3, e3) {
          return yn.prototype.copy.call(this, t3, e3), this.matrixWorldInverse.copy(t3.matrixWorldInverse), this.projectionMatrix.copy(t3.projectionMatrix), this.projectionMatrixInverse.copy(t3.projectionMatrixInverse), this;
        }, getWorldDirection: function(t3) {
          t3 === void 0 && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), t3 = new We()), this.updateMatrixWorld(true);
          var e3 = this.matrixWorld.elements;
          return t3.set(-e3[8], -e3[9], -e3[10]).normalize();
        }, updateMatrixWorld: function(t3) {
          yn.prototype.updateMatrixWorld.call(this, t3), this.matrixWorldInverse.getInverse(this.matrixWorld);
        }, updateWorldMatrix: function(t3, e3) {
          yn.prototype.updateWorldMatrix.call(this, t3, e3), this.matrixWorldInverse.getInverse(this.matrixWorld);
        }, clone: function() {
          return new this.constructor().copy(this);
        } }), yr.prototype = Object.assign(Object.create(vr.prototype), { constructor: yr, isPerspectiveCamera: true, copy: function(t3, e3) {
          return vr.prototype.copy.call(this, t3, e3), this.fov = t3.fov, this.zoom = t3.zoom, this.near = t3.near, this.far = t3.far, this.focus = t3.focus, this.aspect = t3.aspect, this.view = t3.view === null ? null : Object.assign({}, t3.view), this.filmGauge = t3.filmGauge, this.filmOffset = t3.filmOffset, this;
        }, setFocalLength: function(t3) {
          var e3 = 0.5 * this.getFilmHeight() / t3;
          this.fov = 2 * Pe.RAD2DEG * Math.atan(e3), this.updateProjectionMatrix();
        }, getFocalLength: function() {
          var t3 = Math.tan(0.5 * Pe.DEG2RAD * this.fov);
          return 0.5 * this.getFilmHeight() / t3;
        }, getEffectiveFOV: function() {
          return 2 * Pe.RAD2DEG * Math.atan(Math.tan(0.5 * Pe.DEG2RAD * this.fov) / this.zoom);
        }, getFilmWidth: function() {
          return this.filmGauge * Math.min(this.aspect, 1);
        }, getFilmHeight: function() {
          return this.filmGauge / Math.max(this.aspect, 1);
        }, setViewOffset: function(t3, e3, n3, i3, r3, a2) {
          this.aspect = t3 / e3, this.view === null && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = t3, this.view.fullHeight = e3, this.view.offsetX = n3, this.view.offsetY = i3, this.view.width = r3, this.view.height = a2, this.updateProjectionMatrix();
        }, clearViewOffset: function() {
          this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
        }, updateProjectionMatrix: function() {
          var t3 = this.near, e3 = t3 * Math.tan(0.5 * Pe.DEG2RAD * this.fov) / this.zoom, n3 = 2 * e3, i3 = this.aspect * n3, r3 = -0.5 * i3, a2 = this.view;
          if (this.view !== null && this.view.enabled) {
            var o2 = a2.fullWidth, s2 = a2.fullHeight;
            r3 += a2.offsetX * i3 / o2, e3 -= a2.offsetY * n3 / s2, i3 *= a2.width / o2, n3 *= a2.height / s2;
          }
          var l2 = this.filmOffset;
          l2 !== 0 && (r3 += t3 * l2 / this.getFilmWidth()), this.projectionMatrix.makePerspective(r3, r3 + i3, e3, e3 - n3, t3, this.far), this.projectionMatrixInverse.getInverse(this.projectionMatrix);
        }, toJSON: function(t3) {
          var e3 = yn.prototype.toJSON.call(this, t3);
          return e3.object.fov = this.fov, e3.object.zoom = this.zoom, e3.object.near = this.near, e3.object.far = this.far, e3.object.focus = this.focus, e3.object.aspect = this.aspect, this.view !== null && (e3.object.view = Object.assign({}, this.view)), e3.object.filmGauge = this.filmGauge, e3.object.filmOffset = this.filmOffset, e3;
        } }), (xr.prototype = Object.create(yn.prototype)).constructor = xr, ((br.prototype = Object.create(Ve.prototype)).constructor = br).prototype.isWebGLCubeRenderTarget = true, br.prototype.fromEquirectangularTexture = function(t3, e3) {
          this.texture.type = e3.type, this.texture.format = e3.format, this.texture.encoding = e3.encoding;
          var n3 = new xn(), i3 = { uniforms: { tEquirect: { value: null } }, vertexShader: ["varying vec3 vWorldDirection;", "vec3 transformDirection( in vec3 dir, in mat4 matrix ) {", "	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );", "}", "void main() {", "	vWorldDirection = transformDirection( position, modelMatrix );", "	#include <begin_vertex>", "	#include <project_vertex>", "}"].join("\n"), fragmentShader: ["uniform sampler2D tEquirect;", "varying vec3 vWorldDirection;", "#define RECIPROCAL_PI 0.31830988618", "#define RECIPROCAL_PI2 0.15915494", "void main() {", "	vec3 direction = normalize( vWorldDirection );", "	vec2 sampleUV;", "	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;", "	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;", "	gl_FragColor = texture2D( tEquirect, sampleUV );", "}"].join("\n") }, r3 = new gr({ type: "CubemapFromEquirect", uniforms: hr(i3.uniforms), vertexShader: i3.vertexShader, fragmentShader: i3.fragmentShader, side: l, blending: d });
          r3.uniforms.tEquirect.value = e3;
          var a2 = new er(new ur(5, 5, 5), r3);
          n3.add(a2);
          var o2 = new xr(1, 10, 1);
          return o2.renderTarget = this, o2.renderTarget.texture.name = "CubeCameraTexture", o2.update(t3, n3), a2.geometry.dispose(), a2.material.dispose(), this;
        }, ((wr.prototype = Object.create(Fe.prototype)).constructor = wr).prototype.isDataTexture = true;
        var Mr = new Bn(), _r = new We();
        function Sr(t3, e3, n3, i3, r3, a2) {
          this.planes = [t3 !== void 0 ? t3 : new Xn(), e3 !== void 0 ? e3 : new Xn(), n3 !== void 0 ? n3 : new Xn(), i3 !== void 0 ? i3 : new Xn(), r3 !== void 0 ? r3 : new Xn(), a2 !== void 0 ? a2 : new Xn()];
        }
        Object.assign(Sr.prototype, { set: function(t3, e3, n3, i3, r3, a2) {
          var o2 = this.planes;
          return o2[0].copy(t3), o2[1].copy(e3), o2[2].copy(n3), o2[3].copy(i3), o2[4].copy(r3), o2[5].copy(a2), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          for (var e3 = this.planes, n3 = 0; n3 < 6; n3++)
            e3[n3].copy(t3.planes[n3]);
          return this;
        }, setFromProjectionMatrix: function(t3) {
          var e3 = this.planes, n3 = t3.elements, i3 = n3[0], r3 = n3[1], a2 = n3[2], o2 = n3[3], s2 = n3[4], l2 = n3[5], c2 = n3[6], u2 = n3[7], h2 = n3[8], d2 = n3[9], p2 = n3[10], f2 = n3[11], m2 = n3[12], g2 = n3[13], v2 = n3[14], y2 = n3[15];
          return e3[0].setComponents(o2 - i3, u2 - s2, f2 - h2, y2 - m2).normalize(), e3[1].setComponents(o2 + i3, u2 + s2, f2 + h2, y2 + m2).normalize(), e3[2].setComponents(o2 + r3, u2 + l2, f2 + d2, y2 + g2).normalize(), e3[3].setComponents(o2 - r3, u2 - l2, f2 - d2, y2 - g2).normalize(), e3[4].setComponents(o2 - a2, u2 - c2, f2 - p2, y2 - v2).normalize(), e3[5].setComponents(o2 + a2, u2 + c2, f2 + p2, y2 + v2).normalize(), this;
        }, intersectsObject: function(t3) {
          var e3 = t3.geometry;
          return e3.boundingSphere === null && e3.computeBoundingSphere(), Mr.copy(e3.boundingSphere).applyMatrix4(t3.matrixWorld), this.intersectsSphere(Mr);
        }, intersectsSprite: function(t3) {
          return Mr.center.set(0, 0, 0), Mr.radius = 0.7071067811865476, Mr.applyMatrix4(t3.matrixWorld), this.intersectsSphere(Mr);
        }, intersectsSphere: function(t3) {
          for (var e3 = this.planes, n3 = t3.center, i3 = -t3.radius, r3 = 0; r3 < 6; r3++)
            if (e3[r3].distanceToPoint(n3) < i3)
              return false;
          return true;
        }, intersectsBox: function(t3) {
          for (var e3 = this.planes, n3 = 0; n3 < 6; n3++) {
            var i3 = e3[n3];
            if (_r.x = 0 < i3.normal.x ? t3.max.x : t3.min.x, _r.y = 0 < i3.normal.y ? t3.max.y : t3.min.y, _r.z = 0 < i3.normal.z ? t3.max.z : t3.min.z, i3.distanceToPoint(_r) < 0)
              return false;
          }
          return true;
        }, containsPoint: function(t3) {
          for (var e3 = this.planes, n3 = 0; n3 < 6; n3++)
            if (e3[n3].distanceToPoint(t3) < 0)
              return false;
          return true;
        } });
        var Cr = { common: { diffuse: { value: new ci(15658734) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new ke() }, uv2Transform: { value: new ke() }, alphaMap: { value: null } }, specularmap: { specularMap: { value: null } }, envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, refractionRatio: { value: 0.98 }, maxMipLevel: { value: 0 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new Re(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new ci(16777215) } }, lights: { ambientLightColor: { value: [] }, lightProbe: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotShadowMap: { value: [] }, spotShadowMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } } }, points: { diffuse: { value: new ci(15658734) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, uvTransform: { value: new ke() } }, sprite: { diffuse: { value: new ci(15658734) }, opacity: { value: 1 }, center: { value: new Re(0.5, 0.5) }, rotation: { value: 0 }, map: { value: null }, alphaMap: { value: null }, uvTransform: { value: new ke() } } };
        function Tr() {
          var t3 = null, e3 = false, n3 = null;
          function i3(r3, a2) {
            e3 !== false && (n3(r3, a2), t3.requestAnimationFrame(i3));
          }
          return { start: function() {
            e3 !== true && n3 !== null && (t3.requestAnimationFrame(i3), e3 = true);
          }, stop: function() {
            e3 = false;
          }, setAnimationLoop: function(t4) {
            n3 = t4;
          }, setContext: function(e4) {
            t3 = e4;
          } };
        }
        function Er(t3, e3, n3, i3) {
          lr.call(this), this.type = "PlaneGeometry", this.parameters = { width: t3, height: e3, widthSegments: n3, heightSegments: i3 }, this.fromBufferGeometry(new Dr(t3, e3, n3, i3)), this.mergeVertices();
        }
        function Dr(t3, e3, n3, i3) {
          Ni.call(this), this.type = "PlaneBufferGeometry", this.parameters = { width: t3, height: e3, widthSegments: n3, heightSegments: i3 };
          var r3, a2, o2 = (t3 = t3 || 1) / 2, s2 = (e3 = e3 || 1) / 2, l2 = Math.floor(n3) || 1, c2 = Math.floor(i3) || 1, u2 = l2 + 1, h2 = c2 + 1, d2 = t3 / l2, p2 = e3 / c2, f2 = [], m2 = [], g2 = [], v2 = [];
          for (a2 = 0; a2 < h2; a2++) {
            var y2 = a2 * p2 - s2;
            for (r3 = 0; r3 < u2; r3++) {
              var x2 = r3 * d2 - o2;
              m2.push(x2, -y2, 0), g2.push(0, 0, 1), v2.push(r3 / l2), v2.push(1 - a2 / c2);
            }
          }
          for (a2 = 0; a2 < c2; a2++)
            for (r3 = 0; r3 < l2; r3++) {
              var b2 = r3 + u2 * a2, w2 = r3 + u2 * (a2 + 1), M2 = r3 + 1 + u2 * (a2 + 1), _6 = r3 + 1 + u2 * a2;
              f2.push(b2, w2, _6), f2.push(w2, M2, _6);
            }
          this.setIndex(f2), this.setAttribute("position", new Ti(m2, 3)), this.setAttribute("normal", new Ti(g2, 3)), this.setAttribute("uv", new Ti(v2, 2));
        }
        (Er.prototype = Object.create(lr.prototype)).constructor = Er, (Dr.prototype = Object.create(Ni.prototype)).constructor = Dr;
        var Ar = { alphamap_fragment: "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif", alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif", alphatest_fragment: "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif", aomap_fragment: "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif", aomap_pars_fragment: "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif", begin_vertex: "vec3 transformed = vec3( position );", beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif", bsdfs: "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	return vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n#else\n	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n	return Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + viewDir );\n	float dotNL = saturate( dot( normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE  = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS  = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	return specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	vec3 FssEss = F * brdf.x + brdf.y;\n	float Ess = brdf.x + brdf.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n	float invAlpha  = 1.0 / roughness;\n	float cos2h = NoH * NoH;\n	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n	vec3 N = geometry.normal;\n	vec3 V = geometry.viewDir;\n	vec3 H = normalize( V + L );\n	float dotNH = saturate( dot( N, H ) );\n	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif", bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif", clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		if ( clipped ) discard;\n	#endif\n#endif", clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif", clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n	varying vec3 vViewPosition;\n#endif", clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n	vViewPosition = - mvPosition.xyz;\n#endif", color_fragment: "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif", color_pars_fragment: "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif", color_pars_vertex: "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif", color_vertex: "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif", common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}", cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif", defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	transformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif", displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif", displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif", emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif", emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif", encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );", encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}", envmap_fragment: "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		}  else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		reflectVec = normalize( reflectVec );\n		sampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n		sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		reflectVec = normalize( reflectVec );\n		vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifndef ENVMAP_TYPE_CUBE_UV\n		envColor = envMapTexelToLinear( envColor );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif", envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif", envmap_pars_fragment: "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif", envmap_pars_vertex: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif", envmap_physical_pars_fragment: "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float sigma = PI * roughness * roughness / ( 1.0 + roughness );\n		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n		  vec3 reflectVec = reflect( -viewDir, normal );\n		  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n		#else\n		  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n			sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif", envmap_vertex: "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) { \n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif", fog_vertex: "#ifdef USE_FOG\n	fogDepth = -mvPosition.z;\n#endif", fog_pars_vertex: "#ifdef USE_FOG\n	varying float fogDepth;\n#endif", fog_fragment: "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif", fog_pars_fragment: "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif", gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}", lightmap_fragment: "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif", lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif", lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif", lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n		float shadowCameraNear;\n		float shadowCameraFar;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif", lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_toon_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)", lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)", lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n	material.clearcoat = saturate( clearcoat );	material.clearcoatRoughness = max( clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheen;\n#endif", lights_physical_pars_fragment: "struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n#ifdef CLEARCOAT\n	float clearcoat;\n	float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	vec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifdef CLEARCOAT\n		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = ccDotNL * directLight.color;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			ccIrradiance *= PI;\n		#endif\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n			material.specularRoughness,\n			directLight.direction,\n			geometry,\n			material.sheenColor\n		);\n	#else\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n	#endif\n	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef CLEARCOAT\n		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n		float ccDotNL = ccDotNV;\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	float clearcoatInv = 1.0 - clearcoatDHR;\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}", lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		directLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		directLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif", lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n	#ifdef CLEARCOAT\n		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n	#endif\n#endif", lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif", logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif", logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif", logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif", map_fragment: "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif", map_pars_fragment: "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif", map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif", map_particle_pars_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif", metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif", metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif", morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif", morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif", morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n	transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n	transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n	transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n	transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n	transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n	transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n	#endif\n#endif", normal_fragment_begin: "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;", normal_fragment_maps: "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif", normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		float scale = sign( st1.t * st0.s - st0.t * st1.s );\n		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n		vec3 N = normalize( surf_norm );\n		mat3 tsn = mat3( S, T, N );\n		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		return normalize( tsn * mapN );\n	}\n#endif", clearcoat_normal_fragment_begin: "#ifdef CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif", clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n	#endif\n#endif", clearcoat_normalmap_pars_fragment: "#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif", packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}", premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif", project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;", dithering_fragment: "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif", dithering_pars_fragment: "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif", roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif", roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif", shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif", shadowmap_vertex: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif", shadowmask_pars_fragment: "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLight directionalLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLight spotLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLight pointLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}", skinbase_vertex: "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex: "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif", skinning_vertex: "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif", skinnormal_vertex: "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif", specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif", specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif", tonemapping_fragment: "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif", tonemapping_pars_fragment: "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}", uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif", uv_pars_vertex: "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif", uv_vertex: "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif", uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif", uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif", worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif", background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}", background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}", cube_frag: "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}", cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}", depth_frag: "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}", depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}", distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}", distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}", equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV;\n	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}", equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}", linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}", linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}", meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n	\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}", meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}", meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}", meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}", meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}", meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#ifndef FLAT_SHADED\n		vNormal = normalize( transformedNormal );\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}", meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}", meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}", meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}", meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}", meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n	#define REFLECTIVITY\n	#define CLEARCOAT\n	#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n	uniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n	uniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#ifdef TRANSPARENCY\n		diffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n	#endif\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}", meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}", normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}", normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}", points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}", points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}", shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}", shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}", sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}", sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}" }, Or = { basic: { uniforms: dr([Cr.common, Cr.specularmap, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.fog]), vertexShader: Ar.meshbasic_vert, fragmentShader: Ar.meshbasic_frag }, lambert: { uniforms: dr([Cr.common, Cr.specularmap, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.fog, Cr.lights, { emissive: { value: new ci(0) } }]), vertexShader: Ar.meshlambert_vert, fragmentShader: Ar.meshlambert_frag }, phong: { uniforms: dr([Cr.common, Cr.specularmap, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.fog, Cr.lights, { emissive: { value: new ci(0) }, specular: { value: new ci(1118481) }, shininess: { value: 30 } }]), vertexShader: Ar.meshphong_vert, fragmentShader: Ar.meshphong_frag }, standard: { uniforms: dr([Cr.common, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.roughnessmap, Cr.metalnessmap, Cr.fog, Cr.lights, { emissive: { value: new ci(0) }, roughness: { value: 0.5 }, metalness: { value: 0.5 }, envMapIntensity: { value: 1 } }]), vertexShader: Ar.meshphysical_vert, fragmentShader: Ar.meshphysical_frag }, toon: { uniforms: dr([Cr.common, Cr.specularmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.gradientmap, Cr.fog, Cr.lights, { emissive: { value: new ci(0) }, specular: { value: new ci(1118481) }, shininess: { value: 30 } }]), vertexShader: Ar.meshtoon_vert, fragmentShader: Ar.meshtoon_frag }, matcap: { uniforms: dr([Cr.common, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.fog, { matcap: { value: null } }]), vertexShader: Ar.meshmatcap_vert, fragmentShader: Ar.meshmatcap_frag }, points: { uniforms: dr([Cr.points, Cr.fog]), vertexShader: Ar.points_vert, fragmentShader: Ar.points_frag }, dashed: { uniforms: dr([Cr.common, Cr.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: Ar.linedashed_vert, fragmentShader: Ar.linedashed_frag }, depth: { uniforms: dr([Cr.common, Cr.displacementmap]), vertexShader: Ar.depth_vert, fragmentShader: Ar.depth_frag }, normal: { uniforms: dr([Cr.common, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, { opacity: { value: 1 } }]), vertexShader: Ar.normal_vert, fragmentShader: Ar.normal_frag }, sprite: { uniforms: dr([Cr.sprite, Cr.fog]), vertexShader: Ar.sprite_vert, fragmentShader: Ar.sprite_frag }, background: { uniforms: { uvTransform: { value: new ke() }, t2D: { value: null } }, vertexShader: Ar.background_vert, fragmentShader: Ar.background_frag }, cube: { uniforms: dr([Cr.envmap, { opacity: { value: 1 } }]), vertexShader: Ar.cube_vert, fragmentShader: Ar.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: Ar.equirect_vert, fragmentShader: Ar.equirect_frag }, distanceRGBA: { uniforms: dr([Cr.common, Cr.displacementmap, { referencePosition: { value: new We() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: Ar.distanceRGBA_vert, fragmentShader: Ar.distanceRGBA_frag }, shadow: { uniforms: dr([Cr.lights, Cr.fog, { color: { value: new ci(0) }, opacity: { value: 1 } }]), vertexShader: Ar.shadow_vert, fragmentShader: Ar.shadow_frag } };
        function Lr(t3, e3, n3, i3) {
          var r3, a2, o2 = new ci(0), c2 = 0, u2 = null, h2 = 0, d2 = null;
          function p2(t4, n4) {
            e3.buffers.color.setClear(t4.r, t4.g, t4.b, n4, i3);
          }
          return { getClearColor: function() {
            return o2;
          }, setClearColor: function(t4, e4) {
            o2.set(t4), p2(o2, c2 = e4 !== void 0 ? e4 : 1);
          }, getClearAlpha: function() {
            return c2;
          }, setClearAlpha: function(t4) {
            p2(o2, c2 = t4);
          }, render: function(e4, i4, f2, m2) {
            var g2 = i4.background, v2 = t3.xr, y2 = v2.getSession && v2.getSession();
            if (y2 && y2.environmentBlendMode === "additive" && (g2 = null), g2 === null ? p2(o2, c2) : g2 && g2.isColor && (p2(g2, 1), m2 = true), (t3.autoClear || m2) && t3.clear(t3.autoClearColor, t3.autoClearDepth, t3.autoClearStencil), g2 && (g2.isCubeTexture || g2.isWebGLCubeRenderTarget || g2.mapping === nt)) {
              a2 === void 0 && ((a2 = new er(new ur(1, 1, 1), new gr({ type: "BackgroundCubeMaterial", uniforms: hr(Or.cube.uniforms), vertexShader: Or.cube.vertexShader, fragmentShader: Or.cube.fragmentShader, side: l, depthTest: false, depthWrite: false, fog: false }))).geometry.deleteAttribute("normal"), a2.geometry.deleteAttribute("uv"), a2.onBeforeRender = function(t4, e5, n4) {
                this.matrixWorld.copyPosition(n4.matrixWorld);
              }, Object.defineProperty(a2.material, "envMap", { get: function() {
                return this.uniforms.envMap.value;
              } }), n3.update(a2));
              var x2 = g2.isWebGLCubeRenderTarget ? g2.texture : g2;
              a2.material.uniforms.envMap.value = x2, a2.material.uniforms.flipEnvMap.value = x2.isCubeTexture ? -1 : 1, u2 === g2 && h2 === x2.version && d2 === t3.toneMapping || (a2.material.needsUpdate = true, u2 = g2, h2 = x2.version, d2 = t3.toneMapping), e4.unshift(a2, a2.geometry, a2.material, 0, 0, null);
            } else
              g2 && g2.isTexture && (r3 === void 0 && ((r3 = new er(new Dr(2, 2), new gr({ type: "BackgroundMaterial", uniforms: hr(Or.background.uniforms), vertexShader: Or.background.vertexShader, fragmentShader: Or.background.fragmentShader, side: s, depthTest: false, depthWrite: false, fog: false }))).geometry.deleteAttribute("normal"), Object.defineProperty(r3.material, "map", { get: function() {
                return this.uniforms.t2D.value;
              } }), n3.update(r3)), (r3.material.uniforms.t2D.value = g2).matrixAutoUpdate === true && g2.updateMatrix(), r3.material.uniforms.uvTransform.value.copy(g2.matrix), u2 === g2 && h2 === g2.version && d2 === t3.toneMapping || (r3.material.needsUpdate = true, h2 = (u2 = g2).version, d2 = t3.toneMapping), e4.unshift(r3, r3.geometry, r3.material, 0, 0, null));
          } };
        }
        function Ir(t3, e3) {
          return Math.abs(e3[1]) - Math.abs(t3[1]);
        }
        function Pr(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2) {
          Fe.call(this, t3 = t3 !== void 0 ? t3 : [], e3 = e3 !== void 0 ? e3 : $2, n3, i3, r3, a2, o2 = o2 !== void 0 ? o2 : Tt, s2, l2, c2), this.flipY = false;
        }
        function Rr(t3, e3, n3, i3) {
          Fe.call(this, null), this.image = { data: t3 || null, width: e3 || 1, height: n3 || 1, depth: i3 || 1 }, this.magFilter = st, this.minFilter = st, this.wrapR = at, this.generateMipmaps = false, this.flipY = false, this.needsUpdate = true;
        }
        function kr(t3, e3, n3, i3) {
          Fe.call(this, null), this.image = { data: t3 || null, width: e3 || 1, height: n3 || 1, depth: i3 || 1 }, this.magFilter = st, this.minFilter = st, this.wrapR = at, this.generateMipmaps = false, this.flipY = false, this.needsUpdate = true;
        }
        Or.physical = { uniforms: dr([Or.standard.uniforms, { transparency: { value: 0 }, clearcoat: { value: 0 }, clearcoatRoughness: { value: 0 }, sheen: { value: new ci(0) }, clearcoatNormalScale: { value: new Re(1, 1) }, clearcoatNormalMap: { value: null } }]), vertexShader: Ar.meshphysical_vert, fragmentShader: Ar.meshphysical_frag }, ((Pr.prototype = Object.create(Fe.prototype)).constructor = Pr).prototype.isCubeTexture = true, Object.defineProperty(Pr.prototype, "images", { get: function() {
          return this.image;
        }, set: function(t3) {
          this.image = t3;
        } }), ((Rr.prototype = Object.create(Fe.prototype)).constructor = Rr).prototype.isDataTexture2DArray = true, ((kr.prototype = Object.create(Fe.prototype)).constructor = kr).prototype.isDataTexture3D = true;
        var Br = new Fe(), Nr = new Rr(), Fr = new kr(), jr = new Pr(), Vr = [], zr = [], Gr = new Float32Array(16), Ur = new Float32Array(9), Hr = new Float32Array(4);
        function Wr(t3, e3, n3) {
          var i3 = t3[0];
          if (i3 <= 0 || 0 < i3)
            return t3;
          var r3 = e3 * n3, a2 = Vr[r3];
          if (a2 === void 0 && (a2 = new Float32Array(r3), Vr[r3] = a2), e3 !== 0) {
            i3.toArray(a2, 0);
            for (var o2 = 1, s2 = 0; o2 !== e3; ++o2)
              s2 += n3, t3[o2].toArray(a2, s2);
          }
          return a2;
        }
        function Jr(t3, e3) {
          if (t3.length === e3.length) {
            for (var n3 = 0, i3 = t3.length; n3 < i3; n3++)
              if (t3[n3] !== e3[n3])
                return;
            return 1;
          }
        }
        function qr(t3, e3) {
          for (var n3 = 0, i3 = e3.length; n3 < i3; n3++)
            t3[n3] = e3[n3];
        }
        function Xr(t3, e3) {
          var n3 = zr[e3];
          n3 === void 0 && (n3 = new Int32Array(e3), zr[e3] = n3);
          for (var i3 = 0; i3 !== e3; ++i3)
            n3[i3] = t3.allocateTextureUnit();
          return n3;
        }
        function Yr(t3, e3) {
          var n3 = this.cache;
          n3[0] !== e3 && (t3.uniform1f(this.addr, e3), n3[0] = e3);
        }
        function Zr(t3, e3) {
          var n3 = this.cache;
          if (e3.x !== void 0)
            n3[0] === e3.x && n3[1] === e3.y || (t3.uniform2f(this.addr, e3.x, e3.y), n3[0] = e3.x, n3[1] = e3.y);
          else {
            if (Jr(n3, e3))
              return;
            t3.uniform2fv(this.addr, e3), qr(n3, e3);
          }
        }
        function $r(t3, e3) {
          var n3 = this.cache;
          if (e3.x !== void 0)
            n3[0] === e3.x && n3[1] === e3.y && n3[2] === e3.z || (t3.uniform3f(this.addr, e3.x, e3.y, e3.z), n3[0] = e3.x, n3[1] = e3.y, n3[2] = e3.z);
          else if (e3.r !== void 0)
            n3[0] === e3.r && n3[1] === e3.g && n3[2] === e3.b || (t3.uniform3f(this.addr, e3.r, e3.g, e3.b), n3[0] = e3.r, n3[1] = e3.g, n3[2] = e3.b);
          else {
            if (Jr(n3, e3))
              return;
            t3.uniform3fv(this.addr, e3), qr(n3, e3);
          }
        }
        function Kr(t3, e3) {
          var n3 = this.cache;
          if (e3.x !== void 0)
            n3[0] === e3.x && n3[1] === e3.y && n3[2] === e3.z && n3[3] === e3.w || (t3.uniform4f(this.addr, e3.x, e3.y, e3.z, e3.w), n3[0] = e3.x, n3[1] = e3.y, n3[2] = e3.z, n3[3] = e3.w);
          else {
            if (Jr(n3, e3))
              return;
            t3.uniform4fv(this.addr, e3), qr(n3, e3);
          }
        }
        function Qr(t3, e3) {
          var n3 = this.cache, i3 = e3.elements;
          if (i3 === void 0) {
            if (Jr(n3, e3))
              return;
            t3.uniformMatrix2fv(this.addr, false, e3), qr(n3, e3);
          } else {
            if (Jr(n3, i3))
              return;
            Hr.set(i3), t3.uniformMatrix2fv(this.addr, false, Hr), qr(n3, i3);
          }
        }
        function ta(t3, e3) {
          var n3 = this.cache, i3 = e3.elements;
          if (i3 === void 0) {
            if (Jr(n3, e3))
              return;
            t3.uniformMatrix3fv(this.addr, false, e3), qr(n3, e3);
          } else {
            if (Jr(n3, i3))
              return;
            Ur.set(i3), t3.uniformMatrix3fv(this.addr, false, Ur), qr(n3, i3);
          }
        }
        function ea(t3, e3) {
          var n3 = this.cache, i3 = e3.elements;
          if (i3 === void 0) {
            if (Jr(n3, e3))
              return;
            t3.uniformMatrix4fv(this.addr, false, e3), qr(n3, e3);
          } else {
            if (Jr(n3, i3))
              return;
            Gr.set(i3), t3.uniformMatrix4fv(this.addr, false, Gr), qr(n3, i3);
          }
        }
        function na(t3, e3, n3) {
          var i3 = this.cache, r3 = n3.allocateTextureUnit();
          i3[0] !== r3 && (t3.uniform1i(this.addr, r3), i3[0] = r3), n3.safeSetTexture2D(e3 || Br, r3);
        }
        function ia(t3, e3, n3) {
          var i3 = this.cache, r3 = n3.allocateTextureUnit();
          i3[0] !== r3 && (t3.uniform1i(this.addr, r3), i3[0] = r3), n3.setTexture2DArray(e3 || Nr, r3);
        }
        function ra(t3, e3, n3) {
          var i3 = this.cache, r3 = n3.allocateTextureUnit();
          i3[0] !== r3 && (t3.uniform1i(this.addr, r3), i3[0] = r3), n3.setTexture3D(e3 || Fr, r3);
        }
        function aa(t3, e3, n3) {
          var i3 = this.cache, r3 = n3.allocateTextureUnit();
          i3[0] !== r3 && (t3.uniform1i(this.addr, r3), i3[0] = r3), n3.safeSetTextureCube(e3 || jr, r3);
        }
        function oa(t3, e3) {
          var n3 = this.cache;
          n3[0] !== e3 && (t3.uniform1i(this.addr, e3), n3[0] = e3);
        }
        function sa(t3, e3) {
          var n3 = this.cache;
          Jr(n3, e3) || (t3.uniform2iv(this.addr, e3), qr(n3, e3));
        }
        function la(t3, e3) {
          var n3 = this.cache;
          Jr(n3, e3) || (t3.uniform3iv(this.addr, e3), qr(n3, e3));
        }
        function ca(t3, e3) {
          var n3 = this.cache;
          Jr(n3, e3) || (t3.uniform4iv(this.addr, e3), qr(n3, e3));
        }
        function ua(t3, e3) {
          var n3 = this.cache;
          n3[0] !== e3 && (t3.uniform1ui(this.addr, e3), n3[0] = e3);
        }
        function ha(t3, e3) {
          t3.uniform1fv(this.addr, e3);
        }
        function da(t3, e3) {
          t3.uniform1iv(this.addr, e3);
        }
        function pa(t3, e3) {
          t3.uniform2iv(this.addr, e3);
        }
        function fa(t3, e3) {
          t3.uniform3iv(this.addr, e3);
        }
        function ma(t3, e3) {
          t3.uniform4iv(this.addr, e3);
        }
        function ga(t3, e3) {
          var n3 = Wr(e3, this.size, 2);
          t3.uniform2fv(this.addr, n3);
        }
        function va(t3, e3) {
          var n3 = Wr(e3, this.size, 3);
          t3.uniform3fv(this.addr, n3);
        }
        function ya(t3, e3) {
          var n3 = Wr(e3, this.size, 4);
          t3.uniform4fv(this.addr, n3);
        }
        function xa(t3, e3) {
          var n3 = Wr(e3, this.size, 4);
          t3.uniformMatrix2fv(this.addr, false, n3);
        }
        function ba(t3, e3) {
          var n3 = Wr(e3, this.size, 9);
          t3.uniformMatrix3fv(this.addr, false, n3);
        }
        function wa(t3, e3) {
          var n3 = Wr(e3, this.size, 16);
          t3.uniformMatrix4fv(this.addr, false, n3);
        }
        function Ma(t3, e3, n3) {
          var i3 = e3.length, r3 = Xr(n3, i3);
          t3.uniform1iv(this.addr, r3);
          for (var a2 = 0; a2 !== i3; ++a2)
            n3.safeSetTexture2D(e3[a2] || Br, r3[a2]);
        }
        function _a(t3, e3, n3) {
          var i3 = e3.length, r3 = Xr(n3, i3);
          t3.uniform1iv(this.addr, r3);
          for (var a2 = 0; a2 !== i3; ++a2)
            n3.safeSetTextureCube(e3[a2] || jr, r3[a2]);
        }
        function Sa(t3, e3, n3) {
          this.id = t3, this.addr = n3, this.cache = [], this.setValue = function(t4) {
            switch (e3.type) {
              case 5126:
                return Yr;
              case 35664:
                return Zr;
              case 35665:
                return $r;
              case 35666:
                return Kr;
              case 35674:
                return Qr;
              case 35675:
                return ta;
              case 35676:
                return ea;
              case 5124:
              case 35670:
                return oa;
              case 35667:
              case 35671:
                return sa;
              case 35668:
              case 35672:
                return la;
              case 35669:
              case 35673:
                return ca;
              case 5125:
                return ua;
              case 35678:
              case 36198:
              case 36298:
              case 36306:
              case 35682:
                return na;
              case 35679:
              case 36299:
              case 36307:
                return ra;
              case 35680:
              case 36300:
              case 36308:
              case 36293:
                return aa;
              case 36289:
              case 36303:
              case 36311:
              case 36292:
                return ia;
            }
          }();
        }
        function Ca(t3, e3, n3) {
          this.id = t3, this.addr = n3, this.cache = [], this.size = e3.size, this.setValue = function(t4) {
            switch (e3.type) {
              case 5126:
                return ha;
              case 35664:
                return ga;
              case 35665:
                return va;
              case 35666:
                return ya;
              case 35674:
                return xa;
              case 35675:
                return ba;
              case 35676:
                return wa;
              case 5124:
              case 35670:
                return da;
              case 35667:
              case 35671:
                return pa;
              case 35668:
              case 35672:
                return fa;
              case 35669:
              case 35673:
                return ma;
              case 35678:
              case 36198:
              case 36298:
              case 36306:
              case 35682:
                return Ma;
              case 35680:
              case 36300:
              case 36308:
              case 36293:
                return _a;
            }
          }();
        }
        function Ta(t3) {
          this.id = t3, this.seq = [], this.map = {};
        }
        Ca.prototype.updateCache = function(t3) {
          var e3 = this.cache;
          t3 instanceof Float32Array && e3.length !== t3.length && (this.cache = new Float32Array(t3.length)), qr(e3, t3);
        }, Ta.prototype.setValue = function(t3, e3, n3) {
          for (var i3 = this.seq, r3 = 0, a2 = i3.length; r3 !== a2; ++r3) {
            var o2 = i3[r3];
            o2.setValue(t3, e3[o2.id], n3);
          }
        };
        var Ea = /([\w\d_]+)(\])?(\[|\.)?/g;
        function Da(t3, e3) {
          t3.seq.push(e3), t3.map[e3.id] = e3;
        }
        function Aa(t3, e3, n3) {
          var i3 = t3.name, r3 = i3.length;
          for (Ea.lastIndex = 0; ; ) {
            var a2 = Ea.exec(i3), o2 = Ea.lastIndex, s2 = a2[1], l2 = a2[2] === "]", c2 = a2[3];
            if (l2 && (s2 |= 0), c2 === void 0 || c2 === "[" && o2 + 2 === r3) {
              Da(n3, new (c2 === void 0 ? Sa : Ca)(s2, t3, e3));
              break;
            }
            var u2 = n3.map[s2];
            u2 === void 0 && Da(n3, u2 = new Ta(s2)), n3 = u2;
          }
        }
        function Oa(t3, e3) {
          this.seq = [], this.map = {};
          for (var n3 = t3.getProgramParameter(e3, 35718), i3 = 0; i3 < n3; ++i3) {
            var r3 = t3.getActiveUniform(e3, i3);
            Aa(r3, t3.getUniformLocation(e3, r3.name), this);
          }
        }
        function La(t3, e3, n3) {
          var i3 = t3.createShader(e3);
          return t3.shaderSource(i3, n3), t3.compileShader(i3), i3;
        }
        Oa.prototype.setValue = function(t3, e3, n3, i3) {
          var r3 = this.map[e3];
          r3 !== void 0 && r3.setValue(t3, n3, i3);
        }, Oa.prototype.setOptional = function(t3, e3, n3) {
          var i3 = e3[n3];
          i3 !== void 0 && this.setValue(t3, n3, i3);
        }, Oa.upload = function(t3, e3, n3, i3) {
          for (var r3 = 0, a2 = e3.length; r3 !== a2; ++r3) {
            var o2 = e3[r3], s2 = n3[o2.id];
            s2.needsUpdate !== false && o2.setValue(t3, s2.value, i3);
          }
        }, Oa.seqWithValue = function(t3, e3) {
          for (var n3 = [], i3 = 0, r3 = t3.length; i3 !== r3; ++i3) {
            var a2 = t3[i3];
            a2.id in e3 && n3.push(a2);
          }
          return n3;
        };
        var Ia = 0;
        function Pa(t3) {
          switch (t3) {
            case pe:
              return ["Linear", "( value )"];
            case fe:
              return ["sRGB", "( value )"];
            case ge:
              return ["RGBE", "( value )"];
            case ye:
              return ["RGBM", "( value, 7.0 )"];
            case xe:
              return ["RGBM", "( value, 16.0 )"];
            case be:
              return ["RGBD", "( value, 256.0 )"];
            case me:
              return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            case ve:
              return ["LogLuv", "( value )"];
            default:
              throw new Error("unsupported encoding: " + t3);
          }
        }
        function Ra(t3, e3, n3) {
          var i3 = t3.getShaderParameter(e3, 35713), r3 = t3.getShaderInfoLog(e3).trim();
          return i3 && r3 === "" ? "" : "THREE.WebGLShader: gl.getShaderInfoLog() " + n3 + "\n" + r3 + function(t4) {
            for (var e4 = t4.split("\n"), n4 = 0; n4 < e4.length; n4++)
              e4[n4] = n4 + 1 + ": " + e4[n4];
            return e4.join("\n");
          }(t3.getShaderSource(e3));
        }
        function ka(t3, e3) {
          var n3 = Pa(e3);
          return "vec4 " + t3 + "( vec4 value ) { return " + n3[0] + "ToLinear" + n3[1] + "; }";
        }
        function Ba(t3) {
          return t3 !== "";
        }
        function Na(t3, e3) {
          return t3.replace(/NUM_DIR_LIGHTS/g, e3.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e3.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e3.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e3.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e3.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e3.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e3.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e3.numPointLightShadows);
        }
        function Fa(t3, e3) {
          return t3.replace(/NUM_CLIPPING_PLANES/g, e3.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e3.numClippingPlanes - e3.numClipIntersection);
        }
        var ja = /^[ \t]*#include +<([\w\d./]+)>/gm;
        function Va(t3) {
          return t3.replace(ja, za);
        }
        function za(t3, e3) {
          var n3 = Ar[e3];
          if (n3 === void 0)
            throw new Error("Can not resolve #include <" + e3 + ">");
          return Va(n3);
        }
        var Ga = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
        function Ua(t3) {
          return t3.replace(Ga, Ha);
        }
        function Ha(t3, e3, n3, i3) {
          for (var r3 = "", a2 = parseInt(e3); a2 < parseInt(n3); a2++)
            r3 += i3.replace(/\[ i \]/g, "[ " + a2 + " ]").replace(/UNROLLED_LOOP_INDEX/g, a2);
          return r3;
        }
        function Wa(t3) {
          var e3 = "precision " + t3.precision + " float;\nprecision " + t3.precision + " int;";
          return t3.precision === "highp" ? e3 += "\n#define HIGH_PRECISION" : t3.precision === "mediump" ? e3 += "\n#define MEDIUM_PRECISION" : t3.precision === "lowp" && (e3 += "\n#define LOW_PRECISION"), e3;
        }
        function Ja(t3, e3, n3) {
          var i3 = [], s2 = n3.isWebGL2, u2 = n3.logarithmicDepthBuffer, h2 = n3.floatVertexTextures, d2 = n3.precision, p2 = n3.maxVertexUniforms, f2 = n3.vertexTextures, m2 = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "toon", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", MeshMatcapMaterial: "matcap", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" }, g2 = ["precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "numMultiviewViews", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV", "lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "numDirLightShadows", "numPointLightShadows", "numSpotLightShadows", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering", "sheen"];
          function v2(t4) {
            var e4;
            return t4 ? t4.isTexture ? e4 = t4.encoding : t4.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), e4 = t4.texture.encoding) : e4 = pe, e4;
          }
          this.getParameters = function(i4, r3, a2, o2, g3, y2, x2) {
            var b2 = o2.fog, w2 = i4.isMeshStandardMaterial ? o2.environment : null, M2 = i4.envMap || w2, _6 = m2[i4.type], S2 = x2.isSkinnedMesh ? function(t4) {
              var e4 = x2.skeleton.bones;
              if (h2)
                return 1024;
              var n4 = p2, i5 = Math.floor((n4 - 20) / 4), r4 = Math.min(i5, e4.length);
              return r4 < e4.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + e4.length + " bones. This GPU supports " + r4 + "."), 0) : r4;
            }() : 0;
            i4.precision !== null && (d2 = n3.getMaxPrecision(i4.precision)) !== i4.precision && console.warn("THREE.WebGLProgram.getParameters:", i4.precision, "not supported, using", d2, "instead.");
            var C2 = function(t4, e4) {
              var n4;
              if (_6) {
                var i5 = Or[_6];
                n4 = { name: t4.type, uniforms: pr.clone(i5.uniforms), vertexShader: i5.vertexShader, fragmentShader: i5.fragmentShader };
              } else
                n4 = { name: t4.type, uniforms: t4.uniforms, vertexShader: t4.vertexShader, fragmentShader: t4.fragmentShader };
              return n4;
            }(i4);
            i4.onBeforeCompile(C2, t3);
            var T2 = t3.getRenderTarget(), E2 = T2 && T2.isWebGLMultiviewRenderTarget ? T2.numViews : 0;
            return { isWebGL2: s2, shaderID: _6, shaderName: C2.name, uniforms: C2.uniforms, vertexShader: C2.vertexShader, fragmentShader: C2.fragmentShader, defines: i4.defines, isRawShaderMaterial: i4.isRawShaderMaterial, isShaderMaterial: i4.isShaderMaterial, precision: d2, instancing: x2.isInstancedMesh === true, supportsVertexTextures: f2, numMultiviewViews: E2, outputEncoding: T2 !== null ? v2(T2.texture) : t3.outputEncoding, map: !!i4.map, mapEncoding: v2(i4.map), matcap: !!i4.matcap, matcapEncoding: v2(i4.matcap), envMap: !!M2, envMapMode: M2 && M2.mapping, envMapEncoding: v2(M2), envMapCubeUV: !!M2 && (M2.mapping === nt || M2.mapping === it), lightMap: !!i4.lightMap, lightMapEncoding: v2(i4.lightMap), aoMap: !!i4.aoMap, emissiveMap: !!i4.emissiveMap, emissiveMapEncoding: v2(i4.emissiveMap), bumpMap: !!i4.bumpMap, normalMap: !!i4.normalMap, objectSpaceNormalMap: i4.normalMapType === Se, tangentSpaceNormalMap: i4.normalMapType === _e, clearcoatNormalMap: !!i4.clearcoatNormalMap, displacementMap: !!i4.displacementMap, roughnessMap: !!i4.roughnessMap, metalnessMap: !!i4.metalnessMap, specularMap: !!i4.specularMap, alphaMap: !!i4.alphaMap, gradientMap: !!i4.gradientMap, sheen: !!i4.sheen, combine: i4.combine, vertexTangents: i4.normalMap && i4.vertexTangents, vertexColors: i4.vertexColors, vertexUvs: !!(i4.map || i4.bumpMap || i4.normalMap || i4.specularMap || i4.alphaMap || i4.emissiveMap || i4.roughnessMap || i4.metalnessMap || i4.clearcoatNormalMap || i4.displacementMap), uvsVertexOnly: !(i4.map || i4.bumpMap || i4.normalMap || i4.specularMap || i4.alphaMap || i4.emissiveMap || i4.roughnessMap || i4.metalnessMap || i4.clearcoatNormalMap || !i4.displacementMap), fog: !!b2, useFog: i4.fog, fogExp2: b2 && b2.isFogExp2, flatShading: i4.flatShading, sizeAttenuation: i4.sizeAttenuation, logarithmicDepthBuffer: u2, skinning: i4.skinning && 0 < S2, maxBones: S2, useVertexTexture: h2, morphTargets: i4.morphTargets, morphNormals: i4.morphNormals, maxMorphTargets: t3.maxMorphTargets, maxMorphNormals: t3.maxMorphNormals, numDirLights: r3.directional.length, numPointLights: r3.point.length, numSpotLights: r3.spot.length, numRectAreaLights: r3.rectArea.length, numHemiLights: r3.hemi.length, numDirLightShadows: r3.directionalShadowMap.length, numPointLightShadows: r3.pointShadowMap.length, numSpotLightShadows: r3.spotShadowMap.length, numClippingPlanes: g3, numClipIntersection: y2, dithering: i4.dithering, shadowMapEnabled: t3.shadowMap.enabled && 0 < a2.length, shadowMapType: t3.shadowMap.type, toneMapping: i4.toneMapped ? t3.toneMapping : W, physicallyCorrectLights: t3.physicallyCorrectLights, premultipliedAlpha: i4.premultipliedAlpha, alphaTest: i4.alphaTest, doubleSided: i4.side === c, flipSided: i4.side === l, depthPacking: i4.depthPacking !== void 0 && i4.depthPacking, index0AttributeName: i4.index0AttributeName, extensionDerivatives: i4.extensions && i4.extensions.derivatives, extensionFragDepth: i4.extensions && i4.extensions.frawbuffers, extensionDrawbuffers: i4.extensions && i4.extensions.drawbuffers, extensionShaderTextureLOD: i4.extensions && i4.extensions.shaderTextureLOD, rendererExtensionFragDepth: s2 || e3.get("EXT_frag_depth") !== null, rendererExtensionDrawBuffers: s2 || e3.get("WEBGL_draw_buffers") !== null, rendererExtensionShaderTextureLod: s2 || e3.get("EXT_shader_texture_lod") !== null, onBeforeCompile: i4.onBeforeCompile };
          }, this.getProgramCacheKey = function(e4) {
            var n4 = [];
            if (e4.shaderID ? n4.push(e4.shaderID) : (n4.push(e4.fragmentShader), n4.push(e4.vertexShader)), e4.defines !== void 0)
              for (var i4 in e4.defines)
                n4.push(i4), n4.push(e4.defines[i4]);
            if (e4.isRawShaderMaterial === void 0) {
              for (var r3 = 0; r3 < g2.length; r3++)
                n4.push(e4[g2[r3]]);
              n4.push(t3.outputEncoding), n4.push(t3.gammaFactor);
            }
            return n4.push(e4.onBeforeCompile.toString()), n4.join();
          }, this.acquireProgram = function(e4, n4) {
            for (var s3, l2 = 0, c2 = i3.length; l2 < c2; l2++) {
              var u3 = i3[l2];
              if (u3.cacheKey === n4) {
                ++(s3 = u3).usedTimes;
                break;
              }
            }
            return s3 === void 0 && (s3 = new function(t4, e5, n5) {
              var i4, s4, l3, c3, u4, h3, d3, p3, f3 = t4.getContext(), m3 = n5.defines, g3 = n5.vertexShader, v3 = n5.fragmentShader, y2 = (s4 = "SHADOWMAP_TYPE_BASIC", (i4 = n5).shadowMapType === r2 ? s4 = "SHADOWMAP_TYPE_PCF" : i4.shadowMapType === a ? s4 = "SHADOWMAP_TYPE_PCF_SOFT" : i4.shadowMapType === o && (s4 = "SHADOWMAP_TYPE_VSM"), s4), x2 = function(t5) {
                var e6 = "ENVMAP_TYPE_CUBE";
                if (t5.envMap)
                  switch (t5.envMapMode) {
                    case $2:
                    case K:
                      e6 = "ENVMAP_TYPE_CUBE";
                      break;
                    case nt:
                    case it:
                      e6 = "ENVMAP_TYPE_CUBE_UV";
                      break;
                    case Q:
                    case tt:
                      e6 = "ENVMAP_TYPE_EQUIREC";
                      break;
                    case et:
                      e6 = "ENVMAP_TYPE_SPHERE";
                  }
                return e6;
              }(n5), b2 = function(t5) {
                var e6 = "ENVMAP_MODE_REFLECTION";
                if (t5.envMap)
                  switch (t5.envMapMode) {
                    case K:
                    case tt:
                      e6 = "ENVMAP_MODE_REFRACTION";
                  }
                return e6;
              }(n5), w2 = function(t5) {
                var e6 = "ENVMAP_BLENDING_NONE";
                if (t5.envMap)
                  switch (t5.combine) {
                    case G:
                      e6 = "ENVMAP_BLENDING_MULTIPLY";
                      break;
                    case U:
                      e6 = "ENVMAP_BLENDING_MIX";
                      break;
                    case H:
                      e6 = "ENVMAP_BLENDING_ADD";
                  }
                return e6;
              }(n5), M2 = 0 < t4.gammaFactor ? t4.gammaFactor : 1, _6 = n5.isWebGL2 ? "" : [(l3 = n5).extensionDerivatives || l3.envMapCubeUV || l3.bumpMap || l3.tangentSpaceNormalMap || l3.clearcoatNormalMap || l3.flatShading || l3.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "", (l3.extensionFragDepth || l3.logarithmicDepthBuffer) && l3.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", l3.extensionDrawBuffers && l3.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (l3.extensionShaderTextureLOD || l3.envMap) && l3.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Ba).join("\n"), S2 = function(t5) {
                var e6 = [];
                for (var n6 in t5) {
                  var i5 = t5[n6];
                  i5 !== false && e6.push("#define " + n6 + " " + i5);
                }
                return e6.join("\n");
              }(m3), C2 = f3.createProgram(), T2 = n5.numMultiviewViews;
              if (n5.isRawShaderMaterial ? (0 < (c3 = [S2].filter(Ba).join("\n")).length && (c3 += "\n"), 0 < (u4 = [_6, S2].filter(Ba).join("\n")).length && (u4 += "\n")) : (c3 = [Wa(n5), "#define SHADER_NAME " + n5.shaderName, S2, n5.instancing ? "#define USE_INSTANCING" : "", n5.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + M2, "#define MAX_BONES " + n5.maxBones, n5.useFog && n5.fog ? "#define USE_FOG" : "", n5.useFog && n5.fogExp2 ? "#define FOG_EXP2" : "", n5.map ? "#define USE_MAP" : "", n5.envMap ? "#define USE_ENVMAP" : "", n5.envMap ? "#define " + b2 : "", n5.lightMap ? "#define USE_LIGHTMAP" : "", n5.aoMap ? "#define USE_AOMAP" : "", n5.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n5.bumpMap ? "#define USE_BUMPMAP" : "", n5.normalMap ? "#define USE_NORMALMAP" : "", n5.normalMap && n5.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n5.normalMap && n5.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n5.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n5.displacementMap && n5.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", n5.specularMap ? "#define USE_SPECULARMAP" : "", n5.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n5.metalnessMap ? "#define USE_METALNESSMAP" : "", n5.alphaMap ? "#define USE_ALPHAMAP" : "", n5.vertexTangents ? "#define USE_TANGENT" : "", n5.vertexColors ? "#define USE_COLOR" : "", n5.vertexUvs ? "#define USE_UV" : "", n5.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n5.flatShading ? "#define FLAT_SHADED" : "", n5.skinning ? "#define USE_SKINNING" : "", n5.useVertexTexture ? "#define BONE_TEXTURE" : "", n5.morphTargets ? "#define USE_MORPHTARGETS" : "", n5.morphNormals && n5.flatShading === false ? "#define USE_MORPHNORMALS" : "", n5.doubleSided ? "#define DOUBLE_SIDED" : "", n5.flipSided ? "#define FLIP_SIDED" : "", n5.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n5.shadowMapEnabled ? "#define " + y2 : "", n5.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", n5.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n5.logarithmicDepthBuffer && n5.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", " attribute mat4 instanceMatrix;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "	attribute vec4 tangent;", "#endif", "#ifdef USE_COLOR", "	attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "	attribute vec3 morphTarget0;", "	attribute vec3 morphTarget1;", "	attribute vec3 morphTarget2;", "	attribute vec3 morphTarget3;", "	#ifdef USE_MORPHNORMALS", "		attribute vec3 morphNormal0;", "		attribute vec3 morphNormal1;", "		attribute vec3 morphNormal2;", "		attribute vec3 morphNormal3;", "	#else", "		attribute vec3 morphTarget4;", "		attribute vec3 morphTarget5;", "		attribute vec3 morphTarget6;", "		attribute vec3 morphTarget7;", "	#endif", "#endif", "#ifdef USE_SKINNING", "	attribute vec4 skinIndex;", "	attribute vec4 skinWeight;", "#endif", "\n"].filter(Ba).join("\n"), u4 = [_6, Wa(n5), "#define SHADER_NAME " + n5.shaderName, S2, n5.alphaTest ? "#define ALPHATEST " + n5.alphaTest + (n5.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + M2, n5.useFog && n5.fog ? "#define USE_FOG" : "", n5.useFog && n5.fogExp2 ? "#define FOG_EXP2" : "", n5.map ? "#define USE_MAP" : "", n5.matcap ? "#define USE_MATCAP" : "", n5.envMap ? "#define USE_ENVMAP" : "", n5.envMap ? "#define " + x2 : "", n5.envMap ? "#define " + b2 : "", n5.envMap ? "#define " + w2 : "", n5.lightMap ? "#define USE_LIGHTMAP" : "", n5.aoMap ? "#define USE_AOMAP" : "", n5.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n5.bumpMap ? "#define USE_BUMPMAP" : "", n5.normalMap ? "#define USE_NORMALMAP" : "", n5.normalMap && n5.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n5.normalMap && n5.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n5.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n5.specularMap ? "#define USE_SPECULARMAP" : "", n5.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n5.metalnessMap ? "#define USE_METALNESSMAP" : "", n5.alphaMap ? "#define USE_ALPHAMAP" : "", n5.sheen ? "#define USE_SHEEN" : "", n5.vertexTangents ? "#define USE_TANGENT" : "", n5.vertexColors ? "#define USE_COLOR" : "", n5.vertexUvs ? "#define USE_UV" : "", n5.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n5.gradientMap ? "#define USE_GRADIENTMAP" : "", n5.flatShading ? "#define FLAT_SHADED" : "", n5.doubleSided ? "#define DOUBLE_SIDED" : "", n5.flipSided ? "#define FLIP_SIDED" : "", n5.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n5.shadowMapEnabled ? "#define " + y2 : "", n5.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", n5.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", n5.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n5.logarithmicDepthBuffer && n5.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (n5.extensionShaderTextureLOD || n5.envMap) && n5.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", n5.toneMapping !== W ? "#define TONE_MAPPING" : "", n5.toneMapping !== W ? Ar.tonemapping_pars_fragment : "", n5.toneMapping !== W ? function(t5, e6) {
                var n6;
                switch (e6) {
                  case J:
                    n6 = "Linear";
                    break;
                  case q:
                    n6 = "Reinhard";
                    break;
                  case X:
                    n6 = "Uncharted2";
                    break;
                  case Y:
                    n6 = "OptimizedCineon";
                    break;
                  case Z:
                    n6 = "ACESFilmic";
                    break;
                  default:
                    throw new Error("unsupported toneMapping: " + e6);
                }
                return "vec3 toneMapping( vec3 color ) { return " + n6 + "ToneMapping( color ); }";
              }(0, n5.toneMapping) : "", n5.dithering ? "#define DITHERING" : "", n5.outputEncoding || n5.mapEncoding || n5.matcapEncoding || n5.envMapEncoding || n5.emissiveMapEncoding || n5.lightMapEncoding ? Ar.encodings_pars_fragment : "", n5.mapEncoding ? ka("mapTexelToLinear", n5.mapEncoding) : "", n5.matcapEncoding ? ka("matcapTexelToLinear", n5.matcapEncoding) : "", n5.envMapEncoding ? ka("envMapTexelToLinear", n5.envMapEncoding) : "", n5.emissiveMapEncoding ? ka("emissiveMapTexelToLinear", n5.emissiveMapEncoding) : "", n5.lightMapEncoding ? ka("lightMapTexelToLinear", n5.lightMapEncoding) : "", n5.outputEncoding ? (h3 = "linearToOutputTexel", d3 = n5.outputEncoding, p3 = Pa(d3), "vec4 " + h3 + "( vec4 value ) { return LinearTo" + p3[0] + p3[1] + "; }") : "", n5.depthPacking ? "#define DEPTH_PACKING " + n5.depthPacking : "", "\n"].filter(Ba).join("\n")), g3 = Fa(g3 = Na(g3 = Va(g3), n5), n5), v3 = Fa(v3 = Na(v3 = Va(v3), n5), n5), g3 = Ua(g3), v3 = Ua(v3), n5.isWebGL2 && !n5.isRawShaderMaterial) {
                var E2 = false, D2 = /^\s*#version\s+300\s+es\s*\n/;
                n5.isShaderMaterial && g3.match(D2) !== null && v3.match(D2) !== null && (E2 = true, g3 = g3.replace(D2, ""), v3 = v3.replace(D2, "")), c3 = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + c3, u4 = ["#version 300 es\n", "#define varying in", E2 ? "" : "out highp vec4 pc_fragColor;", E2 ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + u4, 0 < T2 && (c3 = (c3 = c3.replace("#version 300 es\n", ["#version 300 es\n", "#extension GL_OVR_multiview2 : require", "layout(num_views = " + T2 + ") in;", "#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace(["uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;"].join("\n"), ["uniform mat4 modelViewMatrices[" + T2 + "];", "uniform mat4 projectionMatrices[" + T2 + "];", "uniform mat4 viewMatrices[" + T2 + "];", "uniform mat3 normalMatrices[" + T2 + "];", "#define modelViewMatrix modelViewMatrices[VIEW_ID]", "#define projectionMatrix projectionMatrices[VIEW_ID]", "#define viewMatrix viewMatrices[VIEW_ID]", "#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")), u4 = (u4 = u4.replace("#version 300 es\n", ["#version 300 es\n", "#extension GL_OVR_multiview2 : require", "#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace("uniform mat4 viewMatrix;", ["uniform mat4 viewMatrices[" + T2 + "];", "#define viewMatrix viewMatrices[VIEW_ID]"].join("\n")));
              }
              var A2, O2, L2 = u4 + v3, I2 = La(f3, 35633, c3 + g3), P2 = La(f3, 35632, L2);
              if (f3.attachShader(C2, I2), f3.attachShader(C2, P2), n5.index0AttributeName !== void 0 ? f3.bindAttribLocation(C2, 0, n5.index0AttributeName) : n5.morphTargets === true && f3.bindAttribLocation(C2, 0, "position"), f3.linkProgram(C2), t4.debug.checkShaderErrors) {
                var R2 = f3.getProgramInfoLog(C2).trim(), k2 = f3.getShaderInfoLog(I2).trim(), B2 = f3.getShaderInfoLog(P2).trim(), N2 = true, F2 = true;
                if (f3.getProgramParameter(C2, 35714) === false) {
                  N2 = false;
                  var j2 = Ra(f3, I2, "vertex"), V2 = Ra(f3, P2, "fragment");
                  console.error("THREE.WebGLProgram: shader error: ", f3.getError(), "35715", f3.getProgramParameter(C2, 35715), "gl.getProgramInfoLog", R2, j2, V2);
                } else
                  R2 !== "" ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", R2) : k2 !== "" && B2 !== "" || (F2 = false);
                F2 && (this.diagnostics = { runnable: N2, programLog: R2, vertexShader: { log: k2, prefix: c3 }, fragmentShader: { log: B2, prefix: u4 } });
              }
              return f3.deleteShader(I2), f3.deleteShader(P2), this.getUniforms = function() {
                return A2 === void 0 && (A2 = new Oa(f3, C2)), A2;
              }, this.getAttributes = function() {
                return O2 === void 0 && (O2 = function(t5, e6) {
                  for (var n6 = {}, i5 = t5.getProgramParameter(e6, 35721), r3 = 0; r3 < i5; r3++) {
                    var a2 = t5.getActiveAttrib(e6, r3).name;
                    n6[a2] = t5.getAttribLocation(e6, a2);
                  }
                  return n6;
                }(f3, C2)), O2;
              }, this.destroy = function() {
                f3.deleteProgram(C2), this.program = void 0;
              }, this.name = n5.shaderName, this.id = Ia++, this.cacheKey = e5, this.usedTimes = 1, this.program = C2, this.vertexShader = I2, this.fragmentShader = P2, this.numMultiviewViews = T2, this;
            }(t3, n4, e4), i3.push(s3)), s3;
          }, this.releaseProgram = function(t4) {
            if (--t4.usedTimes == 0) {
              var e4 = i3.indexOf(t4);
              i3[e4] = i3[i3.length - 1], i3.pop(), t4.destroy();
            }
          }, this.programs = i3;
        }
        function qa(t3, e3) {
          return t3.groupOrder !== e3.groupOrder ? t3.groupOrder - e3.groupOrder : t3.renderOrder !== e3.renderOrder ? t3.renderOrder - e3.renderOrder : t3.program !== e3.program ? t3.program.id - e3.program.id : t3.material.id !== e3.material.id ? t3.material.id - e3.material.id : t3.z !== e3.z ? t3.z - e3.z : t3.id - e3.id;
        }
        function Xa(t3, e3) {
          return t3.groupOrder !== e3.groupOrder ? t3.groupOrder - e3.groupOrder : t3.renderOrder !== e3.renderOrder ? t3.renderOrder - e3.renderOrder : t3.z !== e3.z ? e3.z - t3.z : t3.id - e3.id;
        }
        function Ya() {
          var t3 = [], e3 = 0, n3 = [], i3 = [], r3 = { id: -1 };
          function a2(n4, i4, a3, o2, s2, l2) {
            var c2 = t3[e3];
            return c2 === void 0 ? (c2 = { id: n4.id, object: n4, geometry: i4, material: a3, program: a3.program || r3, groupOrder: o2, renderOrder: n4.renderOrder, z: s2, group: l2 }, t3[e3] = c2) : (c2.id = n4.id, c2.object = n4, c2.geometry = i4, c2.material = a3, c2.program = a3.program || r3, c2.groupOrder = o2, c2.renderOrder = n4.renderOrder, c2.z = s2, c2.group = l2), e3++, c2;
          }
          return { opaque: n3, transparent: i3, init: function() {
            e3 = 0, n3.length = 0, i3.length = 0;
          }, push: function(t4, e4, r4, o2, s2, l2) {
            var c2 = a2(t4, e4, r4, o2, s2, l2);
            (r4.transparent === true ? i3 : n3).push(c2);
          }, unshift: function(t4, e4, r4, o2, s2, l2) {
            var c2 = a2(t4, e4, r4, o2, s2, l2);
            (r4.transparent === true ? i3 : n3).unshift(c2);
          }, sort: function(t4, e4) {
            1 < n3.length && n3.sort(t4 || qa), 1 < i3.length && i3.sort(e4 || Xa);
          } };
        }
        var Za = 0;
        function $a(t3, e3) {
          return (e3.castShadow ? 1 : 0) - (t3.castShadow ? 1 : 0);
        }
        function Ka() {
          for (var t3 = new function() {
            var t4 = {};
            return { get: function(e4) {
              if (t4[e4.id] !== void 0)
                return t4[e4.id];
              var n4;
              switch (e4.type) {
                case "DirectionalLight":
                  n4 = { direction: new We(), color: new ci(), shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new Re() };
                  break;
                case "SpotLight":
                  n4 = { position: new We(), direction: new We(), color: new ci(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0, shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new Re() };
                  break;
                case "PointLight":
                  n4 = { position: new We(), color: new ci(), distance: 0, decay: 0, shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new Re(), shadowCameraNear: 1, shadowCameraFar: 1e3 };
                  break;
                case "HemisphereLight":
                  n4 = { direction: new We(), skyColor: new ci(), groundColor: new ci() };
                  break;
                case "RectAreaLight":
                  n4 = { color: new ci(), position: new We(), halfWidth: new We(), halfHeight: new We() };
              }
              return t4[e4.id] = n4;
            } };
          }(), e3 = { version: 0, hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1 }, ambient: [0, 0, 0], probe: [], directional: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotShadowMap: [], spotShadowMatrix: [], rectArea: [], point: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [], numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1 }, n3 = 0; n3 < 9; n3++)
            e3.probe.push(new We());
          var i3 = new We(), r3 = new Qe(), a2 = new Qe();
          return { setup: function(n4, o2, s2) {
            for (var l2 = 0, c2 = 0, u2 = 0, h2 = 0; h2 < 9; h2++)
              e3.probe[h2].set(0, 0, 0);
            var d2 = 0, p2 = 0, f2 = 0, m2 = 0, g2 = 0, v2 = 0, y2 = 0, x2 = 0, b2 = s2.matrixWorldInverse;
            n4.sort($a), h2 = 0;
            for (var w2 = n4.length; h2 < w2; h2++) {
              var M2 = n4[h2], _6 = M2.color, S2 = M2.intensity, C2 = M2.distance, T2 = M2.shadow && M2.shadow.map ? M2.shadow.map.texture : null;
              if (M2.isAmbientLight)
                l2 += _6.r * S2, c2 += _6.g * S2, u2 += _6.b * S2;
              else if (M2.isLightProbe)
                for (var E2 = 0; E2 < 9; E2++)
                  e3.probe[E2].addScaledVector(M2.sh.coefficients[E2], S2);
              else if (M2.isDirectionalLight) {
                if ((A2 = t3.get(M2)).color.copy(M2.color).multiplyScalar(M2.intensity), A2.direction.setFromMatrixPosition(M2.matrixWorld), i3.setFromMatrixPosition(M2.target.matrixWorld), A2.direction.sub(i3), A2.direction.transformDirection(b2), A2.shadow = M2.castShadow, M2.castShadow) {
                  var D2 = M2.shadow;
                  A2.shadowBias = D2.bias, A2.shadowRadius = D2.radius, A2.shadowMapSize = D2.mapSize, e3.directionalShadowMap[d2] = T2, e3.directionalShadowMatrix[d2] = M2.shadow.matrix, v2++;
                }
                e3.directional[d2] = A2, d2++;
              } else if (M2.isSpotLight)
                (A2 = t3.get(M2)).position.setFromMatrixPosition(M2.matrixWorld), A2.position.applyMatrix4(b2), A2.color.copy(_6).multiplyScalar(S2), A2.distance = C2, A2.direction.setFromMatrixPosition(M2.matrixWorld), i3.setFromMatrixPosition(M2.target.matrixWorld), A2.direction.sub(i3), A2.direction.transformDirection(b2), A2.coneCos = Math.cos(M2.angle), A2.penumbraCos = Math.cos(M2.angle * (1 - M2.penumbra)), A2.decay = M2.decay, A2.shadow = M2.castShadow, M2.castShadow && (D2 = M2.shadow, A2.shadowBias = D2.bias, A2.shadowRadius = D2.radius, A2.shadowMapSize = D2.mapSize, e3.spotShadowMap[f2] = T2, e3.spotShadowMatrix[f2] = M2.shadow.matrix, x2++), e3.spot[f2] = A2, f2++;
              else if (M2.isRectAreaLight)
                (A2 = t3.get(M2)).color.copy(_6).multiplyScalar(S2), A2.position.setFromMatrixPosition(M2.matrixWorld), A2.position.applyMatrix4(b2), a2.identity(), r3.copy(M2.matrixWorld), r3.premultiply(b2), a2.extractRotation(r3), A2.halfWidth.set(0.5 * M2.width, 0, 0), A2.halfHeight.set(0, 0.5 * M2.height, 0), A2.halfWidth.applyMatrix4(a2), A2.halfHeight.applyMatrix4(a2), e3.rectArea[m2] = A2, m2++;
              else if (M2.isPointLight)
                (A2 = t3.get(M2)).position.setFromMatrixPosition(M2.matrixWorld), A2.position.applyMatrix4(b2), A2.color.copy(M2.color).multiplyScalar(M2.intensity), A2.distance = M2.distance, A2.decay = M2.decay, A2.shadow = M2.castShadow, M2.castShadow && (D2 = M2.shadow, A2.shadowBias = D2.bias, A2.shadowRadius = D2.radius, A2.shadowMapSize = D2.mapSize, A2.shadowCameraNear = D2.camera.near, A2.shadowCameraFar = D2.camera.far, e3.pointShadowMap[p2] = T2, e3.pointShadowMatrix[p2] = M2.shadow.matrix, y2++), e3.point[p2] = A2, p2++;
              else if (M2.isHemisphereLight) {
                var A2;
                (A2 = t3.get(M2)).direction.setFromMatrixPosition(M2.matrixWorld), A2.direction.transformDirection(b2), A2.direction.normalize(), A2.skyColor.copy(M2.color).multiplyScalar(S2), A2.groundColor.copy(M2.groundColor).multiplyScalar(S2), e3.hemi[g2] = A2, g2++;
              }
            }
            e3.ambient[0] = l2, e3.ambient[1] = c2, e3.ambient[2] = u2;
            var O2 = e3.hash;
            O2.directionalLength === d2 && O2.pointLength === p2 && O2.spotLength === f2 && O2.rectAreaLength === m2 && O2.hemiLength === g2 && O2.numDirectionalShadows === v2 && O2.numPointShadows === y2 && O2.numSpotShadows === x2 || (e3.directional.length = d2, e3.spot.length = f2, e3.rectArea.length = m2, e3.point.length = p2, e3.hemi.length = g2, e3.directionalShadowMap.length = v2, e3.pointShadowMap.length = y2, e3.spotShadowMap.length = x2, e3.directionalShadowMatrix.length = v2, e3.pointShadowMatrix.length = y2, e3.spotShadowMatrix.length = x2, O2.directionalLength = d2, O2.pointLength = p2, O2.spotLength = f2, O2.rectAreaLength = m2, O2.hemiLength = g2, O2.numDirectionalShadows = v2, O2.numPointShadows = y2, O2.numSpotShadows = x2, e3.version = Za++);
          }, state: e3 };
        }
        function Qa() {
          var t3 = new Ka(), e3 = [], n3 = [];
          return { init: function() {
            e3.length = 0, n3.length = 0;
          }, state: { lightsArray: e3, shadowsArray: n3, lights: t3 }, setupLights: function(i3) {
            t3.setup(e3, n3, i3);
          }, pushLight: function(t4) {
            e3.push(t4);
          }, pushShadow: function(t4) {
            n3.push(t4);
          } };
        }
        function to(t3) {
          mi.call(this), this.type = "MeshDepthMaterial", this.depthPacking = we, this.skinning = false, this.morphTargets = false, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.setValues(t3);
        }
        function eo(t3) {
          mi.call(this), this.type = "MeshDistanceMaterial", this.referencePosition = new We(), this.nearDistance = 1, this.farDistance = 1e3, this.skinning = false, this.morphTargets = false, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = false, this.setValues(t3);
        }
        ((to.prototype = Object.create(mi.prototype)).constructor = to).prototype.isMeshDepthMaterial = true, to.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.depthPacking = t3.depthPacking, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.map = t3.map, this.alphaMap = t3.alphaMap, this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this;
        }, ((eo.prototype = Object.create(mi.prototype)).constructor = eo).prototype.isMeshDistanceMaterial = true, eo.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.referencePosition.copy(t3.referencePosition), this.nearDistance = t3.nearDistance, this.farDistance = t3.farDistance, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.map = t3.map, this.alphaMap = t3.alphaMap, this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this;
        };
        var no = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}", io = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
        function ro(t3, e3, n3) {
          var i3 = new Sr(), a2 = new Re(), u2 = new Re(), h2 = new je(), p2 = [], f2 = [], m2 = {}, g2 = { 0: l, 1: s, 2: c }, v2 = new gr({ defines: { SAMPLE_RATE: 0.25, HALF_SAMPLE_RATE: 1 / 8 }, uniforms: { shadow_pass: { value: null }, resolution: { value: new Re() }, radius: { value: 4 } }, vertexShader: io, fragmentShader: no }), y2 = v2.clone();
          y2.defines.HORIZONAL_PASS = 1;
          var x2 = new Ni();
          x2.setAttribute("position", new yi(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
          var b2 = new er(x2, v2), w2 = this;
          function M2(n4, i4) {
            var r3 = e3.update(b2);
            v2.uniforms.shadow_pass.value = n4.map.texture, v2.uniforms.resolution.value = n4.mapSize, v2.uniforms.radius.value = n4.radius, t3.setRenderTarget(n4.mapPass), t3.clear(), t3.renderBufferDirect(i4, null, r3, v2, b2, null), y2.uniforms.shadow_pass.value = n4.mapPass.texture, y2.uniforms.resolution.value = n4.mapSize, y2.uniforms.radius.value = n4.radius, t3.setRenderTarget(n4.map), t3.clear(), t3.renderBufferDirect(i4, null, r3, y2, b2, null);
          }
          function _6(t4, e4, n4) {
            var i4 = t4 << 0 | e4 << 1 | n4 << 2, r3 = p2[i4];
            return r3 === void 0 && (r3 = new to({ depthPacking: Me, morphTargets: t4, skinning: e4 }), p2[i4] = r3), r3;
          }
          function S2(t4, e4, n4) {
            var i4 = t4 << 0 | e4 << 1 | n4 << 2, r3 = f2[i4];
            return r3 === void 0 && (r3 = new eo({ morphTargets: t4, skinning: e4 }), f2[i4] = r3), r3;
          }
          function C2(e4, n4, i4, r3, a3, s2) {
            var l2 = e4.geometry, c2 = null, u3 = _6, h3 = e4.customDepthMaterial;
            if (i4.isPointLight === true && (u3 = S2, h3 = e4.customDistanceMaterial), h3 === void 0) {
              var d2 = false;
              n4.morphTargets === true && (l2.isBufferGeometry === true ? d2 = l2.morphAttributes && l2.morphAttributes.position && 0 < l2.morphAttributes.position.length : l2.isGeometry === true && (d2 = l2.morphTargets && 0 < l2.morphTargets.length));
              var p3 = false;
              e4.isSkinnedMesh === true && (n4.skinning === true ? p3 = true : console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", e4)), c2 = u3(d2, p3, e4.isInstancedMesh === true);
            } else
              c2 = h3;
            if (t3.localClippingEnabled && n4.clipShadows === true && n4.clippingPlanes.length !== 0) {
              var f3 = c2.uuid, v3 = n4.uuid, y3 = m2[f3];
              y3 === void 0 && (y3 = {}, m2[f3] = y3);
              var x3 = y3[v3];
              x3 === void 0 && (x3 = c2.clone(), y3[v3] = x3), c2 = x3;
            }
            return c2.visible = n4.visible, c2.wireframe = n4.wireframe, c2.side = s2 === o ? n4.shadowSide !== null ? n4.shadowSide : n4.side : n4.shadowSide !== null ? n4.shadowSide : g2[n4.side], c2.clipShadows = n4.clipShadows, c2.clippingPlanes = n4.clippingPlanes, c2.clipIntersection = n4.clipIntersection, c2.wireframeLinewidth = n4.wireframeLinewidth, c2.linewidth = n4.linewidth, i4.isPointLight === true && c2.isMeshDistanceMaterial === true && (c2.referencePosition.setFromMatrixPosition(i4.matrixWorld), c2.nearDistance = r3, c2.farDistance = a3), c2;
          }
          function T2(n4, r3, a3, s2, l2) {
            if (n4.visible !== false) {
              if (n4.layers.test(r3.layers) && (n4.isMesh || n4.isLine || n4.isPoints) && (n4.castShadow || n4.receiveShadow && l2 === o) && (!n4.frustumCulled || i3.intersectsObject(n4))) {
                n4.modelViewMatrix.multiplyMatrices(a3.matrixWorldInverse, n4.matrixWorld);
                var c2 = e3.update(n4), u3 = n4.material;
                if (Array.isArray(u3))
                  for (var h3 = c2.groups, d2 = 0, p3 = h3.length; d2 < p3; d2++) {
                    var f3 = h3[d2], m3 = u3[f3.materialIndex];
                    if (m3 && m3.visible) {
                      var g3 = C2(n4, m3, s2, a3.near, a3.far, l2);
                      t3.renderBufferDirect(a3, null, c2, g3, n4, f3);
                    }
                  }
                else
                  u3.visible && (g3 = C2(n4, u3, s2, a3.near, a3.far, l2), t3.renderBufferDirect(a3, null, c2, g3, n4, null));
              }
              for (var v3 = n4.children, y3 = 0, x3 = v3.length; y3 < x3; y3++)
                T2(v3[y3], r3, a3, s2, l2);
            }
          }
          this.enabled = false, this.autoUpdate = true, this.needsUpdate = false, this.type = r2, this.render = function(e4, r3, s2) {
            if (w2.enabled !== false && (w2.autoUpdate !== false || w2.needsUpdate !== false) && e4.length !== 0) {
              var l2 = t3.getRenderTarget(), c2 = t3.getActiveCubeFace(), p3 = t3.getActiveMipmapLevel(), f3 = t3.state;
              f3.setBlending(d), f3.buffers.color.setClear(1, 1, 1, 1), f3.buffers.depth.setTest(true), f3.setScissorTest(false);
              for (var m3 = 0, g3 = e4.length; m3 < g3; m3++) {
                var v3 = e4[m3], y3 = v3.shadow;
                if (y3 !== void 0) {
                  a2.copy(y3.mapSize);
                  var x3 = y3.getFrameExtents();
                  if (a2.multiply(x3), u2.copy(y3.mapSize), (a2.x > n3 || a2.y > n3) && (console.warn("THREE.WebGLShadowMap:", v3, "has shadow exceeding max texture size, reducing"), a2.x > n3 && (u2.x = Math.floor(n3 / x3.x), a2.x = u2.x * x3.x, y3.mapSize.x = u2.x), a2.y > n3 && (u2.y = Math.floor(n3 / x3.y), a2.y = u2.y * x3.y, y3.mapSize.y = u2.y)), y3.map === null && !y3.isPointLightShadow && this.type === o) {
                    var b3 = { minFilter: ut, magFilter: ut, format: Et };
                    y3.map = new Ve(a2.x, a2.y, b3), y3.map.texture.name = v3.name + ".shadowMap", y3.mapPass = new Ve(a2.x, a2.y, b3), y3.camera.updateProjectionMatrix();
                  }
                  y3.map === null && (b3 = { minFilter: st, magFilter: st, format: Et }, y3.map = new Ve(a2.x, a2.y, b3), y3.map.texture.name = v3.name + ".shadowMap", y3.camera.updateProjectionMatrix()), t3.setRenderTarget(y3.map), t3.clear();
                  for (var _7 = y3.getViewportCount(), S3 = 0; S3 < _7; S3++) {
                    var C3 = y3.getViewport(S3);
                    h2.set(u2.x * C3.x, u2.y * C3.y, u2.x * C3.z, u2.y * C3.w), f3.viewport(h2), y3.updateMatrices(v3, S3), i3 = y3.getFrustum(), T2(r3, s2, y3.camera, v3, this.type);
                  }
                  y3.isPointLightShadow || this.type !== o || M2(y3, s2);
                } else
                  console.warn("THREE.WebGLShadowMap:", v3, "has no shadow.");
              }
              w2.needsUpdate = false, t3.setRenderTarget(l2, c2, p3);
            }
          };
        }
        function ao(t3, r3, a2) {
          var o2 = a2.isWebGL2, s2 = new function() {
            var e3 = false, n3 = new je(), i3 = null, r4 = new je(0, 0, 0, 0);
            return { setMask: function(n4) {
              i3 === n4 || e3 || (t3.colorMask(n4, n4, n4, n4), i3 = n4);
            }, setLocked: function(t4) {
              e3 = t4;
            }, setClear: function(e4, i4, a3, o3, s3) {
              s3 === true && (e4 *= o3, i4 *= o3, a3 *= o3), n3.set(e4, i4, a3, o3), r4.equals(n3) === false && (t3.clearColor(e4, i4, a3, o3), r4.copy(n3));
            }, reset: function() {
              e3 = false, i3 = null, r4.set(-1, 0, 0, 0);
            } };
          }(), u2 = new function() {
            var e3 = false, n3 = null, i3 = null, r4 = null;
            return { setTest: function(t4) {
              (t4 ? xt2 : bt2)(2929);
            }, setMask: function(i4) {
              n3 === i4 || e3 || (t3.depthMask(i4), n3 = i4);
            }, setFunc: function(e4) {
              if (i3 !== e4) {
                if (e4)
                  switch (e4) {
                    case R:
                      t3.depthFunc(512);
                      break;
                    case k:
                      t3.depthFunc(519);
                      break;
                    case B:
                      t3.depthFunc(513);
                      break;
                    case N:
                      t3.depthFunc(515);
                      break;
                    case F:
                      t3.depthFunc(514);
                      break;
                    case j:
                      t3.depthFunc(518);
                      break;
                    case V:
                      t3.depthFunc(516);
                      break;
                    case z:
                      t3.depthFunc(517);
                      break;
                    default:
                      t3.depthFunc(515);
                  }
                else
                  t3.depthFunc(515);
                i3 = e4;
              }
            }, setLocked: function(t4) {
              e3 = t4;
            }, setClear: function(e4) {
              r4 !== e4 && (t3.clearDepth(e4), r4 = e4);
            }, reset: function() {
              e3 = false, r4 = i3 = n3 = null;
            } };
          }(), h2 = new function() {
            var e3 = false, n3 = null, i3 = null, r4 = null, a3 = null, o3 = null, s3 = null, l2 = null, c2 = null;
            return { setTest: function(t4) {
              e3 || (t4 ? xt2 : bt2)(2960);
            }, setMask: function(i4) {
              n3 === i4 || e3 || (t3.stencilMask(i4), n3 = i4);
            }, setFunc: function(e4, n4, o4) {
              i3 === e4 && r4 === n4 && a3 === o4 || (t3.stencilFunc(e4, n4, o4), i3 = e4, r4 = n4, a3 = o4);
            }, setOp: function(e4, n4, i4) {
              o3 === e4 && s3 === n4 && l2 === i4 || (t3.stencilOp(e4, n4, i4), o3 = e4, s3 = n4, l2 = i4);
            }, setLocked: function(t4) {
              e3 = t4;
            }, setClear: function(e4) {
              c2 !== e4 && (t3.clearStencil(e4), c2 = e4);
            }, reset: function() {
              e3 = false, c2 = l2 = s3 = o3 = a3 = r4 = i3 = n3 = null;
            } };
          }(), G2 = t3.getParameter(34921), U2 = new Uint8Array(G2), H2 = new Uint8Array(G2), W2 = new Uint8Array(G2), J2 = {}, q2 = null, X2 = null, Y2 = null, Z2 = null, $3 = null, K2 = null, Q2 = null, tt2 = null, et2 = null, nt2 = false, it2 = null, rt2 = null, at2 = null, ot2 = null, st2 = null, lt2 = t3.getParameter(35661), ct2 = false, ut2 = 0, ht2 = t3.getParameter(7938);
          ht2.indexOf("WebGL") !== -1 ? (ut2 = parseFloat(/^WebGL\ ([0-9])/.exec(ht2)[1]), ct2 = 1 <= ut2) : ht2.indexOf("OpenGL ES") !== -1 && (ut2 = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(ht2)[1]), ct2 = 2 <= ut2);
          var dt2 = null, pt2 = {}, ft2 = new je(), mt2 = new je();
          function gt2(e3, n3, i3) {
            var r4 = new Uint8Array(4), a3 = t3.createTexture();
            t3.bindTexture(e3, a3), t3.texParameteri(e3, 10241, 9728), t3.texParameteri(e3, 10240, 9728);
            for (var o3 = 0; o3 < i3; o3++)
              t3.texImage2D(n3 + o3, 0, 6408, 1, 1, 0, 6408, 5121, r4);
            return a3;
          }
          var vt2 = {};
          function yt2(e3, n3) {
            U2[e3] = 1, H2[e3] === 0 && (t3.enableVertexAttribArray(e3), H2[e3] = 1), W2[e3] !== n3 && ((o2 ? t3 : r3.get("ANGLE_instanced_arrays"))[o2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](e3, n3), W2[e3] = n3);
          }
          function xt2(e3) {
            J2[e3] !== true && (t3.enable(e3), J2[e3] = true);
          }
          function bt2(e3) {
            J2[e3] !== false && (t3.disable(e3), J2[e3] = false);
          }
          vt2[3553] = gt2(3553, 3553, 1), vt2[34067] = gt2(34067, 34069, 6), s2.setClear(0, 0, 0, 1), u2.setClear(1), h2.setClear(0), xt2(2929), u2.setFunc(N), Ct2(false), Tt2(n2), xt2(2884), St2(d);
          var wt2 = {};
          if (wt2[y] = 32774, wt2[x] = 32778, wt2[b] = 32779, o2)
            wt2[w] = 32775, wt2[M] = 32776;
          else {
            var Mt2 = r3.get("EXT_blend_minmax");
            Mt2 !== null && (wt2[w] = Mt2.MIN_EXT, wt2[M] = Mt2.MAX_EXT);
          }
          var _t2 = {};
          function St2(e3, n3, i3, r4, a3, o3, s3, l2) {
            if (e3 !== d) {
              if (X2 || (xt2(3042), X2 = true), e3 === v)
                a3 = a3 || n3, o3 = o3 || i3, s3 = s3 || r4, n3 === Z2 && a3 === Q2 || (t3.blendEquationSeparate(wt2[n3], wt2[a3]), Z2 = n3, Q2 = a3), i3 === $3 && r4 === K2 && o3 === tt2 && s3 === et2 || (t3.blendFuncSeparate(_t2[i3], _t2[r4], _t2[o3], _t2[s3]), $3 = i3, K2 = r4, tt2 = o3, et2 = s3), Y2 = e3, nt2 = null;
              else if (e3 !== Y2 || l2 !== nt2) {
                if (Z2 === y && Q2 === y || (t3.blendEquation(32774), Q2 = Z2 = y), l2)
                  switch (e3) {
                    case p:
                      t3.blendFuncSeparate(1, 771, 1, 771);
                      break;
                    case f:
                      t3.blendFunc(1, 1);
                      break;
                    case m:
                      t3.blendFuncSeparate(0, 0, 769, 771);
                      break;
                    case g:
                      t3.blendFuncSeparate(0, 768, 0, 770);
                      break;
                    default:
                      console.error("THREE.WebGLState: Invalid blending: ", e3);
                  }
                else
                  switch (e3) {
                    case p:
                      t3.blendFuncSeparate(770, 771, 1, 771);
                      break;
                    case f:
                      t3.blendFunc(770, 1);
                      break;
                    case m:
                      t3.blendFunc(0, 769);
                      break;
                    case g:
                      t3.blendFunc(0, 768);
                      break;
                    default:
                      console.error("THREE.WebGLState: Invalid blending: ", e3);
                  }
                et2 = tt2 = K2 = $3 = null, Y2 = e3, nt2 = l2;
              }
            } else
              X2 && (bt2(3042), X2 = false);
          }
          function Ct2(e3) {
            it2 !== e3 && (e3 ? t3.frontFace(2304) : t3.frontFace(2305), it2 = e3);
          }
          function Tt2(r4) {
            r4 !== e2 ? (xt2(2884), r4 !== rt2 && (r4 === n2 ? t3.cullFace(1029) : r4 === i2 ? t3.cullFace(1028) : t3.cullFace(1032))) : bt2(2884), rt2 = r4;
          }
          function Et2(e3, n3, i3) {
            e3 ? (xt2(32823), ot2 === n3 && st2 === i3 || (t3.polygonOffset(n3, i3), ot2 = n3, st2 = i3)) : bt2(32823);
          }
          function Dt2(e3) {
            e3 === void 0 && (e3 = 33984 + lt2 - 1), dt2 !== e3 && (t3.activeTexture(e3), dt2 = e3);
          }
          return _t2[_5] = 0, _t2[S] = 1, _t2[C] = 768, _t2[E] = 770, _t2[P] = 776, _t2[L] = 774, _t2[A] = 772, _t2[T] = 769, _t2[D] = 771, _t2[I] = 775, _t2[O] = 773, { buffers: { color: s2, depth: u2, stencil: h2 }, initAttributes: function() {
            for (var t4 = 0, e3 = U2.length; t4 < e3; t4++)
              U2[t4] = 0;
          }, enableAttribute: function(t4) {
            yt2(t4, 0);
          }, enableAttributeAndDivisor: yt2, disableUnusedAttributes: function() {
            for (var e3 = 0, n3 = H2.length; e3 !== n3; ++e3)
              H2[e3] !== U2[e3] && (t3.disableVertexAttribArray(e3), H2[e3] = 0);
          }, enable: xt2, disable: bt2, useProgram: function(e3) {
            return q2 !== e3 && (t3.useProgram(e3), q2 = e3, true);
          }, setBlending: St2, setMaterial: function(t4, e3) {
            (t4.side === c ? bt2 : xt2)(2884);
            var n3 = t4.side === l;
            e3 && (n3 = !n3), Ct2(n3), t4.blending === p && t4.transparent === false ? St2(d) : St2(t4.blending, t4.blendEquation, t4.blendSrc, t4.blendDst, t4.blendEquationAlpha, t4.blendSrcAlpha, t4.blendDstAlpha, t4.premultipliedAlpha), u2.setFunc(t4.depthFunc), u2.setTest(t4.depthTest), u2.setMask(t4.depthWrite), s2.setMask(t4.colorWrite);
            var i3 = t4.stencilWrite;
            h2.setTest(i3), i3 && (h2.setMask(t4.stencilWriteMask), h2.setFunc(t4.stencilFunc, t4.stencilRef, t4.stencilFuncMask), h2.setOp(t4.stencilFail, t4.stencilZFail, t4.stencilZPass)), Et2(t4.polygonOffset, t4.polygonOffsetFactor, t4.polygonOffsetUnits);
          }, setFlipSided: Ct2, setCullFace: Tt2, setLineWidth: function(e3) {
            e3 !== at2 && (ct2 && t3.lineWidth(e3), at2 = e3);
          }, setPolygonOffset: Et2, setScissorTest: function(t4) {
            (t4 ? xt2 : bt2)(3089);
          }, activeTexture: Dt2, bindTexture: function(e3, n3) {
            dt2 === null && Dt2();
            var i3 = pt2[dt2];
            i3 === void 0 && (i3 = { type: void 0, texture: void 0 }, pt2[dt2] = i3), i3.type === e3 && i3.texture === n3 || (t3.bindTexture(e3, n3 || vt2[e3]), i3.type = e3, i3.texture = n3);
          }, unbindTexture: function() {
            var e3 = pt2[dt2];
            e3 !== void 0 && e3.type !== void 0 && (t3.bindTexture(e3.type, null), e3.type = void 0, e3.texture = void 0);
          }, compressedTexImage2D: function() {
            try {
              t3.compressedTexImage2D.apply(t3, arguments);
            } catch (t4) {
              console.error("THREE.WebGLState:", t4);
            }
          }, texImage2D: function() {
            try {
              t3.texImage2D.apply(t3, arguments);
            } catch (t4) {
              console.error("THREE.WebGLState:", t4);
            }
          }, texImage3D: function() {
            try {
              t3.texImage3D.apply(t3, arguments);
            } catch (t4) {
              console.error("THREE.WebGLState:", t4);
            }
          }, scissor: function(e3) {
            ft2.equals(e3) === false && (t3.scissor(e3.x, e3.y, e3.z, e3.w), ft2.copy(e3));
          }, viewport: function(e3) {
            mt2.equals(e3) === false && (t3.viewport(e3.x, e3.y, e3.z, e3.w), mt2.copy(e3));
          }, reset: function() {
            for (var e3 = 0; e3 < H2.length; e3++)
              H2[e3] === 1 && (t3.disableVertexAttribArray(e3), H2[e3] = 0);
            J2 = {}, pt2 = {}, rt2 = it2 = Y2 = q2 = dt2 = null, s2.reset(), u2.reset(), h2.reset();
          } };
        }
        function oo(t3, e3, n3) {
          var i3 = n3.isWebGL2;
          return { convert: function(t4) {
            var n4;
            if (t4 === pt)
              return 5121;
            if (t4 === wt)
              return 32819;
            if (t4 === Mt)
              return 32820;
            if (t4 === _t)
              return 33635;
            if (t4 === ft)
              return 5120;
            if (t4 === mt)
              return 5122;
            if (t4 === gt)
              return 5123;
            if (t4 === vt)
              return 5124;
            if (t4 === yt)
              return 5125;
            if (t4 === xt)
              return 5126;
            if (t4 === bt)
              return i3 ? 5131 : (n4 = e3.get("OES_texture_half_float")) !== null ? n4.HALF_FLOAT_OES : null;
            if (t4 === Ct)
              return 6406;
            if (t4 === Tt)
              return 6407;
            if (t4 === Et)
              return 6408;
            if (t4 === Dt)
              return 6409;
            if (t4 === At)
              return 6410;
            if (t4 === Lt)
              return 6402;
            if (t4 === It)
              return 34041;
            if (t4 === Pt)
              return 6403;
            if (t4 === Rt)
              return 36244;
            if (t4 === kt)
              return 33319;
            if (t4 === Bt)
              return 33320;
            if (t4 === Nt)
              return 36248;
            if (t4 === Ft)
              return 36249;
            if (t4 === jt || t4 === Vt || t4 === zt || t4 === Gt) {
              if ((n4 = e3.get("WEBGL_compressed_texture_s3tc")) === null)
                return null;
              if (t4 === jt)
                return n4.COMPRESSED_RGB_S3TC_DXT1_EXT;
              if (t4 === Vt)
                return n4.COMPRESSED_RGBA_S3TC_DXT1_EXT;
              if (t4 === zt)
                return n4.COMPRESSED_RGBA_S3TC_DXT3_EXT;
              if (t4 === Gt)
                return n4.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            }
            if (t4 === Ut || t4 === Ht || t4 === Wt || t4 === Jt) {
              if ((n4 = e3.get("WEBGL_compressed_texture_pvrtc")) === null)
                return null;
              if (t4 === Ut)
                return n4.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
              if (t4 === Ht)
                return n4.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
              if (t4 === Wt)
                return n4.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
              if (t4 === Jt)
                return n4.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            }
            return t4 === qt ? (n4 = e3.get("WEBGL_compressed_texture_etc1")) !== null ? n4.COMPRESSED_RGB_ETC1_WEBGL : null : t4 === Xt || t4 === Yt || t4 === Zt || t4 === $t || t4 === Kt || t4 === Qt || t4 === te || t4 === ee || t4 === ne || t4 === ie || t4 === re || t4 === ae || t4 === oe || t4 === se ? (n4 = e3.get("WEBGL_compressed_texture_astc")) !== null ? t4 : null : t4 === St ? i3 ? 34042 : (n4 = e3.get("WEBGL_depth_texture")) !== null ? n4.UNSIGNED_INT_24_8_WEBGL : null : void 0;
          } };
        }
        function so(t3, e3, n3, i3) {
          Ve.call(this, t3, e3, i3), this.depthBuffer = false, this.stencilBuffer = false, this.numViews = n3;
        }
        function lo(t3) {
          yr.call(this), this.cameras = t3 || [];
        }
        function co() {
          yn.call(this), this.type = "Group";
        }
        function uo(t3, e3) {
          var n3 = this, i3 = null, r3 = null, a2 = "local-floor", o2 = null, s2 = [], l2 = /* @__PURE__ */ new Map(), c2 = new yr();
          c2.layers.enable(1), c2.viewport = new je();
          var u2 = new yr();
          u2.layers.enable(2), u2.viewport = new je();
          var h2 = new lo([c2, u2]);
          h2.layers.enable(1), h2.layers.enable(2);
          var d2 = null, p2 = null;
          function f2(t4) {
            var e4 = l2.get(t4.inputSource);
            e4 && (e4.targetRay && e4.targetRay.dispatchEvent({ type: t4.type }), e4.grip && e4.grip.dispatchEvent({ type: t4.type }));
          }
          function m2() {
            l2.forEach(function(t4, e4) {
              t4.targetRay && (t4.targetRay.dispatchEvent({ type: "disconnected", data: e4 }), t4.targetRay.visible = false), t4.grip && (t4.grip.dispatchEvent({ type: "disconnected", data: e4 }), t4.grip.visible = false);
            }), l2.clear(), t3.setFramebuffer(null), t3.setRenderTarget(t3.getRenderTarget()), M2.stop(), n3.isPresenting = false, n3.dispatchEvent({ type: "sessionend" });
          }
          function g2(t4) {
            r3 = t4, M2.setContext(i3), M2.start(), n3.isPresenting = true, n3.dispatchEvent({ type: "sessionstart" });
          }
          function v2(t4) {
            for (var e4 = i3.inputSources, n4 = 0; n4 < s2.length; n4++)
              l2.set(e4[n4], s2[n4]);
            for (n4 = 0; n4 < t4.removed.length; n4++) {
              var r4 = t4.removed[n4];
              (a3 = l2.get(r4)) && (a3.targetRay && a3.targetRay.dispatchEvent({ type: "disconnected", data: r4 }), a3.grip && a3.grip.dispatchEvent({ type: "disconnected", data: r4 }), l2.delete(r4));
            }
            for (n4 = 0; n4 < t4.added.length; n4++) {
              var a3;
              r4 = t4.added[n4], (a3 = l2.get(r4)) && (a3.targetRay && a3.targetRay.dispatchEvent({ type: "connected", data: r4 }), a3.grip && a3.grip.dispatchEvent({ type: "connected", data: r4 }));
            }
          }
          this.enabled = false, this.isPresenting = false, this.getController = function(t4) {
            var e4 = s2[t4];
            return e4 === void 0 && (e4 = {}, s2[t4] = e4), e4.targetRay === void 0 && (e4.targetRay = new co(), e4.targetRay.matrixAutoUpdate = false, e4.targetRay.visible = false), e4.targetRay;
          }, this.getControllerGrip = function(t4) {
            var e4 = s2[t4];
            return e4 === void 0 && (e4 = {}, s2[t4] = e4), e4.grip === void 0 && (e4.grip = new co(), e4.grip.matrixAutoUpdate = false, e4.grip.visible = false), e4.grip;
          }, this.setFramebufferScaleFactor = function() {
          }, this.setReferenceSpaceType = function(t4) {
            a2 = t4;
          }, this.getReferenceSpace = function() {
            return r3;
          }, this.getSession = function() {
            return i3;
          }, this.setSession = function(t4) {
            if ((i3 = t4) !== null) {
              i3.addEventListener("select", f2), i3.addEventListener("selectstart", f2), i3.addEventListener("selectend", f2), i3.addEventListener("squeeze", f2), i3.addEventListener("squeezestart", f2), i3.addEventListener("squeezeend", f2), i3.addEventListener("end", m2);
              var n4 = e3.getContextAttributes(), r4 = { antialias: n4.antialias, alpha: n4.alpha, depth: n4.depth, stencil: n4.stencil }, o3 = new XRWebGLLayer(i3, e3, r4);
              i3.updateRenderState({ baseLayer: o3 }), i3.requestReferenceSpace(a2).then(g2), i3.addEventListener("inputsourceschange", v2);
            }
          };
          var y2 = new We(), x2 = new We();
          function b2(t4, e4) {
            e4 === null ? t4.matrixWorld.copy(t4.matrix) : t4.matrixWorld.multiplyMatrices(e4.matrixWorld, t4.matrix), t4.matrixWorldInverse.getInverse(t4.matrixWorld);
          }
          this.getCamera = function(t4) {
            h2.near = u2.near = c2.near = t4.near, h2.far = u2.far = c2.far = t4.far, d2 === h2.near && p2 === h2.far || (i3.updateRenderState({ depthNear: h2.near, depthFar: h2.far }), d2 = h2.near, p2 = h2.far);
            var e4 = t4.parent, n4 = h2.cameras;
            b2(h2, e4);
            for (var r4 = 0; r4 < n4.length; r4++)
              b2(n4[r4], e4);
            t4.matrixWorld.copy(h2.matrixWorld);
            for (var a3 = t4.children, o3 = (r4 = 0, a3.length); r4 < o3; r4++)
              a3[r4].updateMatrixWorld(true);
            return function(t5, e5, n5) {
              y2.setFromMatrixPosition(e5.matrixWorld), x2.setFromMatrixPosition(n5.matrixWorld);
              var i4 = y2.distanceTo(x2), r5 = e5.projectionMatrix.elements, a4 = n5.projectionMatrix.elements, o4 = r5[14] / (r5[10] - 1), s3 = r5[14] / (r5[10] + 1), l3 = (r5[9] + 1) / r5[5], c3 = (r5[9] - 1) / r5[5], u3 = (r5[8] - 1) / r5[0], h3 = (a4[8] + 1) / a4[0], d3 = o4 * u3, p3 = o4 * h3, f3 = i4 / (h3 - u3), m3 = f3 * -u3;
              e5.matrixWorld.decompose(t5.position, t5.quaternion, t5.scale), t5.translateX(m3), t5.translateZ(f3), t5.matrixWorld.compose(t5.position, t5.quaternion, t5.scale), t5.matrixWorldInverse.getInverse(t5.matrixWorld);
              var g3 = o4 + f3, v3 = s3 + f3, b3 = d3 - m3, w3 = i4 - m3 + p3, M3 = l3 * s3 / v3 * g3, _6 = c3 * s3 / v3 * g3;
              t5.projectionMatrix.makePerspective(b3, w3, M3, _6, g3, v3);
            }(h2, c2, u2), h2;
          };
          var w2 = null, M2 = new Tr();
          M2.setAnimationLoop(function(e4, n4) {
            if ((o2 = n4.getViewerPose(r3)) !== null) {
              var a3 = o2.views, l3 = i3.renderState.baseLayer;
              t3.setFramebuffer(l3.framebuffer);
              for (var c3 = 0; c3 < a3.length; c3++) {
                var u3 = a3[c3], d3 = l3.getViewport(u3), p3 = h2.cameras[c3];
                p3.matrix.fromArray(u3.transform.matrix), p3.projectionMatrix.fromArray(u3.projectionMatrix), p3.viewport.set(d3.x, d3.y, d3.width, d3.height), c3 === 0 && h2.matrix.copy(p3.matrix);
              }
            }
            var f3 = i3.inputSources;
            for (c3 = 0; c3 < s2.length; c3++) {
              var m3 = s2[c3], g3 = f3[c3], v3 = null, y3 = null;
              g3 && (m3.targetRay && (v3 = n4.getPose(g3.targetRaySpace, r3)) !== null && (m3.targetRay.matrix.fromArray(v3.transform.matrix), m3.targetRay.matrix.decompose(m3.targetRay.position, m3.targetRay.rotation, m3.targetRay.scale)), m3.grip && g3.gripSpace && (y3 = n4.getPose(g3.gripSpace, r3)) !== null && (m3.grip.matrix.fromArray(y3.transform.matrix), m3.grip.matrix.decompose(m3.grip.position, m3.grip.rotation, m3.grip.scale))), m3.targetRay && (m3.targetRay.visible = v3 !== null), m3.grip && (m3.grip.visible = y3 !== null);
            }
            w2 && w2(e4, n4);
          }), this.setAnimationLoop = function(t4) {
            w2 = t4;
          }, this.dispose = function() {
          };
        }
        function ho(t3) {
          var e3 = (t3 = t3 || {}).canvas !== void 0 ? t3.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), n3 = t3.context !== void 0 ? t3.context : null, i3 = t3.alpha !== void 0 && t3.alpha, r3 = t3.depth === void 0 || t3.depth, a2 = t3.stencil === void 0 || t3.stencil, o2 = t3.antialias !== void 0 && t3.antialias, s2 = t3.premultipliedAlpha === void 0 || t3.premultipliedAlpha, c2 = t3.preserveDrawingBuffer !== void 0 && t3.preserveDrawingBuffer, u2 = t3.powerPreference !== void 0 ? t3.powerPreference : "default", h2 = t3.failIfMajorPerformanceCaveat !== void 0 && t3.failIfMajorPerformanceCaveat, d2 = null, p2 = null;
          this.domElement = e3, this.debug = { checkShaderErrors: true }, this.autoClear = true, this.autoClearColor = true, this.autoClearDepth = true, this.autoClearStencil = true, this.sortObjects = true, this.clippingPlanes = [], this.localClippingEnabled = false, this.gammaFactor = 2, this.outputEncoding = pe, this.physicallyCorrectLights = false, this.toneMapping = J, this.toneMappingExposure = 1, this.toneMappingWhitePoint = 1, this.maxMorphTargets = 8, this.maxMorphNormals = 4;
          var f2, m2, g2, v2, y2, x2, b2, w2, M2, _6, S2, C2, T2, E2, D2, A2, O2, L2, I2 = this, P2 = false, R2 = null, k2 = 0, B2 = 0, N2 = null, F2 = null, j2 = -1, V2 = { geometry: null, program: null, wireframe: false }, z2 = null, G2 = null, U2 = new je(), H2 = new je(), W2 = null, q2 = e3.width, X2 = e3.height, Y2 = 1, Z2 = null, $3 = null, K2 = new je(0, 0, q2, X2), Q2 = new je(0, 0, q2, X2), tt2 = false, et2 = new Sr(), nt2 = new function() {
            var t4 = this, e4 = null, n4 = 0, i4 = false, r4 = false, a3 = new Xn(), o3 = new ke(), s3 = { value: null, needsUpdate: false };
            function l2() {
              s3.value !== e4 && (s3.value = e4, s3.needsUpdate = 0 < n4), t4.numPlanes = n4, t4.numIntersection = 0;
            }
            function c3(e5, n5, i5, r5) {
              var l3 = e5 !== null ? e5.length : 0, c4 = null;
              if (l3 !== 0) {
                if (c4 = s3.value, r5 !== true || c4 === null) {
                  var u3 = i5 + 4 * l3, h3 = n5.matrixWorldInverse;
                  o3.getNormalMatrix(h3), (c4 === null || c4.length < u3) && (c4 = new Float32Array(u3));
                  for (var d3 = 0, p3 = i5; d3 !== l3; ++d3, p3 += 4)
                    a3.copy(e5[d3]).applyMatrix4(h3, o3), a3.normal.toArray(c4, p3), c4[p3 + 3] = a3.constant;
                }
                s3.value = c4, s3.needsUpdate = true;
              }
              return t4.numPlanes = l3, c4;
            }
            this.uniform = s3, this.numPlanes = 0, this.numIntersection = 0, this.init = function(t5, r5, a4) {
              var o4 = t5.length !== 0 || r5 || n4 !== 0 || i4;
              return i4 = r5, e4 = c3(t5, a4, 0), n4 = t5.length, o4;
            }, this.beginShadows = function() {
              r4 = true, c3(null);
            }, this.endShadows = function() {
              r4 = false, l2();
            }, this.setState = function(t5, a4, o4, u3, h3, d3) {
              if (!i4 || t5 === null || t5.length === 0 || r4 && !o4)
                r4 ? c3(null) : l2();
              else {
                var p3 = r4 ? 0 : n4, f3 = 4 * p3, m3 = h3.clippingState || null;
                s3.value = m3, m3 = c3(t5, u3, f3, d3);
                for (var g3 = 0; g3 !== f3; ++g3)
                  m3[g3] = e4[g3];
                h3.clippingState = m3, this.numIntersection = a4 ? this.numPlanes : 0, this.numPlanes += p3;
              }
            };
          }(), it2 = false, ft2 = false, mt2 = new Qe(), vt2 = new We();
          function wt2() {
            return N2 === null ? Y2 : 1;
          }
          try {
            var Mt2 = { alpha: i3, depth: r3, stencil: a2, antialias: o2, premultipliedAlpha: s2, preserveDrawingBuffer: c2, powerPreference: u2, failIfMajorPerformanceCaveat: h2, xrCompatible: true };
            e3.addEventListener("webglcontextlost", Pt2, false), e3.addEventListener("webglcontextrestored", Rt2, false);
            var _t2 = "webgl";
            if (t3.webgl2 === true && (_t2 = "webgl2"), (f2 = n3 || e3.getContext(_t2, Mt2) || e3.getContext("experimental-webgl", Mt2)) === null)
              throw e3.getContext("webgl") !== null ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            t3.retver = _t2, f2.getShaderPrecisionFormat === void 0 && (f2.getShaderPrecisionFormat = function() {
              return { rangeMin: 1, rangeMax: 1, precision: 1 };
            });
          } catch (t4) {
            throw console.error("THREE.WebGLRenderer: " + t4.message), t4;
          }
          function Ct2() {
            m2 = new function(t4) {
              var e4 = {};
              return { get: function(n4) {
                if (e4[n4] !== void 0)
                  return e4[n4];
                var i4;
                switch (n4) {
                  case "WEBGL_depth_texture":
                    i4 = t4.getExtension("WEBGL_depth_texture") || t4.getExtension("MOZ_WEBGL_depth_texture") || t4.getExtension("WEBKIT_WEBGL_depth_texture");
                    break;
                  case "EXT_texture_filter_anisotropic":
                    i4 = t4.getExtension("EXT_texture_filter_anisotropic") || t4.getExtension("MOZ_EXT_texture_filter_anisotropic") || t4.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                    break;
                  case "WEBGL_compressed_texture_s3tc":
                    i4 = t4.getExtension("WEBGL_compressed_texture_s3tc") || t4.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t4.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                    break;
                  case "WEBGL_compressed_texture_pvrtc":
                    i4 = t4.getExtension("WEBGL_compressed_texture_pvrtc") || t4.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                    break;
                  default:
                    i4 = t4.getExtension(n4);
                }
                return i4 === null && console.warn("THREE.WebGLRenderer: " + n4 + " extension not supported."), e4[n4] = i4;
              } };
            }(f2), (g2 = new function(t4, e4, n4) {
              var i4;
              function r4(e5) {
                if (e5 === "highp") {
                  if (0 < t4.getShaderPrecisionFormat(35633, 36338).precision && 0 < t4.getShaderPrecisionFormat(35632, 36338).precision)
                    return "highp";
                  e5 = "mediump";
                }
                return e5 === "mediump" && 0 < t4.getShaderPrecisionFormat(35633, 36337).precision && 0 < t4.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
              }
              var a3 = typeof WebGL2RenderingContext != "undefined" && t4 instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext != "undefined" && t4 instanceof WebGL2ComputeRenderingContext, o3 = n4.precision !== void 0 ? n4.precision : "highp", s3 = r4(o3);
              s3 !== o3 && (console.warn("THREE.WebGLRenderer:", o3, "not supported, using", s3, "instead."), o3 = s3);
              var l2 = n4.logarithmicDepthBuffer === true, c3 = t4.getParameter(34930), u3 = t4.getParameter(35660), h3 = t4.getParameter(3379), d3 = t4.getParameter(34076), p3 = t4.getParameter(34921), f3 = t4.getParameter(36347), m3 = t4.getParameter(36348), g3 = t4.getParameter(36349), v3 = 0 < u3, y3 = a3 || !!e4.get("OES_texture_float");
              return { isWebGL2: a3, getMaxAnisotropy: function() {
                if (i4 !== void 0)
                  return i4;
                var n5 = e4.get("EXT_texture_filter_anisotropic");
                return i4 = n5 !== null ? t4.getParameter(n5.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
              }, getMaxPrecision: r4, precision: o3, logarithmicDepthBuffer: l2, maxTextures: c3, maxVertexTextures: u3, maxTextureSize: h3, maxCubemapSize: d3, maxAttributes: p3, maxVertexUniforms: f3, maxVaryings: m3, maxFragmentUniforms: g3, vertexTextures: v3, floatFragmentTextures: y3, floatVertexTextures: v3 && y3, maxSamples: a3 ? t4.getParameter(36183) : 0 };
            }(f2, m2, t3)).isWebGL2 === false && (m2.get("WEBGL_depth_texture"), m2.get("OES_texture_float"), m2.get("OES_texture_half_float"), m2.get("OES_texture_half_float_linear"), m2.get("OES_standard_derivatives"), m2.get("OES_element_index_uint"), m2.get("ANGLE_instanced_arrays")), m2.get("OES_texture_float_linear"), L2 = new oo(0, m2, g2), (v2 = new ao(f2, m2, g2)).scissor(H2.copy(Q2).multiplyScalar(Y2).floor()), v2.viewport(U2.copy(K2).multiplyScalar(Y2).floor()), y2 = new function(t4) {
              var e4 = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
              return { memory: { geometries: 0, textures: 0 }, render: e4, programs: null, autoReset: true, reset: function() {
                e4.frame++, e4.calls = 0, e4.triangles = 0, e4.points = 0, e4.lines = 0;
              }, update: function(t5, n4, i4) {
                switch (i4 = i4 || 1, e4.calls++, n4) {
                  case 4:
                    e4.triangles += i4 * (t5 / 3);
                    break;
                  case 1:
                    e4.lines += i4 * (t5 / 2);
                    break;
                  case 3:
                    e4.lines += i4 * (t5 - 1);
                    break;
                  case 2:
                    e4.lines += i4 * t5;
                    break;
                  case 0:
                    e4.points += i4 * t5;
                    break;
                  default:
                    console.error("THREE.WebGLInfo: Unknown draw mode:", n4);
                }
              } };
            }(), x2 = new function() {
              var t4 = /* @__PURE__ */ new WeakMap();
              return { get: function(e4) {
                var n4 = t4.get(e4);
                return n4 === void 0 && (n4 = {}, t4.set(e4, n4)), n4;
              }, remove: function(e4) {
                t4.delete(e4);
              }, update: function(e4, n4, i4) {
                t4.get(e4)[n4] = i4;
              }, dispose: function() {
                t4 = /* @__PURE__ */ new WeakMap();
              } };
            }(), b2 = new function(t4, e4, n4, i4, r4, a3, o3) {
              var s3, l2 = r4.isWebGL2, c3 = r4.maxTextures, u3 = r4.maxCubemapSize, h3 = r4.maxTextureSize, d3 = r4.maxSamples, p3 = /* @__PURE__ */ new WeakMap(), f3 = false;
              try {
                f3 = typeof OffscreenCanvas != "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
              } catch (t5) {
              }
              function m3(t5, e5) {
                return f3 ? new OffscreenCanvas(t5, e5) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
              }
              function g3(t5, e5, n5, i5) {
                var r5 = 1;
                if ((t5.width > i5 || t5.height > i5) && (r5 = i5 / Math.max(t5.width, t5.height)), r5 < 1 || e5 === true) {
                  if (typeof HTMLImageElement != "undefined" && t5 instanceof HTMLImageElement || typeof HTMLCanvasElement != "undefined" && t5 instanceof HTMLCanvasElement || typeof ImageBitmap != "undefined" && t5 instanceof ImageBitmap) {
                    var a4 = e5 ? Pe.floorPowerOfTwo : Math.floor, o4 = a4(r5 * t5.width), l3 = a4(r5 * t5.height);
                    s3 === void 0 && (s3 = m3(o4, l3));
                    var c4 = n5 ? m3(o4, l3) : s3;
                    return c4.width = o4, c4.height = l3, c4.getContext("2d").drawImage(t5, 0, 0, o4, l3), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + t5.width + "x" + t5.height + ") to (" + o4 + "x" + l3 + ")."), c4;
                  }
                  return "data" in t5 && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + t5.width + "x" + t5.height + ")."), t5;
                }
                return t5;
              }
              function v3(t5) {
                return Pe.isPowerOfTwo(t5.width) && Pe.isPowerOfTwo(t5.height);
              }
              function y3(t5, e5) {
                return t5.generateMipmaps && e5 && t5.minFilter !== st && t5.minFilter !== ut;
              }
              function x3(e5, n5, r5, a4) {
                t4.generateMipmap(e5), i4.get(n5).__maxMipLevel = Math.log(Math.max(r5, a4)) * Math.LOG2E;
              }
              function b3(n5, i5, r5) {
                if (l2 === false)
                  return i5;
                if (n5 !== null) {
                  if (t4[n5] !== void 0)
                    return t4[n5];
                  console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n5 + "'");
                }
                var a4 = i5;
                return i5 === 6403 && (r5 === 5126 && (a4 = 33326), r5 === 5131 && (a4 = 33325), r5 === 5121 && (a4 = 33321)), i5 === 6407 && (r5 === 5126 && (a4 = 34837), r5 === 5131 && (a4 = 34843), r5 === 5121 && (a4 = 32849)), i5 === 6408 && (r5 === 5126 && (a4 = 34836), r5 === 5131 && (a4 = 34842), r5 === 5121 && (a4 = 32856)), a4 === 33325 || a4 === 33326 || a4 === 34842 || a4 === 34836 ? e4.get("EXT_color_buffer_float") : a4 !== 34843 && a4 !== 34837 || console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."), a4;
              }
              function w3(t5) {
                return t5 === st || t5 === lt || t5 === ct ? 9728 : 9729;
              }
              function M3(e5) {
                var n5 = e5.target;
                n5.removeEventListener("dispose", M3), function(e6) {
                  var n6 = i4.get(e6);
                  n6.__webglInit !== void 0 && (t4.deleteTexture(n6.__webglTexture), i4.remove(e6));
                }(n5), n5.isVideoTexture && p3.delete(n5), o3.memory.textures--;
              }
              function _7(e5) {
                var n5 = e5.target;
                n5.removeEventListener("dispose", _7), function(e6) {
                  var n6 = i4.get(e6), r5 = i4.get(e6.texture);
                  if (e6) {
                    if (r5.__webglTexture !== void 0 && t4.deleteTexture(r5.__webglTexture), e6.depthTexture && e6.depthTexture.dispose(), e6.isWebGLCubeRenderTarget)
                      for (var a4 = 0; a4 < 6; a4++)
                        t4.deleteFramebuffer(n6.__webglFramebuffer[a4]), n6.__webglDepthbuffer && t4.deleteRenderbuffer(n6.__webglDepthbuffer[a4]);
                    else
                      t4.deleteFramebuffer(n6.__webglFramebuffer), n6.__webglDepthbuffer && t4.deleteRenderbuffer(n6.__webglDepthbuffer);
                    if (e6.isWebGLMultiviewRenderTarget) {
                      t4.deleteTexture(n6.__webglColorTexture), t4.deleteTexture(n6.__webglDepthStencilTexture), o3.memory.textures -= 2, a4 = 0;
                      for (var s4 = n6.__webglViewFramebuffers.length; a4 < s4; a4++)
                        t4.deleteFramebuffer(n6.__webglViewFramebuffers[a4]);
                    }
                    i4.remove(e6.texture), i4.remove(e6);
                  }
                }(n5), o3.memory.textures--;
              }
              var S3 = 0;
              function C3(t5, e5) {
                var r5, a4, s4 = i4.get(t5);
                if (t5.isVideoTexture && (r5 = t5, a4 = o3.render.frame, p3.get(r5) !== a4 && (p3.set(r5, a4), r5.update())), 0 < t5.version && s4.__version !== t5.version) {
                  var l3 = t5.image;
                  if (l3 === void 0)
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                  else {
                    if (l3.complete !== false)
                      return void I3(s4, t5, e5);
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
                  }
                }
                n4.activeTexture(33984 + e5), n4.bindTexture(3553, s4.__webglTexture);
              }
              function T3(e5, r5) {
                if (e5.image.length === 6) {
                  var o4 = i4.get(e5);
                  if (0 < e5.version && o4.__version !== e5.version) {
                    L3(o4, e5), n4.activeTexture(33984 + r5), n4.bindTexture(34067, o4.__webglTexture), t4.pixelStorei(37440, e5.flipY);
                    for (var s4 = e5 && (e5.isCompressedTexture || e5.image[0].isCompressedTexture), c4 = e5.image[0] && e5.image[0].isDataTexture, h4 = [], d4 = 0; d4 < 6; d4++)
                      h4[d4] = s4 || c4 ? c4 ? e5.image[d4].image : e5.image[d4] : g3(e5.image[d4], false, true, u3);
                    var p4, f4 = h4[0], m4 = v3(f4) || l2, w4 = a3.convert(e5.format), M4 = a3.convert(e5.type), _8 = b3(e5.internalFormat, w4, M4);
                    if (O3(34067, e5, m4), s4) {
                      for (d4 = 0; d4 < 6; d4++) {
                        p4 = h4[d4].mipmaps;
                        for (var S4 = 0; S4 < p4.length; S4++) {
                          var C4 = p4[S4];
                          e5.format !== Et && e5.format !== Tt ? w4 !== null ? n4.compressedTexImage2D(34069 + d4, S4, _8, C4.width, C4.height, 0, C4.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n4.texImage2D(34069 + d4, S4, _8, C4.width, C4.height, 0, w4, M4, C4.data);
                        }
                      }
                      o4.__maxMipLevel = p4.length - 1;
                    } else {
                      for (p4 = e5.mipmaps, d4 = 0; d4 < 6; d4++)
                        if (c4)
                          for (n4.texImage2D(34069 + d4, 0, _8, h4[d4].width, h4[d4].height, 0, w4, M4, h4[d4].data), S4 = 0; S4 < p4.length; S4++) {
                            var T4 = (C4 = p4[S4]).image[d4].image;
                            n4.texImage2D(34069 + d4, S4 + 1, _8, T4.width, T4.height, 0, w4, M4, T4.data);
                          }
                        else
                          for (n4.texImage2D(34069 + d4, 0, _8, w4, M4, h4[d4]), S4 = 0; S4 < p4.length; S4++)
                            C4 = p4[S4], n4.texImage2D(34069 + d4, S4 + 1, _8, w4, M4, C4.image[d4]);
                      o4.__maxMipLevel = p4.length;
                    }
                    y3(e5, m4) && x3(34067, e5, f4.width, f4.height), o4.__version = e5.version, e5.onUpdate && e5.onUpdate(e5);
                  } else
                    n4.activeTexture(33984 + r5), n4.bindTexture(34067, o4.__webglTexture);
                }
              }
              function E3(t5, e5) {
                n4.activeTexture(33984 + e5), n4.bindTexture(34067, i4.get(t5).__webglTexture);
              }
              var D3 = {};
              D3[rt] = 10497, D3[at] = 33071, D3[ot] = 33648;
              var A3 = {};
              function O3(n5, a4, o4) {
                o4 ? (t4.texParameteri(n5, 10242, D3[a4.wrapS]), t4.texParameteri(n5, 10243, D3[a4.wrapT]), n5 !== 32879 && n5 !== 35866 || t4.texParameteri(n5, 32882, D3[a4.wrapR]), t4.texParameteri(n5, 10240, A3[a4.magFilter]), t4.texParameteri(n5, 10241, A3[a4.minFilter])) : (t4.texParameteri(n5, 10242, 33071), t4.texParameteri(n5, 10243, 33071), n5 !== 32879 && n5 !== 35866 || t4.texParameteri(n5, 32882, 33071), a4.wrapS === at && a4.wrapT === at || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), t4.texParameteri(n5, 10240, w3(a4.magFilter)), t4.texParameteri(n5, 10241, w3(a4.minFilter)), a4.minFilter !== st && a4.minFilter !== ut && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
                var s4 = e4.get("EXT_texture_filter_anisotropic");
                if (s4) {
                  if (a4.type === xt && e4.get("OES_texture_float_linear") === null)
                    return;
                  if (a4.type === bt && (l2 || e4.get("OES_texture_half_float_linear")) === null)
                    return;
                  (1 < a4.anisotropy || i4.get(a4).__currentAnisotropy) && (t4.texParameterf(n5, s4.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(a4.anisotropy, r4.getMaxAnisotropy())), i4.get(a4).__currentAnisotropy = a4.anisotropy);
                }
              }
              function L3(e5, n5) {
                e5.__webglInit === void 0 && (e5.__webglInit = true, n5.addEventListener("dispose", M3), e5.__webglTexture = t4.createTexture(), o3.memory.textures++);
              }
              function I3(e5, i5, r5) {
                var o4 = 3553;
                i5.isDataTexture2DArray && (o4 = 35866), i5.isDataTexture3D && (o4 = 32879), L3(e5, i5), n4.activeTexture(33984 + r5), n4.bindTexture(o4, e5.__webglTexture), t4.pixelStorei(37440, i5.flipY), t4.pixelStorei(37441, i5.premultiplyAlpha), t4.pixelStorei(3317, i5.unpackAlignment);
                var s4, c4 = (s4 = i5, !l2 && (s4.wrapS !== at || s4.wrapT !== at || s4.minFilter !== st && s4.minFilter !== ut) && v3(i5.image) === false), u4 = g3(i5.image, c4, false, h3), d4 = v3(u4) || l2, p4 = a3.convert(i5.format), f4 = a3.convert(i5.type), m4 = b3(i5.internalFormat, p4, f4);
                O3(o4, i5, d4);
                var w4, M4 = i5.mipmaps;
                if (i5.isDepthTexture) {
                  if (m4 = 6402, i5.type === xt) {
                    if (l2 === false)
                      throw new Error("Float Depth Texture only supported in WebGL2.0");
                    m4 = 36012;
                  } else
                    l2 && (m4 = 33189);
                  i5.format === Lt && m4 === 6402 && i5.type !== gt && i5.type !== yt && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), i5.type = gt, f4 = a3.convert(i5.type)), i5.format === It && (m4 = 34041, i5.type !== St && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), i5.type = St, f4 = a3.convert(i5.type))), n4.texImage2D(3553, 0, m4, u4.width, u4.height, 0, p4, f4, null);
                } else if (i5.isDataTexture)
                  if (0 < M4.length && d4) {
                    for (var _8 = 0, S4 = M4.length; _8 < S4; _8++)
                      w4 = M4[_8], n4.texImage2D(3553, _8, m4, w4.width, w4.height, 0, p4, f4, w4.data);
                    i5.generateMipmaps = false, e5.__maxMipLevel = M4.length - 1;
                  } else
                    n4.texImage2D(3553, 0, m4, u4.width, u4.height, 0, p4, f4, u4.data), e5.__maxMipLevel = 0;
                else if (i5.isCompressedTexture) {
                  for (_8 = 0, S4 = M4.length; _8 < S4; _8++)
                    w4 = M4[_8], i5.format !== Et && i5.format !== Tt ? p4 !== null ? n4.compressedTexImage2D(3553, _8, m4, w4.width, w4.height, 0, w4.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n4.texImage2D(3553, _8, m4, w4.width, w4.height, 0, p4, f4, w4.data);
                  e5.__maxMipLevel = M4.length - 1;
                } else if (i5.isDataTexture2DArray)
                  n4.texImage3D(35866, 0, m4, u4.width, u4.height, u4.depth, 0, p4, f4, u4.data), e5.__maxMipLevel = 0;
                else if (i5.isDataTexture3D)
                  n4.texImage3D(32879, 0, m4, u4.width, u4.height, u4.depth, 0, p4, f4, u4.data), e5.__maxMipLevel = 0;
                else if (0 < M4.length && d4) {
                  for (_8 = 0, S4 = M4.length; _8 < S4; _8++)
                    w4 = M4[_8], n4.texImage2D(3553, _8, m4, p4, f4, w4);
                  i5.generateMipmaps = false, e5.__maxMipLevel = M4.length - 1;
                } else
                  n4.texImage2D(3553, 0, m4, p4, f4, u4), e5.__maxMipLevel = 0;
                y3(i5, d4) && x3(o4, i5, u4.width, u4.height), e5.__version = i5.version, i5.onUpdate && i5.onUpdate(i5);
              }
              function P3(e5, r5, o4, s4) {
                var l3 = a3.convert(r5.texture.format), c4 = a3.convert(r5.texture.type), u4 = b3(r5.texture.internalFormat, l3, c4);
                n4.texImage2D(s4, 0, u4, r5.width, r5.height, 0, l3, c4, null), t4.bindFramebuffer(36160, e5), t4.framebufferTexture2D(36160, o4, s4, i4.get(r5.texture).__webglTexture, 0), t4.bindFramebuffer(36160, null);
              }
              function R3(e5, n5, i5) {
                if (t4.bindRenderbuffer(36161, e5), n5.depthBuffer && !n5.stencilBuffer) {
                  if (i5) {
                    var r5 = B3(n5);
                    t4.renderbufferStorageMultisample(36161, r5, 33189, n5.width, n5.height);
                  } else
                    t4.renderbufferStorage(36161, 33189, n5.width, n5.height);
                  t4.framebufferRenderbuffer(36160, 36096, 36161, e5);
                } else if (n5.depthBuffer && n5.stencilBuffer)
                  i5 ? (r5 = B3(n5), t4.renderbufferStorageMultisample(36161, r5, 35056, n5.width, n5.height)) : t4.renderbufferStorage(36161, 34041, n5.width, n5.height), t4.framebufferRenderbuffer(36160, 33306, 36161, e5);
                else {
                  var o4 = a3.convert(n5.texture.format), s4 = a3.convert(n5.texture.type), l3 = b3(n5.texture.internalFormat, o4, s4);
                  i5 ? (r5 = B3(n5), t4.renderbufferStorageMultisample(36161, r5, l3, n5.width, n5.height)) : t4.renderbufferStorage(36161, l3, n5.width, n5.height);
                }
                t4.bindRenderbuffer(36161, null);
              }
              function k3(e5) {
                var n5 = i4.get(e5), r5 = e5.isWebGLCubeRenderTarget === true;
                if (e5.depthTexture) {
                  if (r5)
                    throw new Error("target.depthTexture not supported in Cube render targets");
                  !function(e6, n6) {
                    if (n6 && n6.isWebGLCubeRenderTarget)
                      throw new Error("Depth Texture with cube render targets is not supported");
                    if (t4.bindFramebuffer(36160, e6), !n6.depthTexture || !n6.depthTexture.isDepthTexture)
                      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                    i4.get(n6.depthTexture).__webglTexture && n6.depthTexture.image.width === n6.width && n6.depthTexture.image.height === n6.height || (n6.depthTexture.image.width = n6.width, n6.depthTexture.image.height = n6.height, n6.depthTexture.needsUpdate = true), C3(n6.depthTexture, 0);
                    var r6 = i4.get(n6.depthTexture).__webglTexture;
                    if (n6.depthTexture.format === Lt)
                      t4.framebufferTexture2D(36160, 36096, 3553, r6, 0);
                    else {
                      if (n6.depthTexture.format !== It)
                        throw new Error("Unknown depthTexture format");
                      t4.framebufferTexture2D(36160, 33306, 3553, r6, 0);
                    }
                  }(n5.__webglFramebuffer, e5);
                } else if (r5) {
                  n5.__webglDepthbuffer = [];
                  for (var a4 = 0; a4 < 6; a4++)
                    t4.bindFramebuffer(36160, n5.__webglFramebuffer[a4]), n5.__webglDepthbuffer[a4] = t4.createRenderbuffer(), R3(n5.__webglDepthbuffer[a4], e5);
                } else
                  t4.bindFramebuffer(36160, n5.__webglFramebuffer), n5.__webglDepthbuffer = t4.createRenderbuffer(), R3(n5.__webglDepthbuffer, e5);
                t4.bindFramebuffer(36160, null);
              }
              function B3(t5) {
                return l2 && t5.isWebGLMultisampleRenderTarget ? Math.min(d3, t5.samples) : 0;
              }
              A3[st] = 9728, A3[lt] = 9984, A3[ct] = 9986, A3[ut] = 9729, A3[ht] = 9985;
              var N3 = !(A3[dt] = 9987), F3 = false;
              this.allocateTextureUnit = function() {
                var t5 = S3;
                return c3 <= t5 && console.warn("THREE.WebGLTextures: Trying to use " + t5 + " texture units while this GPU supports only " + c3), S3 += 1, t5;
              }, this.resetTextureUnits = function() {
                S3 = 0;
              }, this.setTexture2D = C3, this.setTexture2DArray = function(t5, e5) {
                var r5 = i4.get(t5);
                0 < t5.version && r5.__version !== t5.version ? I3(r5, t5, e5) : (n4.activeTexture(33984 + e5), n4.bindTexture(35866, r5.__webglTexture));
              }, this.setTexture3D = function(t5, e5) {
                var r5 = i4.get(t5);
                0 < t5.version && r5.__version !== t5.version ? I3(r5, t5, e5) : (n4.activeTexture(33984 + e5), n4.bindTexture(32879, r5.__webglTexture));
              }, this.setTextureCube = T3, this.setTextureCubeDynamic = E3, this.setupRenderTarget = function(r5) {
                var s4 = i4.get(r5), c4 = i4.get(r5.texture);
                r5.addEventListener("dispose", _7), c4.__webglTexture = t4.createTexture(), o3.memory.textures++;
                var u4 = r5.isWebGLCubeRenderTarget === true, h4 = r5.isWebGLMultisampleRenderTarget === true, d4 = r5.isWebGLMultiviewRenderTarget === true, p4 = v3(r5) || l2;
                if (u4) {
                  s4.__webglFramebuffer = [];
                  for (var f4 = 0; f4 < 6; f4++)
                    s4.__webglFramebuffer[f4] = t4.createFramebuffer();
                } else if (s4.__webglFramebuffer = t4.createFramebuffer(), h4)
                  if (l2) {
                    s4.__webglMultisampledFramebuffer = t4.createFramebuffer(), s4.__webglColorRenderbuffer = t4.createRenderbuffer(), t4.bindRenderbuffer(36161, s4.__webglColorRenderbuffer);
                    var m4 = a3.convert(r5.texture.format), g4 = a3.convert(r5.texture.type), w4 = b3(r5.texture.internalFormat, m4, g4), M4 = B3(r5);
                    t4.renderbufferStorageMultisample(36161, M4, w4, r5.width, r5.height), t4.bindFramebuffer(36160, s4.__webglMultisampledFramebuffer), t4.framebufferRenderbuffer(36160, 36064, 36161, s4.__webglColorRenderbuffer), t4.bindRenderbuffer(36161, null), r5.depthBuffer && (s4.__webglDepthRenderbuffer = t4.createRenderbuffer(), R3(s4.__webglDepthRenderbuffer, r5, true)), t4.bindFramebuffer(36160, null);
                  } else
                    console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                else if (d4) {
                  var S4 = r5.width, C4 = r5.height, T4 = r5.numViews;
                  t4.bindFramebuffer(36160, s4.__webglFramebuffer);
                  var E4 = e4.get("OVR_multiview2");
                  o3.memory.textures += 2;
                  var D4 = t4.createTexture();
                  t4.bindTexture(35866, D4), t4.texParameteri(35866, 10240, 9728), t4.texParameteri(35866, 10241, 9728), t4.texImage3D(35866, 0, 32856, S4, C4, T4, 0, 6408, 5121, null), E4.framebufferTextureMultiviewOVR(36160, 36064, D4, 0, 0, T4);
                  var A4 = t4.createTexture();
                  t4.bindTexture(35866, A4), t4.texParameteri(35866, 10240, 9728), t4.texParameteri(35866, 10241, 9728), t4.texImage3D(35866, 0, 35056, S4, C4, T4, 0, 34041, 34042, null), E4.framebufferTextureMultiviewOVR(36160, 33306, A4, 0, 0, T4);
                  var L4 = new Array(T4);
                  for (f4 = 0; f4 < T4; ++f4)
                    L4[f4] = t4.createFramebuffer(), t4.bindFramebuffer(36160, L4[f4]), t4.framebufferTextureLayer(36160, 36064, D4, 0, f4);
                  s4.__webglColorTexture = D4, s4.__webglDepthStencilTexture = A4, s4.__webglViewFramebuffers = L4, t4.bindFramebuffer(36160, null), t4.bindTexture(35866, null);
                }
                if (u4) {
                  for (n4.bindTexture(34067, c4.__webglTexture), O3(34067, r5.texture, p4), f4 = 0; f4 < 6; f4++)
                    P3(s4.__webglFramebuffer[f4], r5, 36064, 34069 + f4);
                  y3(r5.texture, p4) && x3(34067, r5.texture, r5.width, r5.height), n4.bindTexture(34067, null);
                } else
                  d4 || (n4.bindTexture(3553, c4.__webglTexture), O3(3553, r5.texture, p4), P3(s4.__webglFramebuffer, r5, 36064, 3553), y3(r5.texture, p4) && x3(3553, r5.texture, r5.width, r5.height), n4.bindTexture(3553, null));
                r5.depthBuffer && k3(r5);
              }, this.updateRenderTargetMipmap = function(t5) {
                var e5 = t5.texture;
                if (y3(e5, v3(t5) || l2)) {
                  var r5 = t5.isWebGLCubeRenderTarget ? 34067 : 3553, a4 = i4.get(e5).__webglTexture;
                  n4.bindTexture(r5, a4), x3(r5, e5, t5.width, t5.height), n4.bindTexture(r5, null);
                }
              }, this.updateMultisampleRenderTarget = function(e5) {
                if (e5.isWebGLMultisampleRenderTarget)
                  if (l2) {
                    var n5 = i4.get(e5);
                    t4.bindFramebuffer(36008, n5.__webglMultisampledFramebuffer), t4.bindFramebuffer(36009, n5.__webglFramebuffer);
                    var r5 = e5.width, a4 = e5.height, o4 = 16384;
                    e5.depthBuffer && (o4 |= 256), e5.stencilBuffer && (o4 |= 1024), t4.blitFramebuffer(0, 0, r5, a4, 0, 0, r5, a4, o4, 9728);
                  } else
                    console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
              }, this.safeSetTexture2D = function(t5, e5) {
                t5 && t5.isWebGLRenderTarget && (N3 === false && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), N3 = true), t5 = t5.texture), C3(t5, e5);
              }, this.safeSetTextureCube = function(t5, e5) {
                t5 && t5.isWebGLCubeRenderTarget && (F3 === false && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), F3 = true), t5 = t5.texture), (t5 && t5.isCubeTexture || Array.isArray(t5.image) && t5.image.length === 6 ? T3 : E3)(t5, e5);
              };
            }(f2, m2, v2, x2, g2, L2, y2), w2 = new function(t4, e4) {
              var n4 = e4.isWebGL2, i4 = /* @__PURE__ */ new WeakMap();
              return { get: function(t5) {
                return t5.isInterleavedBufferAttribute && (t5 = t5.data), i4.get(t5);
              }, remove: function(e5) {
                e5.isInterleavedBufferAttribute && (e5 = e5.data);
                var n5 = i4.get(e5);
                n5 && (t4.deleteBuffer(n5.buffer), i4.delete(e5));
              }, update: function(e5, r4) {
                e5.isInterleavedBufferAttribute && (e5 = e5.data);
                var a3, o3, s3, l2, c3, u3 = i4.get(e5);
                u3 === void 0 ? i4.set(e5, function(e6, n5) {
                  var i5 = e6.array, r5 = e6.usage, a4 = t4.createBuffer();
                  t4.bindBuffer(n5, a4), t4.bufferData(n5, i5, r5), e6.onUploadCallback();
                  var o4 = 5126;
                  return i5 instanceof Float32Array ? o4 = 5126 : i5 instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : i5 instanceof Uint16Array ? o4 = 5123 : i5 instanceof Int16Array ? o4 = 5122 : i5 instanceof Uint32Array ? o4 = 5125 : i5 instanceof Int32Array ? o4 = 5124 : i5 instanceof Int8Array ? o4 = 5120 : i5 instanceof Uint8Array && (o4 = 5121), { buffer: a4, type: o4, bytesPerElement: i5.BYTES_PER_ELEMENT, version: e6.version };
                }(e5, r4)) : u3.version < e5.version && (a3 = u3.buffer, s3 = r4, l2 = (o3 = e5).array, c3 = o3.updateRange, t4.bindBuffer(s3, a3), c3.count === -1 ? t4.bufferSubData(s3, 0, l2) : (n4 ? t4.bufferSubData(s3, c3.offset * l2.BYTES_PER_ELEMENT, l2, c3.offset, c3.count) : t4.bufferSubData(s3, c3.offset * l2.BYTES_PER_ELEMENT, l2.subarray(c3.offset, c3.offset + c3.count)), c3.count = -1), u3.version = e5.version);
              } };
            }(f2, g2), M2 = new function(t4, e4, n4) {
              var i4 = /* @__PURE__ */ new WeakMap(), r4 = /* @__PURE__ */ new WeakMap();
              function a3(t5) {
                var o4 = t5.target, s3 = i4.get(o4);
                for (var l2 in s3.index !== null && e4.remove(s3.index), s3.attributes)
                  e4.remove(s3.attributes[l2]);
                o4.removeEventListener("dispose", a3), i4.delete(o4);
                var c3 = r4.get(s3);
                c3 && (e4.remove(c3), r4.delete(s3)), n4.memory.geometries--;
              }
              function o3(t5) {
                var n5 = [], i5 = t5.index, a4 = t5.attributes.position, o4 = 0;
                if (i5 !== null) {
                  var s3 = i5.array;
                  o4 = i5.version;
                  for (var l2 = 0, c3 = s3.length; l2 < c3; l2 += 3) {
                    var u3 = s3[l2 + 0], h3 = s3[l2 + 1], d3 = s3[l2 + 2];
                    n5.push(u3, h3, h3, d3, d3, u3);
                  }
                } else
                  for (s3 = a4.array, o4 = a4.version, l2 = 0, c3 = s3.length / 3 - 1; l2 < c3; l2 += 3)
                    u3 = l2 + 0, h3 = l2 + 1, d3 = l2 + 2, n5.push(u3, h3, h3, d3, d3, u3);
                var p3 = new (65535 < Ai(n5) ? Ci : _i)(n5, 1);
                p3.version = o4, e4.update(p3, 34963);
                var f3 = r4.get(t5);
                f3 && e4.remove(f3), r4.set(t5, p3);
              }
              return { get: function(t5, e5) {
                var r5 = i4.get(e5);
                return r5 || (e5.addEventListener("dispose", a3), e5.isBufferGeometry ? r5 = e5 : e5.isGeometry && (e5._bufferGeometry === void 0 && (e5._bufferGeometry = new Ni().setFromObject(t5)), r5 = e5._bufferGeometry), i4.set(e5, r5), n4.memory.geometries++, r5);
              }, update: function(t5) {
                var n5 = t5.index, i5 = t5.attributes;
                for (var r5 in n5 !== null && e4.update(n5, 34963), i5)
                  e4.update(i5[r5], 34962);
                var a4 = t5.morphAttributes;
                for (var r5 in a4)
                  for (var o4 = a4[r5], s3 = 0, l2 = o4.length; s3 < l2; s3++)
                    e4.update(o4[s3], 34962);
              }, getWireframeAttribute: function(t5) {
                var e5 = r4.get(t5);
                if (e5) {
                  var n5 = t5.index;
                  n5 !== null && e5.version < n5.version && o3(t5);
                } else
                  o3(t5);
                return r4.get(t5);
              } };
            }(0, w2, y2), _6 = new function(t4, e4, n4, i4) {
              var r4 = {};
              return { update: function(t5) {
                var a3 = i4.render.frame, o3 = t5.geometry, s3 = e4.get(t5, o3);
                return r4[s3.id] !== a3 && (o3.isGeometry && s3.updateFromObject(t5), e4.update(s3), r4[s3.id] = a3), t5.isInstancedMesh && n4.update(t5.instanceMatrix, 34962), s3;
              }, dispose: function() {
                r4 = {};
              } };
            }(0, M2, w2, y2), D2 = new function(t4) {
              var e4 = {}, n4 = new Float32Array(8);
              return { update: function(i4, r4, a3, o3) {
                var s3 = i4.morphTargetInfluences, l2 = s3 === void 0 ? 0 : s3.length, c3 = e4[r4.id];
                if (c3 === void 0) {
                  c3 = [];
                  for (var u3 = 0; u3 < l2; u3++)
                    c3[u3] = [u3, 0];
                  e4[r4.id] = c3;
                }
                var h3 = a3.morphTargets && r4.morphAttributes.position, d3 = a3.morphNormals && r4.morphAttributes.normal;
                for (u3 = 0; u3 < l2; u3++)
                  (f3 = c3[u3])[1] !== 0 && (h3 && r4.deleteAttribute("morphTarget" + u3), d3 && r4.deleteAttribute("morphNormal" + u3));
                for (u3 = 0; u3 < l2; u3++)
                  (f3 = c3[u3])[0] = u3, f3[1] = s3[u3];
                c3.sort(Ir);
                var p3 = 0;
                for (u3 = 0; u3 < 8; u3++) {
                  var f3;
                  if (f3 = c3[u3]) {
                    var m3 = f3[0], g3 = f3[1];
                    if (g3) {
                      h3 && r4.setAttribute("morphTarget" + u3, h3[m3]), d3 && r4.setAttribute("morphNormal" + u3, d3[m3]), p3 += n4[u3] = g3;
                      continue;
                    }
                  }
                  n4[u3] = 0;
                }
                var v3 = r4.morphTargetsRelative ? 1 : 1 - p3;
                o3.getUniforms().setValue(t4, "morphTargetBaseInfluence", v3), o3.getUniforms().setValue(t4, "morphTargetInfluences", n4);
              } };
            }(f2), S2 = new Ja(I2, m2, g2), C2 = new function() {
              var t4 = /* @__PURE__ */ new WeakMap();
              function e4(n4) {
                var i4 = n4.target;
                i4.removeEventListener("dispose", e4), t4.delete(i4);
              }
              return { get: function(n4, i4) {
                var r4, a3 = t4.get(n4);
                return a3 === void 0 ? (r4 = new Ya(), t4.set(n4, /* @__PURE__ */ new WeakMap()), t4.get(n4).set(i4, r4), n4.addEventListener("dispose", e4)) : (r4 = a3.get(i4)) === void 0 && (r4 = new Ya(), a3.set(i4, r4)), r4;
              }, dispose: function() {
                t4 = /* @__PURE__ */ new WeakMap();
              } };
            }(), T2 = new function() {
              var t4 = /* @__PURE__ */ new WeakMap();
              function e4(n4) {
                var i4 = n4.target;
                i4.removeEventListener("dispose", e4), t4.delete(i4);
              }
              return { get: function(n4, i4) {
                var r4;
                return t4.has(n4) === false ? (r4 = new Qa(), t4.set(n4, /* @__PURE__ */ new WeakMap()), t4.get(n4).set(i4, r4), n4.addEventListener("dispose", e4)) : t4.get(n4).has(i4) === false ? (r4 = new Qa(), t4.get(n4).set(i4, r4)) : r4 = t4.get(n4).get(i4), r4;
              }, dispose: function() {
                t4 = /* @__PURE__ */ new WeakMap();
              } };
            }(), E2 = new Lr(I2, v2, _6, s2), A2 = new function(t4, e4, n4, i4) {
              var r4, a3 = i4.isWebGL2;
              this.setMode = function(t5) {
                r4 = t5;
              }, this.render = function(e5, i5) {
                t4.drawArrays(r4, e5, i5), n4.update(i5, r4);
              }, this.renderInstances = function(i5, o3, s3, l2) {
                if (l2 !== 0) {
                  var c3, u3;
                  if (a3)
                    c3 = t4, u3 = "drawArraysInstanced";
                  else if (u3 = "drawArraysInstancedANGLE", (c3 = e4.get("ANGLE_instanced_arrays")) === null)
                    return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                  c3[u3](r4, o3, s3, l2), n4.update(s3, r4, l2);
                }
              };
            }(f2, m2, y2, g2), O2 = new function(t4, e4, n4, i4) {
              var r4, a3, o3, s3 = i4.isWebGL2;
              this.setMode = function(t5) {
                r4 = t5;
              }, this.setIndex = function(t5) {
                a3 = t5.type, o3 = t5.bytesPerElement;
              }, this.render = function(e5, i5) {
                t4.drawElements(r4, i5, a3, e5 * o3), n4.update(i5, r4);
              }, this.renderInstances = function(i5, l2, c3, u3) {
                if (u3 !== 0) {
                  var h3, d3;
                  if (s3)
                    h3 = t4, d3 = "drawElementsInstanced";
                  else if (d3 = "drawElementsInstancedANGLE", (h3 = e4.get("ANGLE_instanced_arrays")) === null)
                    return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                  h3[d3](r4, c3, a3, l2 * o3, u3), n4.update(c3, r4, u3);
                }
              };
            }(f2, m2, y2, g2), y2.programs = S2.programs, I2.capabilities = g2, I2.extensions = m2, I2.properties = x2, I2.renderLists = C2, I2.state = v2, I2.info = y2;
          }
          Ct2();
          var Dt2 = new uo(I2, f2);
          this.xr = Dt2;
          var At2 = new function(t4, e4) {
            var n4, i4, r4, a3, o3, s3, l2, c3 = t4.extensions, u3 = t4.properties, h3 = 0;
            function d3(t5) {
              return t5.isArrayCamera ? t5.cameras : (o3[0] = t5, o3);
            }
            this.isAvailable = function() {
              if (l2 === void 0) {
                var t5 = c3.get("OVR_multiview2");
                if (l2 = t5 !== null && e4.getContextAttributes().antialias === false) {
                  h3 = e4.getParameter(t5.MAX_VIEWS_OVR), n4 = new so(0, 0, 2), s3 = new Re(), a3 = [], r4 = [], o3 = [];
                  for (var i5 = 0; i5 < h3; i5++)
                    a3[i5] = new Qe(), r4[i5] = new ke();
                }
              }
              return l2;
            }, this.attachCamera = function(e5) {
              (function(t5) {
                if (t5.isArrayCamera === void 0)
                  return true;
                var e6 = t5.cameras;
                if (e6.length > h3)
                  return false;
                for (var n5 = 1, i5 = e6.length; n5 < i5; n5++)
                  if (e6[0].viewport.z !== e6[n5].viewport.z || e6[0].viewport.w !== e6[n5].viewport.w)
                    return false;
                return true;
              })(e5) !== false && (i4 = t4.getRenderTarget(), function(e6) {
                if (i4 ? s3.set(i4.width, i4.height) : t4.getDrawingBufferSize(s3), e6.isArrayCamera) {
                  var r5 = e6.cameras[0].viewport;
                  n4.setSize(r5.z, r5.w), n4.setNumViews(e6.cameras.length);
                } else
                  n4.setSize(s3.x, s3.y), n4.setNumViews(2);
              }(e5), t4.setRenderTarget(n4));
            }, this.detachCamera = function(r5) {
              n4 === t4.getRenderTarget() && (t4.setRenderTarget(i4), function(t5) {
                var i5 = n4, r6 = i5.numViews, a4 = u3.get(i5).__webglViewFramebuffers, o4 = i5.width, l3 = i5.height;
                if (t5.isArrayCamera)
                  for (var c4 = 0; c4 < r6; c4++) {
                    var h4 = t5.cameras[c4].viewport, d4 = h4.x, p3 = h4.y, f3 = d4 + h4.z, m3 = p3 + h4.w;
                    e4.bindFramebuffer(36008, a4[c4]), e4.blitFramebuffer(0, 0, o4, l3, d4, p3, f3, m3, 16384, 9728);
                  }
                else
                  e4.bindFramebuffer(36008, a4[0]), e4.blitFramebuffer(0, 0, o4, l3, 0, 0, s3.x, s3.y, 16384, 9728);
              }(r5));
            }, this.updateCameraProjectionMatricesUniform = function(t5, n5) {
              for (var i5 = d3(t5), r5 = 0; r5 < i5.length; r5++)
                a3[r5].copy(i5[r5].projectionMatrix);
              n5.setValue(e4, "projectionMatrices", a3);
            }, this.updateCameraViewMatricesUniform = function(t5, n5) {
              for (var i5 = d3(t5), r5 = 0; r5 < i5.length; r5++)
                a3[r5].copy(i5[r5].matrixWorldInverse);
              n5.setValue(e4, "viewMatrices", a3);
            }, this.updateObjectMatricesUniforms = function(t5, n5, i5) {
              for (var o4 = d3(n5), s4 = 0; s4 < o4.length; s4++)
                a3[s4].multiplyMatrices(o4[s4].matrixWorldInverse, t5.matrixWorld), r4[s4].getNormalMatrix(a3[s4]);
              i5.setValue(e4, "modelViewMatrices", a3), i5.setValue(e4, "normalMatrices", r4);
            };
          }(I2, f2), Ot2 = new ro(I2, _6, g2.maxTextureSize);
          function Pt2(t4) {
            t4.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), P2 = true;
          }
          function Rt2() {
            console.log("THREE.WebGLRenderer: Context Restored."), P2 = false, Ct2();
          }
          function kt2(t4) {
            var e4, n4 = t4.target;
            n4.removeEventListener("dispose", kt2), Bt2(e4 = n4), x2.remove(e4);
          }
          function Bt2(t4) {
            var e4 = x2.get(t4).program;
            (t4.program = void 0) !== e4 && S2.releaseProgram(e4);
          }
          this.shadowMap = Ot2, this.getContext = function() {
            return f2;
          }, this.getContextAttributes = function() {
            return f2.getContextAttributes();
          }, this.forceContextLoss = function() {
            var t4 = m2.get("WEBGL_lose_context");
            t4 && t4.loseContext();
          }, this.forceContextRestore = function() {
            var t4 = m2.get("WEBGL_lose_context");
            t4 && t4.restoreContext();
          }, this.getPixelRatio = function() {
            return Y2;
          }, this.setPixelRatio = function(t4) {
            t4 !== void 0 && (Y2 = t4, this.setSize(q2, X2, false));
          }, this.getSize = function(t4) {
            return t4 === void 0 && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), t4 = new Re()), t4.set(q2, X2);
          }, this.setSize = function(t4, n4, i4) {
            Dt2.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (q2 = t4, X2 = n4, e3.width = Math.floor(t4 * Y2), e3.height = Math.floor(n4 * Y2), i4 !== false && (e3.style.width = t4 + "px", e3.style.height = n4 + "px"), this.setViewport(0, 0, t4, n4));
          }, this.getDrawingBufferSize = function(t4) {
            return t4 === void 0 && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), t4 = new Re()), t4.set(q2 * Y2, X2 * Y2).floor();
          }, this.setDrawingBufferSize = function(t4, n4, i4) {
            q2 = t4, X2 = n4, Y2 = i4, e3.width = Math.floor(t4 * i4), e3.height = Math.floor(n4 * i4), this.setViewport(0, 0, t4, n4);
          }, this.getCurrentViewport = function(t4) {
            return t4 === void 0 && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), t4 = new je()), t4.copy(U2);
          }, this.getViewport = function(t4) {
            return t4.copy(K2);
          }, this.setViewport = function(t4, e4, n4, i4) {
            t4.isVector4 ? K2.set(t4.x, t4.y, t4.z, t4.w) : K2.set(t4, e4, n4, i4), v2.viewport(U2.copy(K2).multiplyScalar(Y2).floor());
          }, this.getScissor = function(t4) {
            return t4.copy(Q2);
          }, this.setScissor = function(t4, e4, n4, i4) {
            t4.isVector4 ? Q2.set(t4.x, t4.y, t4.z, t4.w) : Q2.set(t4, e4, n4, i4), v2.scissor(H2.copy(Q2).multiplyScalar(Y2).floor());
          }, this.getScissorTest = function() {
            return tt2;
          }, this.setScissorTest = function(t4) {
            v2.setScissorTest(tt2 = t4);
          }, this.setOpaqueSort = function(t4) {
            Z2 = t4;
          }, this.setTransparentSort = function(t4) {
            $3 = t4;
          }, this.getClearColor = function() {
            return E2.getClearColor();
          }, this.setClearColor = function() {
            E2.setClearColor.apply(E2, arguments);
          }, this.getClearAlpha = function() {
            return E2.getClearAlpha();
          }, this.setClearAlpha = function() {
            E2.setClearAlpha.apply(E2, arguments);
          }, this.clear = function(t4, e4, n4) {
            var i4 = 0;
            t4 !== void 0 && !t4 || (i4 |= 16384), e4 !== void 0 && !e4 || (i4 |= 256), n4 !== void 0 && !n4 || (i4 |= 1024), f2.clear(i4);
          }, this.clearColor = function() {
            this.clear(true, false, false);
          }, this.clearDepth = function() {
            this.clear(false, true, false);
          }, this.clearStencil = function() {
            this.clear(false, false, true);
          }, this.dispose = function() {
            e3.removeEventListener("webglcontextlost", Pt2, false), e3.removeEventListener("webglcontextrestored", Rt2, false), C2.dispose(), T2.dispose(), x2.dispose(), _6.dispose(), Dt2.dispose(), jt2.stop();
          }, this.renderBufferImmediate = function(t4, e4) {
            v2.initAttributes();
            var n4 = x2.get(t4);
            t4.hasPositions && !n4.position && (n4.position = f2.createBuffer()), t4.hasNormals && !n4.normal && (n4.normal = f2.createBuffer()), t4.hasUvs && !n4.uv && (n4.uv = f2.createBuffer()), t4.hasColors && !n4.color && (n4.color = f2.createBuffer());
            var i4 = e4.getAttributes();
            t4.hasPositions && (f2.bindBuffer(34962, n4.position), f2.bufferData(34962, t4.positionArray, 35048), v2.enableAttribute(i4.position), f2.vertexAttribPointer(i4.position, 3, 5126, false, 0, 0)), t4.hasNormals && (f2.bindBuffer(34962, n4.normal), f2.bufferData(34962, t4.normalArray, 35048), v2.enableAttribute(i4.normal), f2.vertexAttribPointer(i4.normal, 3, 5126, false, 0, 0)), t4.hasUvs && (f2.bindBuffer(34962, n4.uv), f2.bufferData(34962, t4.uvArray, 35048), v2.enableAttribute(i4.uv), f2.vertexAttribPointer(i4.uv, 2, 5126, false, 0, 0)), t4.hasColors && (f2.bindBuffer(34962, n4.color), f2.bufferData(34962, t4.colorArray, 35048), v2.enableAttribute(i4.color), f2.vertexAttribPointer(i4.color, 3, 5126, false, 0, 0)), v2.disableUnusedAttributes(), f2.drawArrays(4, 0, t4.count), t4.count = 0;
          };
          var Nt2 = new xn();
          this.renderBufferDirect = function(t4, e4, n4, i4, r4, a3) {
            e4 === null && (e4 = Nt2);
            var o3 = r4.isMesh && r4.matrixWorld.determinant() < 0, s3 = Ut2(t4, e4, i4, r4);
            v2.setMaterial(i4, o3);
            var l2 = false;
            V2.geometry === n4.id && V2.program === s3.id && V2.wireframe === (i4.wireframe === true) || (V2.geometry = n4.id, V2.program = s3.id, V2.wireframe = i4.wireframe === true, l2 = true), (i4.morphTargets || i4.morphNormals) && (D2.update(r4, n4, i4, s3), l2 = true);
            var c3 = n4.index, u3 = n4.attributes.position;
            if (c3 === null) {
              if (u3 === void 0 || u3.count === 0)
                return;
            } else if (c3.count === 0)
              return;
            var h3, d3 = 1;
            i4.wireframe === true && (c3 = M2.getWireframeAttribute(n4), d3 = 2);
            var p3 = A2;
            c3 !== null && ((h3 = w2.get(c3)) ? (p3 = O2).setIndex(h3) : (console.log("mx attribute == null"), c3 = null)), l2 && (function(t5, e5, n5, i5) {
              if (g2.isWebGL2 !== false || !t5.isInstancedMesh && !e5.isInstancedBufferGeometry || m2.get("ANGLE_instanced_arrays") !== null) {
                v2.initAttributes();
                var r5 = e5.attributes, a4 = i5.getAttributes(), o4 = n5.defaultAttributeValues;
                for (var s4 in a4) {
                  var l3 = a4[s4];
                  if (0 <= l3) {
                    var c4 = r5[s4];
                    if (c4 !== void 0) {
                      var u4 = c4.normalized, h4 = c4.itemSize;
                      if ((_8 = w2.get(c4)) === void 0)
                        continue;
                      var d4 = _8.buffer, p4 = _8.type, y4 = _8.bytesPerElement;
                      if (c4.isInterleavedBufferAttribute) {
                        var x4 = c4.data, b4 = x4.stride, M3 = c4.offset;
                        x4 && x4.isInstancedInterleavedBuffer ? (v2.enableAttributeAndDivisor(l3, x4.meshPerAttribute), e5.maxInstancedCount === void 0 && (e5.maxInstancedCount = x4.meshPerAttribute * x4.count)) : v2.enableAttribute(l3), f2.bindBuffer(34962, d4), f2.vertexAttribPointer(l3, h4, p4, u4, b4 * y4, M3 * y4);
                      } else
                        c4.isInstancedBufferAttribute ? (v2.enableAttributeAndDivisor(l3, c4.meshPerAttribute), e5.maxInstancedCount === void 0 && (e5.maxInstancedCount = c4.meshPerAttribute * c4.count)) : v2.enableAttribute(l3), f2.bindBuffer(34962, d4), f2.vertexAttribPointer(l3, h4, p4, u4, 0, 0);
                    } else if (s4 === "instanceMatrix") {
                      var _8;
                      if ((_8 = w2.get(t5.instanceMatrix)) === void 0)
                        continue;
                      d4 = _8.buffer, p4 = _8.type, v2.enableAttributeAndDivisor(l3 + 0, 1), v2.enableAttributeAndDivisor(l3 + 1, 1), v2.enableAttributeAndDivisor(l3 + 2, 1), v2.enableAttributeAndDivisor(l3 + 3, 1), f2.bindBuffer(34962, d4), f2.vertexAttribPointer(l3 + 0, 4, p4, false, 64, 0), f2.vertexAttribPointer(l3 + 1, 4, p4, false, 64, 16), f2.vertexAttribPointer(l3 + 2, 4, p4, false, 64, 32), f2.vertexAttribPointer(l3 + 3, 4, p4, false, 64, 48);
                    } else if (o4 !== void 0) {
                      var S4 = o4[s4];
                      if (S4 !== void 0)
                        switch (S4.length) {
                          case 2:
                            f2.vertexAttrib2fv(l3, S4);
                            break;
                          case 3:
                            f2.vertexAttrib3fv(l3, S4);
                            break;
                          case 4:
                            f2.vertexAttrib4fv(l3, S4);
                            break;
                          default:
                            f2.vertexAttrib1fv(l3, S4);
                        }
                    }
                  }
                }
                v2.disableUnusedAttributes();
              }
            }(r4, n4, i4, s3), c3 !== null && f2.bindBuffer(34963, h3.buffer));
            var y3 = c3 !== null ? c3.count : u3.count, x3 = n4.drawRange.start * d3, b3 = n4.drawRange.count * d3, _7 = a3 !== null ? a3.start * d3 : 0, S3 = a3 !== null ? a3.count * d3 : 1 / 0, C3 = Math.max(x3, _7), T3 = Math.min(y3, x3 + b3, _7 + S3) - 1, E3 = Math.max(0, T3 - C3 + 1);
            if (E3 !== 0) {
              if (r4.isMesh)
                i4.wireframe === true ? (v2.setLineWidth(i4.wireframeLinewidth * wt2()), p3.setMode(1)) : p3.setMode(4);
              else if (r4.isLine) {
                var L3 = i4.linewidth;
                L3 === void 0 && (L3 = 1), v2.setLineWidth(L3 * wt2()), r4.isLineSegments ? p3.setMode(1) : r4.isLineLoop ? p3.setMode(2) : p3.setMode(3);
              } else
                r4.isPoints ? p3.setMode(0) : r4.isSprite && p3.setMode(4);
              r4.isInstancedMesh ? p3.renderInstances(n4, C3, E3, r4.count) : n4.isInstancedBufferGeometry ? p3.renderInstances(n4, C3, E3, n4.maxInstancedCount) : p3.render(C3, E3);
            }
          }, this.compile = function(t4, e4) {
            (p2 = T2.get(t4, e4)).init(), t4.traverse(function(t5) {
              t5.isLight && (p2.pushLight(t5), t5.castShadow && p2.pushShadow(t5));
            }), p2.setupLights(e4);
            var n4 = {};
            t4.traverse(function(e5) {
              if (e5.material)
                if (Array.isArray(e5.material))
                  for (var i4 = 0; i4 < e5.material.length; i4++)
                    e5.material[i4].uuid in n4 == 0 && (Gt2(e5.material[i4], t4, e5), n4[e5.material[i4].uuid] = true);
                else
                  e5.material.uuid in n4 == 0 && (Gt2(e5.material, t4, e5), n4[e5.material.uuid] = true);
            });
          };
          var Ft2 = null, jt2 = new Tr();
          function Vt2(t4, e4, n4, i4) {
            for (var r4 = 0, a3 = t4.length; r4 < a3; r4++) {
              var o3 = t4[r4], s3 = o3.object, l2 = o3.geometry, c3 = i4 === void 0 ? o3.material : i4, u3 = o3.group;
              if (n4.isArrayCamera)
                if (G2 = n4, Dt2.enabled && At2.isAvailable())
                  zt2(s3, e4, n4, l2, c3, u3);
                else
                  for (var h3 = n4.cameras, d3 = 0, f3 = h3.length; d3 < f3; d3++) {
                    var m3 = h3[d3];
                    s3.layers.test(m3.layers) && (v2.viewport(U2.copy(m3.viewport)), p2.setupLights(m3), zt2(s3, e4, m3, l2, c3, u3));
                  }
              else
                G2 = null, zt2(s3, e4, n4, l2, c3, u3);
            }
          }
          function zt2(t4, e4, n4, i4, r4, a3) {
            if (t4.onBeforeRender(I2, e4, n4, i4, r4, a3), p2 = T2.get(e4, G2 || n4), t4.modelViewMatrix.multiplyMatrices(n4.matrixWorldInverse, t4.matrixWorld), t4.normalMatrix.getNormalMatrix(t4.modelViewMatrix), t4.isImmediateRenderObject) {
              var o3 = Ut2(n4, e4, r4, t4);
              v2.setMaterial(r4), V2.geometry = null, V2.program = null, V2.wireframe = false, s3 = o3, t4.render(function(t5) {
                I2.renderBufferImmediate(t5, s3);
              });
            } else
              I2.renderBufferDirect(n4, e4, i4, r4, t4, a3);
            var s3;
            t4.onAfterRender(I2, e4, n4, i4, r4, a3), p2 = T2.get(e4, G2 || n4);
          }
          function Gt2(t4, e4, n4) {
            var i4 = x2.get(t4), r4 = p2.state.lights, a3 = p2.state.shadowsArray, o3 = r4.state.version, s3 = S2.getParameters(t4, r4.state, a3, e4, nt2.numPlanes, nt2.numIntersection, n4), l2 = S2.getProgramCacheKey(s3), c3 = i4.program, u3 = true;
            if (c3 === void 0)
              t4.addEventListener("dispose", kt2);
            else if (c3.cacheKey !== l2)
              Bt2(t4);
            else if (i4.lightsStateVersion !== o3)
              i4.lightsStateVersion = o3, u3 = false;
            else {
              if (s3.shaderID !== void 0)
                return;
              u3 = false;
            }
            u3 && (c3 = S2.acquireProgram(s3, l2), i4.program = c3, i4.uniforms = s3.uniforms, i4.environment = t4.isMeshStandardMaterial ? e4.environment : null, i4.outputEncoding = I2.outputEncoding, t4.program = c3);
            var h3 = c3.getAttributes();
            if (t4.morphTargets)
              for (var d3 = t4.numSupportedMorphTargets = 0; d3 < I2.maxMorphTargets; d3++)
                0 <= h3["morphTarget" + d3] && t4.numSupportedMorphTargets++;
            if (t4.morphNormals)
              for (d3 = t4.numSupportedMorphNormals = 0; d3 < I2.maxMorphNormals; d3++)
                0 <= h3["morphNormal" + d3] && t4.numSupportedMorphNormals++;
            var f3, m3 = i4.uniforms;
            (t4.isShaderMaterial || t4.isRawShaderMaterial) && t4.clipping !== true || (i4.numClippingPlanes = nt2.numPlanes, i4.numIntersection = nt2.numIntersection, m3.clippingPlanes = nt2.uniform), i4.fog = e4.fog, i4.needsLights = (f3 = t4).isMeshLambertMaterial || f3.isMeshToonMaterial || f3.isMeshPhongMaterial || f3.isMeshStandardMaterial || f3.isShadowMaterial || f3.isShaderMaterial && f3.lights === true, i4.lightsStateVersion = o3, i4.needsLights && (m3.ambientLightColor.value = r4.state.ambient, m3.lightProbe.value = r4.state.probe, m3.directionalLights.value = r4.state.directional, m3.spotLights.value = r4.state.spot, m3.rectAreaLights.value = r4.state.rectArea, m3.pointLights.value = r4.state.point, m3.hemisphereLights.value = r4.state.hemi, m3.directionalShadowMap.value = r4.state.directionalShadowMap, m3.directionalShadowMatrix.value = r4.state.directionalShadowMatrix, m3.spotShadowMap.value = r4.state.spotShadowMap, m3.spotShadowMatrix.value = r4.state.spotShadowMatrix, m3.pointShadowMap.value = r4.state.pointShadowMap, m3.pointShadowMatrix.value = r4.state.pointShadowMatrix);
            var g3 = i4.program.getUniforms(), v3 = Oa.seqWithValue(g3.seq, m3);
            i4.uniformsList = v3;
          }
          function Ut2(t4, e4, n4, i4) {
            b2.resetTextureUnits();
            var r4 = e4.fog, a3 = n4.isMeshStandardMaterial ? e4.environment : null, o3 = x2.get(n4), s3 = p2.state.lights;
            if (it2 && (ft2 || t4 !== z2)) {
              var c3 = t4 === z2 && n4.id === j2;
              nt2.setState(n4.clippingPlanes, n4.clipIntersection, n4.clipShadows, t4, o3, c3);
            }
            n4.version === o3.__version ? (o3.program === void 0 || n4.fog && o3.fog !== r4 || o3.environment !== a3 || o3.needsLights && o3.lightsStateVersion !== s3.state.version || o3.numClippingPlanes !== void 0 && (o3.numClippingPlanes !== nt2.numPlanes || o3.numIntersection !== nt2.numIntersection) || o3.outputEncoding !== I2.outputEncoding) && Gt2(n4, e4, i4) : (x2.update(n4, "uniforms", n4.uniforms), Gt2(n4, e4, i4), o3.__version = n4.version);
            var u3, h3, d3, m3, y3, w3, M3, _7, S3, C3, T3, E3, D3 = false, A3 = false, O3 = false, L3 = o3.program, P3 = L3.getUniforms(), R3 = o3.uniforms;
            if (v2.useProgram(L3.program) && (O3 = A3 = D3 = true), n4.id !== j2 && (j2 = n4.id, A3 = true), D3 || z2 !== t4) {
              if (0 < L3.numMultiviewViews ? At2.updateCameraProjectionMatricesUniform(t4, P3) : P3.setValue(f2, "projectionMatrix", t4.projectionMatrix), g2.logarithmicDepthBuffer && P3.setValue(f2, "logDepthBufFC", 2 / (Math.log(t4.far + 1) / Math.LN2)), z2 !== t4 && (z2 = t4, O3 = A3 = true), n4.isShaderMaterial || n4.isMeshPhongMaterial || n4.isMeshToonMaterial || n4.isMeshStandardMaterial || n4.envMap) {
                var k3 = P3.map.cameraPosition;
                k3 !== void 0 && k3.setValue(f2, vt2.setFromMatrixPosition(t4.matrixWorld));
              }
              (n4.isMeshPhongMaterial || n4.isMeshToonMaterial || n4.isMeshLambertMaterial || n4.isMeshBasicMaterial || n4.isMeshStandardMaterial || n4.isShaderMaterial) && P3.setValue(f2, "isOrthographic", t4.isOrthographicCamera === true), (n4.isMeshPhongMaterial || n4.isMeshToonMaterial || n4.isMeshLambertMaterial || n4.isMeshBasicMaterial || n4.isMeshStandardMaterial || n4.isShaderMaterial || n4.skinning) && (0 < L3.numMultiviewViews ? At2.updateCameraViewMatricesUniform(t4, P3) : P3.setValue(f2, "viewMatrix", t4.matrixWorldInverse));
            }
            if (n4.skinning) {
              P3.setOptional(f2, i4, "bindMatrix"), P3.setOptional(f2, i4, "bindMatrixInverse");
              var B3 = i4.skeleton;
              if (B3) {
                var N3 = B3.bones;
                if (g2.floatVertexTextures) {
                  if (B3.boneTexture === void 0) {
                    var F3 = Math.sqrt(4 * N3.length);
                    F3 = Pe.ceilPowerOfTwo(F3), F3 = Math.max(F3, 4);
                    var V3 = new Float32Array(F3 * F3 * 4);
                    V3.set(B3.boneMatrices);
                    var G3 = new wr(V3, F3, F3, Et, xt);
                    B3.boneMatrices = V3, B3.boneTexture = G3, B3.boneTextureSize = F3;
                  }
                  P3.setValue(f2, "boneTexture", B3.boneTexture, b2), P3.setValue(f2, "boneTextureSize", B3.boneTextureSize);
                } else
                  P3.setOptional(f2, B3, "boneMatrices");
              }
            }
            return !A3 && o3.receiveShadow === i4.receiveShadow || (o3.receiveShadow = i4.receiveShadow, P3.setValue(f2, "receiveShadow", i4.receiveShadow)), A3 && (P3.setValue(f2, "toneMappingExposure", I2.toneMappingExposure), P3.setValue(f2, "toneMappingWhitePoint", I2.toneMappingWhitePoint), o3.needsLights && (E3 = O3, (T3 = R3).ambientLightColor.needsUpdate = E3, T3.lightProbe.needsUpdate = E3, T3.directionalLights.needsUpdate = E3, T3.pointLights.needsUpdate = E3, T3.spotLights.needsUpdate = E3, T3.rectAreaLights.needsUpdate = E3, T3.hemisphereLights.needsUpdate = E3), r4 && n4.fog && (C3 = r4, (S3 = R3).fogColor.value.copy(C3.color), C3.isFog ? (S3.fogNear.value = C3.near, S3.fogFar.value = C3.far) : C3.isFogExp2 && (S3.fogDensity.value = C3.density)), n4.isMeshBasicMaterial ? Ht2(R3, n4) : n4.isMeshLambertMaterial ? (Ht2(R3, n4), M3 = R3, (_7 = n4).emissiveMap && (M3.emissiveMap.value = _7.emissiveMap)) : n4.isMeshToonMaterial ? (Ht2(R3, n4), function(t5, e5) {
              t5.specular.value.copy(e5.specular), t5.shininess.value = Math.max(e5.shininess, 1e-4), e5.gradientMap && (t5.gradientMap.value = e5.gradientMap), e5.emissiveMap && (t5.emissiveMap.value = e5.emissiveMap), e5.bumpMap && (t5.bumpMap.value = e5.bumpMap, t5.bumpScale.value = e5.bumpScale, e5.side === l && (t5.bumpScale.value *= -1)), e5.normalMap && (t5.normalMap.value = e5.normalMap, t5.normalScale.value.copy(e5.normalScale), e5.side === l && t5.normalScale.value.negate()), e5.displacementMap && (t5.displacementMap.value = e5.displacementMap, t5.displacementScale.value = e5.displacementScale, t5.displacementBias.value = e5.displacementBias);
            }(R3, n4)) : n4.isMeshPhongMaterial ? (Ht2(R3, n4), function(t5, e5) {
              t5.specular.value.copy(e5.specular), t5.shininess.value = Math.max(e5.shininess, 1e-4), e5.emissiveMap && (t5.emissiveMap.value = e5.emissiveMap), e5.bumpMap && (t5.bumpMap.value = e5.bumpMap, t5.bumpScale.value = e5.bumpScale, e5.side === l && (t5.bumpScale.value *= -1)), e5.normalMap && (t5.normalMap.value = e5.normalMap, t5.normalScale.value.copy(e5.normalScale), e5.side === l && t5.normalScale.value.negate()), e5.displacementMap && (t5.displacementMap.value = e5.displacementMap, t5.displacementScale.value = e5.displacementScale, t5.displacementBias.value = e5.displacementBias);
            }(R3, n4)) : n4.isMeshStandardMaterial ? (Ht2(R3, n4, a3), (n4.isMeshPhysicalMaterial ? function(t5, e5, n5) {
              Wt2(t5, e5, n5), t5.reflectivity.value = e5.reflectivity, t5.clearcoat.value = e5.clearcoat, t5.clearcoatRoughness.value = e5.clearcoatRoughness, e5.sheen && t5.sheen.value.copy(e5.sheen), e5.clearcoatNormalMap && (t5.clearcoatNormalScale.value.copy(e5.clearcoatNormalScale), t5.clearcoatNormalMap.value = e5.clearcoatNormalMap, e5.side === l && t5.clearcoatNormalScale.value.negate()), t5.transparency.value = e5.transparency;
            } : Wt2)(R3, n4, a3)) : n4.isMeshMatcapMaterial ? (Ht2(R3, n4), function(t5, e5) {
              e5.matcap && (t5.matcap.value = e5.matcap), e5.bumpMap && (t5.bumpMap.value = e5.bumpMap, t5.bumpScale.value = e5.bumpScale, e5.side === l && (t5.bumpScale.value *= -1)), e5.normalMap && (t5.normalMap.value = e5.normalMap, t5.normalScale.value.copy(e5.normalScale), e5.side === l && t5.normalScale.value.negate()), e5.displacementMap && (t5.displacementMap.value = e5.displacementMap, t5.displacementScale.value = e5.displacementScale, t5.displacementBias.value = e5.displacementBias);
            }(R3, n4)) : n4.isMeshDepthMaterial ? (Ht2(R3, n4), y3 = R3, (w3 = n4).displacementMap && (y3.displacementMap.value = w3.displacementMap, y3.displacementScale.value = w3.displacementScale, y3.displacementBias.value = w3.displacementBias)) : n4.isMeshDistanceMaterial ? (Ht2(R3, n4), function(t5, e5) {
              e5.displacementMap && (t5.displacementMap.value = e5.displacementMap, t5.displacementScale.value = e5.displacementScale, t5.displacementBias.value = e5.displacementBias), t5.referencePosition.value.copy(e5.referencePosition), t5.nearDistance.value = e5.nearDistance, t5.farDistance.value = e5.farDistance;
            }(R3, n4)) : n4.isMeshNormalMaterial ? (Ht2(R3, n4), function(t5, e5) {
              e5.bumpMap && (t5.bumpMap.value = e5.bumpMap, t5.bumpScale.value = e5.bumpScale, e5.side === l && (t5.bumpScale.value *= -1)), e5.normalMap && (t5.normalMap.value = e5.normalMap, t5.normalScale.value.copy(e5.normalScale), e5.side === l && t5.normalScale.value.negate()), e5.displacementMap && (t5.displacementMap.value = e5.displacementMap, t5.displacementScale.value = e5.displacementScale, t5.displacementBias.value = e5.displacementBias);
            }(R3, n4)) : n4.isLineBasicMaterial ? (m3 = n4, (d3 = R3).diffuse.value.copy(m3.color), d3.opacity.value = m3.opacity, n4.isLineDashedMaterial && (h3 = n4, (u3 = R3).dashSize.value = h3.dashSize, u3.totalSize.value = h3.dashSize + h3.gapSize, u3.scale.value = h3.scale)) : n4.isPointsMaterial ? function(t5, e5) {
              var n5;
              t5.diffuse.value.copy(e5.color), t5.opacity.value = e5.opacity, t5.size.value = e5.size * Y2, t5.scale.value = 0.5 * X2, e5.map && (t5.map.value = e5.map), e5.alphaMap && (t5.alphaMap.value = e5.alphaMap), e5.map ? n5 = e5.map : e5.alphaMap && (n5 = e5.alphaMap), n5 !== void 0 && (n5.matrixAutoUpdate === true && n5.updateMatrix(), t5.uvTransform.value.copy(n5.matrix));
            }(R3, n4) : n4.isSpriteMaterial ? function(t5, e5) {
              var n5;
              t5.diffuse.value.copy(e5.color), t5.opacity.value = e5.opacity, t5.rotation.value = e5.rotation, e5.map && (t5.map.value = e5.map), e5.alphaMap && (t5.alphaMap.value = e5.alphaMap), e5.map ? n5 = e5.map : e5.alphaMap && (n5 = e5.alphaMap), n5 !== void 0 && (n5.matrixAutoUpdate === true && n5.updateMatrix(), t5.uvTransform.value.copy(n5.matrix));
            }(R3, n4) : n4.isShadowMaterial && (R3.color.value.copy(n4.color), R3.opacity.value = n4.opacity), R3.ltc_1 !== void 0 && (R3.ltc_1.value = Cr.LTC_1), R3.ltc_2 !== void 0 && (R3.ltc_2.value = Cr.LTC_2), Oa.upload(f2, o3.uniformsList, R3, b2), n4.isShaderMaterial && (n4.uniformsNeedUpdate = false)), n4.isShaderMaterial && n4.uniformsNeedUpdate === true && (Oa.upload(f2, o3.uniformsList, R3, b2), n4.uniformsNeedUpdate = false), n4.isSpriteMaterial && P3.setValue(f2, "center", i4.center), 0 < L3.numMultiviewViews ? At2.updateObjectMatricesUniforms(i4, t4, P3) : (P3.setValue(f2, "modelViewMatrix", i4.modelViewMatrix), P3.setValue(f2, "normalMatrix", i4.normalMatrix)), P3.setValue(f2, "modelMatrix", i4.matrixWorld), L3;
          }
          function Ht2(t4, e4, n4) {
            t4.opacity.value = e4.opacity, e4.color && t4.diffuse.value.copy(e4.color), e4.emissive && t4.emissive.value.copy(e4.emissive).multiplyScalar(e4.emissiveIntensity), e4.map && (t4.map.value = e4.map), e4.alphaMap && (t4.alphaMap.value = e4.alphaMap), e4.specularMap && (t4.specularMap.value = e4.specularMap);
            var i4, r4, a3 = e4.envMap || n4;
            a3 && (t4.envMap.value = a3, t4.flipEnvMap.value = a3.isCubeTexture ? -1 : 1, t4.reflectivity.value = e4.reflectivity, t4.refractionRatio.value = e4.refractionRatio, t4.maxMipLevel.value = x2.get(a3).__maxMipLevel), e4.lightMap && (t4.lightMap.value = e4.lightMap, t4.lightMapIntensity.value = e4.lightMapIntensity), e4.aoMap && (t4.aoMap.value = e4.aoMap, t4.aoMapIntensity.value = e4.aoMapIntensity), e4.map ? i4 = e4.map : e4.specularMap ? i4 = e4.specularMap : e4.displacementMap ? i4 = e4.displacementMap : e4.normalMap ? i4 = e4.normalMap : e4.bumpMap ? i4 = e4.bumpMap : e4.roughnessMap ? i4 = e4.roughnessMap : e4.metalnessMap ? i4 = e4.metalnessMap : e4.alphaMap ? i4 = e4.alphaMap : e4.emissiveMap && (i4 = e4.emissiveMap), i4 !== void 0 && (i4.isWebGLRenderTarget && (i4 = i4.texture), i4.matrixAutoUpdate === true && i4.updateMatrix(), t4.uvTransform.value.copy(i4.matrix)), e4.aoMap ? r4 = e4.aoMap : e4.lightMap && (r4 = e4.lightMap), r4 !== void 0 && (r4.isWebGLRenderTarget && (r4 = r4.texture), r4.matrixAutoUpdate === true && r4.updateMatrix(), t4.uv2Transform.value.copy(r4.matrix));
          }
          function Wt2(t4, e4, n4) {
            t4.roughness.value = e4.roughness, t4.metalness.value = e4.metalness, e4.roughnessMap && (t4.roughnessMap.value = e4.roughnessMap), e4.metalnessMap && (t4.metalnessMap.value = e4.metalnessMap), e4.emissiveMap && (t4.emissiveMap.value = e4.emissiveMap), e4.bumpMap && (t4.bumpMap.value = e4.bumpMap, t4.bumpScale.value = e4.bumpScale, e4.side === l && (t4.bumpScale.value *= -1)), e4.normalMap && (t4.normalMap.value = e4.normalMap, t4.normalScale.value.copy(e4.normalScale), e4.side === l && t4.normalScale.value.negate()), e4.displacementMap && (t4.displacementMap.value = e4.displacementMap, t4.displacementScale.value = e4.displacementScale, t4.displacementBias.value = e4.displacementBias), (e4.envMap || n4) && (t4.envMapIntensity.value = e4.envMapIntensity);
          }
          jt2.setAnimationLoop(function(t4) {
            Dt2.isPresenting || Ft2 && Ft2(t4);
          }), typeof window != "undefined" && jt2.setContext(window), this.setAnimationLoop = function(t4) {
            Ft2 = t4, Dt2.setAnimationLoop(t4), jt2.start();
          }, this.render = function(t4, e4) {
            var n4, i4;
            if (arguments[2] !== void 0 && (console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."), n4 = arguments[2]), arguments[3] !== void 0 && (console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."), i4 = arguments[3]), e4 && e4.isCamera) {
              if (!P2) {
                V2.geometry = null, V2.program = null, V2.wireframe = false, j2 = -1, !(z2 = null) === t4.autoUpdate && t4.updateMatrixWorld(), e4.parent === null && e4.updateMatrixWorld(), Dt2.enabled && Dt2.isPresenting && (e4 = Dt2.getCamera(e4)), (p2 = T2.get(t4, e4)).init(), t4.onBeforeRender(I2, t4, e4, n4 || N2), mt2.multiplyMatrices(e4.projectionMatrix, e4.matrixWorldInverse), et2.setFromProjectionMatrix(mt2), ft2 = this.localClippingEnabled, it2 = nt2.init(this.clippingPlanes, ft2, e4), (d2 = C2.get(t4, e4)).init(), function t5(e5, n5, i5, r5) {
                  if (e5.visible !== false) {
                    if (e5.layers.test(n5.layers)) {
                      if (e5.isGroup)
                        i5 = e5.renderOrder;
                      else if (e5.isLOD)
                        e5.autoUpdate === true && e5.update(n5);
                      else if (e5.isLight)
                        p2.pushLight(e5), e5.castShadow && p2.pushShadow(e5);
                      else if (e5.isSprite) {
                        if (!e5.frustumCulled || et2.intersectsSprite(e5)) {
                          r5 && vt2.setFromMatrixPosition(e5.matrixWorld).applyMatrix4(mt2);
                          var a4 = _6.update(e5);
                          (o4 = e5.material).visible && d2.push(e5, a4, o4, i5, vt2.z, null);
                        }
                      } else if (e5.isImmediateRenderObject)
                        r5 && vt2.setFromMatrixPosition(e5.matrixWorld).applyMatrix4(mt2), d2.push(e5, null, e5.material, i5, vt2.z, null);
                      else if ((e5.isMesh || e5.isLine || e5.isPoints) && (e5.isSkinnedMesh && e5.skeleton.frame !== y2.render.frame && (e5.skeleton.update(), e5.skeleton.frame = y2.render.frame), !e5.frustumCulled || et2.intersectsObject(e5))) {
                        r5 && vt2.setFromMatrixPosition(e5.matrixWorld).applyMatrix4(mt2);
                        a4 = _6.update(e5);
                        var o4 = e5.material;
                        if (Array.isArray(o4))
                          for (var s4 = a4.groups, l2 = 0, c3 = s4.length; l2 < c3; l2++) {
                            var u3 = s4[l2], h3 = o4[u3.materialIndex];
                            h3 && h3.visible && d2.push(e5, a4, h3, i5, vt2.z, u3);
                          }
                        else
                          o4.visible && d2.push(e5, a4, o4, i5, vt2.z, null);
                      }
                    }
                    var f3 = e5.children;
                    for (l2 = 0, c3 = f3.length; l2 < c3; l2++)
                      t5(f3[l2], n5, i5, r5);
                  }
                }(t4, e4, 0, I2.sortObjects), I2.sortObjects === true && d2.sort(Z2, $3), it2 && nt2.beginShadows();
                var r4 = p2.state.shadowsArray;
                Ot2.render(r4, t4, e4), p2.setupLights(e4), it2 && nt2.endShadows(), this.info.autoReset && this.info.reset(), n4 !== void 0 && this.setRenderTarget(n4), Dt2.enabled && At2.isAvailable() && At2.attachCamera(e4), E2.render(d2, t4, e4, i4);
                var a3 = d2.opaque, o3 = d2.transparent;
                if (t4.overrideMaterial) {
                  var s3 = t4.overrideMaterial;
                  a3.length && Vt2(a3, t4, e4, s3), o3.length && Vt2(o3, t4, e4, s3);
                } else
                  a3.length && Vt2(a3, t4, e4), o3.length && Vt2(o3, t4, e4);
                t4.onAfterRender(I2, t4, e4), N2 !== null && (b2.updateRenderTargetMipmap(N2), b2.updateMultisampleRenderTarget(N2)), v2.buffers.depth.setTest(true), v2.buffers.depth.setMask(true), v2.buffers.color.setMask(true), v2.setPolygonOffset(false), Dt2.enabled && At2.isAvailable() && At2.detachCamera(e4), p2 = d2 = null;
              }
            } else
              console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
          }, this.mxRenderObject = function(t4, e4, n4, i4, r4) {
            zt2(t4, e4, n4, _6.update(t4), i4, r4);
          }, this.setFramebuffer = function(t4) {
            R2 !== t4 && N2 === null && f2.bindFramebuffer(36160, t4), R2 = t4;
          }, this.getActiveCubeFace = function() {
            return k2;
          }, this.getActiveMipmapLevel = function() {
            return B2;
          }, this.getRenderTarget = function() {
            return N2;
          }, this.setRenderTarget = function(t4, e4, n4) {
            k2 = e4, B2 = n4, (N2 = t4) && x2.get(t4).__webglFramebuffer === void 0 && b2.setupRenderTarget(t4);
            var i4 = R2, r4 = false;
            if (t4) {
              var a3 = x2.get(t4).__webglFramebuffer;
              t4.isWebGLCubeRenderTarget ? (i4 = a3[e4 || 0], r4 = true) : i4 = t4.isWebGLMultisampleRenderTarget ? x2.get(t4).__webglMultisampledFramebuffer : a3, U2.copy(t4.viewport), H2.copy(t4.scissor), W2 = t4.scissorTest;
            } else
              U2.copy(K2).multiplyScalar(Y2).floor(), H2.copy(Q2).multiplyScalar(Y2).floor(), W2 = tt2;
            if (F2 !== i4 && (f2.bindFramebuffer(36160, i4), F2 = i4), v2.viewport(U2), v2.scissor(H2), v2.setScissorTest(W2), r4) {
              var o3 = x2.get(t4.texture);
              f2.framebufferTexture2D(36160, 36064, 34069 + (e4 || 0), o3.__webglTexture, n4 || 0);
            }
          }, this.readRenderTargetPixels = function(t4, e4, n4, i4, r4, a3, o3) {
            if (t4 && t4.isWebGLRenderTarget) {
              var s3 = x2.get(t4).__webglFramebuffer;
              if (t4.isWebGLCubeRenderTarget && o3 !== void 0 && (s3 = s3[o3]), s3) {
                var l2 = false;
                s3 !== F2 && (f2.bindFramebuffer(36160, s3), l2 = true);
                try {
                  var c3 = t4.texture, u3 = c3.format, h3 = c3.type;
                  if (u3 !== Et && L2.convert(u3) !== f2.getParameter(35739))
                    return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                  if (!(h3 === pt || L2.convert(h3) === f2.getParameter(35738) || h3 === xt && (g2.isWebGL2 || m2.get("OES_texture_float") || m2.get("WEBGL_color_buffer_float")) || h3 === bt && (g2.isWebGL2 ? m2.get("EXT_color_buffer_float") : m2.get("EXT_color_buffer_half_float"))))
                    return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                  f2.checkFramebufferStatus(36160) === 36053 ? 0 <= e4 && e4 <= t4.width - i4 && 0 <= n4 && n4 <= t4.height - r4 && f2.readPixels(e4, n4, i4, r4, L2.convert(u3), L2.convert(h3), a3) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
                } finally {
                  l2 && f2.bindFramebuffer(36160, F2);
                }
              }
            } else
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
          }, this.copyFramebufferToTexture = function(t4, e4, n4) {
            n4 === void 0 && (n4 = 0);
            var i4 = Math.pow(2, -n4), r4 = Math.floor(e4.image.width * i4), a3 = Math.floor(e4.image.height * i4), o3 = L2.convert(e4.format);
            b2.setTexture2D(e4, 0), f2.copyTexImage2D(3553, n4, o3, t4.x, t4.y, r4, a3, 0), v2.unbindTexture();
          }, this.copyTextureToTexture = function(t4, e4, n4, i4) {
            var r4 = e4.image.width, a3 = e4.image.height, o3 = L2.convert(n4.format), s3 = L2.convert(n4.type);
            b2.setTexture2D(n4, 0), e4.isDataTexture ? f2.texSubImage2D(3553, i4 || 0, t4.x, t4.y, r4, a3, o3, s3, e4.image.data) : f2.texSubImage2D(3553, i4 || 0, t4.x, t4.y, o3, s3, e4.image), v2.unbindTexture();
          }, this.initTexture = function(t4) {
            b2.setTexture2D(t4, 0), v2.unbindTexture();
          }, typeof __THREE_DEVTOOLS__ != "undefined" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
        }
        function po(t3, e3) {
          this.name = "", this.color = new ci(t3), this.density = e3 !== void 0 ? e3 : 25e-5;
        }
        function fo(t3, e3, n3) {
          this.name = "", this.color = new ci(t3), this.near = e3 !== void 0 ? e3 : 1, this.far = n3 !== void 0 ? n3 : 1e3;
        }
        function mo(t3, e3) {
          this.array = t3, this.stride = e3, this.count = t3 !== void 0 ? t3.length / e3 : 0, this.usage = Ee, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
        }
        so.prototype = Object.assign(Object.create(Ve.prototype), { constructor: so, isWebGLMultiviewRenderTarget: true, copy: function(t3) {
          return Ve.prototype.copy.call(this, t3), this.numViews = t3.numViews, this;
        }, setNumViews: function(t3) {
          return this.numViews !== t3 && (this.numViews = t3, this.dispose()), this;
        } }), lo.prototype = Object.assign(Object.create(yr.prototype), { constructor: lo, isArrayCamera: true }), co.prototype = Object.assign(Object.create(yn.prototype), { constructor: co, isGroup: true }), Object.assign(uo.prototype, Ae.prototype), Object.assign(po.prototype, { isFogExp2: true, clone: function() {
          return new po(this.color, this.density);
        }, toJSON: function() {
          return { type: "FogExp2", color: this.color.getHex(), density: this.density };
        } }), Object.assign(fo.prototype, { isFog: true, clone: function() {
          return new fo(this.color, this.near, this.far);
        }, toJSON: function() {
          return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far };
        } }), Object.defineProperty(mo.prototype, "needsUpdate", { set: function(t3) {
          t3 === true && this.version++;
        } }), Object.assign(mo.prototype, { isInterleavedBuffer: true, onUploadCallback: function() {
        }, setUsage: function(t3) {
          return this.usage = t3, this;
        }, copy: function(t3) {
          return this.array = new t3.array.constructor(t3.array), this.count = t3.count, this.stride = t3.stride, this.usage = t3.usage, this;
        }, copyAt: function(t3, e3, n3) {
          t3 *= this.stride, n3 *= e3.stride;
          for (var i3 = 0, r3 = this.stride; i3 < r3; i3++)
            this.array[t3 + i3] = e3.array[n3 + i3];
          return this;
        }, set: function(t3, e3) {
          return e3 === void 0 && (e3 = 0), this.array.set(t3, e3), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, onUpload: function(t3) {
          return this.onUploadCallback = t3, this;
        } });
        var go, vo = new We();
        function yo(t3, e3, n3, i3) {
          this.data = t3, this.itemSize = e3, this.offset = n3, this.normalized = i3 === true;
        }
        function xo(t3) {
          mi.call(this), this.type = "SpriteMaterial", this.color = new ci(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = true, this.transparent = true, this.setValues(t3);
        }
        Object.defineProperties(yo.prototype, { count: { get: function() {
          return this.data.count;
        } }, array: { get: function() {
          return this.data.array;
        } } }), Object.assign(yo.prototype, { isInterleavedBufferAttribute: true, applyMatrix4: function(t3) {
          for (var e3 = 0, n3 = this.data.count; e3 < n3; e3++)
            vo.x = this.getX(e3), vo.y = this.getY(e3), vo.z = this.getZ(e3), vo.applyMatrix4(t3), this.setXYZ(e3, vo.x, vo.y, vo.z);
          return this;
        }, setX: function(t3, e3) {
          return this.data.array[t3 * this.data.stride + this.offset] = e3, this;
        }, setY: function(t3, e3) {
          return this.data.array[t3 * this.data.stride + this.offset + 1] = e3, this;
        }, setZ: function(t3, e3) {
          return this.data.array[t3 * this.data.stride + this.offset + 2] = e3, this;
        }, setW: function(t3, e3) {
          return this.data.array[t3 * this.data.stride + this.offset + 3] = e3, this;
        }, getX: function(t3) {
          return this.data.array[t3 * this.data.stride + this.offset];
        }, getY: function(t3) {
          return this.data.array[t3 * this.data.stride + this.offset + 1];
        }, getZ: function(t3) {
          return this.data.array[t3 * this.data.stride + this.offset + 2];
        }, getW: function(t3) {
          return this.data.array[t3 * this.data.stride + this.offset + 3];
        }, setXY: function(t3, e3, n3) {
          return t3 = t3 * this.data.stride + this.offset, this.data.array[t3 + 0] = e3, this.data.array[t3 + 1] = n3, this;
        }, setXYZ: function(t3, e3, n3, i3) {
          return t3 = t3 * this.data.stride + this.offset, this.data.array[t3 + 0] = e3, this.data.array[t3 + 1] = n3, this.data.array[t3 + 2] = i3, this;
        }, setXYZW: function(t3, e3, n3, i3, r3) {
          return t3 = t3 * this.data.stride + this.offset, this.data.array[t3 + 0] = e3, this.data.array[t3 + 1] = n3, this.data.array[t3 + 2] = i3, this.data.array[t3 + 3] = r3, this;
        } }), ((xo.prototype = Object.create(mi.prototype)).constructor = xo).prototype.isSpriteMaterial = true, xo.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.map = t3.map, this.alphaMap = t3.alphaMap, this.rotation = t3.rotation, this.sizeAttenuation = t3.sizeAttenuation, this;
        };
        var bo = new We(), wo = new We(), Mo = new We(), _o = new Re(), So = new Re(), Co = new Qe(), To = new We(), Eo = new We(), Do = new We(), Ao = new Re(), Oo = new Re(), Lo = new Re();
        function Io(t3) {
          if (yn.call(this), this.type = "Sprite", go === void 0) {
            go = new Ni();
            var e3 = new mo(new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]), 5);
            go.setIndex([0, 1, 2, 0, 2, 3]), go.setAttribute("position", new yo(e3, 3, 0, false)), go.setAttribute("uv", new yo(e3, 2, 3, false));
          }
          this.geometry = go, this.material = t3 !== void 0 ? t3 : new xo(), this.center = new Re(0.5, 0.5);
        }
        function Po(t3, e3, n3, i3, r3, a2) {
          _o.subVectors(t3, n3).addScalar(0.5).multiply(i3), r3 !== void 0 ? (So.x = a2 * _o.x - r3 * _o.y, So.y = r3 * _o.x + a2 * _o.y) : So.copy(_o), t3.copy(e3), t3.x += So.x, t3.y += So.y, t3.applyMatrix4(Co);
        }
        Io.prototype = Object.assign(Object.create(yn.prototype), { constructor: Io, isSprite: true, raycast: function(t3, e3) {
          t3.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), wo.setFromMatrixScale(this.matrixWorld), Co.copy(t3.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(t3.camera.matrixWorldInverse, this.matrixWorld), Mo.setFromMatrixPosition(this.modelViewMatrix), t3.camera.isPerspectiveCamera && this.material.sizeAttenuation === false && wo.multiplyScalar(-Mo.z);
          var n3, i3, r3 = this.material.rotation;
          r3 !== 0 && (i3 = Math.cos(r3), n3 = Math.sin(r3));
          var a2 = this.center;
          Po(To.set(-0.5, -0.5, 0), Mo, a2, wo, n3, i3), Po(Eo.set(0.5, -0.5, 0), Mo, a2, wo, n3, i3), Po(Do.set(0.5, 0.5, 0), Mo, a2, wo, n3, i3), Ao.set(0, 0), Oo.set(1, 0), Lo.set(1, 1);
          var o2 = t3.ray.intersectTriangle(To, Eo, Do, false, bo);
          if (o2 !== null || (Po(Eo.set(-0.5, 0.5, 0), Mo, a2, wo, n3, i3), Oo.set(0, 1), (o2 = t3.ray.intersectTriangle(To, Do, Eo, false, bo)) !== null)) {
            var s2 = t3.ray.origin.distanceTo(bo);
            s2 < t3.near || s2 > t3.far || e3.push({ distance: s2, point: bo.clone(), uv: ai.getUV(bo, To, Eo, Do, Ao, Oo, Lo, new Re()), face: null, object: this });
          }
        }, clone: function() {
          return new this.constructor(this.material).copy(this);
        }, copy: function(t3) {
          return yn.prototype.copy.call(this, t3), t3.center !== void 0 && this.center.copy(t3.center), this;
        } });
        var Ro = new We(), ko = new We();
        function Bo() {
          yn.call(this), this.type = "LOD", Object.defineProperties(this, { levels: { enumerable: true, value: [] } }), this.autoUpdate = true;
        }
        function No(t3, e3) {
          t3 && t3.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."), er.call(this, t3, e3), this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new Qe(), this.bindMatrixInverse = new Qe();
        }
        Bo.prototype = Object.assign(Object.create(yn.prototype), { constructor: Bo, isLOD: true, copy: function(t3) {
          yn.prototype.copy.call(this, t3, false);
          for (var e3 = t3.levels, n3 = 0, i3 = e3.length; n3 < i3; n3++) {
            var r3 = e3[n3];
            this.addLevel(r3.object.clone(), r3.distance);
          }
          return this.autoUpdate = t3.autoUpdate, this;
        }, addLevel: function(t3, e3) {
          e3 === void 0 && (e3 = 0), e3 = Math.abs(e3);
          for (var n3 = this.levels, i3 = 0; i3 < n3.length && !(e3 < n3[i3].distance); i3++)
            ;
          return n3.splice(i3, 0, { distance: e3, object: t3 }), this.add(t3), this;
        }, getObjectForDistance: function(t3) {
          var e3 = this.levels;
          if (0 < e3.length) {
            for (var n3 = 1, i3 = e3.length; n3 < i3 && !(t3 < e3[n3].distance); n3++)
              ;
            return e3[n3 - 1].object;
          }
          return null;
        }, raycast: function(t3, e3) {
          if (0 < this.levels.length) {
            Ro.setFromMatrixPosition(this.matrixWorld);
            var n3 = t3.ray.origin.distanceTo(Ro);
            this.getObjectForDistance(n3).raycast(t3, e3);
          }
        }, update: function(t3) {
          var e3 = this.levels;
          if (1 < e3.length) {
            Ro.setFromMatrixPosition(t3.matrixWorld), ko.setFromMatrixPosition(this.matrixWorld);
            var n3 = Ro.distanceTo(ko);
            e3[0].object.visible = true;
            for (var i3 = 1, r3 = e3.length; i3 < r3 && n3 >= e3[i3].distance; i3++)
              e3[i3 - 1].object.visible = false, e3[i3].object.visible = true;
            for (; i3 < r3; i3++)
              e3[i3].object.visible = false;
          }
        }, toJSON: function(t3) {
          var e3 = yn.prototype.toJSON.call(this, t3);
          this.autoUpdate === false && (e3.object.autoUpdate = false), e3.object.levels = [];
          for (var n3 = this.levels, i3 = 0, r3 = n3.length; i3 < r3; i3++) {
            var a2 = n3[i3];
            e3.object.levels.push({ object: a2.object.uuid, distance: a2.distance });
          }
          return e3;
        } }), No.prototype = Object.assign(Object.create(er.prototype), { constructor: No, isSkinnedMesh: true, bind: function(t3, e3) {
          this.skeleton = t3, e3 === void 0 && (this.updateMatrixWorld(true), this.skeleton.calculateInverses(), e3 = this.matrixWorld), this.bindMatrix.copy(e3), this.bindMatrixInverse.getInverse(e3);
        }, pose: function() {
          this.skeleton.pose();
        }, normalizeSkinWeights: function() {
          for (var t3 = new je(), e3 = this.geometry.attributes.skinWeight, n3 = 0, i3 = e3.count; n3 < i3; n3++) {
            t3.x = e3.getX(n3), t3.y = e3.getY(n3), t3.z = e3.getZ(n3), t3.w = e3.getW(n3);
            var r3 = 1 / t3.manhattanLength();
            r3 != 1 / 0 ? t3.multiplyScalar(r3) : t3.set(1, 0, 0, 0), e3.setXYZW(n3, t3.x, t3.y, t3.z, t3.w);
          }
        }, updateMatrixWorld: function(t3) {
          er.prototype.updateMatrixWorld.call(this, t3), this.bindMode === "attached" ? this.bindMatrixInverse.getInverse(this.matrixWorld) : this.bindMode === "detached" ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        }, clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } });
        var Fo = new Qe(), jo = new Qe();
        function Vo(t3, e3) {
          if (t3 = t3 || [], this.bones = t3.slice(0), this.boneMatrices = new Float32Array(16 * this.bones.length), this.frame = -1, e3 === void 0)
            this.calculateInverses();
          else if (this.bones.length === e3.length)
            this.boneInverses = e3.slice(0);
          else {
            console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [];
            for (var n3 = 0, i3 = this.bones.length; n3 < i3; n3++)
              this.boneInverses.push(new Qe());
          }
        }
        function zo() {
          yn.call(this), this.type = "Bone";
        }
        Object.assign(Vo.prototype, { calculateInverses: function() {
          this.boneInverses = [];
          for (var t3 = 0, e3 = this.bones.length; t3 < e3; t3++) {
            var n3 = new Qe();
            this.bones[t3] && n3.getInverse(this.bones[t3].matrixWorld), this.boneInverses.push(n3);
          }
        }, pose: function() {
          var t3, e3, n3;
          for (e3 = 0, n3 = this.bones.length; e3 < n3; e3++)
            (t3 = this.bones[e3]) && t3.matrixWorld.getInverse(this.boneInverses[e3]);
          for (e3 = 0, n3 = this.bones.length; e3 < n3; e3++)
            (t3 = this.bones[e3]) && (t3.parent && t3.parent.isBone ? (t3.matrix.getInverse(t3.parent.matrixWorld), t3.matrix.multiply(t3.matrixWorld)) : t3.matrix.copy(t3.matrixWorld), t3.matrix.decompose(t3.position, t3.quaternion, t3.scale));
        }, update: function() {
          for (var t3 = this.bones, e3 = this.boneInverses, n3 = this.boneMatrices, i3 = this.boneTexture, r3 = 0, a2 = t3.length; r3 < a2; r3++) {
            var o2 = t3[r3] ? t3[r3].matrixWorld : jo;
            Fo.multiplyMatrices(o2, e3[r3]), Fo.toArray(n3, 16 * r3);
          }
          i3 !== void 0 && (i3.needsUpdate = true);
        }, clone: function() {
          return new Vo(this.bones, this.boneInverses);
        }, getBoneByName: function(t3) {
          for (var e3 = 0, n3 = this.bones.length; e3 < n3; e3++) {
            var i3 = this.bones[e3];
            if (i3.name === t3)
              return i3;
          }
        } }), zo.prototype = Object.assign(Object.create(yn.prototype), { constructor: zo, isBone: true });
        var Go = new Qe(), Uo = new Qe(), Ho = [], Wo = new er();
        function Jo(t3, e3, n3) {
          er.call(this, t3, e3), this.instanceMatrix = new yi(new Float32Array(16 * n3), 16), this.count = n3, this.frustumCulled = false;
        }
        function qo(t3) {
          mi.call(this), this.type = "LineBasicMaterial", this.color = new ci(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.setValues(t3);
        }
        Jo.prototype = Object.assign(Object.create(er.prototype), { constructor: Jo, isInstancedMesh: true, getMatrixAt: function(t3, e3) {
          e3.fromArray(this.instanceMatrix.array, 16 * t3);
        }, raycast: function(t3, e3) {
          var n3 = this.matrixWorld, i3 = this.count;
          if (Wo.geometry = this.geometry, Wo.material = this.material, Wo.material !== void 0)
            for (var r3 = 0; r3 < i3; r3++)
              this.getMatrixAt(r3, Go), Uo.multiplyMatrices(n3, Go), Wo.matrixWorld = Uo, Wo.raycast(t3, Ho), 0 < Ho.length && (Ho[0].instanceId = r3, Ho[0].object = this, e3.push(Ho[0]), Ho.length = 0);
        }, setMatrixAt: function(t3, e3) {
          e3.toArray(this.instanceMatrix.array, 16 * t3);
        }, updateMorphTargets: function() {
        } }), ((qo.prototype = Object.create(mi.prototype)).constructor = qo).prototype.isLineBasicMaterial = true, qo.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.linewidth = t3.linewidth, this.linecap = t3.linecap, this.linejoin = t3.linejoin, this;
        };
        var Xo = new We(), Yo = new We(), Zo = new Qe(), $o = new Hn(), Ko = new Bn();
        function Qo(t3, e3, n3) {
          n3 === 1 && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."), yn.call(this), this.type = "Line", this.geometry = t3 !== void 0 ? t3 : new Ni(), this.material = e3 !== void 0 ? e3 : new qo();
        }
        Qo.prototype = Object.assign(Object.create(yn.prototype), { constructor: Qo, isLine: true, computeLineDistances: function() {
          var t3 = this.geometry;
          if (t3.isBufferGeometry)
            if (t3.index === null) {
              for (var e3 = t3.attributes.position, n3 = [0], i3 = 1, r3 = e3.count; i3 < r3; i3++)
                Xo.fromBufferAttribute(e3, i3 - 1), Yo.fromBufferAttribute(e3, i3), n3[i3] = n3[i3 - 1], n3[i3] += Xo.distanceTo(Yo);
              t3.setAttribute("lineDistance", new Ti(n3, 1));
            } else
              console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          else if (t3.isGeometry) {
            var a2 = t3.vertices;
            for ((n3 = t3.lineDistances)[0] = 0, i3 = 1, r3 = a2.length; i3 < r3; i3++)
              n3[i3] = n3[i3 - 1], n3[i3] += a2[i3 - 1].distanceTo(a2[i3]);
          }
          return this;
        }, raycast: function(t3, e3) {
          var n3 = t3.linePrecision, i3 = this.geometry, r3 = this.matrixWorld;
          if (i3.boundingSphere === null && i3.computeBoundingSphere(), Ko.copy(i3.boundingSphere), Ko.applyMatrix4(r3), Ko.radius += n3, t3.ray.intersectsSphere(Ko) !== false) {
            Zo.getInverse(r3), $o.copy(t3.ray).applyMatrix4(Zo);
            var a2 = n3 / ((this.scale.x + this.scale.y + this.scale.z) / 3), o2 = a2 * a2, s2 = new We(), l2 = new We(), c2 = new We(), u2 = new We(), h2 = this && this.isLineSegments ? 2 : 1;
            if (i3.isBufferGeometry) {
              var d2 = i3.index, p2 = i3.attributes.position.array;
              if (d2 !== null)
                for (var f2 = d2.array, m2 = 0, g2 = f2.length - 1; m2 < g2; m2 += h2) {
                  var v2 = f2[m2], y2 = f2[m2 + 1];
                  s2.fromArray(p2, 3 * v2), l2.fromArray(p2, 3 * y2), o2 < $o.distanceSqToSegment(s2, l2, u2, c2) || (u2.applyMatrix4(this.matrixWorld), (w2 = t3.ray.origin.distanceTo(u2)) < t3.near || w2 > t3.far || e3.push({ distance: w2, point: c2.clone().applyMatrix4(this.matrixWorld), index: m2, face: null, faceIndex: null, object: this }));
                }
              else
                for (m2 = 0, g2 = p2.length / 3 - 1; m2 < g2; m2 += h2)
                  s2.fromArray(p2, 3 * m2), l2.fromArray(p2, 3 * m2 + 3), o2 < $o.distanceSqToSegment(s2, l2, u2, c2) || (u2.applyMatrix4(this.matrixWorld), (w2 = t3.ray.origin.distanceTo(u2)) < t3.near || w2 > t3.far || e3.push({ distance: w2, point: c2.clone().applyMatrix4(this.matrixWorld), index: m2, face: null, faceIndex: null, object: this }));
            } else if (i3.isGeometry) {
              var x2 = i3.vertices, b2 = x2.length;
              for (m2 = 0; m2 < b2 - 1; m2 += h2) {
                var w2;
                o2 < $o.distanceSqToSegment(x2[m2], x2[m2 + 1], u2, c2) || (u2.applyMatrix4(this.matrixWorld), (w2 = t3.ray.origin.distanceTo(u2)) < t3.near || w2 > t3.far || e3.push({ distance: w2, point: c2.clone().applyMatrix4(this.matrixWorld), index: m2, face: null, faceIndex: null, object: this }));
              }
            }
          }
        }, clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } });
        var ts = new We(), es = new We();
        function ns(t3, e3) {
          Qo.call(this, t3, e3), this.type = "LineSegments";
        }
        function is(t3, e3) {
          Qo.call(this, t3, e3), this.type = "LineLoop";
        }
        function rs(t3) {
          mi.call(this), this.type = "PointsMaterial", this.color = new ci(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = true, this.morphTargets = false, this.setValues(t3);
        }
        ns.prototype = Object.assign(Object.create(Qo.prototype), { constructor: ns, isLineSegments: true, computeLineDistances: function() {
          var t3 = this.geometry;
          if (t3.isBufferGeometry)
            if (t3.index === null) {
              for (var e3 = t3.attributes.position, n3 = [], i3 = 0, r3 = e3.count; i3 < r3; i3 += 2)
                ts.fromBufferAttribute(e3, i3), es.fromBufferAttribute(e3, i3 + 1), n3[i3] = i3 === 0 ? 0 : n3[i3 - 1], n3[i3 + 1] = n3[i3] + ts.distanceTo(es);
              t3.setAttribute("lineDistance", new Ti(n3, 1));
            } else
              console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          else if (t3.isGeometry) {
            var a2 = t3.vertices;
            for (n3 = t3.lineDistances, i3 = 0, r3 = a2.length; i3 < r3; i3 += 2)
              ts.copy(a2[i3]), es.copy(a2[i3 + 1]), n3[i3] = i3 === 0 ? 0 : n3[i3 - 1], n3[i3 + 1] = n3[i3] + ts.distanceTo(es);
          }
          return this;
        } }), is.prototype = Object.assign(Object.create(Qo.prototype), { constructor: is, isLineLoop: true }), ((rs.prototype = Object.create(mi.prototype)).constructor = rs).prototype.isPointsMaterial = true, rs.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.map = t3.map, this.alphaMap = t3.alphaMap, this.size = t3.size, this.sizeAttenuation = t3.sizeAttenuation, this.morphTargets = t3.morphTargets, this;
        };
        var as = new Qe(), os = new Hn(), ss = new Bn(), ls = new We();
        function cs(t3, e3) {
          yn.call(this), this.type = "Points", this.geometry = t3 !== void 0 ? t3 : new Ni(), this.material = e3 !== void 0 ? e3 : new rs(), this.updateMorphTargets();
        }
        function us(t3, e3, n3, i3, r3, a2, o2) {
          var s2 = os.distanceSqToPoint(t3);
          if (s2 < n3) {
            var l2 = new We();
            os.closestPointToPoint(t3, l2), l2.applyMatrix4(i3);
            var c2 = r3.ray.origin.distanceTo(l2);
            if (c2 < r3.near || c2 > r3.far)
              return;
            a2.push({ distance: c2, distanceToRay: Math.sqrt(s2), point: l2, index: e3, face: null, object: o2 });
          }
        }
        function hs(t3, e3, n3, i3, r3, a2, o2, s2, l2) {
          Fe.call(this, t3, e3, n3, i3, r3, a2, o2, s2, l2), this.format = o2 !== void 0 ? o2 : Tt, this.minFilter = a2 !== void 0 ? a2 : ut, this.magFilter = r3 !== void 0 ? r3 : ut, this.generateMipmaps = false;
        }
        function ds(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2, u2, h2) {
          Fe.call(this, null, a2, o2, s2, l2, c2, i3, r3, u2, h2), this.image = { width: e3, height: n3 }, this.mipmaps = t3, this.flipY = false, this.generateMipmaps = false;
        }
        function ps(t3, e3, n3, i3, r3, a2, o2, s2, l2) {
          Fe.call(this, t3, e3, n3, i3, r3, a2, o2, s2, l2), this.needsUpdate = true;
        }
        function fs(t3, e3, n3, i3, r3, a2, o2, s2, l2, c2) {
          if ((c2 = c2 !== void 0 ? c2 : Lt) !== Lt && c2 !== It)
            throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
          n3 === void 0 && c2 === Lt && (n3 = gt), n3 === void 0 && c2 === It && (n3 = St), Fe.call(this, null, i3, r3, a2, o2, s2, c2, n3, l2), this.image = { width: t3, height: e3 }, this.magFilter = o2 !== void 0 ? o2 : st, this.minFilter = s2 !== void 0 ? s2 : st, this.flipY = false, this.generateMipmaps = false;
        }
        function ms(t3) {
          Ni.call(this), this.type = "WireframeGeometry";
          var e3, n3, i3, r3, a2, o2, s2, l2, c2, u2, h2 = [], d2 = [0, 0], p2 = {}, f2 = ["a", "b", "c"];
          if (t3 && t3.isGeometry) {
            var m2 = t3.faces;
            for (e3 = 0, i3 = m2.length; e3 < i3; e3++) {
              var g2 = m2[e3];
              for (n3 = 0; n3 < 3; n3++)
                s2 = g2[f2[n3]], l2 = g2[f2[(n3 + 1) % 3]], d2[0] = Math.min(s2, l2), d2[1] = Math.max(s2, l2), p2[c2 = d2[0] + "," + d2[1]] === void 0 && (p2[c2] = { index1: d2[0], index2: d2[1] });
            }
            for (c2 in p2)
              o2 = p2[c2], u2 = t3.vertices[o2.index1], h2.push(u2.x, u2.y, u2.z), u2 = t3.vertices[o2.index2], h2.push(u2.x, u2.y, u2.z);
          } else if (t3 && t3.isBufferGeometry) {
            var v2, y2, x2, b2, w2, M2;
            if (u2 = new We(), t3.index !== null) {
              for (v2 = t3.attributes.position, y2 = t3.index, (x2 = t3.groups).length === 0 && (x2 = [{ start: 0, count: y2.count, materialIndex: 0 }]), r3 = 0, a2 = x2.length; r3 < a2; ++r3)
                for (i3 = (e3 = (b2 = x2[r3]).start) + b2.count; e3 < i3; e3 += 3)
                  for (n3 = 0; n3 < 3; n3++)
                    s2 = y2.getX(e3 + n3), l2 = y2.getX(e3 + (n3 + 1) % 3), d2[0] = Math.min(s2, l2), d2[1] = Math.max(s2, l2), p2[c2 = d2[0] + "," + d2[1]] === void 0 && (p2[c2] = { index1: d2[0], index2: d2[1] });
              for (c2 in p2)
                o2 = p2[c2], u2.fromBufferAttribute(v2, o2.index1), h2.push(u2.x, u2.y, u2.z), u2.fromBufferAttribute(v2, o2.index2), h2.push(u2.x, u2.y, u2.z);
            } else
              for (e3 = 0, i3 = (v2 = t3.attributes.position).count / 3; e3 < i3; e3++)
                for (n3 = 0; n3 < 3; n3++)
                  w2 = 3 * e3 + n3, u2.fromBufferAttribute(v2, w2), h2.push(u2.x, u2.y, u2.z), M2 = 3 * e3 + (n3 + 1) % 3, u2.fromBufferAttribute(v2, M2), h2.push(u2.x, u2.y, u2.z);
          }
          this.setAttribute("position", new Ti(h2, 3));
        }
        function gs(t3, e3, n3) {
          lr.call(this), this.type = "ParametricGeometry", this.parameters = { func: t3, slices: e3, stacks: n3 }, this.fromBufferGeometry(new vs(t3, e3, n3)), this.mergeVertices();
        }
        function vs(t3, e3, n3) {
          Ni.call(this), this.type = "ParametricBufferGeometry", this.parameters = { func: t3, slices: e3, stacks: n3 };
          var i3, r3, a2 = [], o2 = [], s2 = [], l2 = [], c2 = new We(), u2 = new We(), h2 = new We(), d2 = new We(), p2 = new We();
          t3.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
          var f2 = e3 + 1;
          for (i3 = 0; i3 <= n3; i3++) {
            var m2 = i3 / n3;
            for (r3 = 0; r3 <= e3; r3++) {
              var g2 = r3 / e3;
              t3(g2, m2, u2), o2.push(u2.x, u2.y, u2.z), 0 <= g2 - 1e-5 ? (t3(g2 - 1e-5, m2, h2), d2.subVectors(u2, h2)) : (t3(1e-5 + g2, m2, h2), d2.subVectors(h2, u2)), 0 <= m2 - 1e-5 ? (t3(g2, m2 - 1e-5, h2), p2.subVectors(u2, h2)) : (t3(g2, 1e-5 + m2, h2), p2.subVectors(h2, u2)), c2.crossVectors(d2, p2).normalize(), s2.push(c2.x, c2.y, c2.z), l2.push(g2, m2);
            }
          }
          for (i3 = 0; i3 < n3; i3++)
            for (r3 = 0; r3 < e3; r3++) {
              var v2 = i3 * f2 + r3, y2 = i3 * f2 + r3 + 1, x2 = (i3 + 1) * f2 + r3 + 1, b2 = (i3 + 1) * f2 + r3;
              a2.push(v2, y2, b2), a2.push(y2, x2, b2);
            }
          this.setIndex(a2), this.setAttribute("position", new Ti(o2, 3)), this.setAttribute("normal", new Ti(s2, 3)), this.setAttribute("uv", new Ti(l2, 2));
        }
        function ys(t3, e3, n3, i3) {
          lr.call(this), this.type = "PolyhedronGeometry", this.parameters = { vertices: t3, indices: e3, radius: n3, detail: i3 }, this.fromBufferGeometry(new xs(t3, e3, n3, i3)), this.mergeVertices();
        }
        function xs(t3, e3, n3, i3) {
          Ni.call(this), this.type = "PolyhedronBufferGeometry", this.parameters = { vertices: t3, indices: e3, radius: n3, detail: i3 }, n3 = n3 || 1;
          var r3 = [], a2 = [];
          function o2(t4, e4, n4, i4) {
            var r4, a3, o3 = Math.pow(2, i4), l3 = [];
            for (r4 = 0; r4 <= o3; r4++) {
              l3[r4] = [];
              var c3 = t4.clone().lerp(n4, r4 / o3), u3 = e4.clone().lerp(n4, r4 / o3), h2 = o3 - r4;
              for (a3 = 0; a3 <= h2; a3++)
                l3[r4][a3] = a3 === 0 && r4 === o3 ? c3 : c3.clone().lerp(u3, a3 / h2);
            }
            for (r4 = 0; r4 < o3; r4++)
              for (a3 = 0; a3 < 2 * (o3 - r4) - 1; a3++) {
                var d2 = Math.floor(a3 / 2);
                a3 % 2 == 0 ? (s2(l3[r4][d2 + 1]), s2(l3[r4 + 1][d2]), s2(l3[r4][d2])) : (s2(l3[r4][d2 + 1]), s2(l3[r4 + 1][d2 + 1]), s2(l3[r4 + 1][d2]));
              }
          }
          function s2(t4) {
            r3.push(t4.x, t4.y, t4.z);
          }
          function l2(e4, n4) {
            var i4 = 3 * e4;
            n4.x = t3[0 + i4], n4.y = t3[1 + i4], n4.z = t3[2 + i4];
          }
          function c2(t4, e4, n4, i4) {
            i4 < 0 && t4.x === 1 && (a2[e4] = t4.x - 1), n4.x === 0 && n4.z === 0 && (a2[e4] = i4 / 2 / Math.PI + 0.5);
          }
          function u2(t4) {
            return Math.atan2(t4.z, -t4.x);
          }
          !function(t4) {
            for (var n4 = new We(), i4 = new We(), r4 = new We(), a3 = 0; a3 < e3.length; a3 += 3)
              l2(e3[a3 + 0], n4), l2(e3[a3 + 1], i4), l2(e3[a3 + 2], r4), o2(n4, i4, r4, t4);
          }(i3 = i3 || 0), function(t4) {
            for (var e4 = new We(), n4 = 0; n4 < r3.length; n4 += 3)
              e4.x = r3[n4 + 0], e4.y = r3[n4 + 1], e4.z = r3[n4 + 2], e4.normalize().multiplyScalar(t4), r3[n4 + 0] = e4.x, r3[n4 + 1] = e4.y, r3[n4 + 2] = e4.z;
          }(n3), function() {
            for (var t4 = new We(), e4 = 0; e4 < r3.length; e4 += 3) {
              t4.x = r3[e4 + 0], t4.y = r3[e4 + 1], t4.z = r3[e4 + 2];
              var n4 = u2(t4) / 2 / Math.PI + 0.5, i4 = (o3 = t4, Math.atan2(-o3.y, Math.sqrt(o3.x * o3.x + o3.z * o3.z)) / Math.PI + 0.5);
              a2.push(n4, 1 - i4);
            }
            var o3;
            (function() {
              for (var t5 = new We(), e5 = new We(), n5 = new We(), i5 = new We(), o4 = new Re(), s3 = new Re(), l3 = new Re(), h2 = 0, d2 = 0; h2 < r3.length; h2 += 9, d2 += 6) {
                t5.set(r3[h2 + 0], r3[h2 + 1], r3[h2 + 2]), e5.set(r3[h2 + 3], r3[h2 + 4], r3[h2 + 5]), n5.set(r3[h2 + 6], r3[h2 + 7], r3[h2 + 8]), o4.set(a2[d2 + 0], a2[d2 + 1]), s3.set(a2[d2 + 2], a2[d2 + 3]), l3.set(a2[d2 + 4], a2[d2 + 5]), i5.copy(t5).add(e5).add(n5).divideScalar(3);
                var p2 = u2(i5);
                c2(o4, d2 + 0, t5, p2), c2(s3, d2 + 2, e5, p2), c2(l3, d2 + 4, n5, p2);
              }
            })(), function() {
              for (var t5 = 0; t5 < a2.length; t5 += 6) {
                var e5 = a2[t5 + 0], n5 = a2[t5 + 2], i5 = a2[t5 + 4], r4 = Math.max(e5, n5, i5), o4 = Math.min(e5, n5, i5);
                0.9 < r4 && o4 < 0.1 && (e5 < 0.2 && (a2[t5 + 0] += 1), n5 < 0.2 && (a2[t5 + 2] += 1), i5 < 0.2 && (a2[t5 + 4] += 1));
              }
            }();
          }(), this.setAttribute("position", new Ti(r3, 3)), this.setAttribute("normal", new Ti(r3.slice(), 3)), this.setAttribute("uv", new Ti(a2, 2)), i3 === 0 ? this.computeVertexNormals() : this.normalizeNormals();
        }
        function bs(t3, e3) {
          lr.call(this), this.type = "TetrahedronGeometry", this.parameters = { radius: t3, detail: e3 }, this.fromBufferGeometry(new ws(t3, e3)), this.mergeVertices();
        }
        function ws(t3, e3) {
          xs.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t3, e3), this.type = "TetrahedronBufferGeometry", this.parameters = { radius: t3, detail: e3 };
        }
        function Ms(t3, e3) {
          lr.call(this), this.type = "OctahedronGeometry", this.parameters = { radius: t3, detail: e3 }, this.fromBufferGeometry(new _s(t3, e3)), this.mergeVertices();
        }
        function _s(t3, e3) {
          xs.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t3, e3), this.type = "OctahedronBufferGeometry", this.parameters = { radius: t3, detail: e3 };
        }
        function Ss(t3, e3) {
          lr.call(this), this.type = "IcosahedronGeometry", this.parameters = { radius: t3, detail: e3 }, this.fromBufferGeometry(new Cs(t3, e3)), this.mergeVertices();
        }
        function Cs(t3, e3) {
          var n3 = (1 + Math.sqrt(5)) / 2;
          xs.call(this, [-1, n3, 0, 1, n3, 0, -1, -n3, 0, 1, -n3, 0, 0, -1, n3, 0, 1, n3, 0, -1, -n3, 0, 1, -n3, n3, 0, -1, n3, 0, 1, -n3, 0, -1, -n3, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t3, e3), this.type = "IcosahedronBufferGeometry", this.parameters = { radius: t3, detail: e3 };
        }
        function Ts(t3, e3) {
          lr.call(this), this.type = "DodecahedronGeometry", this.parameters = { radius: t3, detail: e3 }, this.fromBufferGeometry(new Es(t3, e3)), this.mergeVertices();
        }
        function Es(t3, e3) {
          var n3 = (1 + Math.sqrt(5)) / 2, i3 = 1 / n3;
          xs.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -i3, -n3, 0, -i3, n3, 0, i3, -n3, 0, i3, n3, -i3, -n3, 0, -i3, n3, 0, i3, -n3, 0, i3, n3, 0, -n3, 0, -i3, n3, 0, -i3, -n3, 0, i3, n3, 0, i3], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], t3, e3), this.type = "DodecahedronBufferGeometry", this.parameters = { radius: t3, detail: e3 };
        }
        function Ds(t3, e3, n3, i3, r3, a2) {
          lr.call(this), this.type = "TubeGeometry", this.parameters = { path: t3, tubularSegments: e3, radius: n3, radialSegments: i3, closed: r3 }, a2 !== void 0 && console.warn("THREE.TubeGeometry: taper has been removed.");
          var o2 = new As(t3, e3, n3, i3, r3);
          this.tangents = o2.tangents, this.normals = o2.normals, this.binormals = o2.binormals, this.fromBufferGeometry(o2), this.mergeVertices();
        }
        function As(t3, e3, n3, i3, r3) {
          Ni.call(this), this.type = "TubeBufferGeometry", this.parameters = { path: t3, tubularSegments: e3, radius: n3, radialSegments: i3, closed: r3 }, e3 = e3 || 64, n3 = n3 || 1, i3 = i3 || 8, r3 = r3 || false;
          var a2 = t3.computeFrenetFrames(e3, r3);
          this.tangents = a2.tangents, this.normals = a2.normals, this.binormals = a2.binormals;
          var o2, s2, l2 = new We(), c2 = new We(), u2 = new Re(), h2 = new We(), d2 = [], p2 = [], f2 = [], m2 = [];
          function g2(r4) {
            h2 = t3.getPointAt(r4 / e3, h2);
            var o3 = a2.normals[r4], u3 = a2.binormals[r4];
            for (s2 = 0; s2 <= i3; s2++) {
              var f3 = s2 / i3 * Math.PI * 2, m3 = Math.sin(f3), g3 = -Math.cos(f3);
              c2.x = g3 * o3.x + m3 * u3.x, c2.y = g3 * o3.y + m3 * u3.y, c2.z = g3 * o3.z + m3 * u3.z, c2.normalize(), p2.push(c2.x, c2.y, c2.z), l2.x = h2.x + n3 * c2.x, l2.y = h2.y + n3 * c2.y, l2.z = h2.z + n3 * c2.z, d2.push(l2.x, l2.y, l2.z);
            }
          }
          !function() {
            for (o2 = 0; o2 < e3; o2++)
              g2(o2);
            g2(r3 === false ? e3 : 0), function() {
              for (o2 = 0; o2 <= e3; o2++)
                for (s2 = 0; s2 <= i3; s2++)
                  u2.x = o2 / e3, u2.y = s2 / i3, f2.push(u2.x, u2.y);
            }(), function() {
              for (s2 = 1; s2 <= e3; s2++)
                for (o2 = 1; o2 <= i3; o2++) {
                  var t4 = (i3 + 1) * (s2 - 1) + (o2 - 1), n4 = (i3 + 1) * s2 + (o2 - 1), r4 = (i3 + 1) * s2 + o2, a3 = (i3 + 1) * (s2 - 1) + o2;
                  m2.push(t4, n4, a3), m2.push(n4, r4, a3);
                }
            }();
          }(), this.setIndex(m2), this.setAttribute("position", new Ti(d2, 3)), this.setAttribute("normal", new Ti(p2, 3)), this.setAttribute("uv", new Ti(f2, 2));
        }
        function Os(t3, e3, n3, i3, r3, a2, o2) {
          lr.call(this), this.type = "TorusKnotGeometry", this.parameters = { radius: t3, tube: e3, tubularSegments: n3, radialSegments: i3, p: r3, q: a2 }, o2 !== void 0 && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."), this.fromBufferGeometry(new Ls(t3, e3, n3, i3, r3, a2)), this.mergeVertices();
        }
        function Ls(t3, e3, n3, i3, r3, a2) {
          Ni.call(this), this.type = "TorusKnotBufferGeometry", this.parameters = { radius: t3, tube: e3, tubularSegments: n3, radialSegments: i3, p: r3, q: a2 }, t3 = t3 || 1, e3 = e3 || 0.4, n3 = Math.floor(n3) || 64, i3 = Math.floor(i3) || 8, r3 = r3 || 2, a2 = a2 || 3;
          var o2, s2, l2 = [], c2 = [], u2 = [], h2 = [], d2 = new We(), p2 = new We(), f2 = new We(), m2 = new We(), g2 = new We(), v2 = new We(), y2 = new We();
          for (o2 = 0; o2 <= n3; ++o2) {
            var x2 = o2 / n3 * r3 * Math.PI * 2;
            for (E2(x2, r3, a2, t3, f2), E2(0.01 + x2, r3, a2, t3, m2), v2.subVectors(m2, f2), y2.addVectors(m2, f2), g2.crossVectors(v2, y2), y2.crossVectors(g2, v2), g2.normalize(), y2.normalize(), s2 = 0; s2 <= i3; ++s2) {
              var b2 = s2 / i3 * Math.PI * 2, w2 = -e3 * Math.cos(b2), M2 = e3 * Math.sin(b2);
              d2.x = f2.x + (w2 * y2.x + M2 * g2.x), d2.y = f2.y + (w2 * y2.y + M2 * g2.y), d2.z = f2.z + (w2 * y2.z + M2 * g2.z), c2.push(d2.x, d2.y, d2.z), p2.subVectors(d2, f2).normalize(), u2.push(p2.x, p2.y, p2.z), h2.push(o2 / n3), h2.push(s2 / i3);
            }
          }
          for (s2 = 1; s2 <= n3; s2++)
            for (o2 = 1; o2 <= i3; o2++) {
              var _6 = (i3 + 1) * (s2 - 1) + (o2 - 1), S2 = (i3 + 1) * s2 + (o2 - 1), C2 = (i3 + 1) * s2 + o2, T2 = (i3 + 1) * (s2 - 1) + o2;
              l2.push(_6, S2, T2), l2.push(S2, C2, T2);
            }
          function E2(t4, e4, n4, i4, r4) {
            var a3 = Math.cos(t4), o3 = Math.sin(t4), s3 = n4 / e4 * t4, l3 = Math.cos(s3);
            r4.x = i4 * (2 + l3) * 0.5 * a3, r4.y = i4 * (2 + l3) * o3 * 0.5, r4.z = i4 * Math.sin(s3) * 0.5;
          }
          this.setIndex(l2), this.setAttribute("position", new Ti(c2, 3)), this.setAttribute("normal", new Ti(u2, 3)), this.setAttribute("uv", new Ti(h2, 2));
        }
        function Is(t3, e3, n3, i3, r3) {
          lr.call(this), this.type = "TorusGeometry", this.parameters = { radius: t3, tube: e3, radialSegments: n3, tubularSegments: i3, arc: r3 }, this.fromBufferGeometry(new Ps(t3, e3, n3, i3, r3)), this.mergeVertices();
        }
        function Ps(t3, e3, n3, i3, r3) {
          Ni.call(this), this.type = "TorusBufferGeometry", this.parameters = { radius: t3, tube: e3, radialSegments: n3, tubularSegments: i3, arc: r3 }, t3 = t3 || 1, e3 = e3 || 0.4, n3 = Math.floor(n3) || 8, i3 = Math.floor(i3) || 6, r3 = r3 || 2 * Math.PI;
          var a2, o2, s2 = [], l2 = [], c2 = [], u2 = [], h2 = new We(), d2 = new We(), p2 = new We();
          for (a2 = 0; a2 <= n3; a2++)
            for (o2 = 0; o2 <= i3; o2++) {
              var f2 = o2 / i3 * r3, m2 = a2 / n3 * Math.PI * 2;
              d2.x = (t3 + e3 * Math.cos(m2)) * Math.cos(f2), d2.y = (t3 + e3 * Math.cos(m2)) * Math.sin(f2), d2.z = e3 * Math.sin(m2), l2.push(d2.x, d2.y, d2.z), h2.x = t3 * Math.cos(f2), h2.y = t3 * Math.sin(f2), p2.subVectors(d2, h2).normalize(), c2.push(p2.x, p2.y, p2.z), u2.push(o2 / i3), u2.push(a2 / n3);
            }
          for (a2 = 1; a2 <= n3; a2++)
            for (o2 = 1; o2 <= i3; o2++) {
              var g2 = (i3 + 1) * a2 + o2 - 1, v2 = (i3 + 1) * (a2 - 1) + o2 - 1, y2 = (i3 + 1) * (a2 - 1) + o2, x2 = (i3 + 1) * a2 + o2;
              s2.push(g2, v2, x2), s2.push(v2, y2, x2);
            }
          this.setIndex(s2), this.setAttribute("position", new Ti(l2, 3)), this.setAttribute("normal", new Ti(c2, 3)), this.setAttribute("uv", new Ti(u2, 2));
        }
        cs.prototype = Object.assign(Object.create(yn.prototype), { constructor: cs, isPoints: true, raycast: function(t3, e3) {
          var n3 = this.geometry, i3 = this.matrixWorld, r3 = t3.params.Points.threshold;
          if (n3.boundingSphere === null && n3.computeBoundingSphere(), ss.copy(n3.boundingSphere), ss.applyMatrix4(i3), ss.radius += r3, t3.ray.intersectsSphere(ss) !== false) {
            as.getInverse(i3), os.copy(t3.ray).applyMatrix4(as);
            var a2 = r3 / ((this.scale.x + this.scale.y + this.scale.z) / 3), o2 = a2 * a2;
            if (n3.isBufferGeometry) {
              var s2 = n3.index, l2 = n3.attributes.position.array;
              if (s2 !== null)
                for (var c2 = s2.array, u2 = 0, h2 = c2.length; u2 < h2; u2++) {
                  var d2 = c2[u2];
                  ls.fromArray(l2, 3 * d2), us(ls, d2, o2, i3, t3, e3, this);
                }
              else {
                u2 = 0;
                for (var p2 = l2.length / 3; u2 < p2; u2++)
                  ls.fromArray(l2, 3 * u2), us(ls, u2, o2, i3, t3, e3, this);
              }
            } else {
              var f2 = n3.vertices;
              for (u2 = 0, p2 = f2.length; u2 < p2; u2++)
                us(f2[u2], u2, o2, i3, t3, e3, this);
            }
          }
        }, updateMorphTargets: function() {
          var t3, e3, n3, i3 = this.geometry;
          if (i3.isBufferGeometry) {
            var r3 = i3.morphAttributes, a2 = Object.keys(r3);
            if (0 < a2.length) {
              var o2 = r3[a2[0]];
              if (o2 !== void 0)
                for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, t3 = 0, e3 = o2.length; t3 < e3; t3++)
                  n3 = o2[t3].name || String(t3), this.morphTargetInfluences.push(0), this.morphTargetDictionary[n3] = t3;
            }
          } else {
            var s2 = i3.morphTargets;
            s2 !== void 0 && 0 < s2.length && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
          }
        }, clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } }), hs.prototype = Object.assign(Object.create(Fe.prototype), { constructor: hs, isVideoTexture: true, update: function() {
          var t3 = this.image;
          t3.readyState >= t3.HAVE_CURRENT_DATA && (this.needsUpdate = true);
        } }), ((ds.prototype = Object.create(Fe.prototype)).constructor = ds).prototype.isCompressedTexture = true, ((ps.prototype = Object.create(Fe.prototype)).constructor = ps).prototype.isCanvasTexture = true, ((fs.prototype = Object.create(Fe.prototype)).constructor = fs).prototype.isDepthTexture = true, (ms.prototype = Object.create(Ni.prototype)).constructor = ms, (gs.prototype = Object.create(lr.prototype)).constructor = gs, (vs.prototype = Object.create(Ni.prototype)).constructor = vs, (ys.prototype = Object.create(lr.prototype)).constructor = ys, (xs.prototype = Object.create(Ni.prototype)).constructor = xs, (bs.prototype = Object.create(lr.prototype)).constructor = bs, (ws.prototype = Object.create(xs.prototype)).constructor = ws, (Ms.prototype = Object.create(lr.prototype)).constructor = Ms, (_s.prototype = Object.create(xs.prototype)).constructor = _s, (Ss.prototype = Object.create(lr.prototype)).constructor = Ss, (Cs.prototype = Object.create(xs.prototype)).constructor = Cs, (Ts.prototype = Object.create(lr.prototype)).constructor = Ts, (Es.prototype = Object.create(xs.prototype)).constructor = Es, (Ds.prototype = Object.create(lr.prototype)).constructor = Ds, ((As.prototype = Object.create(Ni.prototype)).constructor = As).prototype.toJSON = function() {
          var t3 = Ni.prototype.toJSON.call(this);
          return t3.path = this.parameters.path.toJSON(), t3;
        }, (Os.prototype = Object.create(lr.prototype)).constructor = Os, (Ls.prototype = Object.create(Ni.prototype)).constructor = Ls, (Is.prototype = Object.create(lr.prototype)).constructor = Is, (Ps.prototype = Object.create(Ni.prototype)).constructor = Ps;
        function Rs(t3, e3, n3, i3, r3) {
          var a2, o2;
          if (r3 === 0 < function(t4, e4, n4, i4) {
            for (var r4 = 0, a3 = e4, o3 = n4 - i4; a3 < n4; a3 += i4)
              r4 += (t4[o3] - t4[a3]) * (t4[a3 + 1] + t4[o3 + 1]), o3 = a3;
            return r4;
          }(t3, e3, n3, i3))
            for (a2 = e3; a2 < n3; a2 += i3)
              o2 = $s(a2, t3[a2], t3[a2 + 1], o2);
          else
            for (a2 = n3 - i3; e3 <= a2; a2 -= i3)
              o2 = $s(a2, t3[a2], t3[a2 + 1], o2);
          return o2 && qs(o2, o2.next) && (Ks(o2), o2 = o2.next), o2;
        }
        function ks(t3, e3) {
          if (!t3)
            return t3;
          e3 = e3 || t3;
          var n3, i3 = t3;
          do {
            if (n3 = false, i3.steiner || !qs(i3, i3.next) && Js(i3.prev, i3, i3.next) !== 0)
              i3 = i3.next;
            else {
              if (Ks(i3), (i3 = e3 = i3.prev) === i3.next)
                break;
              n3 = true;
            }
          } while (n3 || i3 !== e3);
          return e3;
        }
        function Bs(t3, e3, n3, i3, r3, a2, o2) {
          if (t3) {
            !o2 && a2 && function(t4, e4, n4, i4) {
              for (var r4 = t4; r4.z === null && (r4.z = Us(r4.x, r4.y, e4, n4, i4)), r4.prevZ = r4.prev, r4.nextZ = r4.next, (r4 = r4.next) !== t4; )
                ;
              r4.prevZ.nextZ = null, r4.prevZ = null, function(t5) {
                var e5, n5, i5, r5, a3, o3, s3, l3, c3 = 1;
                do {
                  for (n5 = t5, a3 = t5 = null, o3 = 0; n5; ) {
                    for (o3++, i5 = n5, e5 = s3 = 0; e5 < c3 && (s3++, i5 = i5.nextZ); e5++)
                      ;
                    for (l3 = c3; 0 < s3 || 0 < l3 && i5; )
                      s3 !== 0 && (l3 === 0 || !i5 || n5.z <= i5.z) ? (n5 = (r5 = n5).nextZ, s3--) : (i5 = (r5 = i5).nextZ, l3--), a3 ? a3.nextZ = r5 : t5 = r5, r5.prevZ = a3, a3 = r5;
                    n5 = i5;
                  }
                  a3.nextZ = null, c3 *= 2;
                } while (1 < o3);
              }(r4);
            }(t3, i3, r3, a2);
            for (var s2, l2, c2 = t3; t3.prev !== t3.next; )
              if (s2 = t3.prev, l2 = t3.next, a2 ? Fs(t3, i3, r3, a2) : Ns(t3))
                e3.push(s2.i / n3), e3.push(t3.i / n3), e3.push(l2.i / n3), Ks(t3), t3 = l2.next, c2 = l2.next;
              else if ((t3 = l2) === c2) {
                o2 ? o2 === 1 ? Bs(t3 = js(t3, e3, n3), e3, n3, i3, r3, a2, 2) : o2 === 2 && Vs(t3, e3, n3, i3, r3, a2) : Bs(ks(t3), e3, n3, i3, r3, a2, 1);
                break;
              }
          }
        }
        function Ns(t3) {
          var e3 = t3.prev, n3 = t3, i3 = t3.next;
          if (!(0 <= Js(e3, n3, i3))) {
            for (var r3 = t3.next.next; r3 !== t3.prev; ) {
              if (Ws(e3.x, e3.y, n3.x, n3.y, i3.x, i3.y, r3.x, r3.y) && 0 <= Js(r3.prev, r3, r3.next))
                return;
              r3 = r3.next;
            }
            return 1;
          }
        }
        function Fs(t3, e3, n3, i3) {
          var r3 = t3.prev, a2 = t3, o2 = t3.next;
          if (!(0 <= Js(r3, a2, o2))) {
            for (var s2 = r3.x < a2.x ? r3.x < o2.x ? r3.x : o2.x : a2.x < o2.x ? a2.x : o2.x, l2 = r3.y < a2.y ? r3.y < o2.y ? r3.y : o2.y : a2.y < o2.y ? a2.y : o2.y, c2 = r3.x > a2.x ? r3.x > o2.x ? r3.x : o2.x : a2.x > o2.x ? a2.x : o2.x, u2 = r3.y > a2.y ? r3.y > o2.y ? r3.y : o2.y : a2.y > o2.y ? a2.y : o2.y, h2 = Us(s2, l2, e3, n3, i3), d2 = Us(c2, u2, e3, n3, i3), p2 = t3.prevZ, f2 = t3.nextZ; p2 && p2.z >= h2 && f2 && f2.z <= d2; ) {
              if (p2 !== t3.prev && p2 !== t3.next && Ws(r3.x, r3.y, a2.x, a2.y, o2.x, o2.y, p2.x, p2.y) && 0 <= Js(p2.prev, p2, p2.next))
                return;
              if (p2 = p2.prevZ, f2 !== t3.prev && f2 !== t3.next && Ws(r3.x, r3.y, a2.x, a2.y, o2.x, o2.y, f2.x, f2.y) && 0 <= Js(f2.prev, f2, f2.next))
                return;
              f2 = f2.nextZ;
            }
            for (; p2 && p2.z >= h2; ) {
              if (p2 !== t3.prev && p2 !== t3.next && Ws(r3.x, r3.y, a2.x, a2.y, o2.x, o2.y, p2.x, p2.y) && 0 <= Js(p2.prev, p2, p2.next))
                return;
              p2 = p2.prevZ;
            }
            for (; f2 && f2.z <= d2; ) {
              if (f2 !== t3.prev && f2 !== t3.next && Ws(r3.x, r3.y, a2.x, a2.y, o2.x, o2.y, f2.x, f2.y) && 0 <= Js(f2.prev, f2, f2.next))
                return;
              f2 = f2.nextZ;
            }
            return 1;
          }
        }
        function js(t3, e3, n3) {
          var i3 = t3;
          do {
            var r3 = i3.prev, a2 = i3.next.next;
            !qs(r3, a2) && Xs(r3, i3, i3.next, a2) && Ys(r3, a2) && Ys(a2, r3) && (e3.push(r3.i / n3), e3.push(i3.i / n3), e3.push(a2.i / n3), Ks(i3), Ks(i3.next), i3 = t3 = a2), i3 = i3.next;
          } while (i3 !== t3);
          return i3;
        }
        function Vs(t3, e3, n3, i3, r3, a2) {
          var o2, s2, l2 = t3;
          do {
            for (var c2 = l2.next.next; c2 !== l2.prev; ) {
              if (l2.i !== c2.i && (s2 = c2, (o2 = l2).next.i !== s2.i && o2.prev.i !== s2.i && !function(t4, e4) {
                var n4 = t4;
                do {
                  if (n4.i !== t4.i && n4.next.i !== t4.i && n4.i !== e4.i && n4.next.i !== e4.i && Xs(n4, n4.next, t4, e4))
                    return 1;
                  n4 = n4.next;
                } while (n4 !== t4);
              }(o2, s2) && Ys(o2, s2) && Ys(s2, o2) && function(t4, e4) {
                for (var n4 = t4, i4 = false, r4 = (t4.x + e4.x) / 2, a3 = (t4.y + e4.y) / 2; n4.y > a3 != n4.next.y > a3 && n4.next.y !== n4.y && r4 < (n4.next.x - n4.x) * (a3 - n4.y) / (n4.next.y - n4.y) + n4.x && (i4 = !i4), (n4 = n4.next) !== t4; )
                  ;
                return i4;
              }(o2, s2))) {
                var u2 = Zs(l2, c2);
                return l2 = ks(l2, l2.next), u2 = ks(u2, u2.next), Bs(l2, e3, n3, i3, r3, a2), void Bs(u2, e3, n3, i3, r3, a2);
              }
              c2 = c2.next;
            }
            l2 = l2.next;
          } while (l2 !== t3);
        }
        function zs(t3, e3) {
          return t3.x - e3.x;
        }
        function Gs(t3, e3) {
          if (e3 = function(t4, e4) {
            var n4, i3 = e4, r3 = t4.x, a2 = t4.y, o2 = -1 / 0;
            do {
              if (a2 <= i3.y && a2 >= i3.next.y && i3.next.y !== i3.y) {
                var s2 = i3.x + (a2 - i3.y) * (i3.next.x - i3.x) / (i3.next.y - i3.y);
                if (s2 <= r3 && o2 < s2) {
                  if ((o2 = s2) === r3) {
                    if (a2 === i3.y)
                      return i3;
                    if (a2 === i3.next.y)
                      return i3.next;
                  }
                  n4 = i3.x < i3.next.x ? i3 : i3.next;
                }
              }
              i3 = i3.next;
            } while (i3 !== e4);
            if (!n4)
              return null;
            if (r3 === o2)
              return n4.prev;
            var l2, c2 = n4, u2 = n4.x, h2 = n4.y, d2 = 1 / 0;
            for (i3 = n4.next; i3 !== c2; )
              r3 >= i3.x && i3.x >= u2 && r3 !== i3.x && Ws(a2 < h2 ? r3 : o2, a2, u2, h2, a2 < h2 ? o2 : r3, a2, i3.x, i3.y) && ((l2 = Math.abs(a2 - i3.y) / (r3 - i3.x)) < d2 || l2 === d2 && i3.x > n4.x) && Ys(i3, t4) && (n4 = i3, d2 = l2), i3 = i3.next;
            return n4;
          }(t3, e3)) {
            var n3 = Zs(e3, t3);
            ks(n3, n3.next);
          }
        }
        function Us(t3, e3, n3, i3, r3) {
          return (t3 = 1431655765 & ((t3 = 858993459 & ((t3 = 252645135 & ((t3 = 16711935 & ((t3 = 32767 * (t3 - n3) * r3) | t3 << 8)) | t3 << 4)) | t3 << 2)) | t3 << 1)) | (e3 = 1431655765 & ((e3 = 858993459 & ((e3 = 252645135 & ((e3 = 16711935 & ((e3 = 32767 * (e3 - i3) * r3) | e3 << 8)) | e3 << 4)) | e3 << 2)) | e3 << 1)) << 1;
        }
        function Hs(t3) {
          for (var e3 = t3, n3 = t3; (e3.x < n3.x || e3.x === n3.x && e3.y < n3.y) && (n3 = e3), (e3 = e3.next) !== t3; )
            ;
          return n3;
        }
        function Ws(t3, e3, n3, i3, r3, a2, o2, s2) {
          return 0 <= (r3 - o2) * (e3 - s2) - (t3 - o2) * (a2 - s2) && 0 <= (t3 - o2) * (i3 - s2) - (n3 - o2) * (e3 - s2) && 0 <= (n3 - o2) * (a2 - s2) - (r3 - o2) * (i3 - s2);
        }
        function Js(t3, e3, n3) {
          return (e3.y - t3.y) * (n3.x - e3.x) - (e3.x - t3.x) * (n3.y - e3.y);
        }
        function qs(t3, e3) {
          return t3.x === e3.x && t3.y === e3.y;
        }
        function Xs(t3, e3, n3, i3) {
          return qs(t3, n3) && qs(e3, i3) || qs(t3, i3) && qs(n3, e3) || 0 < Js(t3, e3, n3) != 0 < Js(t3, e3, i3) && 0 < Js(n3, i3, t3) != 0 < Js(n3, i3, e3);
        }
        function Ys(t3, e3) {
          return Js(t3.prev, t3, t3.next) < 0 ? 0 <= Js(t3, e3, t3.next) && 0 <= Js(t3, t3.prev, e3) : Js(t3, e3, t3.prev) < 0 || Js(t3, t3.next, e3) < 0;
        }
        function Zs(t3, e3) {
          var n3 = new Qs(t3.i, t3.x, t3.y), i3 = new Qs(e3.i, e3.x, e3.y), r3 = t3.next, a2 = e3.prev;
          return (t3.next = e3).prev = t3, (n3.next = r3).prev = n3, (i3.next = n3).prev = i3, (a2.next = i3).prev = a2, i3;
        }
        function $s(t3, e3, n3, i3) {
          var r3 = new Qs(t3, e3, n3);
          return i3 ? (r3.next = i3.next, (r3.prev = i3).next.prev = r3, i3.next = r3) : (r3.prev = r3).next = r3, r3;
        }
        function Ks(t3) {
          t3.next.prev = t3.prev, t3.prev.next = t3.next, t3.prevZ && (t3.prevZ.nextZ = t3.nextZ), t3.nextZ && (t3.nextZ.prevZ = t3.prevZ);
        }
        function Qs(t3, e3, n3) {
          this.i = t3, this.x = e3, this.y = n3, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = false;
        }
        var tl = { area: function(t3) {
          for (var e3 = t3.length, n3 = 0, i3 = e3 - 1, r3 = 0; r3 < e3; i3 = r3++)
            n3 += t3[i3].x * t3[r3].y - t3[r3].x * t3[i3].y;
          return 0.5 * n3;
        }, isClockWise: function(t3) {
          return tl.area(t3) < 0;
        }, triangulateShape: function(t3, e3) {
          var n3 = [], i3 = [], r3 = [];
          el(t3), nl(n3, t3);
          var a2 = t3.length;
          e3.forEach(el);
          for (var o2 = 0; o2 < e3.length; o2++)
            i3.push(a2), a2 += e3[o2].length, nl(n3, e3[o2]);
          var s2 = function(t4, e4, n4) {
            n4 = n4 || 2;
            var i4, r4, a3, o3, s3, l2, c2, u2 = e4 && e4.length, h2 = u2 ? e4[0] * n4 : t4.length, d2 = Rs(t4, 0, h2, n4, true), p2 = [];
            if (!d2 || d2.next === d2.prev)
              return p2;
            if (u2 && (d2 = function(t5, e5, n5, i5) {
              var r5, a4, o4, s4 = [];
              for (r5 = 0, a4 = e5.length; r5 < a4; r5++)
                (o4 = Rs(t5, e5[r5] * i5, r5 < a4 - 1 ? e5[r5 + 1] * i5 : t5.length, i5, false)) === o4.next && (o4.steiner = true), s4.push(Hs(o4));
              for (s4.sort(zs), r5 = 0; r5 < s4.length; r5++)
                Gs(s4[r5], n5), n5 = ks(n5, n5.next);
              return n5;
            }(t4, e4, d2, n4)), t4.length > 80 * n4) {
              i4 = a3 = t4[0], r4 = o3 = t4[1];
              for (var f2 = n4; f2 < h2; f2 += n4)
                (s3 = t4[f2]) < i4 && (i4 = s3), (l2 = t4[f2 + 1]) < r4 && (r4 = l2), a3 < s3 && (a3 = s3), o3 < l2 && (o3 = l2);
              c2 = (c2 = Math.max(a3 - i4, o3 - r4)) !== 0 ? 1 / c2 : 0;
            }
            return Bs(d2, p2, n4, i4, r4, c2), p2;
          }(n3, i3);
          for (o2 = 0; o2 < s2.length; o2 += 3)
            r3.push(s2.slice(o2, o2 + 3));
          return r3;
        } };
        function el(t3) {
          var e3 = t3.length;
          2 < e3 && t3[e3 - 1].equals(t3[0]) && t3.pop();
        }
        function nl(t3, e3) {
          for (var n3 = 0; n3 < e3.length; n3++)
            t3.push(e3[n3].x), t3.push(e3[n3].y);
        }
        function il(t3, e3) {
          lr.call(this), this.type = "ExtrudeGeometry", this.parameters = { shapes: t3, options: e3 }, this.fromBufferGeometry(new rl(t3, e3)), this.mergeVertices();
        }
        function rl(t3, e3) {
          Ni.call(this), this.type = "ExtrudeBufferGeometry", this.parameters = { shapes: t3, options: e3 };
          for (var n3 = this, i3 = [], r3 = [], a2 = 0, o2 = (t3 = Array.isArray(t3) ? t3 : [t3]).length; a2 < o2; a2++)
            s2(t3[a2]);
          function s2(t4) {
            var a3 = [], o3 = e3.curveSegments !== void 0 ? e3.curveSegments : 12, s3 = e3.steps !== void 0 ? e3.steps : 1, l2 = e3.depth !== void 0 ? e3.depth : 100, c2 = e3.bevelEnabled === void 0 || e3.bevelEnabled, u2 = e3.bevelThickness !== void 0 ? e3.bevelThickness : 6, h2 = e3.bevelSize !== void 0 ? e3.bevelSize : u2 - 2, d2 = e3.bevelOffset !== void 0 ? e3.bevelOffset : 0, p2 = e3.bevelSegments !== void 0 ? e3.bevelSegments : 3, f2 = e3.extrudePath, m2 = e3.UVGenerator !== void 0 ? e3.UVGenerator : al;
            e3.amount !== void 0 && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), l2 = e3.amount);
            var g2, v2, y2, x2, b2, w2, M2, _6, S2 = false;
            f2 && (g2 = f2.getSpacedPoints(s3), c2 = !(S2 = true), v2 = f2.computeFrenetFrames(s3, false), y2 = new We(), x2 = new We(), b2 = new We()), c2 || (d2 = h2 = u2 = p2 = 0);
            var C2 = t4.extractPoints(o3), T2 = C2.shape, E2 = C2.holes;
            if (!tl.isClockWise(T2))
              for (T2 = T2.reverse(), M2 = 0, _6 = E2.length; M2 < _6; M2++)
                w2 = E2[M2], tl.isClockWise(w2) && (E2[M2] = w2.reverse());
            var D2 = tl.triangulateShape(T2, E2), A2 = T2;
            for (M2 = 0, _6 = E2.length; M2 < _6; M2++)
              w2 = E2[M2], T2 = T2.concat(w2);
            function O2(t5, e4, n4) {
              return e4 || console.error("THREE.ExtrudeGeometry: vec does not exist"), e4.clone().multiplyScalar(n4).add(t5);
            }
            var L2, I2, P2, R2, k2, B2, N2 = T2.length, F2 = D2.length;
            function j2(t5, e4, n4) {
              var i4, r4, a4, o4 = t5.x - e4.x, s4 = t5.y - e4.y, l3 = n4.x - t5.x, c3 = n4.y - t5.y, u3 = o4 * o4 + s4 * s4, h3 = o4 * c3 - s4 * l3;
              if (Math.abs(h3) > Number.EPSILON) {
                var d3 = Math.sqrt(u3), p3 = Math.sqrt(l3 * l3 + c3 * c3), f3 = e4.x - s4 / d3, m3 = e4.y + o4 / d3, g3 = ((n4.x - c3 / p3 - f3) * c3 - (n4.y + l3 / p3 - m3) * l3) / (o4 * c3 - s4 * l3), v3 = (i4 = f3 + o4 * g3 - t5.x) * i4 + (r4 = m3 + s4 * g3 - t5.y) * r4;
                if (v3 <= 2)
                  return new Re(i4, r4);
                a4 = Math.sqrt(v3 / 2);
              } else {
                var y3 = false;
                o4 > Number.EPSILON ? l3 > Number.EPSILON && (y3 = true) : o4 < -Number.EPSILON ? l3 < -Number.EPSILON && (y3 = true) : Math.sign(s4) === Math.sign(c3) && (y3 = true), a4 = y3 ? (i4 = -s4, r4 = o4, Math.sqrt(u3)) : (i4 = o4, r4 = s4, Math.sqrt(u3 / 2));
              }
              return new Re(i4 / a4, r4 / a4);
            }
            for (var V2 = [], z2 = 0, G2 = A2.length, U2 = G2 - 1, H2 = z2 + 1; z2 < G2; z2++, U2++, H2++)
              U2 === G2 && (U2 = 0), H2 === G2 && (H2 = 0), V2[z2] = j2(A2[z2], A2[U2], A2[H2]);
            var W2, J2, q2 = [], X2 = V2.concat();
            for (M2 = 0, _6 = E2.length; M2 < _6; M2++) {
              for (w2 = E2[M2], W2 = [], z2 = 0, U2 = (G2 = w2.length) - 1, H2 = z2 + 1; z2 < G2; z2++, U2++, H2++)
                U2 === G2 && (U2 = 0), H2 === G2 && (H2 = 0), W2[z2] = j2(w2[z2], w2[U2], w2[H2]);
              q2.push(W2), X2 = X2.concat(W2);
            }
            for (L2 = 0; L2 < p2; L2++) {
              for (P2 = L2 / p2, R2 = u2 * Math.cos(P2 * Math.PI / 2), I2 = h2 * Math.sin(P2 * Math.PI / 2) + d2, z2 = 0, G2 = A2.length; z2 < G2; z2++)
                Z2((k2 = O2(A2[z2], V2[z2], I2)).x, k2.y, -R2);
              for (M2 = 0, _6 = E2.length; M2 < _6; M2++)
                for (w2 = E2[M2], W2 = q2[M2], z2 = 0, G2 = w2.length; z2 < G2; z2++)
                  Z2((k2 = O2(w2[z2], W2[z2], I2)).x, k2.y, -R2);
            }
            for (I2 = h2 + d2, z2 = 0; z2 < N2; z2++)
              k2 = c2 ? O2(T2[z2], X2[z2], I2) : T2[z2], S2 ? (x2.copy(v2.normals[0]).multiplyScalar(k2.x), y2.copy(v2.binormals[0]).multiplyScalar(k2.y), b2.copy(g2[0]).add(x2).add(y2), Z2(b2.x, b2.y, b2.z)) : Z2(k2.x, k2.y, 0);
            for (J2 = 1; J2 <= s3; J2++)
              for (z2 = 0; z2 < N2; z2++)
                k2 = c2 ? O2(T2[z2], X2[z2], I2) : T2[z2], S2 ? (x2.copy(v2.normals[J2]).multiplyScalar(k2.x), y2.copy(v2.binormals[J2]).multiplyScalar(k2.y), b2.copy(g2[J2]).add(x2).add(y2), Z2(b2.x, b2.y, b2.z)) : Z2(k2.x, k2.y, l2 / s3 * J2);
            for (L2 = p2 - 1; 0 <= L2; L2--) {
              for (P2 = L2 / p2, R2 = u2 * Math.cos(P2 * Math.PI / 2), I2 = h2 * Math.sin(P2 * Math.PI / 2) + d2, z2 = 0, G2 = A2.length; z2 < G2; z2++)
                Z2((k2 = O2(A2[z2], V2[z2], I2)).x, k2.y, l2 + R2);
              for (M2 = 0, _6 = E2.length; M2 < _6; M2++)
                for (w2 = E2[M2], W2 = q2[M2], z2 = 0, G2 = w2.length; z2 < G2; z2++)
                  k2 = O2(w2[z2], W2[z2], I2), S2 ? Z2(k2.x, k2.y + g2[s3 - 1].y, g2[s3 - 1].x + R2) : Z2(k2.x, k2.y, l2 + R2);
            }
            function Y2(t5, e4) {
              var n4, i4;
              for (z2 = t5.length; 0 <= --z2; ) {
                (i4 = (n4 = z2) - 1) < 0 && (i4 = t5.length - 1);
                var r4 = 0, a4 = s3 + 2 * p2;
                for (r4 = 0; r4 < a4; r4++) {
                  var o4 = N2 * r4, l3 = N2 * (r4 + 1);
                  K2(e4 + n4 + o4, e4 + i4 + o4, e4 + i4 + l3, e4 + n4 + l3);
                }
              }
            }
            function Z2(t5, e4, n4) {
              a3.push(t5), a3.push(e4), a3.push(n4);
            }
            function $3(t5, e4, r4) {
              Q2(t5), Q2(e4), Q2(r4);
              var a4 = i3.length / 3, o4 = m2.generateTopUV(n3, i3, a4 - 3, a4 - 2, a4 - 1);
              tt2(o4[0]), tt2(o4[1]), tt2(o4[2]);
            }
            function K2(t5, e4, r4, a4) {
              Q2(t5), Q2(e4), Q2(a4), Q2(e4), Q2(r4), Q2(a4);
              var o4 = i3.length / 3, s4 = m2.generateSideWallUV(n3, i3, o4 - 6, o4 - 3, o4 - 2, o4 - 1);
              tt2(s4[0]), tt2(s4[1]), tt2(s4[3]), tt2(s4[1]), tt2(s4[2]), tt2(s4[3]);
            }
            function Q2(t5) {
              i3.push(a3[3 * t5 + 0]), i3.push(a3[3 * t5 + 1]), i3.push(a3[3 * t5 + 2]);
            }
            function tt2(t5) {
              r3.push(t5.x), r3.push(t5.y);
            }
            !function() {
              var t5 = i3.length / 3;
              if (c2) {
                var e4 = 0, r4 = N2 * e4;
                for (z2 = 0; z2 < F2; z2++)
                  $3((B2 = D2[z2])[2] + r4, B2[1] + r4, B2[0] + r4);
                for (r4 = N2 * (e4 = s3 + 2 * p2), z2 = 0; z2 < F2; z2++)
                  $3((B2 = D2[z2])[0] + r4, B2[1] + r4, B2[2] + r4);
              } else {
                for (z2 = 0; z2 < F2; z2++)
                  $3((B2 = D2[z2])[2], B2[1], B2[0]);
                for (z2 = 0; z2 < F2; z2++)
                  $3((B2 = D2[z2])[0] + N2 * s3, B2[1] + N2 * s3, B2[2] + N2 * s3);
              }
              n3.addGroup(t5, i3.length / 3 - t5, 0);
            }(), function() {
              var t5 = i3.length / 3, e4 = 0;
              for (Y2(A2, e4), e4 += A2.length, M2 = 0, _6 = E2.length; M2 < _6; M2++)
                Y2(w2 = E2[M2], e4), e4 += w2.length;
              n3.addGroup(t5, i3.length / 3 - t5, 1);
            }();
          }
          this.setAttribute("position", new Ti(i3, 3)), this.setAttribute("uv", new Ti(r3, 2)), this.computeVertexNormals();
        }
        ((il.prototype = Object.create(lr.prototype)).constructor = il).prototype.toJSON = function() {
          var t3 = lr.prototype.toJSON.call(this);
          return ol(this.parameters.shapes, this.parameters.options, t3);
        }, ((rl.prototype = Object.create(Ni.prototype)).constructor = rl).prototype.toJSON = function() {
          var t3 = Ni.prototype.toJSON.call(this);
          return ol(this.parameters.shapes, this.parameters.options, t3);
        };
        var al = { generateTopUV: function(t3, e3, n3, i3, r3) {
          var a2 = e3[3 * n3], o2 = e3[3 * n3 + 1], s2 = e3[3 * i3], l2 = e3[3 * i3 + 1], c2 = e3[3 * r3], u2 = e3[3 * r3 + 1];
          return [new Re(a2, o2), new Re(s2, l2), new Re(c2, u2)];
        }, generateSideWallUV: function(t3, e3, n3, i3, r3, a2) {
          var o2 = e3[3 * n3], s2 = e3[3 * n3 + 1], l2 = e3[3 * n3 + 2], c2 = e3[3 * i3], u2 = e3[3 * i3 + 1], h2 = e3[3 * i3 + 2], d2 = e3[3 * r3], p2 = e3[3 * r3 + 1], f2 = e3[3 * r3 + 2], m2 = e3[3 * a2], g2 = e3[3 * a2 + 1], v2 = e3[3 * a2 + 2];
          return Math.abs(s2 - u2) < 0.01 ? [new Re(o2, 1 - l2), new Re(c2, 1 - h2), new Re(d2, 1 - f2), new Re(m2, 1 - v2)] : [new Re(s2, 1 - l2), new Re(u2, 1 - h2), new Re(p2, 1 - f2), new Re(g2, 1 - v2)];
        } };
        function ol(t3, e3, n3) {
          if (n3.shapes = [], Array.isArray(t3))
            for (var i3 = 0, r3 = t3.length; i3 < r3; i3++) {
              var a2 = t3[i3];
              n3.shapes.push(a2.uuid);
            }
          else
            n3.shapes.push(t3.uuid);
          return e3.extrudePath !== void 0 && (n3.options.extrudePath = e3.extrudePath.toJSON()), n3;
        }
        function sl(t3, e3) {
          lr.call(this), this.type = "TextGeometry", this.parameters = { text: t3, parameters: e3 }, this.fromBufferGeometry(new ll(t3, e3)), this.mergeVertices();
        }
        function ll(t3, e3) {
          var n3 = (e3 = e3 || {}).font;
          if (!n3 || !n3.isFont)
            return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new lr();
          var i3 = n3.generateShapes(t3, e3.size);
          e3.depth = e3.height !== void 0 ? e3.height : 50, e3.bevelThickness === void 0 && (e3.bevelThickness = 10), e3.bevelSize === void 0 && (e3.bevelSize = 8), e3.bevelEnabled === void 0 && (e3.bevelEnabled = false), rl.call(this, i3, e3), this.type = "TextBufferGeometry";
        }
        function cl(t3, e3, n3, i3, r3, a2, o2) {
          lr.call(this), this.type = "SphereGeometry", this.parameters = { radius: t3, widthSegments: e3, heightSegments: n3, phiStart: i3, phiLength: r3, thetaStart: a2, thetaLength: o2 }, this.fromBufferGeometry(new ul(t3, e3, n3, i3, r3, a2, o2)), this.mergeVertices();
        }
        function ul(t3, e3, n3, i3, r3, a2, o2) {
          Ni.call(this), this.type = "SphereBufferGeometry", this.parameters = { radius: t3, widthSegments: e3, heightSegments: n3, phiStart: i3, phiLength: r3, thetaStart: a2, thetaLength: o2 }, t3 = t3 || 1, e3 = Math.max(3, Math.floor(e3) || 8), n3 = Math.max(2, Math.floor(n3) || 6), i3 = i3 !== void 0 ? i3 : 0, r3 = r3 !== void 0 ? r3 : 2 * Math.PI, a2 = a2 !== void 0 ? a2 : 0, o2 = o2 !== void 0 ? o2 : Math.PI;
          var s2, l2, c2 = Math.min(a2 + o2, Math.PI), u2 = 0, h2 = [], d2 = new We(), p2 = new We(), f2 = [], m2 = [], g2 = [], v2 = [];
          for (l2 = 0; l2 <= n3; l2++) {
            var y2 = [], x2 = l2 / n3, b2 = 0;
            for (l2 == 0 && a2 == 0 ? b2 = 0.5 / e3 : l2 == n3 && c2 == Math.PI && (b2 = -0.5 / e3), s2 = 0; s2 <= e3; s2++) {
              var w2 = s2 / e3;
              d2.x = -t3 * Math.cos(i3 + w2 * r3) * Math.sin(a2 + x2 * o2), d2.y = t3 * Math.cos(a2 + x2 * o2), d2.z = t3 * Math.sin(i3 + w2 * r3) * Math.sin(a2 + x2 * o2), m2.push(d2.x, d2.y, d2.z), p2.copy(d2).normalize(), g2.push(p2.x, p2.y, p2.z), v2.push(w2 + b2, 1 - x2), y2.push(u2++);
            }
            h2.push(y2);
          }
          for (l2 = 0; l2 < n3; l2++)
            for (s2 = 0; s2 < e3; s2++) {
              var M2 = h2[l2][s2 + 1], _6 = h2[l2][s2], S2 = h2[l2 + 1][s2], C2 = h2[l2 + 1][s2 + 1];
              (l2 !== 0 || 0 < a2) && f2.push(M2, _6, C2), (l2 !== n3 - 1 || c2 < Math.PI) && f2.push(_6, S2, C2);
            }
          this.setIndex(f2), this.setAttribute("position", new Ti(m2, 3)), this.setAttribute("normal", new Ti(g2, 3)), this.setAttribute("uv", new Ti(v2, 2));
        }
        function hl(t3, e3, n3, i3, r3, a2) {
          lr.call(this), this.type = "RingGeometry", this.parameters = { innerRadius: t3, outerRadius: e3, thetaSegments: n3, phiSegments: i3, thetaStart: r3, thetaLength: a2 }, this.fromBufferGeometry(new dl(t3, e3, n3, i3, r3, a2)), this.mergeVertices();
        }
        function dl(t3, e3, n3, i3, r3, a2) {
          Ni.call(this), this.type = "RingBufferGeometry", this.parameters = { innerRadius: t3, outerRadius: e3, thetaSegments: n3, phiSegments: i3, thetaStart: r3, thetaLength: a2 }, t3 = t3 || 0.5, e3 = e3 || 1, r3 = r3 !== void 0 ? r3 : 0, a2 = a2 !== void 0 ? a2 : 2 * Math.PI, n3 = n3 !== void 0 ? Math.max(3, n3) : 8;
          var o2, s2, l2, c2 = [], u2 = [], h2 = [], d2 = [], p2 = t3, f2 = (e3 - t3) / (i3 = i3 !== void 0 ? Math.max(1, i3) : 1), m2 = new We(), g2 = new Re();
          for (s2 = 0; s2 <= i3; s2++) {
            for (l2 = 0; l2 <= n3; l2++)
              o2 = r3 + l2 / n3 * a2, m2.x = p2 * Math.cos(o2), m2.y = p2 * Math.sin(o2), u2.push(m2.x, m2.y, m2.z), h2.push(0, 0, 1), g2.x = (m2.x / e3 + 1) / 2, g2.y = (m2.y / e3 + 1) / 2, d2.push(g2.x, g2.y);
            p2 += f2;
          }
          for (s2 = 0; s2 < i3; s2++) {
            var v2 = s2 * (n3 + 1);
            for (l2 = 0; l2 < n3; l2++) {
              var y2 = o2 = l2 + v2, x2 = o2 + n3 + 1, b2 = o2 + n3 + 2, w2 = o2 + 1;
              c2.push(y2, x2, w2), c2.push(x2, b2, w2);
            }
          }
          this.setIndex(c2), this.setAttribute("position", new Ti(u2, 3)), this.setAttribute("normal", new Ti(h2, 3)), this.setAttribute("uv", new Ti(d2, 2));
        }
        function pl(t3, e3, n3, i3) {
          lr.call(this), this.type = "LatheGeometry", this.parameters = { points: t3, segments: e3, phiStart: n3, phiLength: i3 }, this.fromBufferGeometry(new fl(t3, e3, n3, i3)), this.mergeVertices();
        }
        function fl(t3, e3, n3, i3) {
          Ni.call(this), this.type = "LatheBufferGeometry", this.parameters = { points: t3, segments: e3, phiStart: n3, phiLength: i3 }, e3 = Math.floor(e3) || 12, n3 = n3 || 0, i3 = i3 || 2 * Math.PI, i3 = Pe.clamp(i3, 0, 2 * Math.PI);
          var r3, a2, o2, s2 = [], l2 = [], c2 = [], u2 = 1 / e3, h2 = new We(), d2 = new Re();
          for (a2 = 0; a2 <= e3; a2++) {
            var p2 = n3 + a2 * u2 * i3, f2 = Math.sin(p2), m2 = Math.cos(p2);
            for (o2 = 0; o2 <= t3.length - 1; o2++)
              h2.x = t3[o2].x * f2, h2.y = t3[o2].y, h2.z = t3[o2].x * m2, l2.push(h2.x, h2.y, h2.z), d2.x = a2 / e3, d2.y = o2 / (t3.length - 1), c2.push(d2.x, d2.y);
          }
          for (a2 = 0; a2 < e3; a2++)
            for (o2 = 0; o2 < t3.length - 1; o2++) {
              var g2 = r3 = o2 + a2 * t3.length, v2 = r3 + t3.length, y2 = r3 + t3.length + 1, x2 = r3 + 1;
              s2.push(g2, v2, x2), s2.push(v2, y2, x2);
            }
          if (this.setIndex(s2), this.setAttribute("position", new Ti(l2, 3)), this.setAttribute("uv", new Ti(c2, 2)), this.computeVertexNormals(), i3 === 2 * Math.PI) {
            var b2 = this.attributes.normal.array, w2 = new We(), M2 = new We(), _6 = new We();
            for (r3 = e3 * t3.length * 3, o2 = a2 = 0; a2 < t3.length; a2++, o2 += 3)
              w2.x = b2[o2 + 0], w2.y = b2[o2 + 1], w2.z = b2[o2 + 2], M2.x = b2[r3 + o2 + 0], M2.y = b2[r3 + o2 + 1], M2.z = b2[r3 + o2 + 2], _6.addVectors(w2, M2).normalize(), b2[o2 + 0] = b2[r3 + o2 + 0] = _6.x, b2[o2 + 1] = b2[r3 + o2 + 1] = _6.y, b2[o2 + 2] = b2[r3 + o2 + 2] = _6.z;
          }
        }
        function ml(t3, e3) {
          lr.call(this), this.type = "ShapeGeometry", typeof e3 == "object" && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), e3 = e3.curveSegments), this.parameters = { shapes: t3, curveSegments: e3 }, this.fromBufferGeometry(new gl(t3, e3)), this.mergeVertices();
        }
        function gl(t3, e3) {
          Ni.call(this), this.type = "ShapeBufferGeometry", this.parameters = { shapes: t3, curveSegments: e3 }, e3 = e3 || 12;
          var n3 = [], i3 = [], r3 = [], a2 = [], o2 = 0, s2 = 0;
          if (Array.isArray(t3) === false)
            c2(t3);
          else
            for (var l2 = 0; l2 < t3.length; l2++)
              c2(t3[l2]), this.addGroup(o2, s2, l2), o2 += s2, s2 = 0;
          function c2(t4) {
            var o3, l3, c3, u2 = i3.length / 3, h2 = t4.extractPoints(e3), d2 = h2.shape, p2 = h2.holes;
            for (tl.isClockWise(d2) === false && (d2 = d2.reverse()), o3 = 0, l3 = p2.length; o3 < l3; o3++)
              c3 = p2[o3], tl.isClockWise(c3) === true && (p2[o3] = c3.reverse());
            var f2 = tl.triangulateShape(d2, p2);
            for (o3 = 0, l3 = p2.length; o3 < l3; o3++)
              c3 = p2[o3], d2 = d2.concat(c3);
            for (o3 = 0, l3 = d2.length; o3 < l3; o3++) {
              var m2 = d2[o3];
              i3.push(m2.x, m2.y, 0), r3.push(0, 0, 1), a2.push(m2.x, m2.y);
            }
            for (o3 = 0, l3 = f2.length; o3 < l3; o3++) {
              var g2 = f2[o3], v2 = g2[0] + u2, y2 = g2[1] + u2, x2 = g2[2] + u2;
              n3.push(v2, y2, x2), s2 += 3;
            }
          }
          this.setIndex(n3), this.setAttribute("position", new Ti(i3, 3)), this.setAttribute("normal", new Ti(r3, 3)), this.setAttribute("uv", new Ti(a2, 2));
        }
        function vl(t3, e3) {
          if (e3.shapes = [], Array.isArray(t3))
            for (var n3 = 0, i3 = t3.length; n3 < i3; n3++) {
              var r3 = t3[n3];
              e3.shapes.push(r3.uuid);
            }
          else
            e3.shapes.push(t3.uuid);
          return e3;
        }
        function yl(t3, e3) {
          Ni.call(this), this.type = "EdgesGeometry", this.parameters = { thresholdAngle: e3 }, e3 = e3 !== void 0 ? e3 : 1;
          var n3, i3, r3, a2, o2 = [], s2 = Math.cos(Pe.DEG2RAD * e3), l2 = [0, 0], c2 = {}, u2 = ["a", "b", "c"];
          t3.isBufferGeometry ? (a2 = new lr()).fromBufferGeometry(t3) : a2 = t3.clone(), a2.mergeVertices(), a2.computeFaceNormals();
          for (var h2 = a2.vertices, d2 = a2.faces, p2 = 0, f2 = d2.length; p2 < f2; p2++)
            for (var m2 = d2[p2], g2 = 0; g2 < 3; g2++)
              n3 = m2[u2[g2]], i3 = m2[u2[(g2 + 1) % 3]], l2[0] = Math.min(n3, i3), l2[1] = Math.max(n3, i3), c2[r3 = l2[0] + "," + l2[1]] === void 0 ? c2[r3] = { index1: l2[0], index2: l2[1], face1: p2, face2: void 0 } : c2[r3].face2 = p2;
          for (r3 in c2) {
            var v2 = c2[r3];
            if (v2.face2 === void 0 || d2[v2.face1].normal.dot(d2[v2.face2].normal) <= s2) {
              var y2 = h2[v2.index1];
              o2.push(y2.x, y2.y, y2.z), y2 = h2[v2.index2], o2.push(y2.x, y2.y, y2.z);
            }
          }
          this.setAttribute("position", new Ti(o2, 3));
        }
        function xl(t3, e3, n3, i3, r3, a2, o2, s2) {
          lr.call(this), this.type = "CylinderGeometry", this.parameters = { radiusTop: t3, radiusBottom: e3, height: n3, radialSegments: i3, heightSegments: r3, openEnded: a2, thetaStart: o2, thetaLength: s2 }, this.fromBufferGeometry(new bl(t3, e3, n3, i3, r3, a2, o2, s2)), this.mergeVertices();
        }
        function bl(t3, e3, n3, i3, r3, a2, o2, s2) {
          Ni.call(this), this.type = "CylinderBufferGeometry", this.parameters = { radiusTop: t3, radiusBottom: e3, height: n3, radialSegments: i3, heightSegments: r3, openEnded: a2, thetaStart: o2, thetaLength: s2 };
          var l2 = this;
          t3 = t3 !== void 0 ? t3 : 1, e3 = e3 !== void 0 ? e3 : 1, n3 = n3 || 1, i3 = Math.floor(i3) || 8, r3 = Math.floor(r3) || 1, a2 = a2 !== void 0 && a2, o2 = o2 !== void 0 ? o2 : 0, s2 = s2 !== void 0 ? s2 : 2 * Math.PI;
          var c2 = [], u2 = [], h2 = [], d2 = [], p2 = 0, f2 = [], m2 = n3 / 2, g2 = 0;
          function v2(n4) {
            var r4, a3, f3, v3 = new Re(), y2 = new We(), x2 = 0, b2 = n4 === true ? t3 : e3, w2 = n4 === true ? 1 : -1;
            for (a3 = p2, r4 = 1; r4 <= i3; r4++)
              u2.push(0, m2 * w2, 0), h2.push(0, w2, 0), d2.push(0.5, 0.5), p2++;
            for (f3 = p2, r4 = 0; r4 <= i3; r4++) {
              var M2 = r4 / i3 * s2 + o2, _6 = Math.cos(M2), S2 = Math.sin(M2);
              y2.x = b2 * S2, y2.y = m2 * w2, y2.z = b2 * _6, u2.push(y2.x, y2.y, y2.z), h2.push(0, w2, 0), v3.x = 0.5 * _6 + 0.5, v3.y = 0.5 * S2 * w2 + 0.5, d2.push(v3.x, v3.y), p2++;
            }
            for (r4 = 0; r4 < i3; r4++) {
              var C2 = a3 + r4, T2 = f3 + r4;
              n4 === true ? c2.push(T2, T2 + 1, C2) : c2.push(T2 + 1, T2, C2), x2 += 3;
            }
            l2.addGroup(g2, x2, n4 === true ? 1 : 2), g2 += x2;
          }
          !function() {
            var a3, v3, y2 = new We(), x2 = new We(), b2 = 0, w2 = (e3 - t3) / n3;
            for (v3 = 0; v3 <= r3; v3++) {
              var M2 = [], _6 = v3 / r3, S2 = _6 * (e3 - t3) + t3;
              for (a3 = 0; a3 <= i3; a3++) {
                var C2 = a3 / i3, T2 = C2 * s2 + o2, E2 = Math.sin(T2), D2 = Math.cos(T2);
                x2.x = S2 * E2, x2.y = -_6 * n3 + m2, x2.z = S2 * D2, u2.push(x2.x, x2.y, x2.z), y2.set(E2, w2, D2).normalize(), h2.push(y2.x, y2.y, y2.z), d2.push(C2, 1 - _6), M2.push(p2++);
              }
              f2.push(M2);
            }
            for (a3 = 0; a3 < i3; a3++)
              for (v3 = 0; v3 < r3; v3++) {
                var A2 = f2[v3][a3], O2 = f2[v3 + 1][a3], L2 = f2[v3 + 1][a3 + 1], I2 = f2[v3][a3 + 1];
                c2.push(A2, O2, I2), c2.push(O2, L2, I2), b2 += 6;
              }
            l2.addGroup(g2, b2, 0), g2 += b2;
          }(), a2 === false && (0 < t3 && v2(true), 0 < e3 && v2(false)), this.setIndex(c2), this.setAttribute("position", new Ti(u2, 3)), this.setAttribute("normal", new Ti(h2, 3)), this.setAttribute("uv", new Ti(d2, 2));
        }
        function wl(t3, e3, n3, i3, r3, a2, o2) {
          xl.call(this, 0, t3, e3, n3, i3, r3, a2, o2), this.type = "ConeGeometry", this.parameters = { radius: t3, height: e3, radialSegments: n3, heightSegments: i3, openEnded: r3, thetaStart: a2, thetaLength: o2 };
        }
        function Ml(t3, e3, n3, i3, r3, a2, o2) {
          bl.call(this, 0, t3, e3, n3, i3, r3, a2, o2), this.type = "ConeBufferGeometry", this.parameters = { radius: t3, height: e3, radialSegments: n3, heightSegments: i3, openEnded: r3, thetaStart: a2, thetaLength: o2 };
        }
        function _l(t3, e3, n3, i3) {
          lr.call(this), this.type = "CircleGeometry", this.parameters = { radius: t3, segments: e3, thetaStart: n3, thetaLength: i3 }, this.fromBufferGeometry(new Sl(t3, e3, n3, i3)), this.mergeVertices();
        }
        function Sl(t3, e3, n3, i3) {
          Ni.call(this), this.type = "CircleBufferGeometry", this.parameters = { radius: t3, segments: e3, thetaStart: n3, thetaLength: i3 }, t3 = t3 || 1, e3 = e3 !== void 0 ? Math.max(3, e3) : 8, n3 = n3 !== void 0 ? n3 : 0, i3 = i3 !== void 0 ? i3 : 2 * Math.PI;
          var r3, a2, o2 = [], s2 = [], l2 = [], c2 = [], u2 = new We(), h2 = new Re();
          for (s2.push(0, 0, 0), l2.push(0, 0, 1), c2.push(0.5, 0.5), a2 = 0, r3 = 3; a2 <= e3; a2++, r3 += 3) {
            var d2 = n3 + a2 / e3 * i3;
            u2.x = t3 * Math.cos(d2), u2.y = t3 * Math.sin(d2), s2.push(u2.x, u2.y, u2.z), l2.push(0, 0, 1), h2.x = (s2[r3] / t3 + 1) / 2, h2.y = (s2[r3 + 1] / t3 + 1) / 2, c2.push(h2.x, h2.y);
          }
          for (r3 = 1; r3 <= e3; r3++)
            o2.push(r3, r3 + 1, 0);
          this.setIndex(o2), this.setAttribute("position", new Ti(s2, 3)), this.setAttribute("normal", new Ti(l2, 3)), this.setAttribute("uv", new Ti(c2, 2));
        }
        (sl.prototype = Object.create(lr.prototype)).constructor = sl, (ll.prototype = Object.create(rl.prototype)).constructor = ll, (cl.prototype = Object.create(lr.prototype)).constructor = cl, (ul.prototype = Object.create(Ni.prototype)).constructor = ul, (hl.prototype = Object.create(lr.prototype)).constructor = hl, (dl.prototype = Object.create(Ni.prototype)).constructor = dl, (pl.prototype = Object.create(lr.prototype)).constructor = pl, (fl.prototype = Object.create(Ni.prototype)).constructor = fl, ((ml.prototype = Object.create(lr.prototype)).constructor = ml).prototype.toJSON = function() {
          var t3 = lr.prototype.toJSON.call(this);
          return vl(this.parameters.shapes, t3);
        }, ((gl.prototype = Object.create(Ni.prototype)).constructor = gl).prototype.toJSON = function() {
          var t3 = Ni.prototype.toJSON.call(this);
          return vl(this.parameters.shapes, t3);
        }, (yl.prototype = Object.create(Ni.prototype)).constructor = yl, (xl.prototype = Object.create(lr.prototype)).constructor = xl, (bl.prototype = Object.create(Ni.prototype)).constructor = bl, (wl.prototype = Object.create(xl.prototype)).constructor = wl, (Ml.prototype = Object.create(bl.prototype)).constructor = Ml, (_l.prototype = Object.create(lr.prototype)).constructor = _l, (Sl.prototype = Object.create(Ni.prototype)).constructor = Sl;
        var Cl = Object.freeze({ __proto__: null, WireframeGeometry: ms, ParametricGeometry: gs, ParametricBufferGeometry: vs, TetrahedronGeometry: bs, TetrahedronBufferGeometry: ws, OctahedronGeometry: Ms, OctahedronBufferGeometry: _s, IcosahedronGeometry: Ss, IcosahedronBufferGeometry: Cs, DodecahedronGeometry: Ts, DodecahedronBufferGeometry: Es, PolyhedronGeometry: ys, PolyhedronBufferGeometry: xs, TubeGeometry: Ds, TubeBufferGeometry: As, TorusKnotGeometry: Os, TorusKnotBufferGeometry: Ls, TorusGeometry: Is, TorusBufferGeometry: Ps, TextGeometry: sl, TextBufferGeometry: ll, SphereGeometry: cl, SphereBufferGeometry: ul, RingGeometry: hl, RingBufferGeometry: dl, PlaneGeometry: Er, PlaneBufferGeometry: Dr, LatheGeometry: pl, LatheBufferGeometry: fl, ShapeGeometry: ml, ShapeBufferGeometry: gl, ExtrudeGeometry: il, ExtrudeBufferGeometry: rl, EdgesGeometry: yl, ConeGeometry: wl, ConeBufferGeometry: Ml, CylinderGeometry: xl, CylinderBufferGeometry: bl, CircleGeometry: _l, CircleBufferGeometry: Sl, BoxGeometry: cr, BoxBufferGeometry: ur });
        function Tl(t3) {
          mi.call(this), this.type = "ShadowMaterial", this.color = new ci(0), this.transparent = true, this.setValues(t3);
        }
        function El(t3) {
          gr.call(this, t3), this.type = "RawShaderMaterial";
        }
        function Dl(t3) {
          mi.call(this), this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new ci(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ci(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = _e, this.normalScale = new Re(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(t3);
        }
        function Al(t3) {
          Dl.call(this), this.defines = { STANDARD: "", PHYSICAL: "" }, this.type = "MeshPhysicalMaterial", this.reflectivity = 0.5, this.clearcoat = 0, this.clearcoatRoughness = 0, this.sheen = null, this.clearcoatNormalScale = new Re(1, 1), this.clearcoatNormalMap = null, this.transparency = 0, this.setValues(t3);
        }
        function Ol(t3) {
          mi.call(this), this.type = "MeshPhongMaterial", this.color = new ci(16777215), this.specular = new ci(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ci(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = _e, this.normalScale = new Re(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = G, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(t3);
        }
        function Ll(t3) {
          mi.call(this), this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new ci(16777215), this.specular = new ci(1118481), this.shininess = 30, this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ci(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = _e, this.normalScale = new Re(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(t3);
        }
        function Il(t3) {
          mi.call(this), this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = _e, this.normalScale = new Re(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(t3);
        }
        function Pl(t3) {
          mi.call(this), this.type = "MeshLambertMaterial", this.color = new ci(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ci(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = G, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(t3);
        }
        function Rl(t3) {
          mi.call(this), this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new ci(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = _e, this.normalScale = new Re(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(t3);
        }
        function kl(t3) {
          qo.call(this), this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(t3);
        }
        ((Tl.prototype = Object.create(mi.prototype)).constructor = Tl).prototype.isShadowMaterial = true, Tl.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this;
        }, ((El.prototype = Object.create(gr.prototype)).constructor = El).prototype.isRawShaderMaterial = true, ((Dl.prototype = Object.create(mi.prototype)).constructor = Dl).prototype.isMeshStandardMaterial = true, Dl.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.defines = { STANDARD: "" }, this.color.copy(t3.color), this.roughness = t3.roughness, this.metalness = t3.metalness, this.map = t3.map, this.lightMap = t3.lightMap, this.lightMapIntensity = t3.lightMapIntensity, this.aoMap = t3.aoMap, this.aoMapIntensity = t3.aoMapIntensity, this.emissive.copy(t3.emissive), this.emissiveMap = t3.emissiveMap, this.emissiveIntensity = t3.emissiveIntensity, this.bumpMap = t3.bumpMap, this.bumpScale = t3.bumpScale, this.normalMap = t3.normalMap, this.normalMapType = t3.normalMapType, this.normalScale.copy(t3.normalScale), this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this.roughnessMap = t3.roughnessMap, this.metalnessMap = t3.metalnessMap, this.alphaMap = t3.alphaMap, this.envMap = t3.envMap, this.envMapIntensity = t3.envMapIntensity, this.refractionRatio = t3.refractionRatio, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.wireframeLinecap = t3.wireframeLinecap, this.wireframeLinejoin = t3.wireframeLinejoin, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this;
        }, ((Al.prototype = Object.create(Dl.prototype)).constructor = Al).prototype.isMeshPhysicalMaterial = true, Al.prototype.copy = function(t3) {
          return Dl.prototype.copy.call(this, t3), this.defines = { STANDARD: "", PHYSICAL: "" }, this.reflectivity = t3.reflectivity, this.clearcoat = t3.clearcoat, this.clearcoatRoughness = t3.clearcoatRoughness, t3.sheen ? this.sheen = (this.sheen || new ci()).copy(t3.sheen) : this.sheen = null, this.clearcoatNormalMap = t3.clearcoatNormalMap, this.clearcoatNormalScale.copy(t3.clearcoatNormalScale), this.transparency = t3.transparency, this;
        }, ((Ol.prototype = Object.create(mi.prototype)).constructor = Ol).prototype.isMeshPhongMaterial = true, Ol.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.specular.copy(t3.specular), this.shininess = t3.shininess, this.map = t3.map, this.lightMap = t3.lightMap, this.lightMapIntensity = t3.lightMapIntensity, this.aoMap = t3.aoMap, this.aoMapIntensity = t3.aoMapIntensity, this.emissive.copy(t3.emissive), this.emissiveMap = t3.emissiveMap, this.emissiveIntensity = t3.emissiveIntensity, this.bumpMap = t3.bumpMap, this.bumpScale = t3.bumpScale, this.normalMap = t3.normalMap, this.normalMapType = t3.normalMapType, this.normalScale.copy(t3.normalScale), this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this.specularMap = t3.specularMap, this.alphaMap = t3.alphaMap, this.envMap = t3.envMap, this.combine = t3.combine, this.reflectivity = t3.reflectivity, this.refractionRatio = t3.refractionRatio, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.wireframeLinecap = t3.wireframeLinecap, this.wireframeLinejoin = t3.wireframeLinejoin, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this;
        }, ((Ll.prototype = Object.create(mi.prototype)).constructor = Ll).prototype.isMeshToonMaterial = true, Ll.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.specular.copy(t3.specular), this.shininess = t3.shininess, this.map = t3.map, this.gradientMap = t3.gradientMap, this.lightMap = t3.lightMap, this.lightMapIntensity = t3.lightMapIntensity, this.aoMap = t3.aoMap, this.aoMapIntensity = t3.aoMapIntensity, this.emissive.copy(t3.emissive), this.emissiveMap = t3.emissiveMap, this.emissiveIntensity = t3.emissiveIntensity, this.bumpMap = t3.bumpMap, this.bumpScale = t3.bumpScale, this.normalMap = t3.normalMap, this.normalMapType = t3.normalMapType, this.normalScale.copy(t3.normalScale), this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this.specularMap = t3.specularMap, this.alphaMap = t3.alphaMap, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.wireframeLinecap = t3.wireframeLinecap, this.wireframeLinejoin = t3.wireframeLinejoin, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this;
        }, ((Il.prototype = Object.create(mi.prototype)).constructor = Il).prototype.isMeshNormalMaterial = true, Il.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.bumpMap = t3.bumpMap, this.bumpScale = t3.bumpScale, this.normalMap = t3.normalMap, this.normalMapType = t3.normalMapType, this.normalScale.copy(t3.normalScale), this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this;
        }, ((Pl.prototype = Object.create(mi.prototype)).constructor = Pl).prototype.isMeshLambertMaterial = true, Pl.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.color.copy(t3.color), this.map = t3.map, this.lightMap = t3.lightMap, this.lightMapIntensity = t3.lightMapIntensity, this.aoMap = t3.aoMap, this.aoMapIntensity = t3.aoMapIntensity, this.emissive.copy(t3.emissive), this.emissiveMap = t3.emissiveMap, this.emissiveIntensity = t3.emissiveIntensity, this.specularMap = t3.specularMap, this.alphaMap = t3.alphaMap, this.envMap = t3.envMap, this.combine = t3.combine, this.reflectivity = t3.reflectivity, this.refractionRatio = t3.refractionRatio, this.wireframe = t3.wireframe, this.wireframeLinewidth = t3.wireframeLinewidth, this.wireframeLinecap = t3.wireframeLinecap, this.wireframeLinejoin = t3.wireframeLinejoin, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this;
        }, ((Rl.prototype = Object.create(mi.prototype)).constructor = Rl).prototype.isMeshMatcapMaterial = true, Rl.prototype.copy = function(t3) {
          return mi.prototype.copy.call(this, t3), this.defines = { MATCAP: "" }, this.color.copy(t3.color), this.matcap = t3.matcap, this.map = t3.map, this.bumpMap = t3.bumpMap, this.bumpScale = t3.bumpScale, this.normalMap = t3.normalMap, this.normalMapType = t3.normalMapType, this.normalScale.copy(t3.normalScale), this.displacementMap = t3.displacementMap, this.displacementScale = t3.displacementScale, this.displacementBias = t3.displacementBias, this.alphaMap = t3.alphaMap, this.skinning = t3.skinning, this.morphTargets = t3.morphTargets, this.morphNormals = t3.morphNormals, this;
        }, ((kl.prototype = Object.create(qo.prototype)).constructor = kl).prototype.isLineDashedMaterial = true, kl.prototype.copy = function(t3) {
          return qo.prototype.copy.call(this, t3), this.scale = t3.scale, this.dashSize = t3.dashSize, this.gapSize = t3.gapSize, this;
        };
        var Bl = Object.freeze({ __proto__: null, ShadowMaterial: Tl, SpriteMaterial: xo, RawShaderMaterial: El, ShaderMaterial: gr, PointsMaterial: rs, MeshPhysicalMaterial: Al, MeshStandardMaterial: Dl, MeshPhongMaterial: Ol, MeshToonMaterial: Ll, MeshNormalMaterial: Il, MeshLambertMaterial: Pl, MeshDepthMaterial: to, MeshDistanceMaterial: eo, MeshBasicMaterial: gi, MeshMatcapMaterial: Rl, LineDashedMaterial: kl, LineBasicMaterial: qo, Material: mi }), Nl = { arraySlice: function(t3, e3, n3) {
          return Nl.isTypedArray(t3) ? new t3.constructor(t3.subarray(e3, n3 !== void 0 ? n3 : t3.length)) : t3.slice(e3, n3);
        }, convertArray: function(t3, e3, n3) {
          return !t3 || !n3 && t3.constructor === e3 ? t3 : typeof e3.BYTES_PER_ELEMENT == "number" ? new e3(t3) : Array.prototype.slice.call(t3);
        }, isTypedArray: function(t3) {
          return ArrayBuffer.isView(t3) && !(t3 instanceof DataView);
        }, getKeyframeOrder: function(t3) {
          for (var e3 = t3.length, n3 = new Array(e3), i3 = 0; i3 !== e3; ++i3)
            n3[i3] = i3;
          return n3.sort(function(e4, n4) {
            return t3[e4] - t3[n4];
          }), n3;
        }, sortedArray: function(t3, e3, n3) {
          for (var i3 = t3.length, r3 = new t3.constructor(i3), a2 = 0, o2 = 0; o2 !== i3; ++a2)
            for (var s2 = n3[a2] * e3, l2 = 0; l2 !== e3; ++l2)
              r3[o2++] = t3[s2 + l2];
          return r3;
        }, flattenJSON: function(t3, e3, n3, i3) {
          for (var r3 = 1, a2 = t3[0]; a2 !== void 0 && a2[i3] === void 0; )
            a2 = t3[r3++];
          if (a2 !== void 0) {
            var o2 = a2[i3];
            if (o2 !== void 0)
              if (Array.isArray(o2))
                for (; (o2 = a2[i3]) !== void 0 && (e3.push(a2.time), n3.push.apply(n3, o2)), (a2 = t3[r3++]) !== void 0; )
                  ;
              else if (o2.toArray !== void 0)
                for (; (o2 = a2[i3]) !== void 0 && (e3.push(a2.time), o2.toArray(n3, n3.length)), (a2 = t3[r3++]) !== void 0; )
                  ;
              else
                for (; (o2 = a2[i3]) !== void 0 && (e3.push(a2.time), n3.push(o2)), (a2 = t3[r3++]) !== void 0; )
                  ;
          }
        }, subclip: function(t3, e3, n3, i3, r3) {
          r3 = r3 || 30;
          var a2 = t3.clone();
          a2.name = e3;
          for (var o2 = [], s2 = 0; s2 < a2.tracks.length; ++s2) {
            for (var l2 = a2.tracks[s2], c2 = l2.getValueSize(), u2 = [], h2 = [], d2 = 0; d2 < l2.times.length; ++d2) {
              var p2 = l2.times[d2] * r3;
              if (!(p2 < n3 || i3 <= p2)) {
                u2.push(l2.times[d2]);
                for (var f2 = 0; f2 < c2; ++f2)
                  h2.push(l2.values[d2 * c2 + f2]);
              }
            }
            u2.length !== 0 && (l2.times = Nl.convertArray(u2, l2.times.constructor), l2.values = Nl.convertArray(h2, l2.values.constructor), o2.push(l2));
          }
          a2.tracks = o2;
          var m2 = 1 / 0;
          for (s2 = 0; s2 < a2.tracks.length; ++s2)
            m2 > a2.tracks[s2].times[0] && (m2 = a2.tracks[s2].times[0]);
          for (s2 = 0; s2 < a2.tracks.length; ++s2)
            a2.tracks[s2].shift(-1 * m2);
          return a2.resetDuration(), a2;
        } };
        function Fl(t3, e3, n3, i3) {
          this.parameterPositions = t3, this._cachedIndex = 0, this.resultBuffer = i3 !== void 0 ? i3 : new e3.constructor(n3), this.sampleValues = e3, this.valueSize = n3;
        }
        function jl(t3, e3, n3, i3) {
          Fl.call(this, t3, e3, n3, i3), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0;
        }
        function Vl(t3, e3, n3, i3) {
          Fl.call(this, t3, e3, n3, i3);
        }
        function zl(t3, e3, n3, i3) {
          Fl.call(this, t3, e3, n3, i3);
        }
        function Gl(t3, e3, n3, i3) {
          if (t3 === void 0)
            throw new Error("THREE.KeyframeTrack: track name is undefined");
          if (e3 === void 0 || e3.length === 0)
            throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t3);
          this.name = t3, this.times = Nl.convertArray(e3, this.TimeBufferType), this.values = Nl.convertArray(n3, this.ValueBufferType), this.setInterpolation(i3 || this.DefaultInterpolation);
        }
        function Ul(t3, e3, n3) {
          Gl.call(this, t3, e3, n3);
        }
        function Hl(t3, e3, n3, i3) {
          Gl.call(this, t3, e3, n3, i3);
        }
        function Wl(t3, e3, n3, i3) {
          Gl.call(this, t3, e3, n3, i3);
        }
        function Jl(t3, e3, n3, i3) {
          Fl.call(this, t3, e3, n3, i3);
        }
        function ql(t3, e3, n3, i3) {
          Gl.call(this, t3, e3, n3, i3);
        }
        function Xl(t3, e3, n3, i3) {
          Gl.call(this, t3, e3, n3, i3);
        }
        function Yl(t3, e3, n3, i3) {
          Gl.call(this, t3, e3, n3, i3);
        }
        function Zl(t3, e3, n3) {
          this.name = t3, this.tracks = n3, this.duration = e3 !== void 0 ? e3 : -1, this.uuid = Pe.generateUUID(), this.duration < 0 && this.resetDuration();
        }
        function $l(t3) {
          if (t3.type === void 0)
            throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
          var e3 = function(t4) {
            switch (t4.toLowerCase()) {
              case "scalar":
              case "double":
              case "float":
              case "number":
              case "integer":
                return Wl;
              case "vector":
              case "vector2":
              case "vector3":
              case "vector4":
                return Yl;
              case "color":
                return Hl;
              case "quaternion":
                return ql;
              case "bool":
              case "boolean":
                return Ul;
              case "string":
                return Xl;
            }
            throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t4);
          }(t3.type);
          if (t3.times === void 0) {
            var n3 = [], i3 = [];
            Nl.flattenJSON(t3.keys, n3, i3, "value"), t3.times = n3, t3.values = i3;
          }
          return e3.parse !== void 0 ? e3.parse(t3) : new e3(t3.name, t3.times, t3.values, t3.interpolation);
        }
        Object.assign(Fl.prototype, { evaluate: function(t3) {
          var e3 = this.parameterPositions, n3 = this._cachedIndex, i3 = e3[n3], r3 = e3[n3 - 1];
          t: {
            e: {
              var a2;
              n: {
                i:
                  if (!(t3 < i3)) {
                    for (var o2 = n3 + 2; ; ) {
                      if (i3 === void 0) {
                        if (t3 < r3)
                          break i;
                        return n3 = e3.length, this._cachedIndex = n3, this.afterEnd_(n3 - 1, t3, r3);
                      }
                      if (n3 === o2)
                        break;
                      if (r3 = i3, t3 < (i3 = e3[++n3]))
                        break e;
                    }
                    a2 = e3.length;
                    break n;
                  }
                if (r3 <= t3)
                  break t;
                var s2 = e3[1];
                for (t3 < s2 && (n3 = 2, r3 = s2), o2 = n3 - 2; ; ) {
                  if (r3 === void 0)
                    return this._cachedIndex = 0, this.beforeStart_(0, t3, i3);
                  if (n3 === o2)
                    break;
                  if (i3 = r3, (r3 = e3[--n3 - 1]) <= t3)
                    break e;
                }
                a2 = n3, n3 = 0;
              }
              for (; n3 < a2; ) {
                var l2 = n3 + a2 >>> 1;
                t3 < e3[l2] ? a2 = l2 : n3 = 1 + l2;
              }
              if (i3 = e3[n3], (r3 = e3[n3 - 1]) === void 0)
                return this._cachedIndex = 0, this.beforeStart_(0, t3, i3);
              if (i3 === void 0)
                return n3 = e3.length, this._cachedIndex = n3, this.afterEnd_(n3 - 1, r3, t3);
            }
            this._cachedIndex = n3, this.intervalChanged_(n3, r3, i3);
          }
          return this.interpolate_(n3, r3, t3, i3);
        }, settings: null, DefaultSettings_: {}, getSettings_: function() {
          return this.settings || this.DefaultSettings_;
        }, copySampleValue_: function(t3) {
          for (var e3 = this.resultBuffer, n3 = this.sampleValues, i3 = this.valueSize, r3 = t3 * i3, a2 = 0; a2 !== i3; ++a2)
            e3[a2] = n3[r3 + a2];
          return e3;
        }, interpolate_: function() {
          throw new Error("call to abstract method");
        }, intervalChanged_: function() {
        } }), Object.assign(Fl.prototype, { beforeStart_: Fl.prototype.copySampleValue_, afterEnd_: Fl.prototype.copySampleValue_ }), jl.prototype = Object.assign(Object.create(Fl.prototype), { constructor: jl, DefaultSettings_: { endingStart: ue, endingEnd: ue }, intervalChanged_: function(t3, e3, n3) {
          var i3 = this.parameterPositions, r3 = t3 - 2, a2 = t3 + 1, o2 = i3[r3], s2 = i3[a2];
          if (o2 === void 0)
            switch (this.getSettings_().endingStart) {
              case he:
                r3 = t3, o2 = 2 * e3 - n3;
                break;
              case de:
                o2 = e3 + i3[r3 = i3.length - 2] - i3[r3 + 1];
                break;
              default:
                r3 = t3, o2 = n3;
            }
          if (s2 === void 0)
            switch (this.getSettings_().endingEnd) {
              case he:
                a2 = t3, s2 = 2 * n3 - e3;
                break;
              case de:
                s2 = n3 + i3[a2 = 1] - i3[0];
                break;
              default:
                a2 = t3 - 1, s2 = e3;
            }
          var l2 = 0.5 * (n3 - e3), c2 = this.valueSize;
          this._weightPrev = l2 / (e3 - o2), this._weightNext = l2 / (s2 - n3), this._offsetPrev = r3 * c2, this._offsetNext = a2 * c2;
        }, interpolate_: function(t3, e3, n3, i3) {
          for (var r3 = this.resultBuffer, a2 = this.sampleValues, o2 = this.valueSize, s2 = t3 * o2, l2 = s2 - o2, c2 = this._offsetPrev, u2 = this._offsetNext, h2 = this._weightPrev, d2 = this._weightNext, p2 = (n3 - e3) / (i3 - e3), f2 = p2 * p2, m2 = f2 * p2, g2 = -h2 * m2 + 2 * h2 * f2 - h2 * p2, v2 = (1 + h2) * m2 + (-1.5 - 2 * h2) * f2 + (-0.5 + h2) * p2 + 1, y2 = (-1 - d2) * m2 + (1.5 + d2) * f2 + 0.5 * p2, x2 = d2 * m2 - d2 * f2, b2 = 0; b2 !== o2; ++b2)
            r3[b2] = g2 * a2[c2 + b2] + v2 * a2[l2 + b2] + y2 * a2[s2 + b2] + x2 * a2[u2 + b2];
          return r3;
        } }), Vl.prototype = Object.assign(Object.create(Fl.prototype), { constructor: Vl, interpolate_: function(t3, e3, n3, i3) {
          for (var r3 = this.resultBuffer, a2 = this.sampleValues, o2 = this.valueSize, s2 = t3 * o2, l2 = s2 - o2, c2 = (n3 - e3) / (i3 - e3), u2 = 1 - c2, h2 = 0; h2 !== o2; ++h2)
            r3[h2] = a2[l2 + h2] * u2 + a2[s2 + h2] * c2;
          return r3;
        } }), zl.prototype = Object.assign(Object.create(Fl.prototype), { constructor: zl, interpolate_: function(t3) {
          return this.copySampleValue_(t3 - 1);
        } }), Object.assign(Gl, { toJSON: function(t3) {
          var e3, n3 = t3.constructor;
          if (n3.toJSON !== void 0)
            e3 = n3.toJSON(t3);
          else {
            e3 = { name: t3.name, times: Nl.convertArray(t3.times, Array), values: Nl.convertArray(t3.values, Array) };
            var i3 = t3.getInterpolation();
            i3 !== t3.DefaultInterpolation && (e3.interpolation = i3);
          }
          return e3.type = t3.ValueTypeName, e3;
        } }), Object.assign(Gl.prototype, { constructor: Gl, TimeBufferType: Float32Array, ValueBufferType: Float32Array, DefaultInterpolation: ce, InterpolantFactoryMethodDiscrete: function(t3) {
          return new zl(this.times, this.values, this.getValueSize(), t3);
        }, InterpolantFactoryMethodLinear: function(t3) {
          return new Vl(this.times, this.values, this.getValueSize(), t3);
        }, InterpolantFactoryMethodSmooth: function(t3) {
          return new jl(this.times, this.values, this.getValueSize(), t3);
        }, setInterpolation: function(t3) {
          var e3;
          switch (t3) {
            case le:
              e3 = this.InterpolantFactoryMethodDiscrete;
              break;
            case ce:
              e3 = this.InterpolantFactoryMethodLinear;
              break;
            case 2302:
              e3 = this.InterpolantFactoryMethodSmooth;
          }
          if (e3 !== void 0)
            return this.createInterpolant = e3, this;
          var n3 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
          if (this.createInterpolant === void 0) {
            if (t3 === this.DefaultInterpolation)
              throw new Error(n3);
            this.setInterpolation(this.DefaultInterpolation);
          }
          return console.warn("THREE.KeyframeTrack:", n3), this;
        }, getInterpolation: function() {
          switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
              return le;
            case this.InterpolantFactoryMethodLinear:
              return ce;
            case this.InterpolantFactoryMethodSmooth:
              return 2302;
          }
        }, getValueSize: function() {
          return this.values.length / this.times.length;
        }, shift: function(t3) {
          if (t3 !== 0)
            for (var e3 = this.times, n3 = 0, i3 = e3.length; n3 !== i3; ++n3)
              e3[n3] += t3;
          return this;
        }, scale: function(t3) {
          if (t3 !== 1)
            for (var e3 = this.times, n3 = 0, i3 = e3.length; n3 !== i3; ++n3)
              e3[n3] *= t3;
          return this;
        }, trim: function(t3, e3) {
          for (var n3 = this.times, i3 = n3.length, r3 = 0, a2 = i3 - 1; r3 !== i3 && n3[r3] < t3; )
            ++r3;
          for (; a2 !== -1 && n3[a2] > e3; )
            --a2;
          if (++a2, r3 !== 0 || a2 !== i3) {
            a2 <= r3 && (r3 = (a2 = Math.max(a2, 1)) - 1);
            var o2 = this.getValueSize();
            this.times = Nl.arraySlice(n3, r3, a2), this.values = Nl.arraySlice(this.values, r3 * o2, a2 * o2);
          }
          return this;
        }, validate: function() {
          var t3 = true, e3 = this.getValueSize();
          e3 - Math.floor(e3) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t3 = false);
          var n3 = this.times, i3 = this.values, r3 = n3.length;
          r3 === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), t3 = false);
          for (var a2 = null, o2 = 0; o2 !== r3; o2++) {
            var s2 = n3[o2];
            if (typeof s2 == "number" && isNaN(s2)) {
              console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o2, s2), t3 = false;
              break;
            }
            if (a2 !== null && s2 < a2) {
              console.error("THREE.KeyframeTrack: Out of order keys.", this, o2, s2, a2), t3 = false;
              break;
            }
            a2 = s2;
          }
          if (i3 !== void 0 && Nl.isTypedArray(i3)) {
            o2 = 0;
            for (var l2 = i3.length; o2 !== l2; ++o2) {
              var c2 = i3[o2];
              if (isNaN(c2)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o2, c2), t3 = false;
                break;
              }
            }
          }
          return t3;
        }, optimize: function() {
          for (var t3 = Nl.arraySlice(this.times), e3 = Nl.arraySlice(this.values), n3 = this.getValueSize(), i3 = this.getInterpolation() === 2302, r3 = 1, a2 = t3.length - 1, o2 = 1; o2 < a2; ++o2) {
            var s2 = false, l2 = t3[o2];
            if (l2 !== t3[o2 + 1] && (o2 !== 1 || l2 !== l2[0]))
              if (i3)
                s2 = true;
              else
                for (var c2 = o2 * n3, u2 = c2 - n3, h2 = c2 + n3, d2 = 0; d2 !== n3; ++d2) {
                  var p2 = e3[c2 + d2];
                  if (p2 !== e3[u2 + d2] || p2 !== e3[h2 + d2]) {
                    s2 = true;
                    break;
                  }
                }
            if (s2) {
              if (o2 !== r3) {
                t3[r3] = t3[o2];
                var f2 = o2 * n3, m2 = r3 * n3;
                for (d2 = 0; d2 !== n3; ++d2)
                  e3[m2 + d2] = e3[f2 + d2];
              }
              ++r3;
            }
          }
          if (0 < a2) {
            for (t3[r3] = t3[a2], f2 = a2 * n3, m2 = r3 * n3, d2 = 0; d2 !== n3; ++d2)
              e3[m2 + d2] = e3[f2 + d2];
            ++r3;
          }
          return r3 !== t3.length ? (this.times = Nl.arraySlice(t3, 0, r3), this.values = Nl.arraySlice(e3, 0, r3 * n3)) : (this.times = t3, this.values = e3), this;
        }, clone: function() {
          var t3 = Nl.arraySlice(this.times, 0), e3 = Nl.arraySlice(this.values, 0), n3 = new this.constructor(this.name, t3, e3);
          return n3.createInterpolant = this.createInterpolant, n3;
        } }), Ul.prototype = Object.assign(Object.create(Gl.prototype), { constructor: Ul, ValueTypeName: "bool", ValueBufferType: Array, DefaultInterpolation: le, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 }), Hl.prototype = Object.assign(Object.create(Gl.prototype), { constructor: Hl, ValueTypeName: "color" }), Wl.prototype = Object.assign(Object.create(Gl.prototype), { constructor: Wl, ValueTypeName: "number" }), Jl.prototype = Object.assign(Object.create(Fl.prototype), { constructor: Jl, interpolate_: function(t3, e3, n3, i3) {
          for (var r3 = this.resultBuffer, a2 = this.sampleValues, o2 = this.valueSize, s2 = t3 * o2, l2 = (n3 - e3) / (i3 - e3), c2 = s2 + o2; s2 !== c2; s2 += 4)
            Ge.slerpFlat(r3, 0, a2, s2 - o2, a2, s2, l2);
          return r3;
        } }), ql.prototype = Object.assign(Object.create(Gl.prototype), { constructor: ql, ValueTypeName: "quaternion", DefaultInterpolation: ce, InterpolantFactoryMethodLinear: function(t3) {
          return new Jl(this.times, this.values, this.getValueSize(), t3);
        }, InterpolantFactoryMethodSmooth: void 0 }), Xl.prototype = Object.assign(Object.create(Gl.prototype), { constructor: Xl, ValueTypeName: "string", ValueBufferType: Array, DefaultInterpolation: le, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 }), Yl.prototype = Object.assign(Object.create(Gl.prototype), { constructor: Yl, ValueTypeName: "vector" }), Object.assign(Zl, { parse: function(t3) {
          for (var e3 = [], n3 = t3.tracks, i3 = 1 / (t3.fps || 1), r3 = 0, a2 = n3.length; r3 !== a2; ++r3)
            e3.push($l(n3[r3]).scale(i3));
          return new Zl(t3.name, t3.duration, e3);
        }, toJSON: function(t3) {
          for (var e3 = [], n3 = t3.tracks, i3 = { name: t3.name, duration: t3.duration, tracks: e3, uuid: t3.uuid }, r3 = 0, a2 = n3.length; r3 !== a2; ++r3)
            e3.push(Gl.toJSON(n3[r3]));
          return i3;
        }, CreateFromMorphTargetSequence: function(t3, e3, n3, i3) {
          for (var r3 = e3.length, a2 = [], o2 = 0; o2 < r3; o2++) {
            var s2 = [], l2 = [];
            s2.push((o2 + r3 - 1) % r3, o2, (o2 + 1) % r3), l2.push(0, 1, 0);
            var c2 = Nl.getKeyframeOrder(s2);
            s2 = Nl.sortedArray(s2, 1, c2), l2 = Nl.sortedArray(l2, 1, c2), i3 || s2[0] !== 0 || (s2.push(r3), l2.push(l2[0])), a2.push(new Wl(".morphTargetInfluences[" + e3[o2].name + "]", s2, l2).scale(1 / n3));
          }
          return new Zl(t3, -1, a2);
        }, findByName: function(t3, e3) {
          var n3 = t3;
          Array.isArray(t3) || (n3 = t3.geometry && t3.geometry.animations || t3.animations);
          for (var i3 = 0; i3 < n3.length; i3++)
            if (n3[i3].name === e3)
              return n3[i3];
          return null;
        }, CreateClipsFromMorphTargetSequences: function(t3, e3, n3) {
          for (var i3 = {}, r3 = /^([\w-]*?)([\d]+)$/, a2 = 0, o2 = t3.length; a2 < o2; a2++) {
            var s2 = t3[a2], l2 = s2.name.match(r3);
            if (l2 && 1 < l2.length) {
              var c2 = i3[h2 = l2[1]];
              c2 || (i3[h2] = c2 = []), c2.push(s2);
            }
          }
          var u2 = [];
          for (var h2 in i3)
            u2.push(Zl.CreateFromMorphTargetSequence(h2, i3[h2], e3, n3));
          return u2;
        }, parseAnimation: function(t3, e3) {
          if (!t3)
            return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
          for (var n3 = function(t4, e4, n4, i4, r4) {
            if (n4.length !== 0) {
              var a3 = [], o3 = [];
              Nl.flattenJSON(n4, a3, o3, i4), a3.length !== 0 && r4.push(new t4(e4, a3, o3));
            }
          }, i3 = [], r3 = t3.name || "default", a2 = t3.length || -1, o2 = t3.fps || 30, s2 = t3.hierarchy || [], l2 = 0; l2 < s2.length; l2++) {
            var c2 = s2[l2].keys;
            if (c2 && c2.length !== 0)
              if (c2[0].morphTargets) {
                for (var u2 = {}, h2 = 0; h2 < c2.length; h2++)
                  if (c2[h2].morphTargets)
                    for (var d2 = 0; d2 < c2[h2].morphTargets.length; d2++)
                      u2[c2[h2].morphTargets[d2]] = -1;
                for (var p2 in u2) {
                  var f2 = [], m2 = [];
                  for (d2 = 0; d2 !== c2[h2].morphTargets.length; ++d2) {
                    var g2 = c2[h2];
                    f2.push(g2.time), m2.push(g2.morphTarget === p2 ? 1 : 0);
                  }
                  i3.push(new Wl(".morphTargetInfluence[" + p2 + "]", f2, m2));
                }
                a2 = u2.length * (o2 || 1);
              } else {
                var v2 = ".bones[" + e3[l2].name + "]";
                n3(Yl, v2 + ".position", c2, "pos", i3), n3(ql, v2 + ".quaternion", c2, "rot", i3), n3(Yl, v2 + ".scale", c2, "scl", i3);
              }
          }
          return i3.length === 0 ? null : new Zl(r3, a2, i3);
        } }), Object.assign(Zl.prototype, { resetDuration: function() {
          for (var t3 = 0, e3 = 0, n3 = this.tracks.length; e3 !== n3; ++e3) {
            var i3 = this.tracks[e3];
            t3 = Math.max(t3, i3.times[i3.times.length - 1]);
          }
          return this.duration = t3, this;
        }, trim: function() {
          for (var t3 = 0; t3 < this.tracks.length; t3++)
            this.tracks[t3].trim(0, this.duration);
          return this;
        }, validate: function() {
          for (var t3 = true, e3 = 0; e3 < this.tracks.length; e3++)
            t3 = t3 && this.tracks[e3].validate();
          return t3;
        }, optimize: function() {
          for (var t3 = 0; t3 < this.tracks.length; t3++)
            this.tracks[t3].optimize();
          return this;
        }, clone: function() {
          for (var t3 = [], e3 = 0; e3 < this.tracks.length; e3++)
            t3.push(this.tracks[e3].clone());
          return new Zl(this.name, this.duration, t3);
        } });
        var Kl = { enabled: false, files: {}, add: function(t3, e3) {
          this.enabled !== false && (this.files[t3] = e3);
        }, get: function(t3) {
          if (this.enabled !== false)
            return this.files[t3];
        }, remove: function(t3) {
          delete this.files[t3];
        }, clear: function() {
          this.files = {};
        } };
        function Ql(t3, e3, n3) {
          var i3 = this, r3 = false, a2 = 0, o2 = 0, s2 = void 0, l2 = [];
          this.onStart = void 0, this.onLoad = t3, this.onProgress = e3, this.onError = n3, this.itemStart = function(t4) {
            o2++, r3 === false && i3.onStart !== void 0 && i3.onStart(t4, a2, o2), r3 = true;
          }, this.itemEnd = function(t4) {
            a2++, i3.onProgress !== void 0 && i3.onProgress(t4, a2, o2), a2 === o2 && (r3 = false, i3.onLoad !== void 0 && i3.onLoad());
          }, this.itemError = function(t4) {
            i3.onError !== void 0 && i3.onError(t4);
          }, this.resolveURL = function(t4) {
            return s2 ? s2(t4) : t4;
          }, this.setURLModifier = function(t4) {
            return s2 = t4, this;
          }, this.addHandler = function(t4, e4) {
            return l2.push(t4, e4), this;
          }, this.removeHandler = function(t4) {
            var e4 = l2.indexOf(t4);
            return e4 !== -1 && l2.splice(e4, 2), this;
          }, this.getHandler = function(t4) {
            for (var e4 = 0, n4 = l2.length; e4 < n4; e4 += 2) {
              var i4 = l2[e4], r4 = l2[e4 + 1];
              if (i4.global && (i4.lastIndex = 0), i4.test(t4))
                return r4;
            }
            return null;
          };
        }
        var tc = new Ql();
        function ec(t3) {
          this.manager = t3 !== void 0 ? t3 : tc, this.crossOrigin = "anonymous", this.path = "", this.resourcePath = "";
        }
        Object.assign(ec.prototype, { load: function() {
        }, parse: function() {
        }, setCrossOrigin: function(t3) {
          return this.crossOrigin = t3, this;
        }, setPath: function(t3) {
          return this.path = t3, this;
        }, setResourcePath: function(t3) {
          return this.resourcePath = t3, this;
        } });
        var nc = {};
        function ic(t3) {
          ec.call(this, t3);
        }
        function rc(t3) {
          ec.call(this, t3);
        }
        function ac(t3) {
          ec.call(this, t3);
        }
        function oc(t3) {
          ec.call(this, t3);
        }
        function sc(t3) {
          ec.call(this, t3);
        }
        function lc(t3) {
          ec.call(this, t3);
        }
        function cc(t3) {
          ec.call(this, t3);
        }
        function uc() {
          this.type = "Curve", this.arcLengthDivisions = 200;
        }
        function hc(t3, e3, n3, i3, r3, a2, o2, s2) {
          uc.call(this), this.type = "EllipseCurve", this.aX = t3 || 0, this.aY = e3 || 0, this.xRadius = n3 || 1, this.yRadius = i3 || 1, this.aStartAngle = r3 || 0, this.aEndAngle = a2 || 2 * Math.PI, this.aClockwise = o2 || false, this.aRotation = s2 || 0;
        }
        function dc(t3, e3, n3, i3, r3, a2) {
          hc.call(this, t3, e3, n3, n3, i3, r3, a2), this.type = "ArcCurve";
        }
        function pc() {
          var t3 = 0, e3 = 0, n3 = 0, i3 = 0;
          function r3(r4, a2, o2, s2) {
            n3 = -3 * (t3 = r4) + 3 * a2 - 2 * (e3 = o2) - s2, i3 = 2 * r4 - 2 * a2 + o2 + s2;
          }
          return { initCatmullRom: function(t4, e4, n4, i4, a2) {
            r3(e4, n4, a2 * (n4 - t4), a2 * (i4 - e4));
          }, initNonuniformCatmullRom: function(t4, e4, n4, i4, a2, o2, s2) {
            var l2 = (e4 - t4) / a2 - (n4 - t4) / (a2 + o2) + (n4 - e4) / o2, c2 = (n4 - e4) / o2 - (i4 - e4) / (o2 + s2) + (i4 - n4) / s2;
            r3(e4, n4, l2 *= o2, c2 *= o2);
          }, calc: function(r4) {
            var a2 = r4 * r4;
            return t3 + e3 * r4 + n3 * a2 + i3 * (a2 * r4);
          } };
        }
        ic.prototype = Object.assign(Object.create(ec.prototype), { constructor: ic, load: function(t3, e3, n3, i3) {
          t3 === void 0 && (t3 = ""), this.path !== void 0 && (t3 = this.path + t3), t3 = this.manager.resolveURL(t3);
          var r3 = this, a2 = Kl.get(t3);
          if (a2 !== void 0)
            return r3.manager.itemStart(t3), setTimeout(function() {
              e3 && e3(a2), r3.manager.itemEnd(t3);
            }, 0), a2;
          if (nc[t3] === void 0) {
            var o2 = t3.match(/^data:(.*?)(;base64)?,(.*)$/);
            if (o2) {
              var s2 = o2[1], l2 = !!o2[2], c2 = o2[3];
              c2 = decodeURIComponent(c2), l2 && (c2 = atob(c2));
              try {
                var u2, h2 = (this.responseType || "").toLowerCase();
                switch (h2) {
                  case "arraybuffer":
                  case "blob":
                    for (var d2 = new Uint8Array(c2.length), p2 = 0; p2 < c2.length; p2++)
                      d2[p2] = c2.charCodeAt(p2);
                    u2 = h2 === "blob" ? new Blob([d2.buffer], { type: s2 }) : d2.buffer;
                    break;
                  case "document":
                    var f2 = new DOMParser();
                    u2 = f2.parseFromString(c2, s2);
                    break;
                  case "json":
                    u2 = JSON.parse(c2);
                    break;
                  default:
                    u2 = c2;
                }
                setTimeout(function() {
                  e3 && e3(u2), r3.manager.itemEnd(t3);
                }, 0);
              } catch (e4) {
                setTimeout(function() {
                  i3 && i3(e4), r3.manager.itemError(t3), r3.manager.itemEnd(t3);
                }, 0);
              }
            } else {
              nc[t3] = [], nc[t3].push({ onLoad: e3, onProgress: n3, onError: i3 });
              var m2 = new XMLHttpRequest();
              for (var g2 in m2.open("GET", t3, true), m2.addEventListener("load", function(e4) {
                var n4 = this.response, i4 = nc[t3];
                if (delete nc[t3], this.status === 200 || this.status === 0) {
                  this.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), Kl.add(t3, n4);
                  for (var a3 = 0, o3 = i4.length; a3 < o3; a3++)
                    (s3 = i4[a3]).onLoad && s3.onLoad(n4);
                  r3.manager.itemEnd(t3);
                } else {
                  for (a3 = 0, o3 = i4.length; a3 < o3; a3++) {
                    var s3;
                    (s3 = i4[a3]).onError && s3.onError(e4);
                  }
                  r3.manager.itemError(t3), r3.manager.itemEnd(t3);
                }
              }, false), m2.addEventListener("progress", function(e4) {
                for (var n4 = nc[t3], i4 = 0, r4 = n4.length; i4 < r4; i4++) {
                  var a3 = n4[i4];
                  a3.onProgress && a3.onProgress(e4);
                }
              }, false), m2.addEventListener("error", function(e4) {
                var n4 = nc[t3];
                delete nc[t3];
                for (var i4 = 0, a3 = n4.length; i4 < a3; i4++) {
                  var o3 = n4[i4];
                  o3.onError && o3.onError(e4);
                }
                r3.manager.itemError(t3), r3.manager.itemEnd(t3);
              }, false), m2.addEventListener("abort", function(e4) {
                var n4 = nc[t3];
                delete nc[t3];
                for (var i4 = 0, a3 = n4.length; i4 < a3; i4++) {
                  var o3 = n4[i4];
                  o3.onError && o3.onError(e4);
                }
                r3.manager.itemError(t3), r3.manager.itemEnd(t3);
              }, false), this.responseType !== void 0 && (m2.responseType = this.responseType), this.withCredentials !== void 0 && (m2.withCredentials = this.withCredentials), m2.overrideMimeType && m2.overrideMimeType(this.mimeType !== void 0 ? this.mimeType : "text/plain"), this.requestHeader)
                m2.setRequestHeader(g2, this.requestHeader[g2]);
              m2.send(null);
            }
            return r3.manager.itemStart(t3), m2;
          }
          nc[t3].push({ onLoad: e3, onProgress: n3, onError: i3 });
        }, setResponseType: function(t3) {
          return this.responseType = t3, this;
        }, setWithCredentials: function(t3) {
          return this.withCredentials = t3, this;
        }, setMimeType: function(t3) {
          return this.mimeType = t3, this;
        }, setRequestHeader: function(t3) {
          return this.requestHeader = t3, this;
        } }), rc.prototype = Object.assign(Object.create(ec.prototype), { constructor: rc, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = new ic(r3.manager);
          a2.setPath(r3.path), a2.load(t3, function(t4) {
            e3(r3.parse(JSON.parse(t4)));
          }, n3, i3);
        }, parse: function(t3) {
          for (var e3 = [], n3 = 0; n3 < t3.length; n3++) {
            var i3 = Zl.parse(t3[n3]);
            e3.push(i3);
          }
          return e3;
        } }), ac.prototype = Object.assign(Object.create(ec.prototype), { constructor: ac, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = [], o2 = new ds();
          o2.image = a2;
          var s2 = new ic(this.manager);
          function l2(l3) {
            s2.load(t3[l3], function(t4) {
              var n4 = r3.parse(t4, true);
              a2[l3] = { width: n4.width, height: n4.height, format: n4.format, mipmaps: n4.mipmaps }, (c2 += 1) === 6 && (n4.mipmapCount === 1 && (o2.minFilter = ut), o2.format = n4.format, o2.needsUpdate = true, e3 && e3(o2));
            }, n3, i3);
          }
          if (s2.setPath(this.path), s2.setResponseType("arraybuffer"), Array.isArray(t3))
            for (var c2 = 0, u2 = 0, h2 = t3.length; u2 < h2; ++u2)
              l2(u2);
          else
            s2.load(t3, function(t4) {
              var n4 = r3.parse(t4, true);
              if (n4.isCubemap)
                for (var i4 = n4.mipmaps.length / n4.mipmapCount, s3 = 0; s3 < i4; s3++) {
                  a2[s3] = { mipmaps: [] };
                  for (var l3 = 0; l3 < n4.mipmapCount; l3++)
                    a2[s3].mipmaps.push(n4.mipmaps[s3 * n4.mipmapCount + l3]), a2[s3].format = n4.format, a2[s3].width = n4.width, a2[s3].height = n4.height;
                }
              else
                o2.image.width = n4.width, o2.image.height = n4.height, o2.mipmaps = n4.mipmaps;
              n4.mipmapCount === 1 && (o2.minFilter = ut), o2.format = n4.format, o2.needsUpdate = true, e3 && e3(o2);
            }, n3, i3);
          return o2;
        } }), oc.prototype = Object.assign(Object.create(ec.prototype), { constructor: oc, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = new wr(), o2 = new ic(this.manager);
          return o2.setResponseType("arraybuffer"), o2.setPath(this.path), o2.load(t3, function(t4) {
            var n4 = r3.parse(t4);
            n4 && (n4.image !== void 0 ? a2.image = n4.image : n4.data !== void 0 && (a2.image.width = n4.width, a2.image.height = n4.height, a2.image.data = n4.data), a2.wrapS = n4.wrapS !== void 0 ? n4.wrapS : at, a2.wrapT = n4.wrapT !== void 0 ? n4.wrapT : at, a2.magFilter = n4.magFilter !== void 0 ? n4.magFilter : ut, a2.minFilter = n4.minFilter !== void 0 ? n4.minFilter : ut, a2.anisotropy = n4.anisotropy !== void 0 ? n4.anisotropy : 1, n4.format !== void 0 && (a2.format = n4.format), n4.type !== void 0 && (a2.type = n4.type), n4.mipmaps !== void 0 && (a2.mipmaps = n4.mipmaps, a2.minFilter = dt), n4.mipmapCount === 1 && (a2.minFilter = ut), a2.needsUpdate = true, e3 && e3(a2, n4));
          }, n3, i3), a2;
        } }), sc.prototype = Object.assign(Object.create(ec.prototype), { constructor: sc, load: function(t3, e3, n3, i3) {
          this.path !== void 0 && (t3 = this.path + t3), t3 = this.manager.resolveURL(t3);
          var r3 = this, a2 = Kl.get(t3);
          if (a2 !== void 0)
            return r3.manager.itemStart(t3), setTimeout(function() {
              e3 && e3(a2), r3.manager.itemEnd(t3);
            }, 0), a2;
          var o2 = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
          function s2() {
            o2.removeEventListener("load", s2, false), o2.removeEventListener("error", l2, false), Kl.add(t3, this), e3 && e3(this), r3.manager.itemEnd(t3);
          }
          function l2(e4) {
            o2.removeEventListener("load", s2, false), o2.removeEventListener("error", l2, false), i3 && i3(e4), r3.manager.itemError(t3), r3.manager.itemEnd(t3);
          }
          return o2.addEventListener("load", s2, false), o2.addEventListener("error", l2, false), t3.substr(0, 5) !== "data:" && this.crossOrigin !== void 0 && (o2.crossOrigin = this.crossOrigin), r3.manager.itemStart(t3), o2.src = t3, o2;
        } }), lc.prototype = Object.assign(Object.create(ec.prototype), { constructor: lc, load: function(t3, e3, n3, i3) {
          var r3 = new Pr(), a2 = new sc(this.manager);
          a2.setCrossOrigin(this.crossOrigin), a2.setPath(this.path);
          var o2 = 0;
          function s2(n4) {
            a2.load(t3[n4], function(t4) {
              r3.images[n4] = t4, ++o2 == 6 && (r3.needsUpdate = true, e3 && e3(r3));
            }, void 0, i3);
          }
          for (var l2 = 0; l2 < t3.length; ++l2)
            s2(l2);
          return r3;
        } }), cc.prototype = Object.assign(Object.create(ec.prototype), { constructor: cc, load: function(t3, e3, n3, i3) {
          var r3 = new Fe(), a2 = new sc(this.manager);
          return a2.setCrossOrigin(this.crossOrigin), a2.setPath(this.path), a2.load(t3, function(n4) {
            r3.image = n4;
            var i4 = 0 < t3.search(/\.jpe?g($|\?)/i) || t3.search(/^data\:image\/jpeg/) === 0;
            r3.format = i4 ? Tt : Et, r3.needsUpdate = true, e3 !== void 0 && e3(r3);
          }, n3, i3), r3;
        } }), Object.assign(uc.prototype, { getPoint: function() {
          return console.warn("THREE.Curve: .getPoint() not implemented."), null;
        }, getPointAt: function(t3, e3) {
          var n3 = this.getUtoTmapping(t3);
          return this.getPoint(n3, e3);
        }, getPoints: function(t3) {
          t3 === void 0 && (t3 = 5);
          for (var e3 = [], n3 = 0; n3 <= t3; n3++)
            e3.push(this.getPoint(n3 / t3));
          return e3;
        }, getSpacedPoints: function(t3) {
          t3 === void 0 && (t3 = 5);
          for (var e3 = [], n3 = 0; n3 <= t3; n3++)
            e3.push(this.getPointAt(n3 / t3));
          return e3;
        }, getLength: function() {
          var t3 = this.getLengths();
          return t3[t3.length - 1];
        }, getLengths: function(t3) {
          if (t3 === void 0 && (t3 = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === t3 + 1 && !this.needsUpdate)
            return this.cacheArcLengths;
          this.needsUpdate = false;
          var e3, n3, i3 = [], r3 = this.getPoint(0), a2 = 0;
          for (i3.push(0), n3 = 1; n3 <= t3; n3++)
            a2 += (e3 = this.getPoint(n3 / t3)).distanceTo(r3), i3.push(a2), r3 = e3;
          return this.cacheArcLengths = i3;
        }, updateArcLengths: function() {
          this.needsUpdate = true, this.getLengths();
        }, getUtoTmapping: function(t3, e3) {
          var n3, i3 = this.getLengths(), r3 = 0, a2 = i3.length;
          n3 = e3 || t3 * i3[a2 - 1];
          for (var o2, s2 = 0, l2 = a2 - 1; s2 <= l2; )
            if ((o2 = i3[r3 = Math.floor(s2 + (l2 - s2) / 2)] - n3) < 0)
              s2 = r3 + 1;
            else {
              if (!(0 < o2)) {
                l2 = r3;
                break;
              }
              l2 = r3 - 1;
            }
          if (i3[r3 = l2] === n3)
            return r3 / (a2 - 1);
          var c2 = i3[r3];
          return (r3 + (n3 - c2) / (i3[r3 + 1] - c2)) / (a2 - 1);
        }, getTangent: function(t3) {
          var e3 = t3 - 1e-4, n3 = t3 + 1e-4;
          e3 < 0 && (e3 = 0), 1 < n3 && (n3 = 1);
          var i3 = this.getPoint(e3);
          return this.getPoint(n3).clone().sub(i3).normalize();
        }, getTangentAt: function(t3) {
          var e3 = this.getUtoTmapping(t3);
          return this.getTangent(e3);
        }, computeFrenetFrames: function(t3, e3) {
          var n3, i3, r3, a2 = new We(), o2 = [], s2 = [], l2 = [], c2 = new We(), u2 = new Qe();
          for (n3 = 0; n3 <= t3; n3++)
            i3 = n3 / t3, o2[n3] = this.getTangentAt(i3), o2[n3].normalize();
          s2[0] = new We(), l2[0] = new We();
          var h2 = Number.MAX_VALUE, d2 = Math.abs(o2[0].x), p2 = Math.abs(o2[0].y), f2 = Math.abs(o2[0].z);
          for (d2 <= h2 && (h2 = d2, a2.set(1, 0, 0)), p2 <= h2 && (h2 = p2, a2.set(0, 1, 0)), f2 <= h2 && a2.set(0, 0, 1), c2.crossVectors(o2[0], a2).normalize(), s2[0].crossVectors(o2[0], c2), l2[0].crossVectors(o2[0], s2[0]), n3 = 1; n3 <= t3; n3++)
            s2[n3] = s2[n3 - 1].clone(), l2[n3] = l2[n3 - 1].clone(), c2.crossVectors(o2[n3 - 1], o2[n3]), c2.length() > Number.EPSILON && (c2.normalize(), r3 = Math.acos(Pe.clamp(o2[n3 - 1].dot(o2[n3]), -1, 1)), s2[n3].applyMatrix4(u2.makeRotationAxis(c2, r3))), l2[n3].crossVectors(o2[n3], s2[n3]);
          if (e3 === true)
            for (r3 = Math.acos(Pe.clamp(s2[0].dot(s2[t3]), -1, 1)), r3 /= t3, 0 < o2[0].dot(c2.crossVectors(s2[0], s2[t3])) && (r3 = -r3), n3 = 1; n3 <= t3; n3++)
              s2[n3].applyMatrix4(u2.makeRotationAxis(o2[n3], r3 * n3)), l2[n3].crossVectors(o2[n3], s2[n3]);
          return { tangents: o2, normals: s2, binormals: l2 };
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.arcLengthDivisions = t3.arcLengthDivisions, this;
        }, toJSON: function() {
          var t3 = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } };
          return t3.arcLengthDivisions = this.arcLengthDivisions, t3.type = this.type, t3;
        }, fromJSON: function(t3) {
          return this.arcLengthDivisions = t3.arcLengthDivisions, this;
        } }), ((hc.prototype = Object.create(uc.prototype)).constructor = hc).prototype.isEllipseCurve = true, hc.prototype.getPoint = function(t3, e3) {
          for (var n3 = e3 || new Re(), i3 = 2 * Math.PI, r3 = this.aEndAngle - this.aStartAngle, a2 = Math.abs(r3) < Number.EPSILON; r3 < 0; )
            r3 += i3;
          for (; i3 < r3; )
            r3 -= i3;
          r3 < Number.EPSILON && (r3 = a2 ? 0 : i3), this.aClockwise !== true || a2 || (r3 === i3 ? r3 = -i3 : r3 -= i3);
          var o2 = this.aStartAngle + t3 * r3, s2 = this.aX + this.xRadius * Math.cos(o2), l2 = this.aY + this.yRadius * Math.sin(o2);
          if (this.aRotation !== 0) {
            var c2 = Math.cos(this.aRotation), u2 = Math.sin(this.aRotation), h2 = s2 - this.aX, d2 = l2 - this.aY;
            s2 = h2 * c2 - d2 * u2 + this.aX, l2 = h2 * u2 + d2 * c2 + this.aY;
          }
          return n3.set(s2, l2);
        }, hc.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.aX = t3.aX, this.aY = t3.aY, this.xRadius = t3.xRadius, this.yRadius = t3.yRadius, this.aStartAngle = t3.aStartAngle, this.aEndAngle = t3.aEndAngle, this.aClockwise = t3.aClockwise, this.aRotation = t3.aRotation, this;
        }, hc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.aX = this.aX, t3.aY = this.aY, t3.xRadius = this.xRadius, t3.yRadius = this.yRadius, t3.aStartAngle = this.aStartAngle, t3.aEndAngle = this.aEndAngle, t3.aClockwise = this.aClockwise, t3.aRotation = this.aRotation, t3;
        }, hc.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.aX = t3.aX, this.aY = t3.aY, this.xRadius = t3.xRadius, this.yRadius = t3.yRadius, this.aStartAngle = t3.aStartAngle, this.aEndAngle = t3.aEndAngle, this.aClockwise = t3.aClockwise, this.aRotation = t3.aRotation, this;
        }, ((dc.prototype = Object.create(hc.prototype)).constructor = dc).prototype.isArcCurve = true;
        var fc = new We(), mc = new pc(), gc = new pc(), vc = new pc();
        function yc(t3, e3, n3, i3) {
          uc.call(this), this.type = "CatmullRomCurve3", this.points = t3 || [], this.closed = e3 || false, this.curveType = n3 || "centripetal", this.tension = i3 || 0.5;
        }
        function xc(t3, e3, n3, i3, r3) {
          var a2 = 0.5 * (i3 - e3), o2 = 0.5 * (r3 - n3), s2 = t3 * t3;
          return (2 * n3 - 2 * i3 + a2 + o2) * (t3 * s2) + (-3 * n3 + 3 * i3 - 2 * a2 - o2) * s2 + a2 * t3 + n3;
        }
        function bc(t3, e3, n3, i3) {
          return (o2 = 1 - t3) * o2 * e3 + 2 * (1 - (a2 = t3)) * a2 * n3 + (r3 = t3) * r3 * i3;
          var r3, a2, o2;
        }
        function wc(t3, e3, n3, i3, r3) {
          return (c2 = 1 - t3) * c2 * c2 * e3 + 3 * (l2 = 1 - (s2 = t3)) * l2 * s2 * n3 + 3 * (1 - (o2 = t3)) * o2 * o2 * i3 + (a2 = t3) * a2 * a2 * r3;
          var a2, o2, s2, l2, c2;
        }
        function Mc(t3, e3, n3, i3) {
          uc.call(this), this.type = "CubicBezierCurve", this.v0 = t3 || new Re(), this.v1 = e3 || new Re(), this.v2 = n3 || new Re(), this.v3 = i3 || new Re();
        }
        function _c(t3, e3, n3, i3) {
          uc.call(this), this.type = "CubicBezierCurve3", this.v0 = t3 || new We(), this.v1 = e3 || new We(), this.v2 = n3 || new We(), this.v3 = i3 || new We();
        }
        function Sc(t3, e3) {
          uc.call(this), this.type = "LineCurve", this.v1 = t3 || new Re(), this.v2 = e3 || new Re();
        }
        function Cc(t3, e3) {
          uc.call(this), this.type = "LineCurve3", this.v1 = t3 || new We(), this.v2 = e3 || new We();
        }
        function Tc(t3, e3, n3) {
          uc.call(this), this.type = "QuadraticBezierCurve", this.v0 = t3 || new Re(), this.v1 = e3 || new Re(), this.v2 = n3 || new Re();
        }
        function Ec(t3, e3, n3) {
          uc.call(this), this.type = "QuadraticBezierCurve3", this.v0 = t3 || new We(), this.v1 = e3 || new We(), this.v2 = n3 || new We();
        }
        function Dc(t3) {
          uc.call(this), this.type = "SplineCurve", this.points = t3 || [];
        }
        ((yc.prototype = Object.create(uc.prototype)).constructor = yc).prototype.isCatmullRomCurve3 = true, yc.prototype.getPoint = function(t3, e3) {
          var n3, i3, r3, a2, o2 = e3 || new We(), s2 = this.points, l2 = s2.length, c2 = (l2 - (this.closed ? 0 : 1)) * t3, u2 = Math.floor(c2), h2 = c2 - u2;
          if (this.closed ? u2 += 0 < u2 ? 0 : (Math.floor(Math.abs(u2) / l2) + 1) * l2 : h2 === 0 && u2 === l2 - 1 && (u2 = l2 - 2, h2 = 1), n3 = this.closed || 0 < u2 ? s2[(u2 - 1) % l2] : (fc.subVectors(s2[0], s2[1]).add(s2[0]), fc), i3 = s2[u2 % l2], r3 = s2[(u2 + 1) % l2], a2 = this.closed || u2 + 2 < l2 ? s2[(u2 + 2) % l2] : (fc.subVectors(s2[l2 - 1], s2[l2 - 2]).add(s2[l2 - 1]), fc), this.curveType === "centripetal" || this.curveType === "chordal") {
            var d2 = this.curveType === "chordal" ? 0.5 : 0.25, p2 = Math.pow(n3.distanceToSquared(i3), d2), f2 = Math.pow(i3.distanceToSquared(r3), d2), m2 = Math.pow(r3.distanceToSquared(a2), d2);
            f2 < 1e-4 && (f2 = 1), p2 < 1e-4 && (p2 = f2), m2 < 1e-4 && (m2 = f2), mc.initNonuniformCatmullRom(n3.x, i3.x, r3.x, a2.x, p2, f2, m2), gc.initNonuniformCatmullRom(n3.y, i3.y, r3.y, a2.y, p2, f2, m2), vc.initNonuniformCatmullRom(n3.z, i3.z, r3.z, a2.z, p2, f2, m2);
          } else
            this.curveType === "catmullrom" && (mc.initCatmullRom(n3.x, i3.x, r3.x, a2.x, this.tension), gc.initCatmullRom(n3.y, i3.y, r3.y, a2.y, this.tension), vc.initCatmullRom(n3.z, i3.z, r3.z, a2.z, this.tension));
          return o2.set(mc.calc(h2), gc.calc(h2), vc.calc(h2)), o2;
        }, yc.prototype.copy = function(t3) {
          uc.prototype.copy.call(this, t3), this.points = [];
          for (var e3 = 0, n3 = t3.points.length; e3 < n3; e3++) {
            var i3 = t3.points[e3];
            this.points.push(i3.clone());
          }
          return this.closed = t3.closed, this.curveType = t3.curveType, this.tension = t3.tension, this;
        }, yc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          t3.points = [];
          for (var e3 = 0, n3 = this.points.length; e3 < n3; e3++) {
            var i3 = this.points[e3];
            t3.points.push(i3.toArray());
          }
          return t3.closed = this.closed, t3.curveType = this.curveType, t3.tension = this.tension, t3;
        }, yc.prototype.fromJSON = function(t3) {
          uc.prototype.fromJSON.call(this, t3), this.points = [];
          for (var e3 = 0, n3 = t3.points.length; e3 < n3; e3++) {
            var i3 = t3.points[e3];
            this.points.push(new We().fromArray(i3));
          }
          return this.closed = t3.closed, this.curveType = t3.curveType, this.tension = t3.tension, this;
        }, ((Mc.prototype = Object.create(uc.prototype)).constructor = Mc).prototype.isCubicBezierCurve = true, Mc.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new Re(), i3 = this.v0, r3 = this.v1, a2 = this.v2, o2 = this.v3;
          return n3.set(wc(t3, i3.x, r3.x, a2.x, o2.x), wc(t3, i3.y, r3.y, a2.y, o2.y)), n3;
        }, Mc.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.v0.copy(t3.v0), this.v1.copy(t3.v1), this.v2.copy(t3.v2), this.v3.copy(t3.v3), this;
        }, Mc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.v0 = this.v0.toArray(), t3.v1 = this.v1.toArray(), t3.v2 = this.v2.toArray(), t3.v3 = this.v3.toArray(), t3;
        }, Mc.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.v0.fromArray(t3.v0), this.v1.fromArray(t3.v1), this.v2.fromArray(t3.v2), this.v3.fromArray(t3.v3), this;
        }, ((_c.prototype = Object.create(uc.prototype)).constructor = _c).prototype.isCubicBezierCurve3 = true, _c.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new We(), i3 = this.v0, r3 = this.v1, a2 = this.v2, o2 = this.v3;
          return n3.set(wc(t3, i3.x, r3.x, a2.x, o2.x), wc(t3, i3.y, r3.y, a2.y, o2.y), wc(t3, i3.z, r3.z, a2.z, o2.z)), n3;
        }, _c.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.v0.copy(t3.v0), this.v1.copy(t3.v1), this.v2.copy(t3.v2), this.v3.copy(t3.v3), this;
        }, _c.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.v0 = this.v0.toArray(), t3.v1 = this.v1.toArray(), t3.v2 = this.v2.toArray(), t3.v3 = this.v3.toArray(), t3;
        }, _c.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.v0.fromArray(t3.v0), this.v1.fromArray(t3.v1), this.v2.fromArray(t3.v2), this.v3.fromArray(t3.v3), this;
        }, ((Sc.prototype = Object.create(uc.prototype)).constructor = Sc).prototype.isLineCurve = true, Sc.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new Re();
          return t3 === 1 ? n3.copy(this.v2) : (n3.copy(this.v2).sub(this.v1), n3.multiplyScalar(t3).add(this.v1)), n3;
        }, Sc.prototype.getPointAt = function(t3, e3) {
          return this.getPoint(t3, e3);
        }, Sc.prototype.getTangent = function() {
          return this.v2.clone().sub(this.v1).normalize();
        }, Sc.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.v1.copy(t3.v1), this.v2.copy(t3.v2), this;
        }, Sc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.v1 = this.v1.toArray(), t3.v2 = this.v2.toArray(), t3;
        }, Sc.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.v1.fromArray(t3.v1), this.v2.fromArray(t3.v2), this;
        }, ((Cc.prototype = Object.create(uc.prototype)).constructor = Cc).prototype.isLineCurve3 = true, Cc.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new We();
          return t3 === 1 ? n3.copy(this.v2) : (n3.copy(this.v2).sub(this.v1), n3.multiplyScalar(t3).add(this.v1)), n3;
        }, Cc.prototype.getPointAt = function(t3, e3) {
          return this.getPoint(t3, e3);
        }, Cc.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.v1.copy(t3.v1), this.v2.copy(t3.v2), this;
        }, Cc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.v1 = this.v1.toArray(), t3.v2 = this.v2.toArray(), t3;
        }, Cc.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.v1.fromArray(t3.v1), this.v2.fromArray(t3.v2), this;
        }, ((Tc.prototype = Object.create(uc.prototype)).constructor = Tc).prototype.isQuadraticBezierCurve = true, Tc.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new Re(), i3 = this.v0, r3 = this.v1, a2 = this.v2;
          return n3.set(bc(t3, i3.x, r3.x, a2.x), bc(t3, i3.y, r3.y, a2.y)), n3;
        }, Tc.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.v0.copy(t3.v0), this.v1.copy(t3.v1), this.v2.copy(t3.v2), this;
        }, Tc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.v0 = this.v0.toArray(), t3.v1 = this.v1.toArray(), t3.v2 = this.v2.toArray(), t3;
        }, Tc.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.v0.fromArray(t3.v0), this.v1.fromArray(t3.v1), this.v2.fromArray(t3.v2), this;
        }, ((Ec.prototype = Object.create(uc.prototype)).constructor = Ec).prototype.isQuadraticBezierCurve3 = true, Ec.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new We(), i3 = this.v0, r3 = this.v1, a2 = this.v2;
          return n3.set(bc(t3, i3.x, r3.x, a2.x), bc(t3, i3.y, r3.y, a2.y), bc(t3, i3.z, r3.z, a2.z)), n3;
        }, Ec.prototype.copy = function(t3) {
          return uc.prototype.copy.call(this, t3), this.v0.copy(t3.v0), this.v1.copy(t3.v1), this.v2.copy(t3.v2), this;
        }, Ec.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          return t3.v0 = this.v0.toArray(), t3.v1 = this.v1.toArray(), t3.v2 = this.v2.toArray(), t3;
        }, Ec.prototype.fromJSON = function(t3) {
          return uc.prototype.fromJSON.call(this, t3), this.v0.fromArray(t3.v0), this.v1.fromArray(t3.v1), this.v2.fromArray(t3.v2), this;
        }, ((Dc.prototype = Object.create(uc.prototype)).constructor = Dc).prototype.isSplineCurve = true, Dc.prototype.getPoint = function(t3, e3) {
          var n3 = e3 || new Re(), i3 = this.points, r3 = (i3.length - 1) * t3, a2 = Math.floor(r3), o2 = r3 - a2, s2 = i3[a2 === 0 ? a2 : a2 - 1], l2 = i3[a2], c2 = i3[a2 > i3.length - 2 ? i3.length - 1 : a2 + 1], u2 = i3[a2 > i3.length - 3 ? i3.length - 1 : a2 + 2];
          return n3.set(xc(o2, s2.x, l2.x, c2.x, u2.x), xc(o2, s2.y, l2.y, c2.y, u2.y)), n3;
        }, Dc.prototype.copy = function(t3) {
          uc.prototype.copy.call(this, t3), this.points = [];
          for (var e3 = 0, n3 = t3.points.length; e3 < n3; e3++) {
            var i3 = t3.points[e3];
            this.points.push(i3.clone());
          }
          return this;
        }, Dc.prototype.toJSON = function() {
          var t3 = uc.prototype.toJSON.call(this);
          t3.points = [];
          for (var e3 = 0, n3 = this.points.length; e3 < n3; e3++) {
            var i3 = this.points[e3];
            t3.points.push(i3.toArray());
          }
          return t3;
        }, Dc.prototype.fromJSON = function(t3) {
          uc.prototype.fromJSON.call(this, t3), this.points = [];
          for (var e3 = 0, n3 = t3.points.length; e3 < n3; e3++) {
            var i3 = t3.points[e3];
            this.points.push(new Re().fromArray(i3));
          }
          return this;
        };
        var Ac = Object.freeze({ __proto__: null, ArcCurve: dc, CatmullRomCurve3: yc, CubicBezierCurve: Mc, CubicBezierCurve3: _c, EllipseCurve: hc, LineCurve: Sc, LineCurve3: Cc, QuadraticBezierCurve: Tc, QuadraticBezierCurve3: Ec, SplineCurve: Dc });
        function Oc() {
          uc.call(this), this.type = "CurvePath", this.curves = [], this.autoClose = false;
        }
        function Lc(t3) {
          Oc.call(this), this.type = "Path", this.currentPoint = new Re(), t3 && this.setFromPoints(t3);
        }
        function Ic(t3) {
          Lc.call(this, t3), this.uuid = Pe.generateUUID(), this.type = "Shape", this.holes = [];
        }
        function Pc(t3, e3) {
          yn.call(this), this.type = "Light", this.color = new ci(t3), this.intensity = e3 !== void 0 ? e3 : 1, this.receiveShadow = void 0;
        }
        function Rc(t3, e3, n3) {
          Pc.call(this, t3, n3), this.type = "HemisphereLight", this.castShadow = void 0, this.position.copy(yn.DefaultUp), this.updateMatrix(), this.groundColor = new ci(e3);
        }
        function kc(t3) {
          this.camera = t3, this.bias = 0, this.radius = 1, this.mapSize = new Re(512, 512), this.map = null, this.mapPass = null, this.matrix = new Qe(), this._frustum = new Sr(), this._frameExtents = new Re(1, 1), this._viewportCount = 1, this._viewports = [new je(0, 0, 1, 1)];
        }
        function Bc() {
          kc.call(this, new yr(50, 1, 0.5, 500));
        }
        function Nc(t3, e3, n3, i3, r3, a2) {
          Pc.call(this, t3, e3), this.type = "SpotLight", this.position.copy(yn.DefaultUp), this.updateMatrix(), this.target = new yn(), Object.defineProperty(this, "power", { get: function() {
            return this.intensity * Math.PI;
          }, set: function(t4) {
            this.intensity = t4 / Math.PI;
          } }), this.distance = n3 !== void 0 ? n3 : 0, this.angle = i3 !== void 0 ? i3 : Math.PI / 3, this.penumbra = r3 !== void 0 ? r3 : 0, this.decay = a2 !== void 0 ? a2 : 1, this.shadow = new Bc();
        }
        function Fc() {
          kc.call(this, new yr(90, 1, 0.5, 500)), this._frameExtents = new Re(4, 2), this._viewportCount = 6, this._viewports = [new je(2, 1, 1, 1), new je(0, 1, 1, 1), new je(3, 1, 1, 1), new je(1, 1, 1, 1), new je(3, 0, 1, 1), new je(1, 0, 1, 1)], this._cubeDirections = [new We(1, 0, 0), new We(-1, 0, 0), new We(0, 0, 1), new We(0, 0, -1), new We(0, 1, 0), new We(0, -1, 0)], this._cubeUps = [new We(0, 1, 0), new We(0, 1, 0), new We(0, 1, 0), new We(0, 1, 0), new We(0, 0, 1), new We(0, 0, -1)];
        }
        function jc(t3, e3, n3, i3) {
          Pc.call(this, t3, e3), this.type = "PointLight", Object.defineProperty(this, "power", { get: function() {
            return 4 * this.intensity * Math.PI;
          }, set: function(t4) {
            this.intensity = t4 / (4 * Math.PI);
          } }), this.distance = n3 !== void 0 ? n3 : 0, this.decay = i3 !== void 0 ? i3 : 1, this.shadow = new Fc();
        }
        function Vc(t3, e3, n3, i3, r3, a2) {
          vr.call(this), this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = t3 !== void 0 ? t3 : -1, this.right = e3 !== void 0 ? e3 : 1, this.top = n3 !== void 0 ? n3 : 1, this.bottom = i3 !== void 0 ? i3 : -1, this.near = r3 !== void 0 ? r3 : 0.1, this.far = a2 !== void 0 ? a2 : 2e3, this.updateProjectionMatrix();
        }
        function zc() {
          kc.call(this, new Vc(-5, 5, 5, -5, 0.5, 500));
        }
        function Gc(t3, e3) {
          Pc.call(this, t3, e3), this.type = "DirectionalLight", this.position.copy(yn.DefaultUp), this.updateMatrix(), this.target = new yn(), this.shadow = new zc();
        }
        function Uc(t3, e3) {
          Pc.call(this, t3, e3), this.type = "AmbientLight", this.castShadow = void 0;
        }
        function Hc(t3, e3, n3, i3) {
          Pc.call(this, t3, e3), this.type = "RectAreaLight", this.width = n3 !== void 0 ? n3 : 10, this.height = i3 !== void 0 ? i3 : 10;
        }
        function Wc(t3) {
          ec.call(this, t3), this.textures = {};
        }
        Oc.prototype = Object.assign(Object.create(uc.prototype), { constructor: Oc, add: function(t3) {
          this.curves.push(t3);
        }, closePath: function() {
          var t3 = this.curves[0].getPoint(0), e3 = this.curves[this.curves.length - 1].getPoint(1);
          t3.equals(e3) || this.curves.push(new Sc(e3, t3));
        }, getPoint: function(t3) {
          for (var e3 = t3 * this.getLength(), n3 = this.getCurveLengths(), i3 = 0; i3 < n3.length; ) {
            if (n3[i3] >= e3) {
              var r3 = n3[i3] - e3, a2 = this.curves[i3], o2 = a2.getLength(), s2 = o2 === 0 ? 0 : 1 - r3 / o2;
              return a2.getPointAt(s2);
            }
            i3++;
          }
          return null;
        }, getLength: function() {
          var t3 = this.getCurveLengths();
          return t3[t3.length - 1];
        }, updateArcLengths: function() {
          this.needsUpdate = true, this.cacheLengths = null, this.getCurveLengths();
        }, getCurveLengths: function() {
          if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
            return this.cacheLengths;
          for (var t3 = [], e3 = 0, n3 = 0, i3 = this.curves.length; n3 < i3; n3++)
            e3 += this.curves[n3].getLength(), t3.push(e3);
          return this.cacheLengths = t3;
        }, getSpacedPoints: function(t3) {
          t3 === void 0 && (t3 = 40);
          for (var e3 = [], n3 = 0; n3 <= t3; n3++)
            e3.push(this.getPoint(n3 / t3));
          return this.autoClose && e3.push(e3[0]), e3;
        }, getPoints: function(t3) {
          t3 = t3 || 12;
          for (var e3, n3 = [], i3 = 0, r3 = this.curves; i3 < r3.length; i3++)
            for (var a2 = r3[i3], o2 = a2 && a2.isEllipseCurve ? 2 * t3 : a2 && (a2.isLineCurve || a2.isLineCurve3) ? 1 : a2 && a2.isSplineCurve ? t3 * a2.points.length : t3, s2 = a2.getPoints(o2), l2 = 0; l2 < s2.length; l2++) {
              var c2 = s2[l2];
              e3 && e3.equals(c2) || (n3.push(c2), e3 = c2);
            }
          return this.autoClose && 1 < n3.length && !n3[n3.length - 1].equals(n3[0]) && n3.push(n3[0]), n3;
        }, copy: function(t3) {
          uc.prototype.copy.call(this, t3), this.curves = [];
          for (var e3 = 0, n3 = t3.curves.length; e3 < n3; e3++) {
            var i3 = t3.curves[e3];
            this.curves.push(i3.clone());
          }
          return this.autoClose = t3.autoClose, this;
        }, toJSON: function() {
          var t3 = uc.prototype.toJSON.call(this);
          t3.autoClose = this.autoClose, t3.curves = [];
          for (var e3 = 0, n3 = this.curves.length; e3 < n3; e3++) {
            var i3 = this.curves[e3];
            t3.curves.push(i3.toJSON());
          }
          return t3;
        }, fromJSON: function(t3) {
          uc.prototype.fromJSON.call(this, t3), this.autoClose = t3.autoClose, this.curves = [];
          for (var e3 = 0, n3 = t3.curves.length; e3 < n3; e3++) {
            var i3 = t3.curves[e3];
            this.curves.push(new Ac[i3.type]().fromJSON(i3));
          }
          return this;
        } }), Lc.prototype = Object.assign(Object.create(Oc.prototype), { constructor: Lc, setFromPoints: function(t3) {
          this.moveTo(t3[0].x, t3[0].y);
          for (var e3 = 1, n3 = t3.length; e3 < n3; e3++)
            this.lineTo(t3[e3].x, t3[e3].y);
          return this;
        }, moveTo: function(t3, e3) {
          return this.currentPoint.set(t3, e3), this;
        }, lineTo: function(t3, e3) {
          var n3 = new Sc(this.currentPoint.clone(), new Re(t3, e3));
          return this.curves.push(n3), this.currentPoint.set(t3, e3), this;
        }, quadraticCurveTo: function(t3, e3, n3, i3) {
          var r3 = new Tc(this.currentPoint.clone(), new Re(t3, e3), new Re(n3, i3));
          return this.curves.push(r3), this.currentPoint.set(n3, i3), this;
        }, bezierCurveTo: function(t3, e3, n3, i3, r3, a2) {
          var o2 = new Mc(this.currentPoint.clone(), new Re(t3, e3), new Re(n3, i3), new Re(r3, a2));
          return this.curves.push(o2), this.currentPoint.set(r3, a2), this;
        }, splineThru: function(t3) {
          var e3 = new Dc([this.currentPoint.clone()].concat(t3));
          return this.curves.push(e3), this.currentPoint.copy(t3[t3.length - 1]), this;
        }, arc: function(t3, e3, n3, i3, r3, a2) {
          var o2 = this.currentPoint.x, s2 = this.currentPoint.y;
          return this.absarc(t3 + o2, e3 + s2, n3, i3, r3, a2), this;
        }, absarc: function(t3, e3, n3, i3, r3, a2) {
          return this.absellipse(t3, e3, n3, n3, i3, r3, a2), this;
        }, ellipse: function(t3, e3, n3, i3, r3, a2, o2, s2) {
          var l2 = this.currentPoint.x, c2 = this.currentPoint.y;
          return this.absellipse(t3 + l2, e3 + c2, n3, i3, r3, a2, o2, s2), this;
        }, absellipse: function(t3, e3, n3, i3, r3, a2, o2, s2) {
          var l2 = new hc(t3, e3, n3, i3, r3, a2, o2, s2);
          if (0 < this.curves.length) {
            var c2 = l2.getPoint(0);
            c2.equals(this.currentPoint) || this.lineTo(c2.x, c2.y);
          }
          this.curves.push(l2);
          var u2 = l2.getPoint(1);
          return this.currentPoint.copy(u2), this;
        }, copy: function(t3) {
          return Oc.prototype.copy.call(this, t3), this.currentPoint.copy(t3.currentPoint), this;
        }, toJSON: function() {
          var t3 = Oc.prototype.toJSON.call(this);
          return t3.currentPoint = this.currentPoint.toArray(), t3;
        }, fromJSON: function(t3) {
          return Oc.prototype.fromJSON.call(this, t3), this.currentPoint.fromArray(t3.currentPoint), this;
        } }), Ic.prototype = Object.assign(Object.create(Lc.prototype), { constructor: Ic, getPointsHoles: function(t3) {
          for (var e3 = [], n3 = 0, i3 = this.holes.length; n3 < i3; n3++)
            e3[n3] = this.holes[n3].getPoints(t3);
          return e3;
        }, extractPoints: function(t3) {
          return { shape: this.getPoints(t3), holes: this.getPointsHoles(t3) };
        }, copy: function(t3) {
          Lc.prototype.copy.call(this, t3), this.holes = [];
          for (var e3 = 0, n3 = t3.holes.length; e3 < n3; e3++) {
            var i3 = t3.holes[e3];
            this.holes.push(i3.clone());
          }
          return this;
        }, toJSON: function() {
          var t3 = Lc.prototype.toJSON.call(this);
          t3.uuid = this.uuid, t3.holes = [];
          for (var e3 = 0, n3 = this.holes.length; e3 < n3; e3++) {
            var i3 = this.holes[e3];
            t3.holes.push(i3.toJSON());
          }
          return t3;
        }, fromJSON: function(t3) {
          Lc.prototype.fromJSON.call(this, t3), this.uuid = t3.uuid, this.holes = [];
          for (var e3 = 0, n3 = t3.holes.length; e3 < n3; e3++) {
            var i3 = t3.holes[e3];
            this.holes.push(new Lc().fromJSON(i3));
          }
          return this;
        } }), Pc.prototype = Object.assign(Object.create(yn.prototype), { constructor: Pc, isLight: true, copy: function(t3) {
          return yn.prototype.copy.call(this, t3), this.color.copy(t3.color), this.intensity = t3.intensity, this;
        }, toJSON: function(t3) {
          var e3 = yn.prototype.toJSON.call(this, t3);
          return e3.object.color = this.color.getHex(), e3.object.intensity = this.intensity, this.groundColor !== void 0 && (e3.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (e3.object.distance = this.distance), this.angle !== void 0 && (e3.object.angle = this.angle), this.decay !== void 0 && (e3.object.decay = this.decay), this.penumbra !== void 0 && (e3.object.penumbra = this.penumbra), this.shadow !== void 0 && (e3.object.shadow = this.shadow.toJSON()), e3;
        } }), Rc.prototype = Object.assign(Object.create(Pc.prototype), { constructor: Rc, isHemisphereLight: true, copy: function(t3) {
          return Pc.prototype.copy.call(this, t3), this.groundColor.copy(t3.groundColor), this;
        } }), Object.assign(kc.prototype, { _projScreenMatrix: new Qe(), _lightPositionWorld: new We(), _lookTarget: new We(), getViewportCount: function() {
          return this._viewportCount;
        }, getFrustum: function() {
          return this._frustum;
        }, updateMatrices: function(t3) {
          var e3 = this.camera, n3 = this.matrix, i3 = this._projScreenMatrix, r3 = this._lookTarget, a2 = this._lightPositionWorld;
          a2.setFromMatrixPosition(t3.matrixWorld), e3.position.copy(a2), r3.setFromMatrixPosition(t3.target.matrixWorld), e3.lookAt(r3), e3.updateMatrixWorld(), i3.multiplyMatrices(e3.projectionMatrix, e3.matrixWorldInverse), this._frustum.setFromProjectionMatrix(i3), n3.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), n3.multiply(e3.projectionMatrix), n3.multiply(e3.matrixWorldInverse);
        }, getViewport: function(t3) {
          return this._viewports[t3];
        }, getFrameExtents: function() {
          return this._frameExtents;
        }, copy: function(t3) {
          return this.camera = t3.camera.clone(), this.bias = t3.bias, this.radius = t3.radius, this.mapSize.copy(t3.mapSize), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, toJSON: function() {
          var t3 = {};
          return this.bias !== 0 && (t3.bias = this.bias), this.radius !== 1 && (t3.radius = this.radius), this.mapSize.x === 512 && this.mapSize.y === 512 || (t3.mapSize = this.mapSize.toArray()), t3.camera = this.camera.toJSON(false).object, delete t3.camera.matrix, t3;
        } }), Bc.prototype = Object.assign(Object.create(kc.prototype), { constructor: Bc, isSpotLightShadow: true, updateMatrices: function(t3) {
          var e3 = this.camera, n3 = 2 * Pe.RAD2DEG * t3.angle, i3 = this.mapSize.width / this.mapSize.height, r3 = t3.distance || e3.far;
          n3 === e3.fov && i3 === e3.aspect && r3 === e3.far || (e3.fov = n3, e3.aspect = i3, e3.far = r3, e3.updateProjectionMatrix()), kc.prototype.updateMatrices.call(this, t3);
        } }), Nc.prototype = Object.assign(Object.create(Pc.prototype), { constructor: Nc, isSpotLight: true, copy: function(t3) {
          return Pc.prototype.copy.call(this, t3), this.distance = t3.distance, this.angle = t3.angle, this.penumbra = t3.penumbra, this.decay = t3.decay, this.target = t3.target.clone(), this.shadow = t3.shadow.clone(), this;
        } }), Fc.prototype = Object.assign(Object.create(kc.prototype), { constructor: Fc, isPointLightShadow: true, updateMatrices: function(t3, e3) {
          e3 === void 0 && (e3 = 0);
          var n3 = this.camera, i3 = this.matrix, r3 = this._lightPositionWorld, a2 = this._lookTarget, o2 = this._projScreenMatrix;
          r3.setFromMatrixPosition(t3.matrixWorld), n3.position.copy(r3), a2.copy(n3.position), a2.add(this._cubeDirections[e3]), n3.up.copy(this._cubeUps[e3]), n3.lookAt(a2), n3.updateMatrixWorld(), i3.makeTranslation(-r3.x, -r3.y, -r3.z), o2.multiplyMatrices(n3.projectionMatrix, n3.matrixWorldInverse), this._frustum.setFromProjectionMatrix(o2);
        } }), jc.prototype = Object.assign(Object.create(Pc.prototype), { constructor: jc, isPointLight: true, copy: function(t3) {
          return Pc.prototype.copy.call(this, t3), this.distance = t3.distance, this.decay = t3.decay, this.shadow = t3.shadow.clone(), this;
        } }), Vc.prototype = Object.assign(Object.create(vr.prototype), { constructor: Vc, isOrthographicCamera: true, copy: function(t3, e3) {
          return vr.prototype.copy.call(this, t3, e3), this.left = t3.left, this.right = t3.right, this.top = t3.top, this.bottom = t3.bottom, this.near = t3.near, this.far = t3.far, this.zoom = t3.zoom, this.view = t3.view === null ? null : Object.assign({}, t3.view), this;
        }, setViewOffset: function(t3, e3, n3, i3, r3, a2) {
          this.view === null && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = t3, this.view.fullHeight = e3, this.view.offsetX = n3, this.view.offsetY = i3, this.view.width = r3, this.view.height = a2, this.updateProjectionMatrix();
        }, clearViewOffset: function() {
          this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
        }, updateProjectionMatrix: function() {
          var t3 = (this.right - this.left) / (2 * this.zoom), e3 = (this.top - this.bottom) / (2 * this.zoom), n3 = (this.right + this.left) / 2, i3 = (this.top + this.bottom) / 2, r3 = n3 - t3, a2 = n3 + t3, o2 = i3 + e3, s2 = i3 - e3;
          if (this.view !== null && this.view.enabled) {
            var l2 = (this.right - this.left) / this.view.fullWidth / this.zoom, c2 = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            a2 = (r3 += l2 * this.view.offsetX) + l2 * this.view.width, s2 = (o2 -= c2 * this.view.offsetY) - c2 * this.view.height;
          }
          this.projectionMatrix.makeOrthographic(r3, a2, o2, s2, this.near, this.far), this.projectionMatrixInverse.getInverse(this.projectionMatrix);
        }, toJSON: function(t3) {
          var e3 = yn.prototype.toJSON.call(this, t3);
          return e3.object.zoom = this.zoom, e3.object.left = this.left, e3.object.right = this.right, e3.object.top = this.top, e3.object.bottom = this.bottom, e3.object.near = this.near, e3.object.far = this.far, this.view !== null && (e3.object.view = Object.assign({}, this.view)), e3;
        } }), zc.prototype = Object.assign(Object.create(kc.prototype), { constructor: zc, isDirectionalLightShadow: true, updateMatrices: function(t3) {
          kc.prototype.updateMatrices.call(this, t3);
        } }), Gc.prototype = Object.assign(Object.create(Pc.prototype), { constructor: Gc, isDirectionalLight: true, copy: function(t3) {
          return Pc.prototype.copy.call(this, t3), this.target = t3.target.clone(), this.shadow = t3.shadow.clone(), this;
        } }), Uc.prototype = Object.assign(Object.create(Pc.prototype), { constructor: Uc, isAmbientLight: true }), Hc.prototype = Object.assign(Object.create(Pc.prototype), { constructor: Hc, isRectAreaLight: true, copy: function(t3) {
          return Pc.prototype.copy.call(this, t3), this.width = t3.width, this.height = t3.height, this;
        }, toJSON: function(t3) {
          var e3 = Pc.prototype.toJSON.call(this, t3);
          return e3.object.width = this.width, e3.object.height = this.height, e3;
        } }), Wc.prototype = Object.assign(Object.create(ec.prototype), { constructor: Wc, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = new ic(r3.manager);
          a2.setPath(r3.path), a2.load(t3, function(t4) {
            e3(r3.parse(JSON.parse(t4)));
          }, n3, i3);
        }, parse: function(t3) {
          var e3 = this.textures;
          function n3(t4) {
            return e3[t4] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", t4), e3[t4];
          }
          var i3 = new Bl[t3.type]();
          if (t3.uuid !== void 0 && (i3.uuid = t3.uuid), t3.name !== void 0 && (i3.name = t3.name), t3.color !== void 0 && i3.color.setHex(t3.color), t3.roughness !== void 0 && (i3.roughness = t3.roughness), t3.metalness !== void 0 && (i3.metalness = t3.metalness), t3.sheen !== void 0 && (i3.sheen = new ci().setHex(t3.sheen)), t3.emissive !== void 0 && i3.emissive.setHex(t3.emissive), t3.specular !== void 0 && i3.specular.setHex(t3.specular), t3.shininess !== void 0 && (i3.shininess = t3.shininess), t3.clearcoat !== void 0 && (i3.clearcoat = t3.clearcoat), t3.clearcoatRoughness !== void 0 && (i3.clearcoatRoughness = t3.clearcoatRoughness), t3.vertexColors !== void 0 && (i3.vertexColors = t3.vertexColors), t3.fog !== void 0 && (i3.fog = t3.fog), t3.flatShading !== void 0 && (i3.flatShading = t3.flatShading), t3.blending !== void 0 && (i3.blending = t3.blending), t3.combine !== void 0 && (i3.combine = t3.combine), t3.side !== void 0 && (i3.side = t3.side), t3.opacity !== void 0 && (i3.opacity = t3.opacity), t3.transparent !== void 0 && (i3.transparent = t3.transparent), t3.alphaTest !== void 0 && (i3.alphaTest = t3.alphaTest), t3.depthTest !== void 0 && (i3.depthTest = t3.depthTest), t3.depthWrite !== void 0 && (i3.depthWrite = t3.depthWrite), t3.colorWrite !== void 0 && (i3.colorWrite = t3.colorWrite), t3.stencilWrite !== void 0 && (i3.stencilWrite = t3.stencilWrite), t3.stencilWriteMask !== void 0 && (i3.stencilWriteMask = t3.stencilWriteMask), t3.stencilFunc !== void 0 && (i3.stencilFunc = t3.stencilFunc), t3.stencilRef !== void 0 && (i3.stencilRef = t3.stencilRef), t3.stencilFuncMask !== void 0 && (i3.stencilFuncMask = t3.stencilFuncMask), t3.stencilFail !== void 0 && (i3.stencilFail = t3.stencilFail), t3.stencilZFail !== void 0 && (i3.stencilZFail = t3.stencilZFail), t3.stencilZPass !== void 0 && (i3.stencilZPass = t3.stencilZPass), t3.wireframe !== void 0 && (i3.wireframe = t3.wireframe), t3.wireframeLinewidth !== void 0 && (i3.wireframeLinewidth = t3.wireframeLinewidth), t3.wireframeLinecap !== void 0 && (i3.wireframeLinecap = t3.wireframeLinecap), t3.wireframeLinejoin !== void 0 && (i3.wireframeLinejoin = t3.wireframeLinejoin), t3.rotation !== void 0 && (i3.rotation = t3.rotation), t3.linewidth !== 1 && (i3.linewidth = t3.linewidth), t3.dashSize !== void 0 && (i3.dashSize = t3.dashSize), t3.gapSize !== void 0 && (i3.gapSize = t3.gapSize), t3.scale !== void 0 && (i3.scale = t3.scale), t3.polygonOffset !== void 0 && (i3.polygonOffset = t3.polygonOffset), t3.polygonOffsetFactor !== void 0 && (i3.polygonOffsetFactor = t3.polygonOffsetFactor), t3.polygonOffsetUnits !== void 0 && (i3.polygonOffsetUnits = t3.polygonOffsetUnits), t3.skinning !== void 0 && (i3.skinning = t3.skinning), t3.morphTargets !== void 0 && (i3.morphTargets = t3.morphTargets), t3.morphNormals !== void 0 && (i3.morphNormals = t3.morphNormals), t3.dithering !== void 0 && (i3.dithering = t3.dithering), t3.visible !== void 0 && (i3.visible = t3.visible), t3.toneMapped !== void 0 && (i3.toneMapped = t3.toneMapped), t3.userData !== void 0 && (i3.userData = t3.userData), t3.uniforms !== void 0)
            for (var r3 in t3.uniforms) {
              var a2 = t3.uniforms[r3];
              switch (i3.uniforms[r3] = {}, a2.type) {
                case "t":
                  i3.uniforms[r3].value = n3(a2.value);
                  break;
                case "c":
                  i3.uniforms[r3].value = new ci().setHex(a2.value);
                  break;
                case "v2":
                  i3.uniforms[r3].value = new Re().fromArray(a2.value);
                  break;
                case "v3":
                  i3.uniforms[r3].value = new We().fromArray(a2.value);
                  break;
                case "v4":
                  i3.uniforms[r3].value = new je().fromArray(a2.value);
                  break;
                case "m3":
                  i3.uniforms[r3].value = new ke().fromArray(a2.value);
                case "m4":
                  i3.uniforms[r3].value = new Qe().fromArray(a2.value);
                  break;
                default:
                  i3.uniforms[r3].value = a2.value;
              }
            }
          if (t3.defines !== void 0 && (i3.defines = t3.defines), t3.vertexShader !== void 0 && (i3.vertexShader = t3.vertexShader), t3.fragmentShader !== void 0 && (i3.fragmentShader = t3.fragmentShader), t3.extensions !== void 0)
            for (var o2 in t3.extensions)
              i3.extensions[o2] = t3.extensions[o2];
          if (t3.shading !== void 0 && (i3.flatShading = t3.shading === 1), t3.size !== void 0 && (i3.size = t3.size), t3.sizeAttenuation !== void 0 && (i3.sizeAttenuation = t3.sizeAttenuation), t3.map !== void 0 && (i3.map = n3(t3.map)), t3.matcap !== void 0 && (i3.matcap = n3(t3.matcap)), t3.alphaMap !== void 0 && (i3.alphaMap = n3(t3.alphaMap), i3.transparent = true), t3.bumpMap !== void 0 && (i3.bumpMap = n3(t3.bumpMap)), t3.bumpScale !== void 0 && (i3.bumpScale = t3.bumpScale), t3.normalMap !== void 0 && (i3.normalMap = n3(t3.normalMap)), t3.normalMapType !== void 0 && (i3.normalMapType = t3.normalMapType), t3.normalScale !== void 0) {
            var s2 = t3.normalScale;
            Array.isArray(s2) === false && (s2 = [s2, s2]), i3.normalScale = new Re().fromArray(s2);
          }
          return t3.displacementMap !== void 0 && (i3.displacementMap = n3(t3.displacementMap)), t3.displacementScale !== void 0 && (i3.displacementScale = t3.displacementScale), t3.displacementBias !== void 0 && (i3.displacementBias = t3.displacementBias), t3.roughnessMap !== void 0 && (i3.roughnessMap = n3(t3.roughnessMap)), t3.metalnessMap !== void 0 && (i3.metalnessMap = n3(t3.metalnessMap)), t3.emissiveMap !== void 0 && (i3.emissiveMap = n3(t3.emissiveMap)), t3.emissiveIntensity !== void 0 && (i3.emissiveIntensity = t3.emissiveIntensity), t3.specularMap !== void 0 && (i3.specularMap = n3(t3.specularMap)), t3.envMap !== void 0 && (i3.envMap = n3(t3.envMap)), t3.envMapIntensity !== void 0 && (i3.envMapIntensity = t3.envMapIntensity), t3.reflectivity !== void 0 && (i3.reflectivity = t3.reflectivity), t3.refractionRatio !== void 0 && (i3.refractionRatio = t3.refractionRatio), t3.lightMap !== void 0 && (i3.lightMap = n3(t3.lightMap)), t3.lightMapIntensity !== void 0 && (i3.lightMapIntensity = t3.lightMapIntensity), t3.aoMap !== void 0 && (i3.aoMap = n3(t3.aoMap)), t3.aoMapIntensity !== void 0 && (i3.aoMapIntensity = t3.aoMapIntensity), t3.gradientMap !== void 0 && (i3.gradientMap = n3(t3.gradientMap)), t3.clearcoatNormalMap !== void 0 && (i3.clearcoatNormalMap = n3(t3.clearcoatNormalMap)), t3.clearcoatNormalScale !== void 0 && (i3.clearcoatNormalScale = new Re().fromArray(t3.clearcoatNormalScale)), i3;
        }, setTextures: function(t3) {
          return this.textures = t3, this;
        } });
        var Jc = { decodeText: function(t3) {
          if (typeof TextDecoder != "undefined")
            return new TextDecoder().decode(t3);
          for (var e3 = "", n3 = 0, i3 = t3.length; n3 < i3; n3++)
            e3 += String.fromCharCode(t3[n3]);
          try {
            return decodeURIComponent(escape(e3));
          } catch (t4) {
            return e3;
          }
        }, extractUrlBase: function(t3) {
          var e3 = t3.lastIndexOf("/");
          return e3 === -1 ? "./" : t3.substr(0, e3 + 1);
        } };
        function qc() {
          Ni.call(this), this.type = "InstancedBufferGeometry", this.maxInstancedCount = void 0;
        }
        function Xc(t3, e3, n3, i3) {
          typeof n3 == "number" && (i3 = n3, n3 = false, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")), yi.call(this, t3, e3, n3), this.meshPerAttribute = i3 || 1;
        }
        function Yc(t3) {
          ec.call(this, t3);
        }
        qc.prototype = Object.assign(Object.create(Ni.prototype), { constructor: qc, isInstancedBufferGeometry: true, copy: function(t3) {
          return Ni.prototype.copy.call(this, t3), this.maxInstancedCount = t3.maxInstancedCount, this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, toJSON: function() {
          var t3 = Ni.prototype.toJSON.call(this);
          return t3.maxInstancedCount = this.maxInstancedCount, t3.isInstancedBufferGeometry = true, t3;
        } }), Xc.prototype = Object.assign(Object.create(yi.prototype), { constructor: Xc, isInstancedBufferAttribute: true, copy: function(t3) {
          return yi.prototype.copy.call(this, t3), this.meshPerAttribute = t3.meshPerAttribute, this;
        }, toJSON: function() {
          var t3 = yi.prototype.toJSON.call(this);
          return t3.meshPerAttribute = this.meshPerAttribute, t3.isInstancedBufferAttribute = true, t3;
        } }), Yc.prototype = Object.assign(Object.create(ec.prototype), { constructor: Yc, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = new ic(r3.manager);
          a2.setPath(r3.path), a2.load(t3, function(t4) {
            e3(r3.parse(JSON.parse(t4)));
          }, n3, i3);
        }, parse: function(t3) {
          var e3 = new (t3.isInstancedBufferGeometry ? qc : Ni)(), n3 = t3.data.index;
          if (n3 !== void 0) {
            var i3 = new Zc[n3.type](n3.array);
            e3.setIndex(new yi(i3, 1));
          }
          var r3 = t3.data.attributes;
          for (var a2 in r3) {
            var o2 = r3[a2], s2 = (i3 = new Zc[o2.type](o2.array), new (o2.isInstancedBufferAttribute ? Xc : yi)(i3, o2.itemSize, o2.normalized));
            o2.name !== void 0 && (s2.name = o2.name), e3.setAttribute(a2, s2);
          }
          var l2 = t3.data.morphAttributes;
          if (l2)
            for (var a2 in l2) {
              for (var c2 = l2[a2], u2 = [], h2 = 0, d2 = c2.length; h2 < d2; h2++)
                o2 = c2[h2], s2 = new yi(i3 = new Zc[o2.type](o2.array), o2.itemSize, o2.normalized), o2.name !== void 0 && (s2.name = o2.name), u2.push(s2);
              e3.morphAttributes[a2] = u2;
            }
          t3.data.morphTargetsRelative && (e3.morphTargetsRelative = true);
          var p2 = t3.data.groups || t3.data.drawcalls || t3.data.offsets;
          if (p2 !== void 0) {
            h2 = 0;
            for (var f2 = p2.length; h2 !== f2; ++h2) {
              var m2 = p2[h2];
              e3.addGroup(m2.start, m2.count, m2.materialIndex);
            }
          }
          var g2 = t3.data.boundingSphere;
          if (g2 !== void 0) {
            var v2 = new We();
            g2.center !== void 0 && v2.fromArray(g2.center), e3.boundingSphere = new Bn(v2, g2.radius);
          }
          return t3.name && (e3.name = t3.name), t3.userData && (e3.userData = t3.userData), e3;
        } });
        var Zc = { Int8Array, Uint8Array, Uint8ClampedArray: typeof Uint8ClampedArray != "undefined" ? Uint8ClampedArray : Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array };
        function $c(t3) {
          ec.call(this, t3);
        }
        $c.prototype = Object.assign(Object.create(ec.prototype), { constructor: $c, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = this.path === "" ? Jc.extractUrlBase(t3) : this.path;
          this.resourcePath = this.resourcePath || a2;
          var o2 = new ic(r3.manager);
          o2.setPath(this.path), o2.load(t3, function(n4) {
            var a3 = null;
            try {
              a3 = JSON.parse(n4);
            } catch (n5) {
              return i3 !== void 0 && i3(n5), void console.error("THREE:ObjectLoader: Can't parse " + t3 + ".", n5.message);
            }
            var o3 = a3.metadata;
            o3 !== void 0 && o3.type !== void 0 && o3.type.toLowerCase() !== "geometry" ? r3.parse(a3, e3) : console.error("THREE.ObjectLoader: Can't load " + t3);
          }, n3, i3);
        }, parse: function(t3, e3) {
          var n3 = this.parseShape(t3.shapes), i3 = this.parseGeometries(t3.geometries, n3), r3 = this.parseImages(t3.images, function() {
            e3 !== void 0 && e3(s2);
          }), a2 = this.parseTextures(t3.textures, r3), o2 = this.parseMaterials(t3.materials, a2), s2 = this.parseObject(t3.object, i3, o2);
          return t3.animations && (s2.animations = this.parseAnimations(t3.animations)), t3.images !== void 0 && t3.images.length !== 0 || e3 !== void 0 && e3(s2), s2;
        }, parseShape: function(t3) {
          var e3 = {};
          if (t3 !== void 0)
            for (var n3 = 0, i3 = t3.length; n3 < i3; n3++) {
              var r3 = new Ic().fromJSON(t3[n3]);
              e3[r3.uuid] = r3;
            }
          return e3;
        }, parseGeometries: function(t3, e3) {
          var n3 = {};
          if (t3 !== void 0)
            for (var i3 = new Yc(), r3 = 0, a2 = t3.length; r3 < a2; r3++) {
              var o2, s2 = t3[r3];
              switch (s2.type) {
                case "PlaneGeometry":
                case "PlaneBufferGeometry":
                  o2 = new Cl[s2.type](s2.width, s2.height, s2.widthSegments, s2.heightSegments);
                  break;
                case "BoxGeometry":
                case "BoxBufferGeometry":
                case "CubeGeometry":
                  o2 = new Cl[s2.type](s2.width, s2.height, s2.depth, s2.widthSegments, s2.heightSegments, s2.depthSegments);
                  break;
                case "CircleGeometry":
                case "CircleBufferGeometry":
                  o2 = new Cl[s2.type](s2.radius, s2.segments, s2.thetaStart, s2.thetaLength);
                  break;
                case "CylinderGeometry":
                case "CylinderBufferGeometry":
                  o2 = new Cl[s2.type](s2.radiusTop, s2.radiusBottom, s2.height, s2.radialSegments, s2.heightSegments, s2.openEnded, s2.thetaStart, s2.thetaLength);
                  break;
                case "ConeGeometry":
                case "ConeBufferGeometry":
                  o2 = new Cl[s2.type](s2.radius, s2.height, s2.radialSegments, s2.heightSegments, s2.openEnded, s2.thetaStart, s2.thetaLength);
                  break;
                case "SphereGeometry":
                case "SphereBufferGeometry":
                  o2 = new Cl[s2.type](s2.radius, s2.widthSegments, s2.heightSegments, s2.phiStart, s2.phiLength, s2.thetaStart, s2.thetaLength);
                  break;
                case "DodecahedronGeometry":
                case "DodecahedronBufferGeometry":
                case "IcosahedronGeometry":
                case "IcosahedronBufferGeometry":
                case "OctahedronGeometry":
                case "OctahedronBufferGeometry":
                case "TetrahedronGeometry":
                case "TetrahedronBufferGeometry":
                  o2 = new Cl[s2.type](s2.radius, s2.detail);
                  break;
                case "RingGeometry":
                case "RingBufferGeometry":
                  o2 = new Cl[s2.type](s2.innerRadius, s2.outerRadius, s2.thetaSegments, s2.phiSegments, s2.thetaStart, s2.thetaLength);
                  break;
                case "TorusGeometry":
                case "TorusBufferGeometry":
                  o2 = new Cl[s2.type](s2.radius, s2.tube, s2.radialSegments, s2.tubularSegments, s2.arc);
                  break;
                case "TorusKnotGeometry":
                case "TorusKnotBufferGeometry":
                  o2 = new Cl[s2.type](s2.radius, s2.tube, s2.tubularSegments, s2.radialSegments, s2.p, s2.q);
                  break;
                case "TubeGeometry":
                case "TubeBufferGeometry":
                  o2 = new Cl[s2.type](new Ac[s2.path.type]().fromJSON(s2.path), s2.tubularSegments, s2.radius, s2.radialSegments, s2.closed);
                  break;
                case "LatheGeometry":
                case "LatheBufferGeometry":
                  o2 = new Cl[s2.type](s2.points, s2.segments, s2.phiStart, s2.phiLength);
                  break;
                case "PolyhedronGeometry":
                case "PolyhedronBufferGeometry":
                  o2 = new Cl[s2.type](s2.vertices, s2.indices, s2.radius, s2.details);
                  break;
                case "ShapeGeometry":
                case "ShapeBufferGeometry":
                  for (var l2 = [], c2 = 0, u2 = s2.shapes.length; c2 < u2; c2++) {
                    var h2 = e3[s2.shapes[c2]];
                    l2.push(h2);
                  }
                  o2 = new Cl[s2.type](l2, s2.curveSegments);
                  break;
                case "ExtrudeGeometry":
                case "ExtrudeBufferGeometry":
                  for (l2 = [], c2 = 0, u2 = s2.shapes.length; c2 < u2; c2++)
                    h2 = e3[s2.shapes[c2]], l2.push(h2);
                  var d2 = s2.options.extrudePath;
                  d2 !== void 0 && (s2.options.extrudePath = new Ac[d2.type]().fromJSON(d2)), o2 = new Cl[s2.type](l2, s2.options);
                  break;
                case "BufferGeometry":
                case "InstancedBufferGeometry":
                  o2 = i3.parse(s2);
                  break;
                case "Geometry":
                  "THREE" in window && "LegacyJSONLoader" in THREE ? o2 = new THREE.LegacyJSONLoader().parse(s2, this.resourcePath).geometry : console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
                  break;
                default:
                  console.warn('THREE.ObjectLoader: Unsupported geometry type "' + s2.type + '"');
                  continue;
              }
              o2.uuid = s2.uuid, s2.name !== void 0 && (o2.name = s2.name), o2.isBufferGeometry === true && s2.userData !== void 0 && (o2.userData = s2.userData), n3[s2.uuid] = o2;
            }
          return n3;
        }, parseMaterials: function(t3, e3) {
          var n3 = {}, i3 = {};
          if (t3 !== void 0) {
            var r3 = new Wc();
            r3.setTextures(e3);
            for (var a2 = 0, o2 = t3.length; a2 < o2; a2++) {
              var s2 = t3[a2];
              if (s2.type === "MultiMaterial") {
                for (var l2 = [], c2 = 0; c2 < s2.materials.length; c2++) {
                  var u2 = s2.materials[c2];
                  n3[u2.uuid] === void 0 && (n3[u2.uuid] = r3.parse(u2)), l2.push(n3[u2.uuid]);
                }
                i3[s2.uuid] = l2;
              } else
                n3[s2.uuid] === void 0 && (n3[s2.uuid] = r3.parse(s2)), i3[s2.uuid] = n3[s2.uuid];
            }
          }
          return i3;
        }, parseAnimations: function(t3) {
          for (var e3 = [], n3 = 0; n3 < t3.length; n3++) {
            var i3 = t3[n3], r3 = Zl.parse(i3);
            i3.uuid !== void 0 && (r3.uuid = i3.uuid), e3.push(r3);
          }
          return e3;
        }, parseImages: function(t3, e3) {
          var n3 = this, i3 = {};
          function r3(t4) {
            return n3.manager.itemStart(t4), a2.load(t4, function() {
              n3.manager.itemEnd(t4);
            }, void 0, function() {
              n3.manager.itemError(t4), n3.manager.itemEnd(t4);
            });
          }
          if (t3 !== void 0 && 0 < t3.length) {
            var a2 = new sc(new Ql(e3));
            a2.setCrossOrigin(this.crossOrigin);
            for (var o2 = 0, s2 = t3.length; o2 < s2; o2++) {
              var l2 = t3[o2], c2 = l2.url;
              if (Array.isArray(c2)) {
                i3[l2.uuid] = [];
                for (var u2 = 0, h2 = c2.length; u2 < h2; u2++) {
                  var d2 = c2[u2], p2 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(d2) ? d2 : n3.resourcePath + d2;
                  i3[l2.uuid].push(r3(p2));
                }
              } else
                p2 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l2.url) ? l2.url : n3.resourcePath + l2.url, i3[l2.uuid] = r3(p2);
            }
          }
          return i3;
        }, parseTextures: function(t3, e3) {
          function n3(t4, e4) {
            return typeof t4 == "number" ? t4 : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t4), e4[t4]);
          }
          var i3 = {};
          if (t3 !== void 0)
            for (var r3 = 0, a2 = t3.length; r3 < a2; r3++) {
              var o2, s2 = t3[r3];
              s2.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', s2.uuid), e3[s2.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", s2.image), (o2 = new (Array.isArray(e3[s2.image]) ? Pr : Fe)(e3[s2.image])).needsUpdate = true, o2.uuid = s2.uuid, s2.name !== void 0 && (o2.name = s2.name), s2.mapping !== void 0 && (o2.mapping = n3(s2.mapping, Qc)), s2.offset !== void 0 && o2.offset.fromArray(s2.offset), s2.repeat !== void 0 && o2.repeat.fromArray(s2.repeat), s2.center !== void 0 && o2.center.fromArray(s2.center), s2.rotation !== void 0 && (o2.rotation = s2.rotation), s2.wrap !== void 0 && (o2.wrapS = n3(s2.wrap[0], tu), o2.wrapT = n3(s2.wrap[1], tu)), s2.format !== void 0 && (o2.format = s2.format), s2.type !== void 0 && (o2.type = s2.type), s2.encoding !== void 0 && (o2.encoding = s2.encoding), s2.minFilter !== void 0 && (o2.minFilter = n3(s2.minFilter, eu)), s2.magFilter !== void 0 && (o2.magFilter = n3(s2.magFilter, eu)), s2.anisotropy !== void 0 && (o2.anisotropy = s2.anisotropy), s2.flipY !== void 0 && (o2.flipY = s2.flipY), s2.premultiplyAlpha !== void 0 && (o2.premultiplyAlpha = s2.premultiplyAlpha), s2.unpackAlignment !== void 0 && (o2.unpackAlignment = s2.unpackAlignment), i3[s2.uuid] = o2;
            }
          return i3;
        }, parseObject: function(t3, e3, n3) {
          var i3;
          function r3(t4) {
            return e3[t4] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", t4), e3[t4];
          }
          function a2(t4) {
            if (t4 !== void 0) {
              if (Array.isArray(t4)) {
                for (var e4 = [], i4 = 0, r4 = t4.length; i4 < r4; i4++) {
                  var a3 = t4[i4];
                  n3[a3] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", a3), e4.push(n3[a3]);
                }
                return e4;
              }
              return n3[t4] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", t4), n3[t4];
            }
          }
          switch (t3.type) {
            case "Scene":
              i3 = new xn(), t3.background !== void 0 && Number.isInteger(t3.background) && (i3.background = new ci(t3.background)), t3.fog !== void 0 && (t3.fog.type === "Fog" ? i3.fog = new fo(t3.fog.color, t3.fog.near, t3.fog.far) : t3.fog.type === "FogExp2" && (i3.fog = new po(t3.fog.color, t3.fog.density)));
              break;
            case "PerspectiveCamera":
              i3 = new yr(t3.fov, t3.aspect, t3.near, t3.far), t3.focus !== void 0 && (i3.focus = t3.focus), t3.zoom !== void 0 && (i3.zoom = t3.zoom), t3.filmGauge !== void 0 && (i3.filmGauge = t3.filmGauge), t3.filmOffset !== void 0 && (i3.filmOffset = t3.filmOffset), t3.view !== void 0 && (i3.view = Object.assign({}, t3.view));
              break;
            case "OrthographicCamera":
              i3 = new Vc(t3.left, t3.right, t3.top, t3.bottom, t3.near, t3.far), t3.zoom !== void 0 && (i3.zoom = t3.zoom), t3.view !== void 0 && (i3.view = Object.assign({}, t3.view));
              break;
            case "AmbientLight":
              i3 = new Uc(t3.color, t3.intensity);
              break;
            case "DirectionalLight":
              i3 = new Gc(t3.color, t3.intensity);
              break;
            case "PointLight":
              i3 = new jc(t3.color, t3.intensity, t3.distance, t3.decay);
              break;
            case "RectAreaLight":
              i3 = new Hc(t3.color, t3.intensity, t3.width, t3.height);
              break;
            case "SpotLight":
              i3 = new Nc(t3.color, t3.intensity, t3.distance, t3.angle, t3.penumbra, t3.decay);
              break;
            case "HemisphereLight":
              i3 = new Rc(t3.color, t3.groundColor, t3.intensity);
              break;
            case "SkinnedMesh":
              console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
            case "Mesh":
              var o2 = r3(t3.geometry), s2 = a2(t3.material);
              i3 = new (o2.bones && 0 < o2.bones.length ? No : er)(o2, s2);
              break;
            case "InstancedMesh":
              o2 = r3(t3.geometry), s2 = a2(t3.material);
              var l2 = t3.count, c2 = t3.instanceMatrix;
              (i3 = new Jo(o2, s2, l2)).instanceMatrix = new yi(new Float32Array(c2.array), 16);
              break;
            case "LOD":
              i3 = new Bo();
              break;
            case "Line":
              i3 = new Qo(r3(t3.geometry), a2(t3.material), t3.mode);
              break;
            case "LineLoop":
              i3 = new is(r3(t3.geometry), a2(t3.material));
              break;
            case "LineSegments":
              i3 = new ns(r3(t3.geometry), a2(t3.material));
              break;
            case "PointCloud":
            case "Points":
              i3 = new cs(r3(t3.geometry), a2(t3.material));
              break;
            case "Sprite":
              i3 = new Io(a2(t3.material));
              break;
            case "Group":
              i3 = new co();
              break;
            default:
              i3 = new yn();
          }
          if (i3.uuid = t3.uuid, t3.name !== void 0 && (i3.name = t3.name), t3.matrix !== void 0 ? (i3.matrix.fromArray(t3.matrix), t3.matrixAutoUpdate !== void 0 && (i3.matrixAutoUpdate = t3.matrixAutoUpdate), i3.matrixAutoUpdate && i3.matrix.decompose(i3.position, i3.quaternion, i3.scale)) : (t3.position !== void 0 && i3.position.fromArray(t3.position), t3.rotation !== void 0 && i3.rotation.fromArray(t3.rotation), t3.quaternion !== void 0 && i3.quaternion.fromArray(t3.quaternion), t3.scale !== void 0 && i3.scale.fromArray(t3.scale)), t3.castShadow !== void 0 && (i3.castShadow = t3.castShadow), t3.receiveShadow !== void 0 && (i3.receiveShadow = t3.receiveShadow), t3.shadow && (t3.shadow.bias !== void 0 && (i3.shadow.bias = t3.shadow.bias), t3.shadow.radius !== void 0 && (i3.shadow.radius = t3.shadow.radius), t3.shadow.mapSize !== void 0 && i3.shadow.mapSize.fromArray(t3.shadow.mapSize), t3.shadow.camera !== void 0 && (i3.shadow.camera = this.parseObject(t3.shadow.camera))), t3.visible !== void 0 && (i3.visible = t3.visible), t3.frustumCulled !== void 0 && (i3.frustumCulled = t3.frustumCulled), t3.renderOrder !== void 0 && (i3.renderOrder = t3.renderOrder), t3.userData !== void 0 && (i3.userData = t3.userData), t3.layers !== void 0 && (i3.layers.mask = t3.layers), t3.children !== void 0)
            for (var u2 = t3.children, h2 = 0; h2 < u2.length; h2++)
              i3.add(this.parseObject(u2[h2], e3, n3));
          if (t3.type === "LOD") {
            t3.autoUpdate !== void 0 && (i3.autoUpdate = t3.autoUpdate);
            for (var d2 = t3.levels, p2 = 0; p2 < d2.length; p2++) {
              var f2 = d2[p2], m2 = i3.getObjectByProperty("uuid", f2.object);
              m2 !== void 0 && i3.addLevel(m2, f2.distance);
            }
          }
          return i3;
        } });
        var Kc, Qc = { UVMapping: 300, CubeReflectionMapping: $2, CubeRefractionMapping: K, EquirectangularReflectionMapping: Q, EquirectangularRefractionMapping: tt, SphericalReflectionMapping: et, CubeUVReflectionMapping: nt, CubeUVRefractionMapping: it }, tu = { RepeatWrapping: rt, ClampToEdgeWrapping: at, MirroredRepeatWrapping: ot }, eu = { NearestFilter: st, NearestMipmapNearestFilter: lt, NearestMipmapLinearFilter: ct, LinearFilter: ut, LinearMipmapNearestFilter: ht, LinearMipmapLinearFilter: dt };
        function nu(t3) {
          typeof createImageBitmap == "undefined" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch == "undefined" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), ec.call(this, t3), this.options = void 0;
        }
        function iu() {
          this.type = "ShapePath", this.color = new ci(), this.subPaths = [], this.currentPath = null;
        }
        function ru(t3) {
          this.type = "Font", this.data = t3;
        }
        function au(t3, e3, n3, i3, r3) {
          var a2 = r3.glyphs[t3] || r3.glyphs["?"];
          if (a2) {
            var o2, s2, l2, c2, u2, h2, d2, p2, f2 = new iu();
            if (a2.o)
              for (var m2 = a2._cachedOutline || (a2._cachedOutline = a2.o.split(" ")), g2 = 0, v2 = m2.length; g2 < v2; )
                switch (m2[g2++]) {
                  case "m":
                    o2 = m2[g2++] * e3 + n3, s2 = m2[g2++] * e3 + i3, f2.moveTo(o2, s2);
                    break;
                  case "l":
                    o2 = m2[g2++] * e3 + n3, s2 = m2[g2++] * e3 + i3, f2.lineTo(o2, s2);
                    break;
                  case "q":
                    l2 = m2[g2++] * e3 + n3, c2 = m2[g2++] * e3 + i3, u2 = m2[g2++] * e3 + n3, h2 = m2[g2++] * e3 + i3, f2.quadraticCurveTo(u2, h2, l2, c2);
                    break;
                  case "b":
                    l2 = m2[g2++] * e3 + n3, c2 = m2[g2++] * e3 + i3, u2 = m2[g2++] * e3 + n3, h2 = m2[g2++] * e3 + i3, d2 = m2[g2++] * e3 + n3, p2 = m2[g2++] * e3 + i3, f2.bezierCurveTo(u2, h2, d2, p2, l2, c2);
                }
            return { offsetX: a2.ha * e3, path: f2 };
          }
          console.error('THREE.Font: character "' + t3 + '" does not exists in font family ' + r3.familyName + ".");
        }
        function ou(t3) {
          ec.call(this, t3);
        }
        nu.prototype = Object.assign(Object.create(ec.prototype), { constructor: nu, setOptions: function(t3) {
          return this.options = t3, this;
        }, load: function(t3, e3, n3, i3) {
          t3 === void 0 && (t3 = ""), this.path !== void 0 && (t3 = this.path + t3), t3 = this.manager.resolveURL(t3);
          var r3 = this, a2 = Kl.get(t3);
          if (a2 !== void 0)
            return r3.manager.itemStart(t3), setTimeout(function() {
              e3 && e3(a2), r3.manager.itemEnd(t3);
            }, 0), a2;
          fetch(t3).then(function(t4) {
            return t4.blob();
          }).then(function(t4) {
            return r3.options === void 0 ? createImageBitmap(t4) : createImageBitmap(t4, r3.options);
          }).then(function(n4) {
            Kl.add(t3, n4), e3 && e3(n4), r3.manager.itemEnd(t3);
          }).catch(function(e4) {
            i3 && i3(e4), r3.manager.itemError(t3), r3.manager.itemEnd(t3);
          }), r3.manager.itemStart(t3);
        } }), Object.assign(iu.prototype, { moveTo: function(t3, e3) {
          return this.currentPath = new Lc(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(t3, e3), this;
        }, lineTo: function(t3, e3) {
          return this.currentPath.lineTo(t3, e3), this;
        }, quadraticCurveTo: function(t3, e3, n3, i3) {
          return this.currentPath.quadraticCurveTo(t3, e3, n3, i3), this;
        }, bezierCurveTo: function(t3, e3, n3, i3, r3, a2) {
          return this.currentPath.bezierCurveTo(t3, e3, n3, i3, r3, a2), this;
        }, splineThru: function(t3) {
          return this.currentPath.splineThru(t3), this;
        }, toShapes: function(t3, e3) {
          function n3(t4) {
            for (var e4 = [], n4 = 0, i4 = t4.length; n4 < i4; n4++) {
              var r4 = t4[n4], a3 = new Ic();
              a3.curves = r4.curves, e4.push(a3);
            }
            return e4;
          }
          function i3(t4, e4) {
            for (var n4 = e4.length, i4 = false, r4 = n4 - 1, a3 = 0; a3 < n4; r4 = a3++) {
              var o3 = e4[r4], s3 = e4[a3], l3 = s3.x - o3.x, c3 = s3.y - o3.y;
              if (Math.abs(c3) > Number.EPSILON) {
                if (c3 < 0 && (o3 = e4[a3], l3 = -l3, s3 = e4[r4], c3 = -c3), t4.y < o3.y || t4.y > s3.y)
                  continue;
                if (t4.y === o3.y) {
                  if (t4.x === o3.x)
                    return 1;
                } else {
                  var u3 = c3 * (t4.x - o3.x) - l3 * (t4.y - o3.y);
                  if (u3 == 0)
                    return 1;
                  if (u3 < 0)
                    continue;
                  i4 = !i4;
                }
              } else {
                if (t4.y !== o3.y)
                  continue;
                if (s3.x <= t4.x && t4.x <= o3.x || o3.x <= t4.x && t4.x <= s3.x)
                  return 1;
              }
            }
            return i4;
          }
          var r3 = tl.isClockWise, a2 = this.subPaths;
          if (a2.length === 0)
            return [];
          if (e3 === true)
            return n3(a2);
          var o2, s2, l2, c2 = [];
          if (a2.length === 1)
            return s2 = a2[0], (l2 = new Ic()).curves = s2.curves, c2.push(l2), c2;
          var u2 = !r3(a2[0].getPoints());
          u2 = t3 ? !u2 : u2;
          var h2, d2, p2 = [], f2 = [], m2 = [], g2 = 0;
          f2[g2] = void 0, m2[g2] = [];
          for (var v2 = 0, y2 = a2.length; v2 < y2; v2++)
            o2 = r3(h2 = (s2 = a2[v2]).getPoints()), (o2 = t3 ? !o2 : o2) ? (!u2 && f2[g2] && g2++, f2[g2] = { s: new Ic(), p: h2 }, f2[g2].s.curves = s2.curves, u2 && g2++, m2[g2] = []) : m2[g2].push({ h: s2, p: h2[0] });
          if (!f2[0])
            return n3(a2);
          if (1 < f2.length) {
            for (var x2 = false, b2 = [], w2 = 0, M2 = f2.length; w2 < M2; w2++)
              p2[w2] = [];
            for (w2 = 0, M2 = f2.length; w2 < M2; w2++)
              for (var _6 = m2[w2], S2 = 0; S2 < _6.length; S2++) {
                for (var C2 = _6[S2], T2 = true, E2 = 0; E2 < f2.length; E2++)
                  i3(C2.p, f2[E2].p) && (w2 !== E2 && b2.push({ froms: w2, tos: E2, hole: S2 }), T2 ? (T2 = false, p2[E2].push(C2)) : x2 = true);
                T2 && p2[w2].push(C2);
              }
            0 < b2.length && (x2 || (m2 = p2));
          }
          v2 = 0;
          for (var D2 = f2.length; v2 < D2; v2++) {
            l2 = f2[v2].s, c2.push(l2);
            for (var A2 = 0, O2 = (d2 = m2[v2]).length; A2 < O2; A2++)
              l2.holes.push(d2[A2].h);
          }
          return c2;
        } }), Object.assign(ru.prototype, { isFont: true, generateShapes: function(t3, e3) {
          e3 === void 0 && (e3 = 100);
          for (var n3 = [], i3 = function(t4, e4, n4) {
            for (var i4 = Array.from ? Array.from(t4) : String(t4).split(""), r4 = e4 / n4.resolution, a3 = (n4.boundingBox.yMax - n4.boundingBox.yMin + n4.underlineThickness) * r4, o2 = [], s2 = 0, l2 = 0, c2 = 0; c2 < i4.length; c2++) {
              var u2 = i4[c2];
              if (u2 === "\n")
                s2 = 0, l2 -= a3;
              else {
                var h2 = au(u2, r4, s2, l2, n4);
                s2 += h2.offsetX, o2.push(h2.path);
              }
            }
            return o2;
          }(t3, e3, this.data), r3 = 0, a2 = i3.length; r3 < a2; r3++)
            Array.prototype.push.apply(n3, i3[r3].toShapes());
          return n3;
        } }), ou.prototype = Object.assign(Object.create(ec.prototype), { constructor: ou, load: function(t3, e3, n3, i3) {
          var r3 = this, a2 = new ic(this.manager);
          a2.setPath(this.path), a2.load(t3, function(t4) {
            var n4;
            try {
              n4 = JSON.parse(t4);
            } catch (i5) {
              console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), n4 = JSON.parse(t4.substring(65, t4.length - 2));
            }
            var i4 = r3.parse(n4);
            e3 && e3(i4);
          }, n3, i3);
        }, parse: function(t3) {
          return new ru(t3);
        } });
        var su = { getContext: function() {
          return Kc === void 0 && (Kc = new (window.AudioContext || window.webkitAudioContext)()), Kc;
        }, setContext: function(t3) {
          Kc = t3;
        } };
        function lu(t3) {
          ec.call(this, t3);
        }
        function cu() {
          this.coefficients = [];
          for (var t3 = 0; t3 < 9; t3++)
            this.coefficients.push(new We());
        }
        function uu(t3, e3) {
          Pc.call(this, void 0, e3), this.sh = t3 !== void 0 ? t3 : new cu();
        }
        function hu(t3, e3, n3) {
          uu.call(this, void 0, n3);
          var i3 = new ci().set(t3), r3 = new ci().set(e3), a2 = new We(i3.r, i3.g, i3.b), o2 = new We(r3.r, r3.g, r3.b), s2 = Math.sqrt(Math.PI), l2 = s2 * Math.sqrt(0.75);
          this.sh.coefficients[0].copy(a2).add(o2).multiplyScalar(s2), this.sh.coefficients[1].copy(a2).sub(o2).multiplyScalar(l2);
        }
        function du(t3, e3) {
          uu.call(this, void 0, e3);
          var n3 = new ci().set(t3);
          this.sh.coefficients[0].set(n3.r, n3.g, n3.b).multiplyScalar(2 * Math.sqrt(Math.PI));
        }
        lu.prototype = Object.assign(Object.create(ec.prototype), { constructor: lu, load: function(t3, e3, n3, i3) {
          var r3 = new ic(this.manager);
          r3.setResponseType("arraybuffer"), r3.setPath(this.path), r3.load(t3, function(t4) {
            var n4 = t4.slice(0);
            su.getContext().decodeAudioData(n4, function(t5) {
              e3(t5);
            });
          }, n3, i3);
        } }), Object.assign(cu.prototype, { isSphericalHarmonics3: true, set: function(t3) {
          for (var e3 = 0; e3 < 9; e3++)
            this.coefficients[e3].copy(t3[e3]);
          return this;
        }, zero: function() {
          for (var t3 = 0; t3 < 9; t3++)
            this.coefficients[t3].set(0, 0, 0);
          return this;
        }, getAt: function(t3, e3) {
          var n3 = t3.x, i3 = t3.y, r3 = t3.z, a2 = this.coefficients;
          return e3.copy(a2[0]).multiplyScalar(0.282095), e3.addScale(a2[1], 0.488603 * i3), e3.addScale(a2[2], 0.488603 * r3), e3.addScale(a2[3], 0.488603 * n3), e3.addScale(a2[4], n3 * i3 * 1.092548), e3.addScale(a2[5], i3 * r3 * 1.092548), e3.addScale(a2[6], 0.315392 * (3 * r3 * r3 - 1)), e3.addScale(a2[7], n3 * r3 * 1.092548), e3.addScale(a2[8], 0.546274 * (n3 * n3 - i3 * i3)), e3;
        }, getIrradianceAt: function(t3, e3) {
          var n3 = t3.x, i3 = t3.y, r3 = t3.z, a2 = this.coefficients;
          return e3.copy(a2[0]).multiplyScalar(0.886227), e3.addScale(a2[1], 1.023328 * i3), e3.addScale(a2[2], 1.023328 * r3), e3.addScale(a2[3], 1.023328 * n3), e3.addScale(a2[4], 0.858086 * n3 * i3), e3.addScale(a2[5], 0.858086 * i3 * r3), e3.addScale(a2[6], 0.743125 * r3 * r3 - 0.247708), e3.addScale(a2[7], 0.858086 * n3 * r3), e3.addScale(a2[8], 0.429043 * (n3 * n3 - i3 * i3)), e3;
        }, add: function(t3) {
          for (var e3 = 0; e3 < 9; e3++)
            this.coefficients[e3].add(t3.coefficients[e3]);
          return this;
        }, scale: function(t3) {
          for (var e3 = 0; e3 < 9; e3++)
            this.coefficients[e3].multiplyScalar(t3);
          return this;
        }, lerp: function(t3, e3) {
          for (var n3 = 0; n3 < 9; n3++)
            this.coefficients[n3].lerp(t3.coefficients[n3], e3);
          return this;
        }, equals: function(t3) {
          for (var e3 = 0; e3 < 9; e3++)
            if (!this.coefficients[e3].equals(t3.coefficients[e3]))
              return false;
          return true;
        }, copy: function(t3) {
          return this.set(t3.coefficients);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, fromArray: function(t3, e3) {
          e3 === void 0 && (e3 = 0);
          for (var n3 = this.coefficients, i3 = 0; i3 < 9; i3++)
            n3[i3].fromArray(t3, e3 + 3 * i3);
          return this;
        }, toArray: function(t3, e3) {
          t3 === void 0 && (t3 = []), e3 === void 0 && (e3 = 0);
          for (var n3 = this.coefficients, i3 = 0; i3 < 9; i3++)
            n3[i3].toArray(t3, e3 + 3 * i3);
          return t3;
        } }), Object.assign(cu, { getBasisAt: function(t3, e3) {
          var n3 = t3.x, i3 = t3.y, r3 = t3.z;
          e3[0] = 0.282095, e3[1] = 0.488603 * i3, e3[2] = 0.488603 * r3, e3[3] = 0.488603 * n3, e3[4] = 1.092548 * n3 * i3, e3[5] = 1.092548 * i3 * r3, e3[6] = 0.315392 * (3 * r3 * r3 - 1), e3[7] = 1.092548 * n3 * r3, e3[8] = 0.546274 * (n3 * n3 - i3 * i3);
        } }), uu.prototype = Object.assign(Object.create(Pc.prototype), { constructor: uu, isLightProbe: true, copy: function(t3) {
          return Pc.prototype.copy.call(this, t3), this.sh.copy(t3.sh), this.intensity = t3.intensity, this;
        }, toJSON: function(t3) {
          return Pc.prototype.toJSON.call(this, t3);
        } }), hu.prototype = Object.assign(Object.create(uu.prototype), { constructor: hu, isHemisphereLightProbe: true, copy: function(t3) {
          return uu.prototype.copy.call(this, t3), this;
        }, toJSON: function(t3) {
          return uu.prototype.toJSON.call(this, t3);
        } }), du.prototype = Object.assign(Object.create(uu.prototype), { constructor: du, isAmbientLightProbe: true, copy: function(t3) {
          return uu.prototype.copy.call(this, t3), this;
        }, toJSON: function(t3) {
          return uu.prototype.toJSON.call(this, t3);
        } });
        var pu = new Qe(), fu = new Qe();
        function mu() {
          this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new yr(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = false, this.cameraR = new yr(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = false, this._cache = { focus: null, fov: null, aspect: null, near: null, far: null, zoom: null, eyeSep: null };
        }
        function gu(t3) {
          this.autoStart = t3 === void 0 || t3, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = false;
        }
        Object.assign(mu.prototype, { update: function(t3) {
          var e3 = this._cache;
          if (e3.focus !== t3.focus || e3.fov !== t3.fov || e3.aspect !== t3.aspect * this.aspect || e3.near !== t3.near || e3.far !== t3.far || e3.zoom !== t3.zoom || e3.eyeSep !== this.eyeSep) {
            e3.focus = t3.focus, e3.fov = t3.fov, e3.aspect = t3.aspect * this.aspect, e3.near = t3.near, e3.far = t3.far, e3.zoom = t3.zoom, e3.eyeSep = this.eyeSep;
            var n3, i3, r3 = t3.projectionMatrix.clone(), a2 = e3.eyeSep / 2, o2 = a2 * e3.near / e3.focus, s2 = e3.near * Math.tan(Pe.DEG2RAD * e3.fov * 0.5) / e3.zoom;
            fu.elements[12] = -a2, pu.elements[12] = a2, n3 = -s2 * e3.aspect + o2, i3 = s2 * e3.aspect + o2, r3.elements[0] = 2 * e3.near / (i3 - n3), r3.elements[8] = (i3 + n3) / (i3 - n3), this.cameraL.projectionMatrix.copy(r3), n3 = -s2 * e3.aspect - o2, i3 = s2 * e3.aspect - o2, r3.elements[0] = 2 * e3.near / (i3 - n3), r3.elements[8] = (i3 + n3) / (i3 - n3), this.cameraR.projectionMatrix.copy(r3);
          }
          this.cameraL.matrixWorld.copy(t3.matrixWorld).multiply(fu), this.cameraR.matrixWorld.copy(t3.matrixWorld).multiply(pu);
        } }), Object.assign(gu.prototype, { start: function() {
          this.startTime = (typeof performance == "undefined" ? Date : performance).now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = true;
        }, stop: function() {
          this.getElapsedTime(), this.running = false, this.autoStart = false;
        }, getElapsedTime: function() {
          return this.getDelta(), this.elapsedTime;
        }, getDelta: function() {
          var t3 = 0;
          if (this.autoStart && !this.running)
            return this.start(), 0;
          if (this.running) {
            var e3 = (typeof performance == "undefined" ? Date : performance).now();
            t3 = (e3 - this.oldTime) / 1e3, this.oldTime = e3, this.elapsedTime += t3;
          }
          return t3;
        } });
        var vu = new We(), yu = new Ge(), xu = new We(), bu = new We();
        function wu() {
          yn.call(this), this.type = "AudioListener", this.context = su.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new gu();
        }
        function Mu(t3) {
          yn.call(this), this.type = "Audio", this.listener = t3, this.context = t3.context, this.gain = this.context.createGain(), this.gain.connect(t3.getInput()), this.autoplay = false, this.buffer = null, this.detune = 0, this.loop = false, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = false, this.hasPlaybackControl = true, this.sourceType = "empty", this._startedAt = 0, this._pausedAt = 0, this.filters = [];
        }
        wu.prototype = Object.assign(Object.create(yn.prototype), { constructor: wu, getInput: function() {
          return this.gain;
        }, removeFilter: function() {
          return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
        }, getFilter: function() {
          return this.filter;
        }, setFilter: function(t3) {
          return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = t3, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
        }, getMasterVolume: function() {
          return this.gain.gain.value;
        }, setMasterVolume: function(t3) {
          return this.gain.gain.setTargetAtTime(t3, this.context.currentTime, 0.01), this;
        }, updateMatrixWorld: function(t3) {
          yn.prototype.updateMatrixWorld.call(this, t3);
          var e3 = this.context.listener, n3 = this.up;
          if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(vu, yu, xu), bu.set(0, 0, -1).applyQuaternion(yu), e3.positionX) {
            var i3 = this.context.currentTime + this.timeDelta;
            e3.positionX.linearRampToValueAtTime(vu.x, i3), e3.positionY.linearRampToValueAtTime(vu.y, i3), e3.positionZ.linearRampToValueAtTime(vu.z, i3), e3.forwardX.linearRampToValueAtTime(bu.x, i3), e3.forwardY.linearRampToValueAtTime(bu.y, i3), e3.forwardZ.linearRampToValueAtTime(bu.z, i3), e3.upX.linearRampToValueAtTime(n3.x, i3), e3.upY.linearRampToValueAtTime(n3.y, i3), e3.upZ.linearRampToValueAtTime(n3.z, i3);
          } else
            e3.setPosition(vu.x, vu.y, vu.z), e3.setOrientation(bu.x, bu.y, bu.z, n3.x, n3.y, n3.z);
        } }), Mu.prototype = Object.assign(Object.create(yn.prototype), { constructor: Mu, getOutput: function() {
          return this.gain;
        }, setNodeSource: function(t3) {
          return this.hasPlaybackControl = false, this.sourceType = "audioNode", this.source = t3, this.connect(), this;
        }, setMediaElementSource: function(t3) {
          return this.hasPlaybackControl = false, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(t3), this.connect(), this;
        }, setMediaStreamSource: function(t3) {
          return this.hasPlaybackControl = false, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(t3), this.connect(), this;
        }, setBuffer: function(t3) {
          return this.buffer = t3, this.sourceType = "buffer", this.autoplay && this.play(), this;
        }, play: function(t3) {
          if (t3 === void 0 && (t3 = 0), this.isPlaying !== true) {
            if (this.hasPlaybackControl !== false) {
              this._startedAt = this.context.currentTime + t3;
              var e3 = this.context.createBufferSource();
              return e3.buffer = this.buffer, e3.loop = this.loop, e3.loopStart = this.loopStart, e3.loopEnd = this.loopEnd, e3.onended = this.onEnded.bind(this), e3.start(this._startedAt, this._pausedAt + this.offset, this.duration), this.isPlaying = true, this.source = e3, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
            }
            console.warn("THREE.Audio: this Audio has no playback control.");
          } else
            console.warn("THREE.Audio: Audio is already playing.");
        }, pause: function() {
          if (this.hasPlaybackControl !== false)
            return this.isPlaying === true && (this._pausedAt = (this.context.currentTime - this._startedAt) * this.playbackRate, this.source.stop(), this.source.onended = null, this.isPlaying = false), this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }, stop: function() {
          if (this.hasPlaybackControl !== false)
            return this._pausedAt = 0, this.source.stop(), this.source.onended = null, this.isPlaying = false, this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }, connect: function() {
          if (0 < this.filters.length) {
            this.source.connect(this.filters[0]);
            for (var t3 = 1, e3 = this.filters.length; t3 < e3; t3++)
              this.filters[t3 - 1].connect(this.filters[t3]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
          } else
            this.source.connect(this.getOutput());
          return this;
        }, disconnect: function() {
          if (0 < this.filters.length) {
            this.source.disconnect(this.filters[0]);
            for (var t3 = 1, e3 = this.filters.length; t3 < e3; t3++)
              this.filters[t3 - 1].disconnect(this.filters[t3]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
          } else
            this.source.disconnect(this.getOutput());
          return this;
        }, getFilters: function() {
          return this.filters;
        }, setFilters: function(t3) {
          return t3 = t3 || [], this.isPlaying === true ? (this.disconnect(), this.filters = t3, this.connect()) : this.filters = t3, this;
        }, setDetune: function(t3) {
          if (this.detune = t3, this.source.detune !== void 0)
            return this.isPlaying === true && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
        }, getDetune: function() {
          return this.detune;
        }, getFilter: function() {
          return this.getFilters()[0];
        }, setFilter: function(t3) {
          return this.setFilters(t3 ? [t3] : []);
        }, setPlaybackRate: function(t3) {
          if (this.hasPlaybackControl !== false)
            return this.playbackRate = t3, this.isPlaying === true && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }, getPlaybackRate: function() {
          return this.playbackRate;
        }, onEnded: function() {
          this.isPlaying = false;
        }, getLoop: function() {
          return this.hasPlaybackControl === false ? (console.warn("THREE.Audio: this Audio has no playback control."), false) : this.loop;
        }, setLoop: function(t3) {
          if (this.hasPlaybackControl !== false)
            return this.loop = t3, this.isPlaying === true && (this.source.loop = this.loop), this;
          console.warn("THREE.Audio: this Audio has no playback control.");
        }, setLoopStart: function(t3) {
          return this.loopStart = t3, this;
        }, setLoopEnd: function(t3) {
          return this.loopEnd = t3, this;
        }, getVolume: function() {
          return this.gain.gain.value;
        }, setVolume: function(t3) {
          return this.gain.gain.setTargetAtTime(t3, this.context.currentTime, 0.01), this;
        } });
        var _u = new We(), Su = new Ge(), Cu = new We(), Tu = new We();
        function Eu(t3) {
          Mu.call(this, t3), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
        }
        function Du(t3, e3) {
          this.analyser = t3.context.createAnalyser(), this.analyser.fftSize = e3 !== void 0 ? e3 : 2048, this.data = new Uint8Array(this.analyser.frequencyBinCount), t3.getOutput().connect(this.analyser);
        }
        function Au(t3, e3, n3) {
          this.binding = t3, this.valueSize = n3;
          var i3, r3 = Float64Array;
          switch (e3) {
            case "quaternion":
              i3 = this._slerp;
              break;
            case "string":
            case "bool":
              r3 = Array, i3 = this._select;
              break;
            default:
              i3 = this._lerp;
          }
          this.buffer = new r3(4 * n3), this._mixBufferRegion = i3, this.cumulativeWeight = 0, this.useCount = 0, this.referenceCount = 0;
        }
        Eu.prototype = Object.assign(Object.create(Mu.prototype), { constructor: Eu, getOutput: function() {
          return this.panner;
        }, getRefDistance: function() {
          return this.panner.refDistance;
        }, setRefDistance: function(t3) {
          return this.panner.refDistance = t3, this;
        }, getRolloffFactor: function() {
          return this.panner.rolloffFactor;
        }, setRolloffFactor: function(t3) {
          return this.panner.rolloffFactor = t3, this;
        }, getDistanceModel: function() {
          return this.panner.distanceModel;
        }, setDistanceModel: function(t3) {
          return this.panner.distanceModel = t3, this;
        }, getMaxDistance: function() {
          return this.panner.maxDistance;
        }, setMaxDistance: function(t3) {
          return this.panner.maxDistance = t3, this;
        }, setDirectionalCone: function(t3, e3, n3) {
          return this.panner.coneInnerAngle = t3, this.panner.coneOuterAngle = e3, this.panner.coneOuterGain = n3, this;
        }, updateMatrixWorld: function(t3) {
          if (yn.prototype.updateMatrixWorld.call(this, t3), this.hasPlaybackControl !== true || this.isPlaying !== false) {
            this.matrixWorld.decompose(_u, Su, Cu), Tu.set(0, 0, 1).applyQuaternion(Su);
            var e3 = this.panner;
            if (e3.positionX) {
              var n3 = this.context.currentTime + this.listener.timeDelta;
              e3.positionX.linearRampToValueAtTime(_u.x, n3), e3.positionY.linearRampToValueAtTime(_u.y, n3), e3.positionZ.linearRampToValueAtTime(_u.z, n3), e3.orientationX.linearRampToValueAtTime(Tu.x, n3), e3.orientationY.linearRampToValueAtTime(Tu.y, n3), e3.orientationZ.linearRampToValueAtTime(Tu.z, n3);
            } else
              e3.setPosition(_u.x, _u.y, _u.z), e3.setOrientation(Tu.x, Tu.y, Tu.z);
          }
        } }), Object.assign(Du.prototype, { getFrequencyData: function() {
          return this.analyser.getByteFrequencyData(this.data), this.data;
        }, getAverageFrequency: function() {
          for (var t3 = 0, e3 = this.getFrequencyData(), n3 = 0; n3 < e3.length; n3++)
            t3 += e3[n3];
          return t3 / e3.length;
        } }), Object.assign(Au.prototype, { accumulate: function(t3, e3) {
          var n3 = this.buffer, i3 = this.valueSize, r3 = t3 * i3 + i3, a2 = this.cumulativeWeight;
          if (a2 === 0) {
            for (var o2 = 0; o2 !== i3; ++o2)
              n3[r3 + o2] = n3[o2];
            a2 = e3;
          } else {
            var s2 = e3 / (a2 += e3);
            this._mixBufferRegion(n3, r3, 0, s2, i3);
          }
          this.cumulativeWeight = a2;
        }, apply: function(t3) {
          var e3 = this.valueSize, n3 = this.buffer, i3 = t3 * e3 + e3, r3 = this.cumulativeWeight, a2 = this.binding;
          if (this.cumulativeWeight = 0, r3 < 1) {
            var o2 = 3 * e3;
            this._mixBufferRegion(n3, i3, o2, 1 - r3, e3);
          }
          for (var s2 = e3, l2 = e3 + e3; s2 !== l2; ++s2)
            if (n3[s2] !== n3[s2 + e3]) {
              a2.setValue(n3, i3);
              break;
            }
        }, saveOriginalState: function() {
          var t3 = this.binding, e3 = this.buffer, n3 = this.valueSize, i3 = 3 * n3;
          t3.getValue(e3, i3);
          for (var r3 = n3, a2 = i3; r3 !== a2; ++r3)
            e3[r3] = e3[i3 + r3 % n3];
          this.cumulativeWeight = 0;
        }, restoreOriginalState: function() {
          var t3 = 3 * this.valueSize;
          this.binding.setValue(this.buffer, t3);
        }, _select: function(t3, e3, n3, i3, r3) {
          if (0.5 <= i3)
            for (var a2 = 0; a2 !== r3; ++a2)
              t3[e3 + a2] = t3[n3 + a2];
        }, _slerp: function(t3, e3, n3, i3) {
          Ge.slerpFlat(t3, e3, t3, e3, t3, n3, i3);
        }, _lerp: function(t3, e3, n3, i3, r3) {
          for (var a2 = 1 - i3, o2 = 0; o2 !== r3; ++o2) {
            var s2 = e3 + o2;
            t3[s2] = t3[s2] * a2 + t3[n3 + o2] * i3;
          }
        } });
        var Ou = "\\[\\]\\.:\\/", Lu = new RegExp("[" + Ou + "]", "g"), Iu = "[^" + Ou + "]", Pu = "[^" + Ou.replace("\\.", "") + "]", Ru = /((?:WC+[\/:])*)/.source.replace("WC", Iu), ku = /(WCOD+)?/.source.replace("WCOD", Pu), Bu = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Iu), Nu = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Iu), Fu = new RegExp("^" + Ru + ku + Bu + Nu + "$"), ju = ["material", "materials", "bones"];
        function Vu(t3, e3, n3) {
          var i3 = n3 || zu.parseTrackName(e3);
          this._targetGroup = t3, this._bindings = t3.subscribe_(e3, i3);
        }
        function zu(t3, e3, n3) {
          this.path = e3, this.parsedPath = n3 || zu.parseTrackName(e3), this.node = zu.findNode(t3, this.parsedPath.nodeName) || t3, this.rootNode = t3;
        }
        function Gu() {
          this.uuid = Pe.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
          var t3 = {};
          this._indicesByUUID = t3;
          for (var e3 = 0, n3 = arguments.length; e3 !== n3; ++e3)
            t3[arguments[e3].uuid] = e3;
          this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
          var i3 = this;
          this.stats = { objects: { get total() {
            return i3._objects.length;
          }, get inUse() {
            return this.total - i3.nCachedObjects_;
          } }, get bindingsPerObject() {
            return i3._bindings.length;
          } };
        }
        function Uu(t3, e3, n3) {
          this._mixer = t3, this._clip = e3, this._localRoot = n3 || null;
          for (var i3 = e3.tracks, r3 = i3.length, a2 = new Array(r3), o2 = { endingStart: ue, endingEnd: ue }, s2 = 0; s2 !== r3; ++s2) {
            var l2 = i3[s2].createInterpolant(null);
            (a2[s2] = l2).settings = o2;
          }
          this._interpolantSettings = o2, this._interpolants = a2, this._propertyBindings = new Array(r3), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = 2201, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = false, this.enabled = true, this.clampWhenFinished = false, this.zeroSlopeAtStart = true, this.zeroSlopeAtEnd = true;
        }
        function Hu(t3) {
          this._root = t3, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
        }
        function Wu(t3) {
          typeof t3 == "string" && (console.warn("THREE.Uniform: Type parameter is no longer needed."), t3 = arguments[1]), this.value = t3;
        }
        function Ju(t3, e3, n3) {
          mo.call(this, t3, e3), this.meshPerAttribute = n3 || 1;
        }
        function qu(t3, e3, n3, i3) {
          this.ray = new Hn(t3, e3), this.near = n3 || 0, this.far = i3 || 1 / 0, this.camera = null, this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} }, Object.defineProperties(this.params, { PointCloud: { get: function() {
            return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points;
          } } });
        }
        function Xu(t3, e3) {
          return t3.distance - e3.distance;
        }
        function Yu(t3, e3, n3, i3) {
          if (t3.visible !== false && (t3.raycast(e3, n3), i3 === true))
            for (var r3 = t3.children, a2 = 0, o2 = r3.length; a2 < o2; a2++)
              Yu(r3[a2], e3, n3, true);
        }
        function Zu(t3, e3, n3) {
          return this.radius = t3 !== void 0 ? t3 : 1, this.phi = e3 !== void 0 ? e3 : 0, this.theta = n3 !== void 0 ? n3 : 0, this;
        }
        function $u(t3, e3, n3) {
          return this.radius = t3 !== void 0 ? t3 : 1, this.theta = e3 !== void 0 ? e3 : 0, this.y = n3 !== void 0 ? n3 : 0, this;
        }
        Object.assign(Vu.prototype, { getValue: function(t3, e3) {
          this.bind();
          var n3 = this._targetGroup.nCachedObjects_, i3 = this._bindings[n3];
          i3 !== void 0 && i3.getValue(t3, e3);
        }, setValue: function(t3, e3) {
          for (var n3 = this._bindings, i3 = this._targetGroup.nCachedObjects_, r3 = n3.length; i3 !== r3; ++i3)
            n3[i3].setValue(t3, e3);
        }, bind: function() {
          for (var t3 = this._bindings, e3 = this._targetGroup.nCachedObjects_, n3 = t3.length; e3 !== n3; ++e3)
            t3[e3].bind();
        }, unbind: function() {
          for (var t3 = this._bindings, e3 = this._targetGroup.nCachedObjects_, n3 = t3.length; e3 !== n3; ++e3)
            t3[e3].unbind();
        } }), Object.assign(zu, { Composite: Vu, create: function(t3, e3, n3) {
          return t3 && t3.isAnimationObjectGroup ? new zu.Composite(t3, e3, n3) : new zu(t3, e3, n3);
        }, sanitizeNodeName: function(t3) {
          return t3.replace(/\s/g, "_").replace(Lu, "");
        }, parseTrackName: function(t3) {
          var e3 = Fu.exec(t3);
          if (!e3)
            throw new Error("PropertyBinding: Cannot parse trackName: " + t3);
          var n3 = { nodeName: e3[2], objectName: e3[3], objectIndex: e3[4], propertyName: e3[5], propertyIndex: e3[6] }, i3 = n3.nodeName && n3.nodeName.lastIndexOf(".");
          if (i3 !== void 0 && i3 !== -1) {
            var r3 = n3.nodeName.substring(i3 + 1);
            ju.indexOf(r3) !== -1 && (n3.nodeName = n3.nodeName.substring(0, i3), n3.objectName = r3);
          }
          if (n3.propertyName === null || n3.propertyName.length === 0)
            throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t3);
          return n3;
        }, findNode: function(t3, e3) {
          if (!e3 || e3 === "" || e3 === "root" || e3 === "." || e3 === -1 || e3 === t3.name || e3 === t3.uuid)
            return t3;
          if (t3.skeleton) {
            var n3 = t3.skeleton.getBoneByName(e3);
            if (n3 !== void 0)
              return n3;
          }
          if (t3.children) {
            var i3 = function(t4) {
              for (var n4 = 0; n4 < t4.length; n4++) {
                var r4 = t4[n4];
                if (r4.name === e3 || r4.uuid === e3)
                  return r4;
                var a2 = i3(r4.children);
                if (a2)
                  return a2;
              }
              return null;
            }, r3 = i3(t3.children);
            if (r3)
              return r3;
          }
          return null;
        } }), Object.assign(zu.prototype, { _getValue_unavailable: function() {
        }, _setValue_unavailable: function() {
        }, BindingType: { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }, Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }, GetterByBindingType: [function(t3, e3) {
          t3[e3] = this.node[this.propertyName];
        }, function(t3, e3) {
          for (var n3 = this.resolvedProperty, i3 = 0, r3 = n3.length; i3 !== r3; ++i3)
            t3[e3++] = n3[i3];
        }, function(t3, e3) {
          t3[e3] = this.resolvedProperty[this.propertyIndex];
        }, function(t3, e3) {
          this.resolvedProperty.toArray(t3, e3);
        }], SetterByBindingTypeAndVersioning: [[function(t3, e3) {
          this.targetObject[this.propertyName] = t3[e3];
        }, function(t3, e3) {
          this.targetObject[this.propertyName] = t3[e3], this.targetObject.needsUpdate = true;
        }, function(t3, e3) {
          this.targetObject[this.propertyName] = t3[e3], this.targetObject.matrixWorldNeedsUpdate = true;
        }], [function(t3, e3) {
          for (var n3 = this.resolvedProperty, i3 = 0, r3 = n3.length; i3 !== r3; ++i3)
            n3[i3] = t3[e3++];
        }, function(t3, e3) {
          for (var n3 = this.resolvedProperty, i3 = 0, r3 = n3.length; i3 !== r3; ++i3)
            n3[i3] = t3[e3++];
          this.targetObject.needsUpdate = true;
        }, function(t3, e3) {
          for (var n3 = this.resolvedProperty, i3 = 0, r3 = n3.length; i3 !== r3; ++i3)
            n3[i3] = t3[e3++];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }], [function(t3, e3) {
          this.resolvedProperty[this.propertyIndex] = t3[e3];
        }, function(t3, e3) {
          this.resolvedProperty[this.propertyIndex] = t3[e3], this.targetObject.needsUpdate = true;
        }, function(t3, e3) {
          this.resolvedProperty[this.propertyIndex] = t3[e3], this.targetObject.matrixWorldNeedsUpdate = true;
        }], [function(t3, e3) {
          this.resolvedProperty.fromArray(t3, e3);
        }, function(t3, e3) {
          this.resolvedProperty.fromArray(t3, e3), this.targetObject.needsUpdate = true;
        }, function(t3, e3) {
          this.resolvedProperty.fromArray(t3, e3), this.targetObject.matrixWorldNeedsUpdate = true;
        }]], getValue: function(t3, e3) {
          this.bind(), this.getValue(t3, e3);
        }, setValue: function(t3, e3) {
          this.bind(), this.setValue(t3, e3);
        }, bind: function() {
          var t3 = this.node, e3 = this.parsedPath, n3 = e3.objectName, i3 = e3.propertyName, r3 = e3.propertyIndex;
          if (t3 || (t3 = zu.findNode(this.rootNode, e3.nodeName) || this.rootNode, this.node = t3), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, t3) {
            if (n3) {
              var a2 = e3.objectIndex;
              switch (n3) {
                case "materials":
                  if (!t3.material)
                    return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                  if (!t3.material.materials)
                    return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                  t3 = t3.material.materials;
                  break;
                case "bones":
                  if (!t3.skeleton)
                    return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                  t3 = t3.skeleton.bones;
                  for (var o2 = 0; o2 < t3.length; o2++)
                    if (t3[o2].name === a2) {
                      a2 = o2;
                      break;
                    }
                  break;
                default:
                  if (t3[n3] === void 0)
                    return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                  t3 = t3[n3];
              }
              if (a2 !== void 0) {
                if (t3[a2] === void 0)
                  return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t3);
                t3 = t3[a2];
              }
            }
            var s2 = t3[i3];
            if (s2 !== void 0) {
              var l2 = this.Versioning.None;
              (this.targetObject = t3).needsUpdate !== void 0 ? l2 = this.Versioning.NeedsUpdate : t3.matrixWorldNeedsUpdate !== void 0 && (l2 = this.Versioning.MatrixWorldNeedsUpdate);
              var c2 = this.BindingType.Direct;
              if (r3 !== void 0) {
                if (i3 === "morphTargetInfluences") {
                  if (!t3.geometry)
                    return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                  if (t3.geometry.isBufferGeometry) {
                    if (!t3.geometry.morphAttributes)
                      return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                    for (o2 = 0; o2 < this.node.geometry.morphAttributes.position.length; o2++)
                      if (t3.geometry.morphAttributes.position[o2].name === r3) {
                        r3 = o2;
                        break;
                      }
                  } else {
                    if (!t3.geometry.morphTargets)
                      return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                    for (o2 = 0; o2 < this.node.geometry.morphTargets.length; o2++)
                      if (t3.geometry.morphTargets[o2].name === r3) {
                        r3 = o2;
                        break;
                      }
                  }
                }
                c2 = this.BindingType.ArrayElement, this.resolvedProperty = s2, this.propertyIndex = r3;
              } else
                s2.fromArray !== void 0 && s2.toArray !== void 0 ? (c2 = this.BindingType.HasFromToArray, this.resolvedProperty = s2) : Array.isArray(s2) ? (c2 = this.BindingType.EntireArray, this.resolvedProperty = s2) : this.propertyName = i3;
              this.getValue = this.GetterByBindingType[c2], this.setValue = this.SetterByBindingTypeAndVersioning[c2][l2];
            } else {
              var u2 = e3.nodeName;
              console.error("THREE.PropertyBinding: Trying to update property for track: " + u2 + "." + i3 + " but it wasn't found.", t3);
            }
          } else
            console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        }, unbind: function() {
          this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
        } }), Object.assign(zu.prototype, { _getValue_unbound: zu.prototype.getValue, _setValue_unbound: zu.prototype.setValue }), Object.assign(Gu.prototype, { isAnimationObjectGroup: true, add: function() {
          for (var t3 = this._objects, e3 = t3.length, n3 = this.nCachedObjects_, i3 = this._indicesByUUID, r3 = this._paths, a2 = this._parsedPaths, o2 = this._bindings, s2 = o2.length, l2 = void 0, c2 = 0, u2 = arguments.length; c2 !== u2; ++c2) {
            var h2 = arguments[c2], d2 = h2.uuid, p2 = i3[d2];
            if (p2 === void 0) {
              p2 = e3++, i3[d2] = p2, t3.push(h2);
              for (var f2 = 0, m2 = s2; f2 !== m2; ++f2)
                o2[f2].push(new zu(h2, r3[f2], a2[f2]));
            } else if (p2 < n3) {
              l2 = t3[p2];
              var g2 = --n3, v2 = t3[g2];
              for (t3[i3[v2.uuid] = p2] = v2, t3[i3[d2] = g2] = h2, f2 = 0, m2 = s2; f2 !== m2; ++f2) {
                var y2 = o2[f2], x2 = y2[g2], b2 = y2[p2];
                y2[p2] = x2, b2 === void 0 && (b2 = new zu(h2, r3[f2], a2[f2])), y2[g2] = b2;
              }
            } else
              t3[p2] !== l2 && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
          }
          this.nCachedObjects_ = n3;
        }, remove: function() {
          for (var t3 = this._objects, e3 = this.nCachedObjects_, n3 = this._indicesByUUID, i3 = this._bindings, r3 = i3.length, a2 = 0, o2 = arguments.length; a2 !== o2; ++a2) {
            var s2 = arguments[a2], l2 = s2.uuid, c2 = n3[l2];
            if (c2 !== void 0 && e3 <= c2) {
              var u2 = e3++, h2 = t3[u2];
              t3[n3[h2.uuid] = c2] = h2, t3[n3[l2] = u2] = s2;
              for (var d2 = 0, p2 = r3; d2 !== p2; ++d2) {
                var f2 = i3[d2], m2 = f2[u2], g2 = f2[c2];
                f2[c2] = m2, f2[u2] = g2;
              }
            }
          }
          this.nCachedObjects_ = e3;
        }, uncache: function() {
          for (var t3 = this._objects, e3 = t3.length, n3 = this.nCachedObjects_, i3 = this._indicesByUUID, r3 = this._bindings, a2 = r3.length, o2 = 0, s2 = arguments.length; o2 !== s2; ++o2) {
            var l2 = arguments[o2].uuid, c2 = i3[l2];
            if (c2 !== void 0)
              if (delete i3[l2], c2 < n3) {
                var u2 = --n3, h2 = t3[u2], d2 = t3[v2 = --e3];
                t3[i3[h2.uuid] = c2] = h2, t3[i3[d2.uuid] = u2] = d2, t3.pop();
                for (var p2 = 0, f2 = a2; p2 !== f2; ++p2) {
                  var m2 = (y2 = r3[p2])[u2], g2 = y2[v2];
                  y2[c2] = m2, y2[u2] = g2, y2.pop();
                }
              } else {
                var v2;
                for (t3[i3[(d2 = t3[v2 = --e3]).uuid] = c2] = d2, t3.pop(), p2 = 0, f2 = a2; p2 !== f2; ++p2) {
                  var y2;
                  (y2 = r3[p2])[c2] = y2[v2], y2.pop();
                }
              }
          }
          this.nCachedObjects_ = n3;
        }, subscribe_: function(t3, e3) {
          var n3 = this._bindingsIndicesByPath, i3 = n3[t3], r3 = this._bindings;
          if (i3 !== void 0)
            return r3[i3];
          var a2 = this._paths, o2 = this._parsedPaths, s2 = this._objects, l2 = s2.length, c2 = this.nCachedObjects_, u2 = new Array(l2);
          i3 = r3.length, n3[t3] = i3, a2.push(t3), o2.push(e3), r3.push(u2);
          for (var h2 = c2, d2 = s2.length; h2 !== d2; ++h2) {
            var p2 = s2[h2];
            u2[h2] = new zu(p2, t3, e3);
          }
          return u2;
        }, unsubscribe_: function(t3) {
          var e3 = this._bindingsIndicesByPath, n3 = e3[t3];
          if (n3 !== void 0) {
            var i3 = this._paths, r3 = this._parsedPaths, a2 = this._bindings, o2 = a2.length - 1, s2 = a2[o2];
            a2[e3[t3[o2]] = n3] = s2, a2.pop(), r3[n3] = r3[o2], r3.pop(), i3[n3] = i3[o2], i3.pop();
          }
        } }), Object.assign(Uu.prototype, { play: function() {
          return this._mixer._activateAction(this), this;
        }, stop: function() {
          return this._mixer._deactivateAction(this), this.reset();
        }, reset: function() {
          return this.paused = false, this.enabled = true, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
        }, isRunning: function() {
          return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
        }, isScheduled: function() {
          return this._mixer._isActiveAction(this);
        }, startAt: function(t3) {
          return this._startTime = t3, this;
        }, setLoop: function(t3, e3) {
          return this.loop = t3, this.repetitions = e3, this;
        }, setEffectiveWeight: function(t3) {
          return this.weight = t3, this._effectiveWeight = this.enabled ? t3 : 0, this.stopFading();
        }, getEffectiveWeight: function() {
          return this._effectiveWeight;
        }, fadeIn: function(t3) {
          return this._scheduleFading(t3, 0, 1);
        }, fadeOut: function(t3) {
          return this._scheduleFading(t3, 1, 0);
        }, crossFadeFrom: function(t3, e3, n3) {
          if (t3.fadeOut(e3), this.fadeIn(e3), n3) {
            var i3 = this._clip.duration, r3 = t3._clip.duration, a2 = r3 / i3, o2 = i3 / r3;
            t3.warp(1, a2, e3), this.warp(o2, 1, e3);
          }
          return this;
        }, crossFadeTo: function(t3, e3, n3) {
          return t3.crossFadeFrom(this, e3, n3);
        }, stopFading: function() {
          var t3 = this._weightInterpolant;
          return t3 !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(t3)), this;
        }, setEffectiveTimeScale: function(t3) {
          return this.timeScale = t3, this._effectiveTimeScale = this.paused ? 0 : t3, this.stopWarping();
        }, getEffectiveTimeScale: function() {
          return this._effectiveTimeScale;
        }, setDuration: function(t3) {
          return this.timeScale = this._clip.duration / t3, this.stopWarping();
        }, syncWith: function(t3) {
          return this.time = t3.time, this.timeScale = t3.timeScale, this.stopWarping();
        }, halt: function(t3) {
          return this.warp(this._effectiveTimeScale, 0, t3);
        }, warp: function(t3, e3, n3) {
          var i3 = this._mixer, r3 = i3.time, a2 = this._timeScaleInterpolant, o2 = this.timeScale;
          a2 === null && (a2 = i3._lendControlInterpolant(), this._timeScaleInterpolant = a2);
          var s2 = a2.parameterPositions, l2 = a2.sampleValues;
          return s2[0] = r3, s2[1] = r3 + n3, l2[0] = t3 / o2, l2[1] = e3 / o2, this;
        }, stopWarping: function() {
          var t3 = this._timeScaleInterpolant;
          return t3 !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(t3)), this;
        }, getMixer: function() {
          return this._mixer;
        }, getClip: function() {
          return this._clip;
        }, getRoot: function() {
          return this._localRoot || this._mixer._root;
        }, _update: function(t3, e3, n3, i3) {
          if (this.enabled) {
            var r3 = this._startTime;
            if (r3 !== null) {
              var a2 = (t3 - r3) * n3;
              if (a2 < 0 || n3 === 0)
                return;
              this._startTime = null, e3 = n3 * a2;
            }
            e3 *= this._updateTimeScale(t3);
            var o2 = this._updateTime(e3), s2 = this._updateWeight(t3);
            if (0 < s2)
              for (var l2 = this._interpolants, c2 = this._propertyBindings, u2 = 0, h2 = l2.length; u2 !== h2; ++u2)
                l2[u2].evaluate(o2), c2[u2].accumulate(i3, s2);
          } else
            this._updateWeight(t3);
        }, _updateWeight: function(t3) {
          var e3 = 0;
          if (this.enabled) {
            e3 = this.weight;
            var n3 = this._weightInterpolant;
            if (n3 !== null) {
              var i3 = n3.evaluate(t3)[0];
              e3 *= i3, t3 > n3.parameterPositions[1] && (this.stopFading(), i3 === 0 && (this.enabled = false));
            }
          }
          return this._effectiveWeight = e3;
        }, _updateTimeScale: function(t3) {
          var e3 = 0;
          if (!this.paused) {
            e3 = this.timeScale;
            var n3 = this._timeScaleInterpolant;
            n3 !== null && (e3 *= n3.evaluate(t3)[0], t3 > n3.parameterPositions[1] && (this.stopWarping(), e3 === 0 ? this.paused = true : this.timeScale = e3));
          }
          return this._effectiveTimeScale = e3;
        }, _updateTime: function(t3) {
          var e3 = this.time + t3, n3 = this._clip.duration, i3 = this.loop, r3 = this._loopCount, a2 = i3 === 2202;
          if (t3 === 0)
            return r3 !== -1 && a2 && (1 & r3) == 1 ? n3 - e3 : e3;
          if (i3 === 2200) {
            r3 === -1 && (this._loopCount = 0, this._setEndings(true, true, false));
            t: {
              if (n3 <= e3)
                e3 = n3;
              else {
                if (!(e3 < 0)) {
                  this.time = e3;
                  break t;
                }
                e3 = 0;
              }
              this.clampWhenFinished ? this.paused = true : this.enabled = false, this.time = e3, this._mixer.dispatchEvent({ type: "finished", action: this, direction: t3 < 0 ? -1 : 1 });
            }
          } else {
            if (r3 === -1 && (0 <= t3 ? (r3 = 0, this._setEndings(true, this.repetitions === 0, a2)) : this._setEndings(this.repetitions === 0, true, a2)), n3 <= e3 || e3 < 0) {
              var o2 = Math.floor(e3 / n3);
              e3 -= n3 * o2, r3 += Math.abs(o2);
              var s2 = this.repetitions - r3;
              if (s2 <= 0)
                this.clampWhenFinished ? this.paused = true : this.enabled = false, e3 = 0 < t3 ? n3 : 0, this.time = e3, this._mixer.dispatchEvent({ type: "finished", action: this, direction: 0 < t3 ? 1 : -1 });
              else {
                if (s2 == 1) {
                  var l2 = t3 < 0;
                  this._setEndings(l2, !l2, a2);
                } else
                  this._setEndings(false, false, a2);
                this._loopCount = r3, this.time = e3, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: o2 });
              }
            } else
              this.time = e3;
            if (a2 && (1 & r3) == 1)
              return n3 - e3;
          }
          return e3;
        }, _setEndings: function(t3, e3, n3) {
          var i3 = this._interpolantSettings;
          n3 ? (i3.endingStart = he, i3.endingEnd = he) : (i3.endingStart = t3 ? this.zeroSlopeAtStart ? he : ue : de, i3.endingEnd = e3 ? this.zeroSlopeAtEnd ? he : ue : de);
        }, _scheduleFading: function(t3, e3, n3) {
          var i3 = this._mixer, r3 = i3.time, a2 = this._weightInterpolant;
          a2 === null && (a2 = i3._lendControlInterpolant(), this._weightInterpolant = a2);
          var o2 = a2.parameterPositions, s2 = a2.sampleValues;
          return o2[0] = r3, s2[0] = e3, o2[1] = r3 + t3, s2[1] = n3, this;
        } }), Hu.prototype = Object.assign(Object.create(Ae.prototype), { constructor: Hu, _bindAction: function(t3, e3) {
          var n3 = t3._localRoot || this._root, i3 = t3._clip.tracks, r3 = i3.length, a2 = t3._propertyBindings, o2 = t3._interpolants, s2 = n3.uuid, l2 = this._bindingsByRootAndName, c2 = l2[s2];
          c2 === void 0 && (c2 = {}, l2[s2] = c2);
          for (var u2 = 0; u2 !== r3; ++u2) {
            var h2 = i3[u2], d2 = h2.name, p2 = c2[d2];
            if (p2 !== void 0)
              a2[u2] = p2;
            else {
              if ((p2 = a2[u2]) !== void 0) {
                p2._cacheIndex === null && (++p2.referenceCount, this._addInactiveBinding(p2, s2, d2));
                continue;
              }
              var f2 = e3 && e3._propertyBindings[u2].binding.parsedPath;
              ++(p2 = new Au(zu.create(n3, d2, f2), h2.ValueTypeName, h2.getValueSize())).referenceCount, this._addInactiveBinding(p2, s2, d2), a2[u2] = p2;
            }
            o2[u2].resultBuffer = p2.buffer;
          }
        }, _activateAction: function(t3) {
          if (!this._isActiveAction(t3)) {
            if (t3._cacheIndex === null) {
              var e3 = (t3._localRoot || this._root).uuid, n3 = t3._clip.uuid, i3 = this._actionsByClip[n3];
              this._bindAction(t3, i3 && i3.knownActions[0]), this._addInactiveAction(t3, n3, e3);
            }
            for (var r3 = t3._propertyBindings, a2 = 0, o2 = r3.length; a2 !== o2; ++a2) {
              var s2 = r3[a2];
              s2.useCount++ == 0 && (this._lendBinding(s2), s2.saveOriginalState());
            }
            this._lendAction(t3);
          }
        }, _deactivateAction: function(t3) {
          if (this._isActiveAction(t3)) {
            for (var e3 = t3._propertyBindings, n3 = 0, i3 = e3.length; n3 !== i3; ++n3) {
              var r3 = e3[n3];
              --r3.useCount == 0 && (r3.restoreOriginalState(), this._takeBackBinding(r3));
            }
            this._takeBackAction(t3);
          }
        }, _initMemoryManager: function() {
          this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
          var t3 = this;
          this.stats = { actions: { get total() {
            return t3._actions.length;
          }, get inUse() {
            return t3._nActiveActions;
          } }, bindings: { get total() {
            return t3._bindings.length;
          }, get inUse() {
            return t3._nActiveBindings;
          } }, controlInterpolants: { get total() {
            return t3._controlInterpolants.length;
          }, get inUse() {
            return t3._nActiveControlInterpolants;
          } } };
        }, _isActiveAction: function(t3) {
          var e3 = t3._cacheIndex;
          return e3 !== null && e3 < this._nActiveActions;
        }, _addInactiveAction: function(t3, e3, n3) {
          var i3 = this._actions, r3 = this._actionsByClip, a2 = r3[e3];
          if (a2 === void 0)
            a2 = { knownActions: [t3], actionByRoot: {} }, t3._byClipCacheIndex = 0, r3[e3] = a2;
          else {
            var o2 = a2.knownActions;
            t3._byClipCacheIndex = o2.length, o2.push(t3);
          }
          t3._cacheIndex = i3.length, i3.push(t3), a2.actionByRoot[n3] = t3;
        }, _removeInactiveAction: function(t3) {
          var e3 = this._actions, n3 = e3[e3.length - 1], i3 = t3._cacheIndex;
          e3[n3._cacheIndex = i3] = n3, e3.pop(), t3._cacheIndex = null;
          var r3 = t3._clip.uuid, a2 = this._actionsByClip, o2 = a2[r3], s2 = o2.knownActions, l2 = s2[s2.length - 1], c2 = t3._byClipCacheIndex;
          s2[l2._byClipCacheIndex = c2] = l2, s2.pop(), t3._byClipCacheIndex = null, delete o2.actionByRoot[(t3._localRoot || this._root).uuid], s2.length === 0 && delete a2[r3], this._removeInactiveBindingsForAction(t3);
        }, _removeInactiveBindingsForAction: function(t3) {
          for (var e3 = t3._propertyBindings, n3 = 0, i3 = e3.length; n3 !== i3; ++n3) {
            var r3 = e3[n3];
            --r3.referenceCount == 0 && this._removeInactiveBinding(r3);
          }
        }, _lendAction: function(t3) {
          var e3 = this._actions, n3 = t3._cacheIndex, i3 = this._nActiveActions++, r3 = e3[i3];
          e3[t3._cacheIndex = i3] = t3, e3[r3._cacheIndex = n3] = r3;
        }, _takeBackAction: function(t3) {
          var e3 = this._actions, n3 = t3._cacheIndex, i3 = --this._nActiveActions, r3 = e3[i3];
          e3[t3._cacheIndex = i3] = t3, e3[r3._cacheIndex = n3] = r3;
        }, _addInactiveBinding: function(t3, e3, n3) {
          var i3 = this._bindingsByRootAndName, r3 = i3[e3], a2 = this._bindings;
          r3 === void 0 && (r3 = {}, i3[e3] = r3), (r3[n3] = t3)._cacheIndex = a2.length, a2.push(t3);
        }, _removeInactiveBinding: function(t3) {
          var e3 = this._bindings, n3 = t3.binding, i3 = n3.rootNode.uuid, r3 = n3.path, a2 = this._bindingsByRootAndName, o2 = a2[i3], s2 = e3[e3.length - 1], l2 = t3._cacheIndex;
          e3[s2._cacheIndex = l2] = s2, e3.pop(), delete o2[r3], Object.keys(o2).length === 0 && delete a2[i3];
        }, _lendBinding: function(t3) {
          var e3 = this._bindings, n3 = t3._cacheIndex, i3 = this._nActiveBindings++, r3 = e3[i3];
          e3[t3._cacheIndex = i3] = t3, e3[r3._cacheIndex = n3] = r3;
        }, _takeBackBinding: function(t3) {
          var e3 = this._bindings, n3 = t3._cacheIndex, i3 = --this._nActiveBindings, r3 = e3[i3];
          e3[t3._cacheIndex = i3] = t3, e3[r3._cacheIndex = n3] = r3;
        }, _lendControlInterpolant: function() {
          var t3 = this._controlInterpolants, e3 = this._nActiveControlInterpolants++, n3 = t3[e3];
          return n3 === void 0 && (t3[(n3 = new Vl(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = e3] = n3), n3;
        }, _takeBackControlInterpolant: function(t3) {
          var e3 = this._controlInterpolants, n3 = t3.__cacheIndex, i3 = --this._nActiveControlInterpolants, r3 = e3[i3];
          e3[t3.__cacheIndex = i3] = t3, e3[r3.__cacheIndex = n3] = r3;
        }, _controlInterpolantsResultBuffer: new Float32Array(1), clipAction: function(t3, e3) {
          var n3 = e3 || this._root, i3 = n3.uuid, r3 = typeof t3 == "string" ? Zl.findByName(n3, t3) : t3, a2 = r3 !== null ? r3.uuid : t3, o2 = this._actionsByClip[a2], s2 = null;
          if (o2 !== void 0) {
            var l2 = o2.actionByRoot[i3];
            if (l2 !== void 0)
              return l2;
            s2 = o2.knownActions[0], r3 === null && (r3 = s2._clip);
          }
          if (r3 === null)
            return null;
          var c2 = new Uu(this, r3, e3);
          return this._bindAction(c2, s2), this._addInactiveAction(c2, a2, i3), c2;
        }, existingAction: function(t3, e3) {
          var n3 = e3 || this._root, i3 = n3.uuid, r3 = typeof t3 == "string" ? Zl.findByName(n3, t3) : t3, a2 = r3 ? r3.uuid : t3, o2 = this._actionsByClip[a2];
          return o2 !== void 0 && o2.actionByRoot[i3] || null;
        }, stopAllAction: function() {
          var t3 = this._actions, e3 = this._nActiveActions, n3 = this._bindings, i3 = this._nActiveBindings;
          this._nActiveActions = 0;
          for (var r3 = this._nActiveBindings = 0; r3 !== e3; ++r3)
            t3[r3].reset();
          for (r3 = 0; r3 !== i3; ++r3)
            n3[r3].useCount = 0;
          return this;
        }, update: function(t3) {
          t3 *= this.timeScale;
          for (var e3 = this._actions, n3 = this._nActiveActions, i3 = this.time += t3, r3 = Math.sign(t3), a2 = this._accuIndex ^= 1, o2 = 0; o2 !== n3; ++o2)
            e3[o2]._update(i3, t3, r3, a2);
          var s2 = this._bindings, l2 = this._nActiveBindings;
          for (o2 = 0; o2 !== l2; ++o2)
            s2[o2].apply(a2);
          return this;
        }, setTime: function(t3) {
          for (var e3 = this.time = 0; e3 < this._actions.length; e3++)
            this._actions[e3].time = 0;
          return this.update(t3);
        }, getRoot: function() {
          return this._root;
        }, uncacheClip: function(t3) {
          var e3 = this._actions, n3 = t3.uuid, i3 = this._actionsByClip, r3 = i3[n3];
          if (r3 !== void 0) {
            for (var a2 = r3.knownActions, o2 = 0, s2 = a2.length; o2 !== s2; ++o2) {
              var l2 = a2[o2];
              this._deactivateAction(l2);
              var c2 = l2._cacheIndex, u2 = e3[e3.length - 1];
              l2._cacheIndex = null, l2._byClipCacheIndex = null, e3[u2._cacheIndex = c2] = u2, e3.pop(), this._removeInactiveBindingsForAction(l2);
            }
            delete i3[n3];
          }
        }, uncacheRoot: function(t3) {
          var e3 = t3.uuid, n3 = this._actionsByClip;
          for (var i3 in n3) {
            var r3 = n3[i3].actionByRoot[e3];
            r3 !== void 0 && (this._deactivateAction(r3), this._removeInactiveAction(r3));
          }
          var a2 = this._bindingsByRootAndName[e3];
          if (a2 !== void 0)
            for (var o2 in a2) {
              var s2 = a2[o2];
              s2.restoreOriginalState(), this._removeInactiveBinding(s2);
            }
        }, uncacheAction: function(t3, e3) {
          var n3 = this.existingAction(t3, e3);
          n3 !== null && (this._deactivateAction(n3), this._removeInactiveAction(n3));
        } }), Wu.prototype.clone = function() {
          return new Wu(this.value.clone === void 0 ? this.value : this.value.clone());
        }, Ju.prototype = Object.assign(Object.create(mo.prototype), { constructor: Ju, isInstancedInterleavedBuffer: true, copy: function(t3) {
          return mo.prototype.copy.call(this, t3), this.meshPerAttribute = t3.meshPerAttribute, this;
        } }), Object.assign(qu.prototype, { linePrecision: 1, set: function(t3, e3) {
          this.ray.set(t3, e3);
        }, setFromCamera: function(t3, e3) {
          e3 && e3.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e3.matrixWorld), this.ray.direction.set(t3.x, t3.y, 0.5).unproject(e3).sub(this.ray.origin).normalize(), this.camera = e3) : e3 && e3.isOrthographicCamera ? (this.ray.origin.set(t3.x, t3.y, (e3.near + e3.far) / (e3.near - e3.far)).unproject(e3), this.ray.direction.set(0, 0, -1).transformDirection(e3.matrixWorld), this.camera = e3) : console.error("THREE.Raycaster: Unsupported camera type.");
        }, intersectObject: function(t3, e3, n3) {
          var i3 = n3 || [];
          return Yu(t3, this, i3, e3), i3.sort(Xu), i3;
        }, intersectObjects: function(t3, e3, n3) {
          var i3 = n3 || [];
          if (Array.isArray(t3) === false)
            return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), i3;
          for (var r3 = 0, a2 = t3.length; r3 < a2; r3++)
            Yu(t3[r3], this, i3, e3);
          return i3.sort(Xu), i3;
        } }), Object.assign(Zu.prototype, { set: function(t3, e3, n3) {
          return this.radius = t3, this.phi = e3, this.theta = n3, this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.radius = t3.radius, this.phi = t3.phi, this.theta = t3.theta, this;
        }, makeSafe: function() {
          return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
        }, setFromVector3: function(t3) {
          return this.setFromCartesianCoords(t3.x, t3.y, t3.z);
        }, setFromCartesianCoords: function(t3, e3, n3) {
          return this.radius = Math.sqrt(t3 * t3 + e3 * e3 + n3 * n3), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t3, n3), this.phi = Math.acos(Pe.clamp(e3 / this.radius, -1, 1))), this;
        } }), Object.assign($u.prototype, { set: function(t3, e3, n3) {
          return this.radius = t3, this.theta = e3, this.y = n3, this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.radius = t3.radius, this.theta = t3.theta, this.y = t3.y, this;
        }, setFromVector3: function(t3) {
          return this.setFromCartesianCoords(t3.x, t3.y, t3.z);
        }, setFromCartesianCoords: function(t3, e3, n3) {
          return this.radius = Math.sqrt(t3 * t3 + n3 * n3), this.theta = Math.atan2(t3, n3), this.y = e3, this;
        } });
        var Ku = new Re();
        function Qu(t3, e3) {
          this.min = t3 !== void 0 ? t3 : new Re(1 / 0, 1 / 0), this.max = e3 !== void 0 ? e3 : new Re(-1 / 0, -1 / 0);
        }
        Object.assign(Qu.prototype, { set: function(t3, e3) {
          return this.min.copy(t3), this.max.copy(e3), this;
        }, setFromPoints: function(t3) {
          this.makeEmpty();
          for (var e3 = 0, n3 = t3.length; e3 < n3; e3++)
            this.expandByPoint(t3[e3]);
          return this;
        }, setFromCenterAndSize: function(t3, e3) {
          var n3 = Ku.copy(e3).multiplyScalar(0.5);
          return this.min.copy(t3).sub(n3), this.max.copy(t3).add(n3), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.min.copy(t3.min), this.max.copy(t3.max), this;
        }, makeEmpty: function() {
          return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
        }, isEmpty: function() {
          return this.max.x < this.min.x || this.max.y < this.min.y;
        }, getCenter: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Box2: .getCenter() target is now required"), t3 = new Re()), this.isEmpty() ? t3.set(0, 0) : t3.addVectors(this.min, this.max).multiplyScalar(0.5);
        }, getSize: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Box2: .getSize() target is now required"), t3 = new Re()), this.isEmpty() ? t3.set(0, 0) : t3.subVectors(this.max, this.min);
        }, expandByPoint: function(t3) {
          return this.min.min(t3), this.max.max(t3), this;
        }, expandByVector: function(t3) {
          return this.min.sub(t3), this.max.add(t3), this;
        }, expandByScalar: function(t3) {
          return this.min.addScalar(-t3), this.max.addScalar(t3), this;
        }, containsPoint: function(t3) {
          return !(t3.x < this.min.x || t3.x > this.max.x || t3.y < this.min.y || t3.y > this.max.y);
        }, containsBox: function(t3) {
          return this.min.x <= t3.min.x && t3.max.x <= this.max.x && this.min.y <= t3.min.y && t3.max.y <= this.max.y;
        }, getParameter: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Box2: .getParameter() target is now required"), e3 = new Re()), e3.set((t3.x - this.min.x) / (this.max.x - this.min.x), (t3.y - this.min.y) / (this.max.y - this.min.y));
        }, intersectsBox: function(t3) {
          return !(t3.max.x < this.min.x || t3.min.x > this.max.x || t3.max.y < this.min.y || t3.min.y > this.max.y);
        }, clampPoint: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Box2: .clampPoint() target is now required"), e3 = new Re()), e3.copy(t3).clamp(this.min, this.max);
        }, distanceToPoint: function(t3) {
          return Ku.copy(t3).clamp(this.min, this.max).sub(t3).length();
        }, intersect: function(t3) {
          return this.min.max(t3.min), this.max.min(t3.max), this;
        }, union: function(t3) {
          return this.min.min(t3.min), this.max.max(t3.max), this;
        }, translate: function(t3) {
          return this.min.add(t3), this.max.add(t3), this;
        }, equals: function(t3) {
          return t3.min.equals(this.min) && t3.max.equals(this.max);
        } });
        var th = new We(), eh = new We();
        function nh(t3, e3) {
          this.start = t3 !== void 0 ? t3 : new We(), this.end = e3 !== void 0 ? e3 : new We();
        }
        function ih(t3) {
          yn.call(this), this.material = t3, this.render = function() {
          };
        }
        Object.assign(nh.prototype, { set: function(t3, e3) {
          return this.start.copy(t3), this.end.copy(e3), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(t3) {
          return this.start.copy(t3.start), this.end.copy(t3.end), this;
        }, getCenter: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Line3: .getCenter() target is now required"), t3 = new We()), t3.addVectors(this.start, this.end).multiplyScalar(0.5);
        }, delta: function(t3) {
          return t3 === void 0 && (console.warn("THREE.Line3: .delta() target is now required"), t3 = new We()), t3.subVectors(this.end, this.start);
        }, distanceSq: function() {
          return this.start.distanceToSquared(this.end);
        }, distance: function() {
          return this.start.distanceTo(this.end);
        }, at: function(t3, e3) {
          return e3 === void 0 && (console.warn("THREE.Line3: .at() target is now required"), e3 = new We()), this.delta(e3).multiplyScalar(t3).add(this.start);
        }, closestPointToPointParameter: function(t3, e3) {
          th.subVectors(t3, this.start), eh.subVectors(this.end, this.start);
          var n3 = eh.dot(eh), i3 = eh.dot(th) / n3;
          return e3 && (i3 = Pe.clamp(i3, 0, 1)), i3;
        }, closestPointToPoint: function(t3, e3, n3) {
          var i3 = this.closestPointToPointParameter(t3, e3);
          return n3 === void 0 && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), n3 = new We()), this.delta(n3).multiplyScalar(i3).add(this.start);
        }, applyMatrix4: function(t3) {
          return this.start.applyMatrix4(t3), this.end.applyMatrix4(t3), this;
        }, equals: function(t3) {
          return t3.start.equals(this.start) && t3.end.equals(this.end);
        } }), ((ih.prototype = Object.create(yn.prototype)).constructor = ih).prototype.isImmediateRenderObject = true;
        var rh = new We();
        function ah(t3, e3) {
          yn.call(this), this.light = t3, this.light.updateMatrixWorld(), this.matrix = t3.matrixWorld, this.matrixAutoUpdate = false, this.color = e3;
          for (var n3 = new Ni(), i3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], r3 = 0, a2 = 1; r3 < 32; r3++, a2++) {
            var o2 = r3 / 32 * Math.PI * 2, s2 = a2 / 32 * Math.PI * 2;
            i3.push(Math.cos(o2), Math.sin(o2), 1, Math.cos(s2), Math.sin(s2), 1);
          }
          n3.setAttribute("position", new Ti(i3, 3));
          var l2 = new qo({ fog: false });
          this.cone = new ns(n3, l2), this.add(this.cone), this.update();
        }
        ((ah.prototype = Object.create(yn.prototype)).constructor = ah).prototype.dispose = function() {
          this.cone.geometry.dispose(), this.cone.material.dispose();
        }, ah.prototype.update = function() {
          this.light.updateMatrixWorld();
          var t3 = this.light.distance ? this.light.distance : 1e3, e3 = t3 * Math.tan(this.light.angle);
          this.cone.scale.set(e3, e3, t3), rh.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(rh), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
        };
        var oh = new We(), sh = new Qe(), lh = new Qe();
        function ch(t3) {
          for (var e3 = function t4(e4) {
            var n4 = [];
            e4 && e4.isBone && n4.push(e4);
            for (var i4 = 0; i4 < e4.children.length; i4++)
              n4.push.apply(n4, t4(e4.children[i4]));
            return n4;
          }(t3), n3 = new Ni(), i3 = [], r3 = [], a2 = new ci(0, 0, 1), o2 = new ci(0, 1, 0), s2 = 0; s2 < e3.length; s2++) {
            var l2 = e3[s2];
            l2.parent && l2.parent.isBone && (i3.push(0, 0, 0), i3.push(0, 0, 0), r3.push(a2.r, a2.g, a2.b), r3.push(o2.r, o2.g, o2.b));
          }
          n3.setAttribute("position", new Ti(i3, 3)), n3.setAttribute("color", new Ti(r3, 3));
          var c2 = new qo({ vertexColors: h, depthTest: false, depthWrite: false, transparent: true });
          ns.call(this, n3, c2), this.root = t3, this.bones = e3, this.matrix = t3.matrixWorld, this.matrixAutoUpdate = false;
        }
        function uh(t3, e3, n3) {
          this.light = t3, this.light.updateMatrixWorld(), this.color = n3;
          var i3 = new ul(e3, 4, 2), r3 = new gi({ wireframe: true, fog: false });
          er.call(this, i3, r3), this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = false, this.update();
        }
        ((ch.prototype = Object.create(ns.prototype)).constructor = ch).prototype.updateMatrixWorld = function(t3) {
          var e3 = this.bones, n3 = this.geometry, i3 = n3.getAttribute("position");
          lh.getInverse(this.root.matrixWorld);
          for (var r3 = 0, a2 = 0; r3 < e3.length; r3++) {
            var o2 = e3[r3];
            o2.parent && o2.parent.isBone && (sh.multiplyMatrices(lh, o2.matrixWorld), oh.setFromMatrixPosition(sh), i3.setXYZ(a2, oh.x, oh.y, oh.z), sh.multiplyMatrices(lh, o2.parent.matrixWorld), oh.setFromMatrixPosition(sh), i3.setXYZ(a2 + 1, oh.x, oh.y, oh.z), a2 += 2);
          }
          n3.getAttribute("position").needsUpdate = true, yn.prototype.updateMatrixWorld.call(this, t3);
        }, ((uh.prototype = Object.create(er.prototype)).constructor = uh).prototype.dispose = function() {
          this.geometry.dispose(), this.material.dispose();
        }, uh.prototype.update = function() {
          this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
        };
        var hh = new We(), dh = new ci(), ph = new ci();
        function fh(t3, e3, n3) {
          yn.call(this), this.light = t3, this.light.updateMatrixWorld(), this.matrix = t3.matrixWorld, this.matrixAutoUpdate = false, this.color = n3;
          var i3 = new _s(e3);
          i3.rotateY(0.5 * Math.PI), this.material = new gi({ wireframe: true, fog: false }), this.color === void 0 && (this.material.vertexColors = h);
          var r3 = i3.getAttribute("position"), a2 = new Float32Array(3 * r3.count);
          i3.setAttribute("color", new yi(a2, 3)), this.add(new er(i3, this.material)), this.update();
        }
        function mh(t3, e3, n3, i3) {
          t3 = t3 || 10, e3 = e3 || 10, n3 = new ci(n3 !== void 0 ? n3 : 4473924), i3 = new ci(i3 !== void 0 ? i3 : 8947848);
          for (var r3 = e3 / 2, a2 = t3 / e3, o2 = t3 / 2, s2 = [], l2 = [], c2 = 0, u2 = 0, d2 = -o2; c2 <= e3; c2++, d2 += a2) {
            s2.push(-o2, 0, d2, o2, 0, d2), s2.push(d2, 0, -o2, d2, 0, o2);
            var p2 = c2 === r3 ? n3 : i3;
            p2.toArray(l2, u2), u2 += 3, p2.toArray(l2, u2), u2 += 3, p2.toArray(l2, u2), u2 += 3, p2.toArray(l2, u2), u2 += 3;
          }
          var f2 = new Ni();
          f2.setAttribute("position", new Ti(s2, 3)), f2.setAttribute("color", new Ti(l2, 3));
          var m2 = new qo({ vertexColors: h });
          ns.call(this, f2, m2);
        }
        function gh(t3, e3, n3, i3, r3, a2) {
          t3 = t3 || 10, e3 = e3 || 16, n3 = n3 || 8, i3 = i3 || 64, r3 = new ci(r3 !== void 0 ? r3 : 4473924), a2 = new ci(a2 !== void 0 ? a2 : 8947848);
          var o2, s2, l2, c2, u2, d2, p2, f2 = [], m2 = [];
          for (c2 = 0; c2 <= e3; c2++)
            l2 = c2 / e3 * (2 * Math.PI), o2 = Math.sin(l2) * t3, s2 = Math.cos(l2) * t3, f2.push(0, 0, 0), f2.push(o2, 0, s2), p2 = 1 & c2 ? r3 : a2, m2.push(p2.r, p2.g, p2.b), m2.push(p2.r, p2.g, p2.b);
          for (c2 = 0; c2 <= n3; c2++)
            for (p2 = 1 & c2 ? r3 : a2, d2 = t3 - t3 / n3 * c2, u2 = 0; u2 < i3; u2++)
              l2 = u2 / i3 * (2 * Math.PI), o2 = Math.sin(l2) * d2, s2 = Math.cos(l2) * d2, f2.push(o2, 0, s2), m2.push(p2.r, p2.g, p2.b), l2 = (u2 + 1) / i3 * (2 * Math.PI), o2 = Math.sin(l2) * d2, s2 = Math.cos(l2) * d2, f2.push(o2, 0, s2), m2.push(p2.r, p2.g, p2.b);
          var g2 = new Ni();
          g2.setAttribute("position", new Ti(f2, 3)), g2.setAttribute("color", new Ti(m2, 3));
          var v2 = new qo({ vertexColors: h });
          ns.call(this, g2, v2);
        }
        ((fh.prototype = Object.create(yn.prototype)).constructor = fh).prototype.dispose = function() {
          this.children[0].geometry.dispose(), this.children[0].material.dispose();
        }, fh.prototype.update = function() {
          var t3 = this.children[0];
          if (this.color !== void 0)
            this.material.color.set(this.color);
          else {
            var e3 = t3.geometry.getAttribute("color");
            dh.copy(this.light.color), ph.copy(this.light.groundColor);
            for (var n3 = 0, i3 = e3.count; n3 < i3; n3++) {
              var r3 = n3 < i3 / 2 ? dh : ph;
              e3.setXYZ(n3, r3.r, r3.g, r3.b);
            }
            e3.needsUpdate = true;
          }
          t3.lookAt(hh.setFromMatrixPosition(this.light.matrixWorld).negate());
        }, mh.prototype = Object.assign(Object.create(ns.prototype), { constructor: mh, copy: function(t3) {
          return ns.prototype.copy.call(this, t3), this.geometry.copy(t3.geometry), this.material.copy(t3.material), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        } }), (gh.prototype = Object.create(ns.prototype)).constructor = gh;
        var vh = new We(), yh = new We(), xh = new We();
        function bh(t3, e3, n3) {
          yn.call(this), this.light = t3, this.light.updateMatrixWorld(), this.matrix = t3.matrixWorld, this.matrixAutoUpdate = false, this.color = n3, e3 === void 0 && (e3 = 1);
          var i3 = new Ni();
          i3.setAttribute("position", new Ti([-e3, e3, 0, e3, e3, 0, e3, -e3, 0, -e3, -e3, 0, -e3, e3, 0], 3));
          var r3 = new qo({ fog: false });
          this.lightPlane = new Qo(i3, r3), this.add(this.lightPlane), (i3 = new Ni()).setAttribute("position", new Ti([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Qo(i3, r3), this.add(this.targetLine), this.update();
        }
        ((bh.prototype = Object.create(yn.prototype)).constructor = bh).prototype.dispose = function() {
          this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
        }, bh.prototype.update = function() {
          vh.setFromMatrixPosition(this.light.matrixWorld), yh.setFromMatrixPosition(this.light.target.matrixWorld), xh.subVectors(yh, vh), this.lightPlane.lookAt(yh), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(yh), this.targetLine.scale.z = xh.length();
        };
        var wh = new We(), Mh = new vr();
        function _h(t3) {
          var e3 = new Ni(), n3 = new qo({ color: 16777215, vertexColors: 1 }), i3 = [], r3 = [], a2 = {}, o2 = new ci(16755200), s2 = new ci(16711680), l2 = new ci(43775), c2 = new ci(16777215), u2 = new ci(3355443);
          function h2(t4, e4, n4) {
            d2(t4, n4), d2(e4, n4);
          }
          function d2(t4, e4) {
            i3.push(0, 0, 0), r3.push(e4.r, e4.g, e4.b), a2[t4] === void 0 && (a2[t4] = []), a2[t4].push(i3.length / 3 - 1);
          }
          h2("n1", "n2", o2), h2("n2", "n4", o2), h2("n4", "n3", o2), h2("n3", "n1", o2), h2("f1", "f2", o2), h2("f2", "f4", o2), h2("f4", "f3", o2), h2("f3", "f1", o2), h2("n1", "f1", o2), h2("n2", "f2", o2), h2("n3", "f3", o2), h2("n4", "f4", o2), h2("p", "n1", s2), h2("p", "n2", s2), h2("p", "n3", s2), h2("p", "n4", s2), h2("u1", "u2", l2), h2("u2", "u3", l2), h2("u3", "u1", l2), h2("c", "t", c2), h2("p", "c", u2), h2("cn1", "cn2", u2), h2("cn3", "cn4", u2), h2("cf1", "cf2", u2), h2("cf3", "cf4", u2), e3.setAttribute("position", new Ti(i3, 3)), e3.setAttribute("color", new Ti(r3, 3)), ns.call(this, e3, n3), this.camera = t3, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = t3.matrixWorld, this.matrixAutoUpdate = false, this.pointMap = a2, this.update();
        }
        function Sh(t3, e3, n3, i3, r3, a2, o2) {
          wh.set(r3, a2, o2).unproject(i3);
          var s2 = e3[t3];
          if (s2 !== void 0)
            for (var l2 = n3.getAttribute("position"), c2 = 0, u2 = s2.length; c2 < u2; c2++)
              l2.setXYZ(s2[c2], wh.x, wh.y, wh.z);
        }
        ((_h.prototype = Object.create(ns.prototype)).constructor = _h).prototype.update = function() {
          var t3 = this.geometry, e3 = this.pointMap;
          Mh.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), Sh("c", e3, t3, Mh, 0, 0, -1), Sh("t", e3, t3, Mh, 0, 0, 1), Sh("n1", e3, t3, Mh, -1, -1, -1), Sh("n2", e3, t3, Mh, 1, -1, -1), Sh("n3", e3, t3, Mh, -1, 1, -1), Sh("n4", e3, t3, Mh, 1, 1, -1), Sh("f1", e3, t3, Mh, -1, -1, 1), Sh("f2", e3, t3, Mh, 1, -1, 1), Sh("f3", e3, t3, Mh, -1, 1, 1), Sh("f4", e3, t3, Mh, 1, 1, 1), Sh("u1", e3, t3, Mh, 0.7, 1.1, -1), Sh("u2", e3, t3, Mh, -0.7, 1.1, -1), Sh("u3", e3, t3, Mh, 0, 2, -1), Sh("cf1", e3, t3, Mh, -1, 0, 1), Sh("cf2", e3, t3, Mh, 1, 0, 1), Sh("cf3", e3, t3, Mh, 0, -1, 1), Sh("cf4", e3, t3, Mh, 0, 1, 1), Sh("cn1", e3, t3, Mh, -1, 0, -1), Sh("cn2", e3, t3, Mh, 1, 0, -1), Sh("cn3", e3, t3, Mh, 0, -1, -1), Sh("cn4", e3, t3, Mh, 0, 1, -1), t3.getAttribute("position").needsUpdate = true;
        };
        var Ch = new Pn();
        function Th(t3, e3) {
          this.object = t3, e3 === void 0 && (e3 = 16776960);
          var n3 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i3 = new Float32Array(24), r3 = new Ni();
          r3.setIndex(new yi(n3, 1)), r3.setAttribute("position", new yi(i3, 3)), ns.call(this, r3, new qo({ color: e3 })), this.matrixAutoUpdate = false, this.update();
        }
        function Eh(t3, e3) {
          this.type = "Box3Helper", this.box = t3, e3 = e3 || 16776960;
          var n3 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i3 = new Ni();
          i3.setIndex(new yi(n3, 1)), i3.setAttribute("position", new Ti([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3)), ns.call(this, i3, new qo({ color: e3 })), this.geometry.computeBoundingSphere();
        }
        function Dh(t3, e3, n3) {
          this.type = "PlaneHelper", this.plane = t3, this.size = e3 === void 0 ? 1 : e3;
          var i3 = n3 !== void 0 ? n3 : 16776960, r3 = new Ni();
          r3.setAttribute("position", new Ti([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3)), r3.computeBoundingSphere(), Qo.call(this, r3, new qo({ color: i3 }));
          var a2 = new Ni();
          a2.setAttribute("position", new Ti([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)), a2.computeBoundingSphere(), this.add(new er(a2, new gi({ color: i3, opacity: 0.2, transparent: true, depthWrite: false })));
        }
        ((Th.prototype = Object.create(ns.prototype)).constructor = Th).prototype.update = function(t3) {
          if (t3 !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && Ch.setFromObject(this.object), !Ch.isEmpty()) {
            var e3 = Ch.min, n3 = Ch.max, i3 = this.geometry.attributes.position, r3 = i3.array;
            r3[0] = n3.x, r3[1] = n3.y, r3[2] = n3.z, r3[3] = e3.x, r3[4] = n3.y, r3[5] = n3.z, r3[6] = e3.x, r3[7] = e3.y, r3[8] = n3.z, r3[9] = n3.x, r3[10] = e3.y, r3[11] = n3.z, r3[12] = n3.x, r3[13] = n3.y, r3[14] = e3.z, r3[15] = e3.x, r3[16] = n3.y, r3[17] = e3.z, r3[18] = e3.x, r3[19] = e3.y, r3[20] = e3.z, r3[21] = n3.x, r3[22] = e3.y, r3[23] = e3.z, i3.needsUpdate = true, this.geometry.computeBoundingSphere();
          }
        }, Th.prototype.setFromObject = function(t3) {
          return this.object = t3, this.update(), this;
        }, Th.prototype.copy = function(t3) {
          return ns.prototype.copy.call(this, t3), this.object = t3.object, this;
        }, Th.prototype.clone = function() {
          return new this.constructor().copy(this);
        }, ((Eh.prototype = Object.create(ns.prototype)).constructor = Eh).prototype.updateMatrixWorld = function(t3) {
          var e3 = this.box;
          e3.isEmpty() || (e3.getCenter(this.position), e3.getSize(this.scale), this.scale.multiplyScalar(0.5), yn.prototype.updateMatrixWorld.call(this, t3));
        }, ((Dh.prototype = Object.create(Qo.prototype)).constructor = Dh).prototype.updateMatrixWorld = function(t3) {
          var e3 = -this.plane.constant;
          Math.abs(e3) < 1e-8 && (e3 = 1e-8), this.scale.set(0.5 * this.size, 0.5 * this.size, e3), this.children[0].material.side = e3 < 0 ? l : s, this.lookAt(this.plane.normal), yn.prototype.updateMatrixWorld.call(this, t3);
        };
        var Ah, Oh, Lh = new We();
        function Ih(t3, e3, n3, i3, r3, a2) {
          yn.call(this), t3 === void 0 && (t3 = new We(0, 0, 1)), e3 === void 0 && (e3 = new We(0, 0, 0)), n3 === void 0 && (n3 = 1), i3 === void 0 && (i3 = 16776960), r3 === void 0 && (r3 = 0.2 * n3), a2 === void 0 && (a2 = 0.2 * r3), Ah === void 0 && ((Ah = new Ni()).setAttribute("position", new Ti([0, 0, 0, 0, 1, 0], 3)), (Oh = new bl(0, 0.5, 1, 5, 1)).translate(0, -0.5, 0)), this.position.copy(e3), this.line = new Qo(Ah, new qo({ color: i3 })), this.line.matrixAutoUpdate = false, this.add(this.line), this.cone = new er(Oh, new gi({ color: i3 })), this.cone.matrixAutoUpdate = false, this.add(this.cone), this.setDirection(t3), this.setLength(n3, r3, a2);
        }
        function Ph(t3) {
          var e3 = [0, 0, 0, t3 = t3 || 1, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, t3], n3 = new Ni();
          n3.setAttribute("position", new Ti(e3, 3)), n3.setAttribute("color", new Ti([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1], 3));
          var i3 = new qo({ vertexColors: h });
          ns.call(this, n3, i3);
        }
        ((Ih.prototype = Object.create(yn.prototype)).constructor = Ih).prototype.setDirection = function(t3) {
          if (0.99999 < t3.y)
            this.quaternion.set(0, 0, 0, 1);
          else if (t3.y < -0.99999)
            this.quaternion.set(1, 0, 0, 0);
          else {
            Lh.set(t3.z, 0, -t3.x).normalize();
            var e3 = Math.acos(t3.y);
            this.quaternion.setFromAxisAngle(Lh, e3);
          }
        }, Ih.prototype.setLength = function(t3, e3, n3) {
          e3 === void 0 && (e3 = 0.2 * t3), n3 === void 0 && (n3 = 0.2 * e3), this.line.scale.set(1, Math.max(1e-4, t3 - e3), 1), this.line.updateMatrix(), this.cone.scale.set(n3, e3, n3), this.cone.position.y = t3, this.cone.updateMatrix();
        }, Ih.prototype.setColor = function(t3) {
          this.line.material.color.set(t3), this.cone.material.color.set(t3);
        }, Ih.prototype.copy = function(t3) {
          return yn.prototype.copy.call(this, t3, false), this.line.copy(t3.line), this.cone.copy(t3.cone), this;
        }, Ih.prototype.clone = function() {
          return new this.constructor().copy(this);
        }, (Ph.prototype = Object.create(ns.prototype)).constructor = Ph;
        var Rh = 4, kh = 8, Bh = Math.pow(2, kh), Nh = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], Fh = kh - Rh + 1 + Nh.length, jh = 20, Vh = {};
        Vh[pe] = 0, Vh[fe] = 1, Vh[ge] = 2, Vh[ye] = 3, Vh[xe] = 4, Vh[be] = 5, Vh[me] = 6;
        var zh, Gh, Uh = new Vc(), Hh = ((Gh = new El({ defines: { n: zh = jh }, uniforms: { envMap: { value: null }, samples: { value: 1 }, weights: { value: new Float32Array(zh) }, latitudinal: { value: false }, dTheta: { value: 0 }, mipInt: { value: 0 }, poleAxis: { value: new We(0, 1, 0) }, inputEncoding: { value: Vh[pe] }, outputEncoding: { value: Vh[pe] } }, vertexShader: "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n	uv = 2.0 * uv - 1.0;\n	vec3 direction = vec3(uv, 1.0);\n	if (face == 0.0) {\n		direction = direction.zyx;\n		direction.z *= -1.0;\n	} else if (face == 1.0) {\n		direction = direction.xzy;\n		direction.z *= -1.0;\n	} else if (face == 3.0) {\n		direction = direction.zyx;\n		direction.x *= -1.0;\n	} else if (face == 4.0) {\n		direction = direction.xzy;\n		direction.y *= -1.0;\n	} else if (face == 5.0) {\n		direction.xz *= -1.0;\n	}\n	return direction;\n}\nvoid main() {\n	vOutputDirection = getDirection(uv, faceIndex);\n	gl_Position = vec4( position, 1.0 );\n}\n	", fragmentShader: "\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n	if(inputEncoding == 0){\n		return value;\n	}else if(inputEncoding == 1){\n		return sRGBToLinear(value);\n	}else if(inputEncoding == 2){\n		return RGBEToLinear(value);\n	}else if(inputEncoding == 3){\n		return RGBMToLinear(value, 7.0);\n	}else if(inputEncoding == 4){\n		return RGBMToLinear(value, 16.0);\n	}else if(inputEncoding == 5){\n		return RGBDToLinear(value, 256.0);\n	}else{\n		return GammaToLinear(value, 2.2);\n	}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n	if(outputEncoding == 0){\n		return value;\n	}else if(outputEncoding == 1){\n		return LinearTosRGB(value);\n	}else if(outputEncoding == 2){\n		return LinearToRGBE(value);\n	}else if(outputEncoding == 3){\n		return LinearToRGBM(value, 7.0);\n	}else if(outputEncoding == 4){\n		return LinearToRGBM(value, 16.0);\n	}else if(outputEncoding == 5){\n		return LinearToRGBD(value, 256.0);\n	}else{\n		return LinearToGamma(value, 2.2);\n	}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n	return inputTexelToLinear(color);\n}\n	\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n	gl_FragColor = vec4(0.0);\n	for (int i = 0; i < n; i++) {\n		if (i >= samples)\n			break;\n		for (int dir = -1; dir < 2; dir += 2) {\n			if (i == 0 && dir == 1)\n				continue;\n			vec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n			if (all(equal(axis, vec3(0.0))))\n				axis = cross(vec3(0.0, 1.0, 0.0), vOutputDirection);\n			axis = normalize(axis);\n			float theta = dTheta * float(dir * i);\n			float cosTheta = cos(theta);\n			// Rodrigues' axis-angle rotation\n			vec3 sampleDirection = vOutputDirection * cosTheta\n					+ cross(axis, vOutputDirection) * sin(theta)\n					+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n			gl_FragColor.rgb +=\n					weights[i] * bilinearCubeUV(envMap, sampleDirection, mipInt);\n		}\n	}\n	gl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n		", blending: d, depthTest: false, depthWrite: false })).type = "SphericalGaussianBlur", Gh), Wh = null, Jh = null, qh = function() {
          for (var t3 = [], e3 = [], n3 = [], i3 = kh, r3 = 0; r3 < Fh; r3++) {
            var a2 = Math.pow(2, i3);
            e3.push(a2);
            var o2 = 1 / a2;
            kh - Rh < r3 ? o2 = Nh[r3 - kh + Rh - 1] : r3 == 0 && (o2 = 0), n3.push(o2);
            for (var s2 = 1 / (a2 - 1), l2 = -s2 / 2, c2 = 1 + s2 / 2, u2 = [l2, l2, c2, l2, c2, c2, l2, l2, c2, c2, l2, c2], h2 = new Float32Array(108), d2 = new Float32Array(72), p2 = new Float32Array(36), f2 = 0; f2 < 6; f2++) {
              var m2 = f2 % 3 * 2 / 3 - 1, g2 = 2 < f2 ? 0 : -1, v2 = [m2, g2, 0, m2 + 2 / 3, g2, 0, m2 + 2 / 3, 1 + g2, 0, m2, g2, 0, m2 + 2 / 3, 1 + g2, 0, m2, 1 + g2, 0];
              h2.set(v2, 18 * f2), d2.set(u2, 12 * f2);
              var y2 = [f2, f2, f2, f2, f2, f2];
              p2.set(y2, 6 * f2);
            }
            var x2 = new Ni();
            x2.setAttribute("position", new yi(h2, 3)), x2.setAttribute("uv", new yi(d2, 2)), x2.setAttribute("faceIndex", new yi(p2, 1)), t3.push(x2), Rh < i3 && i3--;
          }
          return { _lodPlanes: t3, _sizeLods: e3, _sigmas: n3 };
        }(), Xh = qh._lodPlanes, Yh = qh._sizeLods, Zh = qh._sigmas, $h = null, Kh = null, Qh = null, td = (1 + Math.sqrt(5)) / 2, ed = 1 / td, nd = [new We(1, 1, 1), new We(-1, 1, 1), new We(1, 1, -1), new We(-1, 1, -1), new We(0, td, ed), new We(0, td, -ed), new We(ed, 0, td), new We(-ed, 0, td), new We(td, ed, 0), new We(-td, ed, 0)];
        function id(t3) {
          Kh = t3, od(Hh);
        }
        function rd(t3) {
          var e3 = { magFilter: st, minFilter: st, generateMipmaps: false, type: t3 ? t3.type : pt, format: t3 ? t3.format : Ot, encoding: t3 ? t3.encoding : ge, depthBuffer: false, stencilBuffer: false }, n3 = sd(e3);
          return n3.depthBuffer = !t3, $h = sd(e3), n3;
        }
        function ad(t3) {
          $h.dispose(), Kh.setRenderTarget(Qh), t3.scissorTest = false, t3.setSize(t3.width, t3.height);
        }
        function od(t3) {
          var e3 = new xn();
          e3.add(new er(Xh[0], t3)), Kh.compile(e3, Uh);
        }
        function sd(t3) {
          var e3 = new Ve(3 * Bh, 3 * Bh, t3);
          return e3.texture.mapping = nt, e3.texture.name = "PMREM.cubeUv", e3.scissorTest = true, e3;
        }
        function ld(t3, e3, n3, i3, r3) {
          t3.viewport.set(e3, n3, i3, r3), t3.scissor.set(e3, n3, i3, r3);
        }
        function cd(t3) {
          var e3 = Kh.autoClear;
          Kh.autoClear = false;
          for (var n3 = 1; n3 < Fh; n3++)
            ud(t3, n3 - 1, n3, Math.sqrt(Zh[n3] * Zh[n3] - Zh[n3 - 1] * Zh[n3 - 1]), nd[(n3 - 1) % nd.length]);
          Kh.autoClear = e3;
        }
        function ud(t3, e3, n3, i3, r3) {
          hd(t3, $h, e3, n3, i3, "latitudinal", r3), hd($h, t3, n3, n3, i3, "longitudinal", r3);
        }
        function hd(t3, e3, n3, i3, r3, a2, o2) {
          a2 !== "latitudinal" && a2 !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
          var s2 = new xn();
          s2.add(new er(Xh[i3], Hh));
          var l2 = Hh.uniforms, c2 = Yh[n3] - 1, u2 = isFinite(r3) ? Math.PI / (2 * c2) : 2 * Math.PI / (2 * jh - 1), h2 = r3 / u2, d2 = isFinite(r3) ? 1 + Math.floor(3 * h2) : jh;
          jh < d2 && console.warn("sigmaRadians, " + r3 + ", is too large and will clip, as it requested " + d2 + " samples when the maximum is set to " + jh);
          for (var p2 = [], f2 = 0, m2 = 0; m2 < jh; ++m2) {
            var g2 = m2 / h2, v2 = Math.exp(-g2 * g2 / 2);
            p2.push(v2), m2 == 0 ? f2 += v2 : m2 < d2 && (f2 += 2 * v2);
          }
          for (m2 = 0; m2 < p2.length; m2++)
            p2[m2] = p2[m2] / f2;
          l2.envMap.value = t3.texture, l2.samples.value = d2, l2.weights.value = p2, l2.latitudinal.value = a2 === "latitudinal", o2 && (l2.poleAxis.value = o2), l2.dTheta.value = u2, l2.mipInt.value = kh - n3, l2.inputEncoding.value = Vh[t3.texture.encoding], l2.outputEncoding.value = Vh[t3.texture.encoding];
          var y2 = Yh[i3];
          ld(e3, g2 = 3 * Math.max(0, Bh - 2 * y2), (i3 === 0 ? 0 : 2 * Bh) + 2 * y2 * (kh - Rh < i3 ? i3 - kh + Rh : 0), 3 * y2, 2 * y2), Kh.setRenderTarget(e3), Kh.render(s2, Uh);
        }
        function dd() {
          var t3 = new El({ uniforms: { envMap: { value: null }, texelSize: { value: new Re(1, 1) }, inputEncoding: { value: Vh[pe] }, outputEncoding: { value: Vh[pe] } }, vertexShader: "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n	uv = 2.0 * uv - 1.0;\n	vec3 direction = vec3(uv, 1.0);\n	if (face == 0.0) {\n		direction = direction.zyx;\n		direction.z *= -1.0;\n	} else if (face == 1.0) {\n		direction = direction.xzy;\n		direction.z *= -1.0;\n	} else if (face == 3.0) {\n		direction = direction.zyx;\n		direction.x *= -1.0;\n	} else if (face == 4.0) {\n		direction = direction.xzy;\n		direction.y *= -1.0;\n	} else if (face == 5.0) {\n		direction.xz *= -1.0;\n	}\n	return direction;\n}\nvoid main() {\n	vOutputDirection = getDirection(uv, faceIndex);\n	gl_Position = vec4( position, 1.0 );\n}\n	", fragmentShader: "\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n	if(inputEncoding == 0){\n		return value;\n	}else if(inputEncoding == 1){\n		return sRGBToLinear(value);\n	}else if(inputEncoding == 2){\n		return RGBEToLinear(value);\n	}else if(inputEncoding == 3){\n		return RGBMToLinear(value, 7.0);\n	}else if(inputEncoding == 4){\n		return RGBMToLinear(value, 16.0);\n	}else if(inputEncoding == 5){\n		return RGBDToLinear(value, 256.0);\n	}else{\n		return GammaToLinear(value, 2.2);\n	}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n	if(outputEncoding == 0){\n		return value;\n	}else if(outputEncoding == 1){\n		return LinearTosRGB(value);\n	}else if(outputEncoding == 2){\n		return LinearToRGBE(value);\n	}else if(outputEncoding == 3){\n		return LinearToRGBM(value, 7.0);\n	}else if(outputEncoding == 4){\n		return LinearToRGBM(value, 16.0);\n	}else if(outputEncoding == 5){\n		return LinearToRGBD(value, 256.0);\n	}else{\n		return LinearToGamma(value, 2.2);\n	}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n	return inputTexelToLinear(color);\n}\n	\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n	gl_FragColor = vec4(0.0);\n	vec3 outputDirection = normalize(vOutputDirection);\n	vec2 uv;\n	uv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n	uv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n	vec2 f = fract(uv / texelSize - 0.5);\n	uv -= f * texelSize;\n	vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n	uv.x += texelSize.x;\n	vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n	uv.y += texelSize.y;\n	vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n	uv.x -= texelSize.x;\n	vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n	vec3 tm = mix(tl, tr, f.x);\n	vec3 bm = mix(bl, br, f.x);\n	gl_FragColor.rgb = mix(tm, bm, f.y);\n	gl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n		", blending: d, depthTest: false, depthWrite: false });
          return t3.type = "EquirectangularToCubeUV", t3;
        }
        function pd() {
          var t3 = new El({ uniforms: { envMap: { value: null }, inputEncoding: { value: Vh[pe] }, outputEncoding: { value: Vh[pe] } }, vertexShader: "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n	uv = 2.0 * uv - 1.0;\n	vec3 direction = vec3(uv, 1.0);\n	if (face == 0.0) {\n		direction = direction.zyx;\n		direction.z *= -1.0;\n	} else if (face == 1.0) {\n		direction = direction.xzy;\n		direction.z *= -1.0;\n	} else if (face == 3.0) {\n		direction = direction.zyx;\n		direction.x *= -1.0;\n	} else if (face == 4.0) {\n		direction = direction.xzy;\n		direction.y *= -1.0;\n	} else if (face == 5.0) {\n		direction.xz *= -1.0;\n	}\n	return direction;\n}\nvoid main() {\n	vOutputDirection = getDirection(uv, faceIndex);\n	gl_Position = vec4( position, 1.0 );\n}\n	", fragmentShader: "\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n	if(inputEncoding == 0){\n		return value;\n	}else if(inputEncoding == 1){\n		return sRGBToLinear(value);\n	}else if(inputEncoding == 2){\n		return RGBEToLinear(value);\n	}else if(inputEncoding == 3){\n		return RGBMToLinear(value, 7.0);\n	}else if(inputEncoding == 4){\n		return RGBMToLinear(value, 16.0);\n	}else if(inputEncoding == 5){\n		return RGBDToLinear(value, 256.0);\n	}else{\n		return GammaToLinear(value, 2.2);\n	}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n	if(outputEncoding == 0){\n		return value;\n	}else if(outputEncoding == 1){\n		return LinearTosRGB(value);\n	}else if(outputEncoding == 2){\n		return LinearToRGBE(value);\n	}else if(outputEncoding == 3){\n		return LinearToRGBM(value, 7.0);\n	}else if(outputEncoding == 4){\n		return LinearToRGBM(value, 16.0);\n	}else if(outputEncoding == 5){\n		return LinearToRGBD(value, 256.0);\n	}else{\n		return LinearToGamma(value, 2.2);\n	}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n	return inputTexelToLinear(color);\n}\n	\n\nvoid main() {\n	gl_FragColor = vec4(0.0);\n	gl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n	gl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n		", blending: d, depthTest: false, depthWrite: false });
          return t3.type = "CubemapToCubeUV", t3;
        }
        function fd(t3) {
          console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), yc.call(this, t3), this.type = "catmullrom", this.closed = true;
        }
        function md(t3) {
          console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), yc.call(this, t3), this.type = "catmullrom";
        }
        function gd(t3) {
          console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."), yc.call(this, t3), this.type = "catmullrom";
        }
        id.prototype = { constructor: id, fromScene: function(t3, e3, n3, i3) {
          e3 === void 0 && (e3 = 0), n3 === void 0 && (n3 = 0.1), i3 === void 0 && (i3 = 100), Qh = Kh.getRenderTarget();
          var r3 = rd();
          return function(t4, e4, n4, i4) {
            var r4 = new yr(90, 1, e4, n4), a2 = [1, 1, 1, 1, -1, 1], o2 = [1, 1, -1, -1, -1, 1], s2 = Kh.outputEncoding, l2 = Kh.toneMapping, c2 = Kh.toneMappingExposure, u2 = Kh.getClearColor(), h2 = Kh.getClearAlpha();
            Kh.toneMapping = J, Kh.toneMappingExposure = 1, Kh.outputEncoding = pe, t4.scale.z *= -1;
            var d2 = t4.background;
            if (d2 && d2.isColor) {
              d2.convertSRGBToLinear();
              var p2 = Math.max(d2.r, d2.g, d2.b), f2 = Math.min(Math.max(Math.ceil(Math.log2(p2)), -128), 127);
              d2 = d2.multiplyScalar(Math.pow(2, -f2));
              var m2 = (f2 + 128) / 255;
              Kh.setClearColor(d2, m2), t4.background = null;
            }
            for (var g2 = 0; g2 < 6; g2++) {
              var v2 = g2 % 3;
              v2 == 0 ? (r4.up.set(0, a2[g2], 0), r4.lookAt(o2[g2], 0, 0)) : v2 == 1 ? (r4.up.set(0, 0, a2[g2]), r4.lookAt(0, o2[g2], 0)) : (r4.up.set(0, a2[g2], 0), r4.lookAt(0, 0, o2[g2])), ld(i4, v2 * Bh, 2 < g2 ? Bh : 0, Bh, Bh), Kh.setRenderTarget(i4), Kh.render(t4, r4);
            }
            Kh.toneMapping = l2, Kh.toneMappingExposure = c2, Kh.outputEncoding = s2, Kh.setClearColor(u2, h2), t4.scale.z *= -1;
          }(t3, n3, i3, r3), 0 < e3 && ud(r3, 0, 0, e3), cd(r3), ad(r3), r3;
        }, fromEquirectangular: function(t3) {
          return t3.magFilter = st, t3.minFilter = st, t3.generateMipmaps = false, this.fromCubemap(t3);
        }, fromCubemap: function(t3) {
          Qh = Kh.getRenderTarget();
          var e3 = rd(t3);
          return function(t4, e4) {
            var n3 = new xn();
            t4.isCubeTexture ? Jh == null && (Jh = pd()) : Wh == null && (Wh = dd());
            var i3 = t4.isCubeTexture ? Jh : Wh;
            n3.add(new er(Xh[0], i3));
            var r3 = i3.uniforms;
            (r3.envMap.value = t4).isCubeTexture || r3.texelSize.value.set(1 / t4.image.width, 1 / t4.image.height), r3.inputEncoding.value = Vh[t4.encoding], r3.outputEncoding.value = Vh[t4.encoding], ld(e4, 0, 0, 3 * Bh, 2 * Bh), Kh.setRenderTarget(e4), Kh.render(n3, Uh);
          }(t3, e3), cd(e3), ad(e3), e3;
        }, compileCubemapShader: function() {
          Jh == null && od(Jh = pd());
        }, compileEquirectangularShader: function() {
          Wh == null && od(Wh = dd());
        }, dispose: function() {
          Hh.dispose(), Jh != null && Jh.dispose(), Wh != null && Wh.dispose();
          for (var t3 = 0; t3 < Xh.length; t3++)
            Xh[t3].dispose();
        } }, uc.create = function(t3, e3) {
          return console.log("THREE.Curve.create() has been deprecated"), t3.prototype = Object.create(uc.prototype), (t3.prototype.constructor = t3).prototype.getPoint = e3, t3;
        }, Object.assign(Oc.prototype, { createPointsGeometry: function(t3) {
          console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
          var e3 = this.getPoints(t3);
          return this.createGeometry(e3);
        }, createSpacedPointsGeometry: function(t3) {
          console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
          var e3 = this.getSpacedPoints(t3);
          return this.createGeometry(e3);
        }, createGeometry: function(t3) {
          console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
          for (var e3 = new lr(), n3 = 0, i3 = t3.length; n3 < i3; n3++) {
            var r3 = t3[n3];
            e3.vertices.push(new We(r3.x, r3.y, r3.z || 0));
          }
          return e3;
        } }), Object.assign(Lc.prototype, { fromPoints: function(t3) {
          return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(t3);
        } }), fd.prototype = Object.create(yc.prototype), md.prototype = Object.create(yc.prototype), gd.prototype = Object.create(yc.prototype), Object.assign(gd.prototype, { initFromArray: function() {
          console.error("THREE.Spline: .initFromArray() has been removed.");
        }, getControlPointsArray: function() {
          console.error("THREE.Spline: .getControlPointsArray() has been removed.");
        }, reparametrizeByArcLength: function() {
          console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
        } }), mh.prototype.setColors = function() {
          console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
        }, ch.prototype.update = function() {
          console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
        }, Object.assign(ec.prototype, { extractUrlBase: function(t3) {
          return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), Jc.extractUrlBase(t3);
        } }), ec.Handlers = { add: function() {
          console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
        }, get: function() {
          console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
        } }, Object.assign($c.prototype, { setTexturePath: function(t3) {
          return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."), this.setResourcePath(t3);
        } }), Object.assign(Qu.prototype, { center: function(t3) {
          return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(t3);
        }, empty: function() {
          return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
        }, isIntersectionBox: function(t3) {
          return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t3);
        }, size: function(t3) {
          return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(t3);
        } }), Object.assign(Pn.prototype, { center: function(t3) {
          return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(t3);
        }, empty: function() {
          return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
        }, isIntersectionBox: function(t3) {
          return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t3);
        }, isIntersectionSphere: function(t3) {
          return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t3);
        }, size: function(t3) {
          return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(t3);
        } }), Sr.prototype.setFromMatrix = function(t3) {
          return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(t3);
        }, nh.prototype.center = function(t3) {
          return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(t3);
        }, Object.assign(Pe, { random16: function() {
          return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random();
        }, nearestPowerOfTwo: function(t3) {
          return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), Pe.floorPowerOfTwo(t3);
        }, nextPowerOfTwo: function(t3) {
          return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), Pe.ceilPowerOfTwo(t3);
        } }), Object.assign(ke.prototype, { flattenToArrayOffset: function(t3, e3) {
          return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t3, e3);
        }, multiplyVector3: function(t3) {
          return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), t3.applyMatrix3(this);
        }, multiplyVector3Array: function() {
          console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
        }, applyToBufferAttribute: function(t3) {
          return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), t3.applyMatrix3(this);
        }, applyToVector3Array: function() {
          console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
        } }), Object.assign(Qe.prototype, { extractPosition: function(t3) {
          return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(t3);
        }, flattenToArrayOffset: function(t3, e3) {
          return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t3, e3);
        }, getPosition: function() {
          return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), new We().setFromMatrixColumn(this, 3);
        }, setRotationFromQuaternion: function(t3) {
          return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(t3);
        }, multiplyToArray: function() {
          console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
        }, multiplyVector3: function(t3) {
          return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), t3.applyMatrix4(this);
        }, multiplyVector4: function(t3) {
          return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), t3.applyMatrix4(this);
        }, multiplyVector3Array: function() {
          console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
        }, rotateAxis: function(t3) {
          console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), t3.transformDirection(this);
        }, crossVector: function(t3) {
          return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), t3.applyMatrix4(this);
        }, translate: function() {
          console.error("THREE.Matrix4: .translate() has been removed.");
        }, rotateX: function() {
          console.error("THREE.Matrix4: .rotateX() has been removed.");
        }, rotateY: function() {
          console.error("THREE.Matrix4: .rotateY() has been removed.");
        }, rotateZ: function() {
          console.error("THREE.Matrix4: .rotateZ() has been removed.");
        }, rotateByAxis: function() {
          console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
        }, applyToBufferAttribute: function(t3) {
          return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), t3.applyMatrix4(this);
        }, applyToVector3Array: function() {
          console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
        }, makeFrustum: function(t3, e3, n3, i3, r3, a2) {
          return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(t3, e3, i3, n3, r3, a2);
        } }), Xn.prototype.isIntersectionLine = function(t3) {
          return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(t3);
        }, Ge.prototype.multiplyVector3 = function(t3) {
          return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), t3.applyQuaternion(this);
        }, Object.assign(Hn.prototype, { isIntersectionBox: function(t3) {
          return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t3);
        }, isIntersectionPlane: function(t3) {
          return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(t3);
        }, isIntersectionSphere: function(t3) {
          return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t3);
        } }), Object.assign(ai.prototype, { area: function() {
          return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
        }, barycoordFromPoint: function(t3, e3) {
          return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(t3, e3);
        }, midpoint: function(t3) {
          return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(t3);
        }, normal: function(t3) {
          return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(t3);
        }, plane: function(t3) {
          return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(t3);
        } }), Object.assign(ai, { barycoordFromPoint: function(t3, e3, n3, i3, r3) {
          return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), ai.getBarycoord(t3, e3, n3, i3, r3);
        }, normal: function(t3, e3, n3, i3) {
          return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), ai.getNormal(t3, e3, n3, i3);
        } }), Object.assign(Ic.prototype, { extractAllPoints: function(t3) {
          return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(t3);
        }, extrude: function(t3) {
          return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new il(this, t3);
        }, makeGeometry: function(t3) {
          return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new ml(this, t3);
        } }), Object.assign(Re.prototype, { fromAttribute: function(t3, e3, n3) {
          return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t3, e3, n3);
        }, distanceToManhattan: function(t3) {
          return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t3);
        }, lengthManhattan: function() {
          return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
        } }), Object.assign(We.prototype, { setEulerFromRotationMatrix: function() {
          console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
        }, setEulerFromQuaternion: function() {
          console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
        }, getPositionFromMatrix: function(t3) {
          return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(t3);
        }, getScaleFromMatrix: function(t3) {
          return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(t3);
        }, getColumnFromMatrix: function(t3, e3) {
          return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e3, t3);
        }, applyProjection: function(t3) {
          return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(t3);
        }, fromAttribute: function(t3, e3, n3) {
          return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t3, e3, n3);
        }, distanceToManhattan: function(t3) {
          return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t3);
        }, lengthManhattan: function() {
          return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
        } }), Object.assign(je.prototype, { fromAttribute: function(t3, e3, n3) {
          return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t3, e3, n3);
        }, lengthManhattan: function() {
          return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
        } }), Object.assign(lr.prototype, { computeTangents: function() {
          console.error("THREE.Geometry: .computeTangents() has been removed.");
        }, computeLineDistances: function() {
          console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
        }, applyMatrix: function(t3) {
          return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t3);
        } }), Object.assign(yn.prototype, { getChildByName: function(t3) {
          return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(t3);
        }, renderDepth: function() {
          console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
        }, translate: function(t3, e3) {
          return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e3, t3);
        }, getWorldRotation: function() {
          console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
        }, applyMatrix: function(t3) {
          return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t3);
        } }), Object.defineProperties(yn.prototype, { eulerOrder: { get: function() {
          return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
        }, set: function(t3) {
          console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = t3;
        } }, useQuaternion: { get: function() {
          console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        }, set: function() {
          console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        } } }), Object.assign(er.prototype, { setDrawMode: function() {
          console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
        } }), Object.defineProperties(er.prototype, { drawMode: { get: function() {
          return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), 0;
        }, set: function() {
          console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
        } } }), Object.defineProperties(Bo.prototype, { objects: { get: function() {
          return console.warn("THREE.LOD: .objects has been renamed to .levels."), this.levels;
        } } }), Object.defineProperty(Vo.prototype, "useVertexTexture", { get: function() {
          console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        }, set: function() {
          console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        } }), No.prototype.initBones = function() {
          console.error("THREE.SkinnedMesh: initBones() has been removed.");
        }, Object.defineProperty(uc.prototype, "__arcLengthDivisions", { get: function() {
          return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions;
        }, set: function(t3) {
          console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions = t3;
        } }), yr.prototype.setLens = function(t3, e3) {
          console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), e3 !== void 0 && (this.filmGauge = e3), this.setFocalLength(t3);
        }, Object.defineProperties(Pc.prototype, { onlyShadow: { set: function() {
          console.warn("THREE.Light: .onlyShadow has been removed.");
        } }, shadowCameraFov: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = t3;
        } }, shadowCameraLeft: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = t3;
        } }, shadowCameraRight: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = t3;
        } }, shadowCameraTop: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = t3;
        } }, shadowCameraBottom: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = t3;
        } }, shadowCameraNear: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = t3;
        } }, shadowCameraFar: { set: function(t3) {
          console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = t3;
        } }, shadowCameraVisible: { set: function() {
          console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
        } }, shadowBias: { set: function(t3) {
          console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = t3;
        } }, shadowDarkness: { set: function() {
          console.warn("THREE.Light: .shadowDarkness has been removed.");
        } }, shadowMapWidth: { set: function(t3) {
          console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = t3;
        } }, shadowMapHeight: { set: function(t3) {
          console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = t3;
        } } }), Object.defineProperties(yi.prototype, { length: { get: function() {
          return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
        } }, dynamic: { get: function() {
          return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.usage === De;
        }, set: function() {
          console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(De);
        } } }), Object.assign(yi.prototype, { setDynamic: function(t3) {
          return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(t3 === true ? De : Ee), this;
        }, copyIndicesArray: function() {
          console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
        }, setArray: function() {
          console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
        } }), Object.assign(Ni.prototype, { addIndex: function(t3) {
          console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(t3);
        }, addAttribute: function(t3, e3) {
          return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."), e3 && e3.isBufferAttribute || e3 && e3.isInterleavedBufferAttribute ? t3 === "index" ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e3), this) : this.setAttribute(t3, e3) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(t3, new yi(e3, arguments[2])));
        }, addDrawCall: function(t3, e3, n3) {
          n3 !== void 0 && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(t3, e3);
        }, clearDrawCalls: function() {
          console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
        }, computeTangents: function() {
          console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
        }, computeOffsets: function() {
          console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
        }, removeAttribute: function(t3) {
          return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(t3);
        }, applyMatrix: function(t3) {
          return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t3);
        } }), Object.defineProperties(Ni.prototype, { drawcalls: { get: function() {
          return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
        } }, offsets: { get: function() {
          return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
        } } }), Object.defineProperties(mo.prototype, { dynamic: { get: function() {
          return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.usage === De;
        }, set: function(t3) {
          console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."), this.setUsage(t3);
        } } }), Object.assign(mo.prototype, { setDynamic: function(t3) {
          return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(t3 === true ? De : Ee), this;
        }, setArray: function() {
          console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
        } }), Object.assign(rl.prototype, { getArrays: function() {
          console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
        }, addShapeList: function() {
          console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
        }, addShape: function() {
          console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
        } }), Object.defineProperties(Wu.prototype, { dynamic: { set: function() {
          console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
        } }, onUpdate: { value: function() {
          return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
        } } }), Object.defineProperties(mi.prototype, { wrapAround: { get: function() {
          console.warn("THREE.Material: .wrapAround has been removed.");
        }, set: function() {
          console.warn("THREE.Material: .wrapAround has been removed.");
        } }, overdraw: { get: function() {
          console.warn("THREE.Material: .overdraw has been removed.");
        }, set: function() {
          console.warn("THREE.Material: .overdraw has been removed.");
        } }, wrapRGB: { get: function() {
          return console.warn("THREE.Material: .wrapRGB has been removed."), new ci();
        } }, shading: { get: function() {
          console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        }, set: function(t3) {
          console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = t3 === 1;
        } }, stencilMask: { get: function() {
          return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask;
        }, set: function(t3) {
          console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask = t3;
        } } }), Object.defineProperties(Ol.prototype, { metal: { get: function() {
          return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."), false;
        }, set: function() {
          console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
        } } }), Object.defineProperties(gr.prototype, { derivatives: { get: function() {
          return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
        }, set: function(t3) {
          console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = t3;
        } } }), Object.assign(ho.prototype, { clearTarget: function(t3, e3, n3, i3) {
          console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(t3), this.clear(e3, n3, i3);
        }, animate: function(t3) {
          console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(t3);
        }, getCurrentRenderTarget: function() {
          return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
        }, getMaxAnisotropy: function() {
          return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
        }, getPrecision: function() {
          return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
        }, resetGLState: function() {
          return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
        }, supportsFloatTextures: function() {
          return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
        }, supportsHalfFloatTextures: function() {
          return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
        }, supportsStandardDerivatives: function() {
          return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
        }, supportsCompressedTextureS3TC: function() {
          return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
        }, supportsCompressedTexturePVRTC: function() {
          return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
        }, supportsBlendMinMax: function() {
          return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
        }, supportsVertexTextures: function() {
          return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
        }, supportsInstancedArrays: function() {
          return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
        }, enableScissorTest: function(t3) {
          console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(t3);
        }, initMaterial: function() {
          console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
        }, addPrePlugin: function() {
          console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
        }, addPostPlugin: function() {
          console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
        }, updateShadowMap: function() {
          console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
        }, setFaceCulling: function() {
          console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
        }, allocTextureUnit: function() {
          console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
        }, setTexture: function() {
          console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
        }, setTexture2D: function() {
          console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
        }, setTextureCube: function() {
          console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
        }, getActiveMipMapLevel: function() {
          return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel();
        } }), Object.defineProperties(ho.prototype, { shadowMapEnabled: { get: function() {
          return this.shadowMap.enabled;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = t3;
        } }, shadowMapType: { get: function() {
          return this.shadowMap.type;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = t3;
        } }, shadowMapCullFace: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        } }, context: { get: function() {
          return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext();
        } }, vr: { get: function() {
          return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr;
        } }, gammaInput: { get: function() {
          return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), false;
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        } }, gammaOutput: { get: function() {
          return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), false;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), this.outputEncoding = t3 === true ? fe : pe;
        } } }), Object.defineProperties(ro.prototype, { cullFace: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        } }, renderReverseSided: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        } }, renderSingleSided: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        } } }), Object.defineProperties(Ve.prototype, { wrapS: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = t3;
        } }, wrapT: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = t3;
        } }, magFilter: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = t3;
        } }, minFilter: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = t3;
        } }, anisotropy: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = t3;
        } }, offset: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = t3;
        } }, repeat: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = t3;
        } }, format: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = t3;
        } }, type: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = t3;
        } }, generateMipmaps: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
        }, set: function(t3) {
          console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = t3;
        } } }), Object.defineProperties(Mu.prototype, { load: { value: function(t3) {
          console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
          var e3 = this;
          return new lu().load(t3, function(t4) {
            e3.setBuffer(t4);
          }), this;
        } }, startTime: { set: function() {
          console.warn("THREE.Audio: .startTime is now .play( delay ).");
        } } }), Du.prototype.getData = function() {
          return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData();
        }, xr.prototype.updateCubeMap = function(t3, e3) {
          return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(t3, e3);
        };
        var vd = { merge: function(t3, e3, n3) {
          var i3;
          console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."), e3.isMesh && (e3.matrixAutoUpdate && e3.updateMatrix(), i3 = e3.matrix, e3 = e3.geometry), t3.merge(e3, i3, n3);
        }, center: function(t3) {
          return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."), t3.center();
        } };
        Be.crossOrigin = void 0, Be.loadTexture = function(t3, e3, n3, i3) {
          console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
          var r3 = new cc();
          r3.setCrossOrigin(this.crossOrigin);
          var a2 = r3.load(t3, n3, void 0, i3);
          return e3 && (a2.mapping = e3), a2;
        }, Be.loadTextureCube = function(t3, e3, n3, i3) {
          console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
          var r3 = new lc();
          r3.setCrossOrigin(this.crossOrigin);
          var a2 = r3.load(t3, n3, void 0, i3);
          return e3 && (a2.mapping = e3), a2;
        }, Be.loadCompressedTexture = function() {
          console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
        }, Be.loadCompressedTextureCube = function() {
          console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
        };
        var yd = { createMultiMaterialObject: function() {
          console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        }, detach: function() {
          console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        }, attach: function() {
          console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        } };
        typeof __THREE_DEVTOOLS__ != "undefined" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: "113" } })), t2.ACESFilmicToneMapping = Z, t2.AddEquation = y, t2.AddOperation = H, t2.AdditiveBlending = f, t2.AlphaFormat = Ct, t2.AlwaysDepth = k, t2.AlwaysStencilFunc = Te, t2.AmbientLight = Uc, t2.AmbientLightProbe = du, t2.AnimationClip = Zl, t2.AnimationLoader = rc, t2.AnimationMixer = Hu, t2.AnimationObjectGroup = Gu, t2.AnimationUtils = Nl, t2.ArcCurve = dc, t2.ArrayCamera = lo, t2.ArrowHelper = Ih, t2.Audio = Mu, t2.AudioAnalyser = Du, t2.AudioContext = su, t2.AudioListener = wu, t2.AudioLoader = lu, t2.AxesHelper = Ph, t2.AxisHelper = function(t3) {
          return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."), new Ph(t3);
        }, t2.BackSide = l, t2.BasicDepthPacking = we, t2.BasicShadowMap = 0, t2.BinaryTextureLoader = function(t3) {
          return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."), new oc(t3);
        }, t2.Bone = zo, t2.BooleanKeyframeTrack = Ul, t2.BoundingBoxHelper = function(t3, e3) {
          return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."), new Th(t3, e3);
        }, t2.Box2 = Qu, t2.Box3 = Pn, t2.Box3Helper = Eh, t2.BoxBufferGeometry = ur, t2.BoxGeometry = cr, t2.BoxHelper = Th, t2.BufferAttribute = yi, t2.BufferGeometry = Ni, t2.BufferGeometryLoader = Yc, t2.ByteType = ft, t2.Cache = Kl, t2.Camera = vr, t2.CameraHelper = _h, t2.CanvasRenderer = function() {
          console.error("THREE.CanvasRenderer has been removed");
        }, t2.CanvasTexture = ps, t2.CatmullRomCurve3 = yc, t2.CineonToneMapping = Y, t2.CircleBufferGeometry = Sl, t2.CircleGeometry = _l, t2.ClampToEdgeWrapping = at, t2.Clock = gu, t2.ClosedSplineCurve3 = fd, t2.Color = ci, t2.ColorKeyframeTrack = Hl, t2.CompressedTexture = ds, t2.CompressedTextureLoader = ac, t2.ConeBufferGeometry = Ml, t2.ConeGeometry = wl, t2.CubeCamera = xr, t2.CubeGeometry = cr, t2.CubeReflectionMapping = $2, t2.CubeRefractionMapping = K, t2.CubeTexture = Pr, t2.CubeTextureLoader = lc, t2.CubeUVReflectionMapping = nt, t2.CubeUVRefractionMapping = it, t2.CubicBezierCurve = Mc, t2.CubicBezierCurve3 = _c, t2.CubicInterpolant = jl, t2.CullFaceBack = n2, t2.CullFaceFront = i2, t2.CullFaceFrontBack = 3, t2.CullFaceNone = e2, t2.Curve = uc, t2.CurvePath = Oc, t2.CustomBlending = v, t2.CylinderBufferGeometry = bl, t2.CylinderGeometry = xl, t2.Cylindrical = $u, t2.DataTexture = wr, t2.DataTexture2DArray = Rr, t2.DataTexture3D = kr, t2.DataTextureLoader = oc, t2.DecrementStencilOp = 7683, t2.DecrementWrapStencilOp = 34056, t2.DefaultLoadingManager = tc, t2.DepthFormat = Lt, t2.DepthStencilFormat = It, t2.DepthTexture = fs, t2.DirectionalLight = Gc, t2.DirectionalLightHelper = bh, t2.DirectionalLightShadow = zc, t2.DiscreteInterpolant = zl, t2.DodecahedronBufferGeometry = Es, t2.DodecahedronGeometry = Ts, t2.DoubleSide = c, t2.DstAlphaFactor = A, t2.DstColorFactor = L, t2.DynamicBufferAttribute = function(t3, e3) {
          return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."), new yi(t3, e3).setUsage(De);
        }, t2.DynamicCopyUsage = 35050, t2.DynamicDrawUsage = De, t2.DynamicReadUsage = 35049, t2.EdgesGeometry = yl, t2.EdgesHelper = function(t3, e3) {
          return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."), new ns(new yl(t3.geometry), new qo({ color: e3 !== void 0 ? e3 : 16777215 }));
        }, t2.EllipseCurve = hc, t2.EqualDepth = F, t2.EqualStencilFunc = 514, t2.EquirectangularReflectionMapping = Q, t2.EquirectangularRefractionMapping = tt, t2.Euler = nn, t2.EventDispatcher = Ae, t2.ExtrudeBufferGeometry = rl, t2.ExtrudeGeometry = il, t2.Face3 = pi, t2.Face4 = function(t3, e3, n3, i3, r3, a2, o2) {
          return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."), new pi(t3, e3, n3, r3, a2, o2);
        }, t2.FaceColors = 1, t2.FileLoader = ic, t2.FlatShading = 1, t2.Float32Attribute = function(t3, e3) {
          return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."), new Ti(t3, e3);
        }, t2.Float32BufferAttribute = Ti, t2.Float64Attribute = function(t3, e3) {
          return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."), new Ei(t3, e3);
        }, t2.Float64BufferAttribute = Ei, t2.FloatType = xt, t2.Fog = fo, t2.FogExp2 = po, t2.Font = ru, t2.FontLoader = ou, t2.FrontFaceDirectionCCW = 1, t2.FrontFaceDirectionCW = 0, t2.FrontSide = s, t2.Frustum = Sr, t2.GammaEncoding = me, t2.Geometry = lr, t2.GeometryUtils = vd, t2.GreaterDepth = V, t2.GreaterEqualDepth = j, t2.GreaterEqualStencilFunc = 518, t2.GreaterStencilFunc = 516, t2.GridHelper = mh, t2.Group = co, t2.HalfFloatType = bt, t2.HemisphereLight = Rc, t2.HemisphereLightHelper = fh, t2.HemisphereLightProbe = hu, t2.IcosahedronBufferGeometry = Cs, t2.IcosahedronGeometry = Ss, t2.ImageBitmapLoader = nu, t2.ImageLoader = sc, t2.ImageUtils = Be, t2.ImmediateRenderObject = ih, t2.IncrementStencilOp = 7682, t2.IncrementWrapStencilOp = 34055, t2.InstancedBufferAttribute = Xc, t2.InstancedBufferGeometry = qc, t2.InstancedInterleavedBuffer = Ju, t2.InstancedMesh = Jo, t2.Int16Attribute = function(t3, e3) {
          return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."), new Mi(t3, e3);
        }, t2.Int16BufferAttribute = Mi, t2.Int32Attribute = function(t3, e3) {
          return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."), new Si(t3, e3);
        }, t2.Int32BufferAttribute = Si, t2.Int8Attribute = function(t3, e3) {
          return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."), new xi(t3, e3);
        }, t2.Int8BufferAttribute = xi, t2.IntType = vt, t2.InterleavedBuffer = mo, t2.InterleavedBufferAttribute = yo, t2.Interpolant = Fl, t2.InterpolateDiscrete = le, t2.InterpolateLinear = ce, t2.InterpolateSmooth = 2302, t2.InvertStencilOp = 5386, t2.JSONLoader = function() {
          console.error("THREE.JSONLoader has been removed.");
        }, t2.KeepStencilOp = Ce, t2.KeyframeTrack = Gl, t2.LOD = Bo, t2.LatheBufferGeometry = fl, t2.LatheGeometry = pl, t2.Layers = rn, t2.LensFlare = function() {
          console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
        }, t2.LessDepth = B, t2.LessEqualDepth = N, t2.LessEqualStencilFunc = 515, t2.LessStencilFunc = 513, t2.Light = Pc, t2.LightProbe = uu, t2.LightShadow = kc, t2.Line = Qo, t2.Line3 = nh, t2.LineBasicMaterial = qo, t2.LineCurve = Sc, t2.LineCurve3 = Cc, t2.LineDashedMaterial = kl, t2.LineLoop = is, t2.LinePieces = 1, t2.LineSegments = ns, t2.LineStrip = 0, t2.LinearEncoding = pe, t2.LinearFilter = ut, t2.LinearInterpolant = Vl, t2.LinearMipMapLinearFilter = 1008, t2.LinearMipMapNearestFilter = 1007, t2.LinearMipmapLinearFilter = dt, t2.LinearMipmapNearestFilter = ht, t2.LinearToneMapping = J, t2.Loader = ec, t2.LoaderUtils = Jc, t2.LoadingManager = Ql, t2.LogLuvEncoding = ve, t2.LoopOnce = 2200, t2.LoopPingPong = 2202, t2.LoopRepeat = 2201, t2.LuminanceAlphaFormat = At, t2.LuminanceFormat = Dt, t2.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, t2.Material = mi, t2.MaterialLoader = Wc, t2.Math = Pe, t2.MathUtils = Pe, t2.Matrix3 = ke, t2.Matrix4 = Qe, t2.MaxEquation = M, t2.Mesh = er, t2.MeshBasicMaterial = gi, t2.MeshDepthMaterial = to, t2.MeshDistanceMaterial = eo, t2.MeshFaceMaterial = function(t3) {
          return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."), t3;
        }, t2.MeshLambertMaterial = Pl, t2.MeshMatcapMaterial = Rl, t2.MeshNormalMaterial = Il, t2.MeshPhongMaterial = Ol, t2.MeshPhysicalMaterial = Al, t2.MeshStandardMaterial = Dl, t2.MeshToonMaterial = Ll, t2.MinEquation = w, t2.MirroredRepeatWrapping = ot, t2.MixOperation = U, t2.MultiMaterial = function(t3) {
          return t3 === void 0 && (t3 = []), console.warn("THREE.MultiMaterial has been removed. Use an Array instead."), t3.isMultiMaterial = true, (t3.materials = t3).clone = function() {
            return t3.slice();
          }, t3;
        }, t2.MultiplyBlending = g, t2.MultiplyOperation = G, t2.NearestFilter = st, t2.NearestMipMapLinearFilter = 1005, t2.NearestMipMapNearestFilter = 1004, t2.NearestMipmapLinearFilter = ct, t2.NearestMipmapNearestFilter = lt, t2.NeverDepth = R, t2.NeverStencilFunc = 512, t2.NoBlending = d, t2.NoColors = u, t2.NoToneMapping = W, t2.NormalBlending = p, t2.NotEqualDepth = z, t2.NotEqualStencilFunc = 517, t2.NumberKeyframeTrack = Wl, t2.Object3D = yn, t2.ObjectLoader = $c, t2.ObjectSpaceNormalMap = Se, t2.OctahedronBufferGeometry = _s, t2.OctahedronGeometry = Ms, t2.OneFactor = S, t2.OneMinusDstAlphaFactor = O, t2.OneMinusDstColorFactor = I, t2.OneMinusSrcAlphaFactor = D, t2.OneMinusSrcColorFactor = T, t2.OrthographicCamera = Vc, t2.PCFShadowMap = r2, t2.PCFSoftShadowMap = a, t2.PMREMGenerator = id, t2.ParametricBufferGeometry = vs, t2.ParametricGeometry = gs, t2.Particle = function(t3) {
          return console.warn("THREE.Particle has been renamed to THREE.Sprite."), new Io(t3);
        }, t2.ParticleBasicMaterial = function(t3) {
          return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."), new rs(t3);
        }, t2.ParticleSystem = function(t3, e3) {
          return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."), new cs(t3, e3);
        }, t2.ParticleSystemMaterial = function(t3) {
          return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."), new rs(t3);
        }, t2.Path = Lc, t2.PerspectiveCamera = yr, t2.Plane = Xn, t2.PlaneBufferGeometry = Dr, t2.PlaneGeometry = Er, t2.PlaneHelper = Dh, t2.PointCloud = function(t3, e3) {
          return console.warn("THREE.PointCloud has been renamed to THREE.Points."), new cs(t3, e3);
        }, t2.PointCloudMaterial = function(t3) {
          return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."), new rs(t3);
        }, t2.PointLight = jc, t2.PointLightHelper = uh, t2.Points = cs, t2.PointsMaterial = rs, t2.PolarGridHelper = gh, t2.PolyhedronBufferGeometry = xs, t2.PolyhedronGeometry = ys, t2.PositionalAudio = Eu, t2.PropertyBinding = zu, t2.PropertyMixer = Au, t2.QuadraticBezierCurve = Tc, t2.QuadraticBezierCurve3 = Ec, t2.Quaternion = Ge, t2.QuaternionKeyframeTrack = ql, t2.QuaternionLinearInterpolant = Jl, t2.REVISION = "113", t2.RGBADepthPacking = Me, t2.RGBAFormat = Et, t2.RGBAIntegerFormat = Ft, t2.RGBA_ASTC_10x10_Format = ae, t2.RGBA_ASTC_10x5_Format = ne, t2.RGBA_ASTC_10x6_Format = ie, t2.RGBA_ASTC_10x8_Format = re, t2.RGBA_ASTC_12x10_Format = oe, t2.RGBA_ASTC_12x12_Format = se, t2.RGBA_ASTC_4x4_Format = Xt, t2.RGBA_ASTC_5x4_Format = Yt, t2.RGBA_ASTC_5x5_Format = Zt, t2.RGBA_ASTC_6x5_Format = $t, t2.RGBA_ASTC_6x6_Format = Kt, t2.RGBA_ASTC_8x5_Format = Qt, t2.RGBA_ASTC_8x6_Format = te, t2.RGBA_ASTC_8x8_Format = ee, t2.RGBA_PVRTC_2BPPV1_Format = Jt, t2.RGBA_PVRTC_4BPPV1_Format = Wt, t2.RGBA_S3TC_DXT1_Format = Vt, t2.RGBA_S3TC_DXT3_Format = zt, t2.RGBA_S3TC_DXT5_Format = Gt, t2.RGBDEncoding = be, t2.RGBEEncoding = ge, t2.RGBEFormat = Ot, t2.RGBFormat = Tt, t2.RGBIntegerFormat = Nt, t2.RGBM16Encoding = xe, t2.RGBM7Encoding = ye, t2.RGB_ETC1_Format = qt, t2.RGB_PVRTC_2BPPV1_Format = Ht, t2.RGB_PVRTC_4BPPV1_Format = Ut, t2.RGB_S3TC_DXT1_Format = jt, t2.RGFormat = kt, t2.RGIntegerFormat = Bt, t2.RawShaderMaterial = El, t2.Ray = Hn, t2.Raycaster = qu, t2.RectAreaLight = Hc, t2.RedFormat = Pt, t2.RedIntegerFormat = Rt, t2.ReinhardToneMapping = q, t2.RepeatWrapping = rt, t2.ReplaceStencilOp = 7681, t2.ReverseSubtractEquation = b, t2.RingBufferGeometry = dl, t2.RingGeometry = hl, t2.Scene = xn, t2.SceneUtils = yd, t2.ShaderChunk = Ar, t2.ShaderLib = Or, t2.ShaderMaterial = gr, t2.ShadowMaterial = Tl, t2.Shape = Ic, t2.ShapeBufferGeometry = gl, t2.ShapeGeometry = ml, t2.ShapePath = iu, t2.ShapeUtils = tl, t2.ShortType = mt, t2.Skeleton = Vo, t2.SkeletonHelper = ch, t2.SkinnedMesh = No, t2.SmoothShading = 2, t2.Sphere = Bn, t2.SphereBufferGeometry = ul, t2.SphereGeometry = cl, t2.Spherical = Zu, t2.SphericalHarmonics3 = cu, t2.SphericalReflectionMapping = et, t2.Spline = gd, t2.SplineCurve = Dc, t2.SplineCurve3 = md, t2.SpotLight = Nc, t2.SpotLightHelper = ah, t2.SpotLightShadow = Bc, t2.Sprite = Io, t2.SpriteMaterial = xo, t2.SrcAlphaFactor = E, t2.SrcAlphaSaturateFactor = P, t2.SrcColorFactor = C, t2.StaticCopyUsage = 35046, t2.StaticDrawUsage = Ee, t2.StaticReadUsage = 35045, t2.StereoCamera = mu, t2.StreamCopyUsage = 35042, t2.StreamDrawUsage = 35040, t2.StreamReadUsage = 35041, t2.StringKeyframeTrack = Xl, t2.SubtractEquation = x, t2.SubtractiveBlending = m, t2.TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, t2.TangentSpaceNormalMap = _e, t2.TetrahedronBufferGeometry = ws, t2.TetrahedronGeometry = bs, t2.TextBufferGeometry = ll, t2.TextGeometry = sl, t2.Texture = Fe, t2.TextureLoader = cc, t2.TorusBufferGeometry = Ps, t2.TorusGeometry = Is, t2.TorusKnotBufferGeometry = Ls, t2.TorusKnotGeometry = Os, t2.Triangle = ai, t2.TriangleFanDrawMode = 2, t2.TriangleStripDrawMode = 1, t2.TrianglesDrawMode = 0, t2.TubeBufferGeometry = As, t2.TubeGeometry = Ds, t2.UVMapping = 300, t2.Uint16Attribute = function(t3, e3) {
          return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."), new _i(t3, e3);
        }, t2.Uint16BufferAttribute = _i, t2.Uint32Attribute = function(t3, e3) {
          return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."), new Ci(t3, e3);
        }, t2.Uint32BufferAttribute = Ci, t2.Uint8Attribute = function(t3, e3) {
          return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."), new bi(t3, e3);
        }, t2.Uint8BufferAttribute = bi, t2.Uint8ClampedAttribute = function(t3, e3) {
          return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."), new wi(t3, e3);
        }, t2.Uint8ClampedBufferAttribute = wi, t2.Uncharted2ToneMapping = X, t2.Uniform = Wu, t2.UniformsLib = Cr, t2.UniformsUtils = pr, t2.UnsignedByteType = pt, t2.UnsignedInt248Type = St, t2.UnsignedIntType = yt, t2.UnsignedShort4444Type = wt, t2.UnsignedShort5551Type = Mt, t2.UnsignedShort565Type = _t, t2.UnsignedShortType = gt, t2.VSMShadowMap = o, t2.Vector2 = Re, t2.Vector3 = We, t2.Vector4 = je, t2.VectorKeyframeTrack = Yl, t2.Vertex = function(t3, e3, n3) {
          return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."), new We(t3, e3, n3);
        }, t2.VertexColors = h, t2.VideoTexture = hs, t2.WebGLCubeRenderTarget = br, t2.WebGLMultisampleRenderTarget = ze, t2.WebGLRenderTarget = Ve, t2.WebGLRenderTargetCube = function(t3, e3, n3) {
          return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."), new br(t3, n3);
        }, t2.WebGLRenderer = ho, t2.WebGLUtils = oo, t2.WireframeGeometry = ms, t2.WireframeHelper = function(t3, e3) {
          return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."), new ns(new ms(t3.geometry), new qo({ color: e3 !== void 0 ? e3 : 16777215 }));
        }, t2.WrapAroundEnding = de, t2.XHRLoader = function(t3) {
          return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."), new ic(t3);
        }, t2.ZeroCurvatureEnding = ue, t2.ZeroFactor = _5, t2.ZeroSlopeEnding = he, t2.ZeroStencilOp = 0, t2.sRGBEncoding = fe, Object.defineProperty(t2, "__esModule", { value: true });
      }, typeof n == "object" && e !== void 0 ? r(n) : typeof define == "function" && define.amd ? define(["exports"], r) : r((i = i || self).THREE = {});
    }, {}], 20: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MrxDbgUtils = void 0;
      var i, r = t("./Operate/MxEntSelJig"), a = t("./Operate/MxJigCmdManager"), o = t("./UI/MxUiVue");
      (i = n.MrxDbgUtils || (n.MrxDbgUtils = {})).findEntAtPoint = function(t2, e2, n2, i2, r2) {
        return n2 === void 0 && (n2 = null), i2 === void 0 && (i2 = true), new Promise(function(a2) {
          if (t2.isMxCAD())
            i2 || (e2 = t2.screenCoord2Doc(e2.x, e2.y, e2.z)), t2.callCommand("MxCAD_FindEntAtPoint", JSON.stringify(e2), function(t3) {
              if (typeof t3 != "string" || t3.length < 1)
                a2([]);
              else {
                var e3 = JSON.parse(t3);
                a2(e3.ids);
              }
            });
          else {
            for (var o2 = t2.findMxEntityAtPoint(e2, i2, r2), s = [], l = o2.length, c = 0; c < l; c++) {
              var u = o2[c];
              if (!n2 || !n2.type || n2.type == u.getTypeName()) {
                var h = u.objectId();
                s.push(h);
              }
            }
            a2(s);
          }
        });
      }, i.selectEnt = function(t2, e2) {
        return e2 === void 0 && (e2 = null), new Promise(function(n2) {
          var i2 = new r.MxEntSelJig();
          t2 && o.MxUiVue.acutPrintf(t2), i2.filter = e2, i2.callRet = function(t3) {
            n2(t3);
          }, a.MxJigCmdManager.runCmd(i2);
        });
      };
    }, { "./Operate/MxEntSelJig": 55, "./Operate/MxJigCmdManager": 58, "./UI/MxUiVue": 67 }], 21: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCADSyncDisplay = n.MxCADDisplayFun = n.MxCADDatabase = n.MxCADLayerTable = n.MxCADLayerTableRecord = n.MxCADDisplayBlockTable = n.MxCADDisplayBlockRecord = n.MxCADDisplayLayerTable = n.MxCADDisplayLayerRecord = n.MxCADDisplayMemorySections = n.MxCADDisplayMemorySection = n.MxCADDisplayMemorySectionType = n.MxCADDisplayBlockInstance = n.MxCADDisplayBlockRef = n.MxCADDisplayClipPlans = n.MxCADDisplayClipPlan = void 0;
      var i = t("three"), r = t("../MxFun"), a = t("../MxShader"), o = t("./MxCADNetData"), s = t("../MxManager");
      n.MxCADDisplayClipPlan = function() {
        this.x1 = 0, this.y1 = 0, this.x2 = 0, this.y2 = 0;
      };
      var l = function() {
        this.id = 1, this.clipPlanArray = new Array();
      };
      n.MxCADDisplayClipPlans = l;
      var c, u, h = function() {
        this.mat = new i.Matrix4(), this.blkRecId = -1, this.blkOwnerId = 0, this.layerId = -1, this.color = 0, this.clipPlans = new l();
      };
      n.MxCADDisplayBlockRef = h, n.MxCADDisplayBlockInstance = function() {
        this.mat = new i.Matrix4(), this.clipPlans = new l();
      }, (u = c = n.MxCADDisplayMemorySectionType || (n.MxCADDisplayMemorySectionType = {}))[u.kLinesType = 1] = "kLinesType", u[u.kTriangleType = 2] = "kTriangleType";
      var d = function() {
        this.id = 0, this.type = c.kLinesType, this.blockId = 0, this.layerId = 0, this.color = 0, this.points = [];
      };
      n.MxCADDisplayMemorySection = d;
      var p = (f.prototype.add = function(t2) {
        this.datas.set(t2.id, t2);
      }, f.prototype.get = function(t2) {
        return this.datas.get(t2);
      }, f.prototype.remove = function(t2) {
        this.datas.delete(t2);
      }, f.prototype.has = function(t2) {
        return this.datas.has(t2);
      }, f.prototype.clearAll = function() {
        this.datas = /* @__PURE__ */ new Map();
      }, f);
      function f() {
        this.datas = /* @__PURE__ */ new Map();
      }
      n.MxCADDisplayMemorySections = p;
      var m = (g.prototype.addColorByLayerMaterial = function(t2, e2) {
        this.mapColorByLayerMaterial.set(t2, e2);
      }, g.prototype.upColorToByLayerMaterial = function(t2) {
        this.mapColorByLayerMaterial.forEach(function(e2) {
          e2.uniformsNeedUpdate = true, e2.needsUpdate = true, e2.uniforms = { color: { value: t2 } };
        });
      }, g.prototype.getId = function() {
        return this.id;
      }, g.prototype.getBlockRecordId = function() {
        return this.blockRecId;
      }, g.prototype.createMemorySectionToEntityArray = function(t2) {
        var e2 = this.mapMemorySectionIdToEntity.get(t2);
        return e2 || (e2 = new Array(), this.mapMemorySectionIdToEntity.set(t2, e2), e2);
      }, g.prototype.show = function(t2) {
        this.mapMemorySectionIdToEntity.forEach(function(e2) {
          for (var n2 in e2)
            e2[n2].visible = t2;
        });
      }, g.prototype.addEntity = function(t2, e2) {
        this.createMemorySectionToEntityArray(t2).push(e2);
      }, g.prototype.deleteMemorySectionEntitys = function(t2, e2) {
        var n2 = this.mapMemorySectionIdToEntity.get(t2);
        if (!n2)
          return false;
        for (var i2 = n2.length, a2 = 0; a2 < i2; a2++)
          r.MxFun.removeThreejsObject(n2[a2], e2);
        return this.mapMemorySectionIdToEntity.delete(t2), this.mapColorByLayerMaterial.delete(t2), true;
      }, g.prototype.addClipMaterial = function(t2) {
        this.material_clip.push(t2);
      }, g.prototype.updataClipMaterial = function(t2) {
        for (var e2 = this.material_clip.length, n2 = 0.5 * t2.width, i2 = 0.5 * t2.height, r2 = 0; r2 < e2; r2++)
          this.material_clip[r2].uniforms.vieww.value = n2, this.material_clip[r2].uniforms.viewh.value = i2;
      }, g);
      function g(t2, e2) {
        this.id = 0, this.blockRecId = 0, this.mapMemorySectionIdToEntity = /* @__PURE__ */ new Map(), this.mapColorByLayerMaterial = /* @__PURE__ */ new Map(), this.material_clip = [], this.id = t2, this.blockRecId = e2;
      }
      n.MxCADDisplayLayerRecord = m;
      var v = (y.prototype.createLayerRecord = function(t2) {
        var e2 = this.layers.get(t2);
        return e2 || (e2 = new m(t2, this.blockRecId), this.layers.set(t2, e2), e2);
      }, y.prototype.getLayerRecord = function(t2) {
        return this.layers.get(t2);
      }, y);
      function y(t2) {
        this.blockRecId = 0, this.layers = /* @__PURE__ */ new Map(), this.blockRecId = t2;
      }
      n.MxCADDisplayLayerTable = v;
      var x = (b.prototype.getId = function() {
        return this.id;
      }, b.prototype.addBlkRef = function(t2) {
        this.blkRefs.set(t2.id, t2);
      }, b.prototype.getAllBlkRef = function() {
        return this.blkRefs;
      }, b.prototype.addInstance = function(t2) {
        this.blkInstances.push(t2);
      }, b.prototype.deleteAllInstance = function() {
        this.blkInstances = new Array();
      }, b.prototype.deleteBlkRef = function() {
        this.blkRefs = /* @__PURE__ */ new Map();
      }, b.prototype.getLayerTable = function() {
        return this.layerTable;
      }, b.prototype.getInstances = function() {
        return this.blkInstances;
      }, b.prototype.getInstances_class = function() {
        for (var t2 = [], e2 = /* @__PURE__ */ new Map(), n2 = this.blkInstances.length, i2 = 0; i2 < n2; i2++) {
          var r2 = this.blkInstances[i2];
          if (r2.clipPlans.clipPlanArray.length == 0)
            t2.push(r2);
          else {
            var a2 = e2.get(r2.clipPlans.id);
            a2 == null && (a2 = [], e2.set(r2.clipPlans.id, a2)), a2.push(r2);
          }
        }
        var o2 = {};
        return o2.aryInstanceNoClip = t2, o2.mapInstanceClip = e2, o2;
      }, b);
      function b(t2) {
        this.id = 0, this.blkRefs = /* @__PURE__ */ new Map(), this.blkInstances = new Array(), this.id = t2 || 0, this.layerTable = new v(this.id);
      }
      n.MxCADDisplayBlockRecord = x;
      var w = (M.prototype.crateBlockRecord = function(t2) {
        var e2 = this.blocks.get(t2);
        return e2 == null && (e2 = new x(t2), this.blocks.set(t2, e2)), e2;
      }, M.prototype.getBlockRecord = function(t2) {
        return this.blocks.get(t2);
      }, M.prototype.getAllBlockRecord = function() {
        return this.blocks;
      }, M.prototype.reInitData = function(t2) {
        this.blocks = /* @__PURE__ */ new Map(), this.curSpaceBlockRecId = t2 || 0, this.crateBlockRecord(this.curSpaceBlockRecId);
      }, M);
      function M() {
        this.blocks = /* @__PURE__ */ new Map(), this.curSpaceBlockRecId = 0;
      }
      n.MxCADDisplayBlockTable = w;
      var _5 = function() {
      };
      n.MxCADLayerTableRecord = _5;
      var S = (C.prototype.add = function(t2, e2, n2, i2) {
        var r2 = new _5();
        r2.id = t2, r2.name = n2, r2.color = e2, r2.off = i2, this.mapData.set(t2, r2);
      }, C.prototype.getAllLayerData = function() {
        for (var t2, e2 = new Array(), n2 = this.mapData.values(); !(t2 = n2.next()).done; ) {
          var i2 = new _5();
          i2.color = t2.value.color, i2.name = t2.value.name, i2.off = t2.value.off, i2.id = t2.value.id, e2.push(i2);
        }
        return e2;
      }, C.prototype.setZeroLayerId = function(t2) {
        this.zeroLayerId = t2;
      }, C.prototype.getZeroLayerId = function() {
        return this.zeroLayerId;
      }, C.prototype.getLayerIdForName = function(t2) {
        for (var e2, n2 = this.mapData.values(); !(e2 = n2.next()).done; )
          if (e2.value.name == t2)
            return e2.value.id;
        return 0;
      }, C.prototype.getColor = function(t2) {
        var e2 = this.mapData.get(t2);
        return e2 ? e2.color : 0;
      }, C.prototype.getRecord = function(t2) {
        return this.mapData.get(t2);
      }, C.prototype.isOff = function(t2) {
        var e2 = this.mapData.get(t2);
        return !e2 || e2.off;
      }, C.prototype.upDisplayForLayerData = function(t2, e2) {
        for (var n2, i2 = e2, r2 = i2.length, a2 = false, o2 = function(e3) {
          var r3 = i2[e3], o3 = r3.id;
          if (o3 == 0)
            return "continue";
          var l3 = s2.getRecord(o3);
          if (!l3)
            return "continue";
          var c3 = r3.color.split(",");
          if (c3.length < 3)
            return "continue";
          var u3 = 255 & parseInt(c3[0]) | parseInt(c3[1]) << 8 & 65280 | parseInt(c3[2]) << 16 & 16711680;
          if ((16777215 & l3.color) == u3)
            return "continue";
          l3.color = 4278190080 & l3.color | u3, (n2 = []).push((255 & l3.color) / 255, (l3.color >> 8 & 255) / 255, (l3.color >> 16 & 255) / 255), t2.getDisplayBlockTable().getAllBlockRecord().forEach(function(t3) {
            var e4 = t3.getLayerTable().getLayerRecord(o3);
            e4 && e4.upColorToByLayerMaterial(n2);
          }), a2 = true;
        }, s2 = this, l2 = 0; l2 < r2; l2++)
          o2(l2);
        var c2 = function(e3) {
          var n3 = i2[e3], r3 = n3.id;
          if (r3 == 0)
            return "continue";
          var o3 = u2.getRecord(r3);
          return o3 && o3.off != n3.off ? (o3.off = n3.off, t2.getDisplayBlockTable().getAllBlockRecord().forEach(function(t3) {
            var e4 = t3.getLayerTable().getLayerRecord(r3);
            e4 && e4.show(!o3.off);
          }), void (a2 = true)) : "continue";
        }, u2 = this;
        for (l2 = 0; l2 < r2; l2++)
          c2(l2);
        return a2;
      }, C);
      function C() {
        this.mapData = /* @__PURE__ */ new Map(), this.zeroLayerId = 0;
      }
      n.MxCADLayerTable = S;
      var T, E, D = (A.prototype.initRootBlockRef = function(t2) {
        t2 ? this.dpRootBlkRef = t2 : (this.dpRootBlkRef = new h(), this.dpRootBlkRef.mat = new i.Matrix4(), this.dpRootBlkRef.blkRecId = 0, this.dpRootBlkRef.blkOwnerId = -1, this.dpRootBlkRef.layerId = -1, this.dpRootBlkRef.color = 16777215, this.dpRootBlkRef.id = 0);
      }, A.prototype.reInit = function() {
        this.dpBlockTable = new w(), this.layerTable = new S(), this.memSections = new p(), this.initRootBlockRef();
      }, A.prototype.getMxObj = function() {
        return this.mxObj;
      }, A.prototype.getDisplayRootBlockRef = function() {
        return this.dpRootBlkRef;
      }, A.prototype.getDisplayBlockTable = function() {
        return this.dpBlockTable;
      }, A.prototype.getLayerTable = function() {
        return this.layerTable;
      }, A.prototype.getMemSections = function() {
        return this.memSections;
      }, A);
      function A(t2) {
        this.dpBlockTable = new w(), this.dpRootBlkRef = null, this.layerTable = new S(), this.memSections = new p(), this.mxObj = null, this.mxObj = t2, this.initRootBlockRef();
      }
      n.MxCADDatabase = D, (E = T = n.MxCADDisplayFun || (n.MxCADDisplayFun = {})).showLayer = function(t2, e2, n2) {
        t2.getDisplayBlockTable().getAllBlockRecord().forEach(function(t3) {
          var i2 = t3.getLayerTable().getLayerRecord(e2);
          i2 && i2.show(n2);
        });
      }, E.createThreejsObjForMemData_Clip = function(t2, e2, n2, r2, o2, l2, u2) {
        if (t2.length == 0)
          return false;
        var h2 = [], d2 = [], p2 = t2[0].clipPlans.clipPlanArray[0];
        h2.push(p2.x1, p2.y1), d2.push(p2.x2, p2.y2);
        for (var f2 = [], m2 = [], g2 = [], v2 = [], y2 = [], x2 = 0; x2 < t2.length; x2++) {
          var b2 = t2[x2];
          f2 = f2.concat(b2.mat.elements.slice(0, 4)), m2 = m2.concat(b2.mat.elements.slice(4, 8)), g2 = g2.concat(b2.mat.elements.slice(8, 12)), v2 = v2.concat(b2.mat.elements.slice(12, 16)), y2.push(0);
        }
        var w2 = e2.color, M2 = (4278190080 & w2) == 16777216;
        M2 && (w2 = o2);
        var _6 = [];
        _6.push(255 & w2, (65280 & w2) >> 8, (16711680 & w2) >> 16);
        var S2 = u2.getCanvas(), C2 = 0.5 * S2.width, T2 = 0.5 * S2.height;
        if (e2.type == c.kLinesType) {
          var E2 = new i.RawShaderMaterial({ uniforms: { color: { value: _6 }, clippt1: { value: h2 }, clippt2: { value: d2 }, vieww: { value: C2 }, viewh: { value: T2 } }, vertexShader: a.MxShader.VSHADER_COLOR_POINT_CLIP_FORMXCAD, fragmentShader: a.MxShader.FSHADER_COLOR_POINT_CLIP_FORMXCAD, linewidth: 1, transparent: true, side: i.DoubleSide });
          n2.addClipMaterial(E2), (A2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, A2.setAttribute("position", new i.Float32BufferAttribute(e2.points, 2)), A2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), A2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(m2), 4)), A2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(g2), 4)), A2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(v2), 4)), A2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(y2), 1));
          var D2 = new i.LineSegments(A2, E2);
          D2.frustumCulled = false, D2.renderOrder = s.MxData.iCADCurveRenderOrder, r2.add(D2), n2.addEntity(e2.id, D2), M2 && n2.addColorByLayerMaterial(e2.id, E2);
        } else if (e2.type == c.kTriangleType) {
          var A2;
          E2 = new i.RawShaderMaterial({ uniforms: { color: { value: _6 }, clippt1: { value: h2 }, clippt2: { value: d2 }, vieww: { value: C2 }, viewh: { value: T2 } }, vertexShader: a.MxShader.VSHADER_COLOR_POINT_CLIP_FORMXCAD, fragmentShader: a.MxShader.FSHADER_COLOR_POINT_CLIP_FORMXCAD, transparent: true, side: i.DoubleSide }), n2.addClipMaterial(E2), (A2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, A2.setAttribute("position", new i.Float32BufferAttribute(e2.points, 2)), A2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), A2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(m2), 4)), A2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(g2), 4)), A2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(v2), 4)), A2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(y2), 1));
          var O2 = new i.Mesh(A2, E2);
          O2.frustumCulled = false, O2.renderOrder = s.MxData.iCADMeshRenderOrder, r2.add(O2), n2.addEntity(e2.id, O2), M2 && n2.addColorByLayerMaterial(e2.id, E2);
        }
      }, E.createThreejsObjForMemData = function(t2, e2, n2, r2, o2, l2) {
        if (t2.length == 0)
          return false;
        for (var u2 = [], h2 = [], d2 = [], p2 = [], f2 = [], m2 = 0; m2 < t2.length; m2++) {
          var g2 = t2[m2];
          u2 = u2.concat(g2.mat.elements.slice(0, 4)), h2 = h2.concat(g2.mat.elements.slice(4, 8)), d2 = d2.concat(g2.mat.elements.slice(8, 12)), p2 = p2.concat(g2.mat.elements.slice(12, 16)), f2.push(0);
        }
        var v2 = e2.color, y2 = (4278190080 & v2) == 16777216;
        y2 && (v2 = o2);
        var x2 = [];
        if (x2.push((255 & v2) / 255, (v2 >> 8 & 255) / 255, (v2 >> 16 & 255) / 255), e2.type == c.kLinesType) {
          var b2 = new i.RawShaderMaterial({ uniforms: { color: { value: x2 } }, vertexShader: a.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: a.MxShader.FSHADER_COLOR_POINT_FORMXCAD, linewidth: 1, transparent: true, side: i.DoubleSide });
          (M2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, M2.setAttribute("position", new i.Float32BufferAttribute(e2.points, 2)), M2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), M2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), M2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), M2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), M2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(f2), 1));
          var w2 = new i.LineSegments(M2, b2);
          w2.frustumCulled = false, w2.renderOrder = s.MxData.iCADCurveRenderOrder, w2.visible = !l2, r2.add(w2), n2.addEntity(e2.id, w2), y2 && n2.addColorByLayerMaterial(e2.id, b2);
        } else if (e2.type == c.kTriangleType) {
          var M2;
          b2 = new i.RawShaderMaterial({ uniforms: { color: { value: x2 } }, vertexShader: a.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: a.MxShader.FSHADER_COLOR_POINT_FORMXCAD, transparent: true, side: i.DoubleSide }), (M2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, M2.setAttribute("position", new i.Float32BufferAttribute(e2.points, 2)), M2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), M2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), M2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), M2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), M2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(f2), 1));
          var _6 = new i.Mesh(M2, b2);
          _6.frustumCulled = false, _6.renderOrder = s.MxData.iCADMeshRenderOrder, _6.visible = !l2, r2.add(_6), n2.addEntity(e2.id, _6), y2 && n2.addColorByLayerMaterial(e2.id, b2);
        }
      };
      var O = (L.prototype.upDisplayFromChage_memData = function(t2) {
        var e2 = this.database.getDisplayBlockTable().getBlockRecord(t2.blockId);
        if (e2 == null)
          return false;
        var n2 = this.database.getLayerTable().getColor(t2.layerId), i2 = this.database.getLayerTable().isOff(t2.layerId), r2 = e2.getLayerTable().createLayerRecord(t2.layerId), a2 = this.mxObj.getScene(), o2 = e2.getInstances_class();
        r2.deleteMemorySectionEntitys(t2.id, a2);
        var s2 = o2.aryInstanceNoClip, l2 = o2.mapInstanceClip;
        0 < s2.length && T.createThreejsObjForMemData(s2, t2, r2, a2, n2, i2);
        for (var c2 = l2.values(), u2 = c2.next(); !u2.done; ) {
          var h2 = u2.value;
          T.createThreejsObjForMemData_Clip(h2, t2, r2, a2, n2, i2, this.mxObj), u2 = c2.next();
        }
      }, L.prototype.upDisplayFromChage = function(t2) {
        for (var e2 = t2.length, n2 = 0; n2 < e2; n2++) {
          var i2 = t2[n2];
          this.upDisplayFromChage_memData(i2);
        }
      }, L.prototype.OnMessageDisplayMemorySectionsFromChange = function(t2) {
        for (var e2 = this.database.getMemSections(), n2 = new o.MxCADNetData(t2), i2 = n2.getMxCADPointMemorySectionsHeadFromChange(), r2 = i2.nOffset, a2 = [], s2 = 0; s2 < i2.datacount; s2++) {
          var l2 = n2.getMxCADPointMemorySectionHeadFromChange(r2);
          r2 = l2.offset;
          var c2 = new d();
          c2.layerId = l2.layerId, c2.blockId = l2.blkId, c2.id = l2.memId, c2.color = l2.memColor, c2.type = l2.memType;
          var u2 = l2.pointCount;
          if (!(u2 < 1)) {
            for (var h2 = [], p2 = 0; p2 < u2; p2++) {
              var f2 = t2.getFloat32(r2, true);
              r2 += 4;
              var m2 = t2.getFloat32(r2, true);
              r2 += 4, h2.push(f2, m2);
            }
            c2.points = h2, e2.add(c2), a2.push(c2);
          }
        }
        this.upDisplayFromChage(a2);
      }, L.prototype.deleteMemorySectionAndEntity = function(t2) {
        var e2 = this.database.getMemSections(), n2 = e2.get(t2);
        if (!n2)
          return false;
        var i2 = this.database.getDisplayBlockTable().getBlockRecord(n2.blockId);
        if (i2 == null)
          return e2.remove(n2.id), console.log("mx:blkrec null assert(0)"), false;
        var r2 = i2.getLayerTable().createLayerRecord(n2.layerId), a2 = this.mxObj.getScene();
        return r2.deleteMemorySectionEntitys(n2.id, a2), e2.remove(n2.id), true;
      }, L.prototype.OnMessageDisplayNotUseMemorySectionsForChage = function(t2) {
        for (var e2 = new o.MxCADNetData(t2).getMxCADNotUseMemorySectionsHeadForChage(), n2 = e2.nCount, i2 = e2.nOffset, r2 = 0; r2 < n2; r2++) {
          var a2 = t2.getInt32(i2, true);
          i2 += 4, this.deleteMemorySectionAndEntity(a2);
        }
      }, L);
      function L(t2) {
        this.database = null, this.mxObj = null, this.database = t2, this.mxObj = t2.getMxObj();
      }
      n.MxCADSyncDisplay = O;
    }, { "../MxFun": 34, "../MxManager": 36, "../MxShader": 40, "./MxCADNetData": 23, three: 19 }], 22: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCADGripJig = n.MxCADGrip = n.MxCADGripData = void 0;
      var a = t("three"), o = t("../MxFun"), s = t("../MxThreeJS"), l = t("../Operate/MxJig"), c = t("../Operate/MxJigCmdManager"), u = t("../MxManager"), h = t("../MxDrawData"), d = function() {
        this.threeObject = null;
      };
      n.MxCADGripData = d;
      var p = (f.prototype.getParentObject = function() {
        return this.mxObj.getTheTempDrawContainer();
      }, f.prototype.removeAllEntity = function() {
        var t2 = this.getParentObject();
        this.mapGrips.forEach(function(e2, n2, i2) {
          for (var r2 = e2.length, a2 = 0; a2 < r2; a2++) {
            var s2 = e2[a2];
            o.MxFun.removeThreejsObject(s2.threeObject, t2);
          }
        }), this.mapGrips = /* @__PURE__ */ new Map();
      }, f.prototype.deleteGripData = function(t2) {
        var e2 = this.getParentObject(), n2 = this.mapGrips.get(t2);
        if (n2)
          for (var i2 = n2.length, r2 = 0; r2 < i2; r2++) {
            var a2 = n2[r2];
            o.MxFun.removeThreejsObject(a2.threeObject, e2);
          }
        this.mapGrips.delete(t2);
      }, f.prototype.deleteEntityData = function(t2) {
        this.mapEntityData.delete(t2);
      }, f.prototype.addGripData = function(t2, e2, n2, i2) {
        var r2 = this.mapGrips.get(t2);
        r2 == null && (r2 = new Array(), this.mapGrips.set(t2, r2));
        var o2 = new d();
        return o2.iIndex = e2, o2.point = new a.Vector3(n2, i2, 0), r2.push(o2), o2;
      }, f.prototype.createGripDisplayObject = function(t2) {
        var e2 = this.getParentObject();
        t2.geometry = new a.Geometry();
        var n2 = this.mxObj.screenCoordLong2Doc(h.MxDrawData.m_dGridWidth / 2);
        t2.geometry.vertices.push(new a.Vector3(t2.point.x - n2, t2.point.y - n2, 0)), t2.geometry.vertices.push(new a.Vector3(t2.point.x - n2, t2.point.y + n2, 0)), t2.geometry.vertices.push(new a.Vector3(t2.point.x + n2, t2.point.y + n2, 0)), t2.geometry.vertices.push(new a.Vector3(t2.point.x + n2, t2.point.y - n2, 0)), t2.geometry.faces.push(new a.Face3(0, 1, 2)), t2.geometry.faces.push(new a.Face3(2, 3, 0)), t2.geometry.computeFaceNormals(), t2.geometry.computeVertexNormals();
        var i2 = new a.MeshBasicMaterial({ color: 255, transparent: true, depthTest: false, side: a.DoubleSide, opacity: 0.9 }), r2 = new a.Mesh(t2.geometry, i2);
        r2.renderOrder = u.MxData.iGripRenderOrder, e2.add(r2), t2.threeObject = r2;
      }, f.prototype.clearAll = function() {
        return this.mapEntityData = /* @__PURE__ */ new Map(), this.mapGrips.size != 0 && (this.removeAllEntity(), true);
      }, f.prototype.addEntityData = function(t2, e2) {
        this.mapEntityData.set(t2, e2);
      }, f.prototype.onIntelliSelect = function(t2) {
        for (var e2 = JSON.parse(t2), n2 = e2.vecEntityData.length, i2 = 0; i2 < n2; i2++) {
          var r2 = e2.vecEntityData[i2], a2 = r2.lIdIndex;
          this.addEntityData(a2, r2.entity), this.deleteGripData(a2);
          for (var o2 = r2.vecGrip.length, s2 = 0; s2 < o2; s2++) {
            var l2 = r2.vecGrip[s2], c2 = this.addGripData(a2, l2.iIndex, l2.ptx, l2.pty);
            this.createGripDisplayObject(c2);
          }
        }
      }, f.prototype.onControlsChage = function() {
        if (this.mapGrips.size != 0) {
          var t2 = this.mxObj.screenCoordLong2Doc(8);
          this.mapGrips.forEach(function(e2, n2, i2) {
            for (var r2 = e2.length, a2 = 0; a2 < r2; a2++) {
              var o2 = e2[a2];
              o2.geometry.vertices.length == 4 && (o2.geometry.vertices[0].x = o2.point.x - t2, o2.geometry.vertices[0].y = o2.point.y - t2, o2.geometry.vertices[1].x = o2.point.x - t2, o2.geometry.vertices[1].y = o2.point.y + t2, o2.geometry.vertices[2].x = o2.point.x + t2, o2.geometry.vertices[2].y = o2.point.y + t2, o2.geometry.vertices[3].x = o2.point.x + t2, o2.geometry.vertices[3].y = o2.point.y - t2, o2.geometry.computeFaceNormals(), o2.geometry.computeVertexNormals(), o2.geometry.verticesNeedUpdate = true);
            }
          });
        }
      }, f.prototype.hitTest = function(t2) {
        var e2 = { grips: new Array(), ids: new Array(), pt: t2 }, n2 = new a.Vector3(t2.x, t2.y, 0), i2 = this.mxObj.screenCoordLong2Doc(32);
        return this.mapGrips.forEach(function(t3, r2) {
          for (var a2 = t3.length, o2 = 0; o2 < a2; o2++) {
            var s2 = t3[o2];
            if (s2.point.distanceTo(n2) <= i2) {
              e2.grips.push(s2), e2.ids.push(r2);
              break;
            }
          }
        }), e2;
      }, f.prototype.onMouseLBDown = function(t2) {
        var e2 = this.hitTest(t2);
        return e2.grips.length != 0 && (o.MxFun.sendStringToExecute("Mx_GripEdit", e2), true);
      }, f.prototype.gripEditImp = function(t2) {
        var e2 = t2.grips, n2 = t2.ids, i2 = t2.pt, r2 = new g(i2, e2, n2, this.mapEntityData);
        r2.setDisableDynInput(true), r2.setDisableOsnap(true), c.MxJigCmdManager.runCmd(r2);
      }, f);
      function f(t2) {
        this.mxObj = null, this.mapGrips = /* @__PURE__ */ new Map(), this.mapEntityData = /* @__PURE__ */ new Map(), this.mxObj = t2;
      }
      n.MxCADGrip = p;
      var m, g = (r(v, m = l.McEdJigCommand), v.prototype.sampler = function() {
        var t2 = c.MxJigCmdManager.InType.kGetBegan, e2 = this.acquirePoint(t2);
        return e2.status == c.MxJigCmdManager.DragStatus.kNormal && (this.currPt = e2.pt), e2.status;
      }, v.prototype.getTypeName = function() {
        return "MxGripEdit";
      }, v.prototype.done = function(t2) {
        if (t2 == c.MxJigCmdManager.DragStatus.kNormal) {
          var e2 = [];
          e2.push(this.currPt.x, this.currPt.y);
          for (var n2 = this.getMxObject(), i2 = n2.getMxCAD().getGrip(), r2 = n2.getMxCAD().getSelect(), a2 = this.grips.length, o2 = 0; o2 < a2; o2++) {
            var s2 = this.grips[o2], l2 = this.ids[o2];
            e2.push(l2, s2.iIndex), i2.deleteGripData(l2), i2.deleteEntityData(l2), r2.removeAllEntity();
          }
          n2.callCommand("MxCAD_GridEdit", JSON.stringify(e2), function(t3) {
            i2.onIntelliSelect(t3);
          });
        }
        return c.MxJigCmdManager.DoneStatius.kExitCommand;
      }, v.prototype.upDisplay_Line = function(t2, e2) {
        var n2 = new a.Vector3(t2.pt1x, t2.pt1y, 0), i2 = new a.Vector3(t2.pt2x, t2.pt2y, 0);
        if (e2.iIndex == 0)
          n2.x = this.currPt.x, n2.y = this.currPt.y;
        else if (e2.iIndex == 1)
          i2.x = this.currPt.x, i2.y = this.currPt.y;
        else if (e2.iIndex == 2) {
          var r2 = i2.x + 0.5 * (n2.x - i2.x), o2 = i2.y + 0.5 * (n2.y - i2.y), l2 = this.currPt.x - r2, c2 = this.currPt.y - o2;
          n2.x += l2, n2.y += c2, i2.x += l2, i2.y += c2;
        }
        var u2 = s.MxThreeJS.createLine(n2, i2, 16777215);
        this.drawEntity(u2, 31);
      }, v.prototype.upDisplay = function() {
        for (var t2 = this.grips.length, e2 = 0; e2 < t2; e2++) {
          var n2 = this.grips[e2], i2 = this.ids[e2], r2 = this.mapEntityData.get(i2);
          r2 && r2.name == "McDbLine" && this.upDisplay_Line(r2, n2);
        }
      }, v);
      function v(t2, e2, n2, i2) {
        var r2 = m.call(this) || this;
        return r2.pt = t2, r2.grips = e2, r2.ids = n2, r2.currPt = t2, r2.mapEntityData = i2, r2;
      }
      n.MxCADGripJig = g;
    }, { "../MxDrawData": 29, "../MxFun": 34, "../MxManager": 36, "../MxThreeJS": 44, "../Operate/MxJig": 57, "../Operate/MxJigCmdManager": 58, three: 19 }], 23: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCADNetData = void 0;
      var i = (r.prototype.getBlobHead = function(t2) {
        var e2 = {};
        return e2.type = this._dataView.getInt32(t2, true), t2 += 4, e2.ver = this._dataView.getInt32(t2, true), t2 += 4, e2.databaseIndex = this._dataView.getInt32(t2, true), t2 += 4, e2.nOffset = t2, e2;
      }, r.prototype.getMxCADPointMemorySectionsHead = function() {
        var t2 = this.getBlobHead(0);
        return t2.zeroLayerIdIndex = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datacount = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize != t2.nOffset && console.log("mx: sectionshead size assert(0)"), t2;
      }, r.prototype.getMxCADPointMemorySectionsHeadFromChange = function() {
        var t2 = this.getBlobHead(0);
        return t2.zeroLayerIdIndex = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datacount = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize != t2.nOffset && console.log("mx: sectionshead size assert(0)"), t2;
      }, r.prototype.getMxCADPointMemorySectionHead = function(t2) {
        var e2 = this.getBlobHead(t2);
        return t2 = e2.nOffset, e2.pointCount = this._dataView.getInt32(t2, true), t2 += 4, e2.layerId = this._dataView.getInt32(t2, true), t2 += 4, e2.blkId = this._dataView.getInt32(t2, true), t2 += 4, e2.memColor = this._dataView.getInt32(t2, true), t2 += 4, e2.memId = this._dataView.getInt32(t2, true), t2 += 4, e2.memType = this._dataView.getInt32(t2, true), t2 += 4, e2.offset = t2, e2;
      }, r.prototype.getMxCADPointMemorySectionHeadFromChange = function(t2) {
        var e2 = this.getBlobHead(t2);
        return t2 = e2.nOffset, e2.pointCount = this._dataView.getInt32(t2, true), t2 += 4, e2.layerId = this._dataView.getInt32(t2, true), t2 += 4, e2.blkId = this._dataView.getInt32(t2, true), t2 += 4, e2.memColor = this._dataView.getInt32(t2, true), t2 += 4, e2.memId = this._dataView.getInt32(t2, true), t2 += 4, e2.memType = this._dataView.getInt32(t2, true), t2 += 4, e2.offset = t2, e2;
      }, r.prototype.getMxCADBlockRefsHead = function() {
        var t2 = this.getBlobHead(0);
        return t2.nBlockRefCount = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize != t2.nOffset && console.log("mx: sectionshead size assert(0)"), t2;
      }, r.prototype.getMxCADNotUseMemorySectionsHeadForChage = function() {
        var t2 = this.getBlobHead(0);
        return t2.nCount = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize != t2.nOffset && console.log("mx: sectionshead size assert(0)"), t2;
      }, r.prototype.getEntityDisplayDatasHead = function() {
        var t2 = this.getBlobHead(0);
        return t2.nCount = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize != t2.nOffset && console.log("mx: sectionshead size assert(0)"), t2;
      }, r.prototype.getEntityDisplayDataHead = function(t2) {
        var e2 = this.getBlobHead(t2);
        return e2.nCount = this._dataView.getInt32(e2.nOffset, true), e2.nOffset += 4, e2.type = this._dataView.getInt32(e2.nOffset, true), e2.nOffset += 4, e2.datasize = this._dataView.getInt32(e2.nOffset, true), e2.nOffset += 4, e2.datasize != e2.nOffset - t2 && console.log("mx: sectionshead size assert(0)"), e2;
      }, r);
      function r(t2) {
        this._dataView = t2;
      }
      n.MxCADNetData = i;
    }, {}], 24: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCADObject = void 0;
      var i = t("./MxCADEditDisplay"), r = t("./MxCADOpenDisplay"), a = t("./MxCADSelect"), o = t("./MxCADGrip"), s = (l.prototype.reInit = function() {
        this.openDisplay.reInit(), this.databsae.reInit(), this.mxObj.reInit();
      }, l.prototype.getSelect = function() {
        return this.select;
      }, l.prototype.getGrip = function() {
        return this.grip;
      }, l.prototype.newFile = function() {
        this.reInit(), this.openFile("");
      }, l.prototype.undo = function() {
        this.mxObj.undo();
      }, l.prototype.openFile = function(t2, e2) {
        var n2 = this;
        this.reInit(), this._openFile = t2, this.mxObj.callCommand("MxCAD_OpenFile", JSON.stringify({ file: t2 }), function(t3) {
          n2.mxObj.callCommand("MxCAD_SendDisplay"), typeof t3 != "string" || t3.length < 1 ? e2 && e2({}) : e2 && e2(JSON.parse(t3));
        });
      }, l.prototype.saveFile = function(t2, e2) {
        this.mxObj.callCommand("MxCAD_SaveFile", JSON.stringify({ file: t2 }), function(t3) {
          e2(JSON.parse(t3));
        });
      }, l.prototype.getDisplayFromServer = function() {
        this.reInit(), this.mxObj.callCommand("MxCAD_SendDisplay");
      }, l.prototype.getFileName = function() {
        return this._openFile;
      }, l.prototype.getDatabase = function() {
        return this.databsae;
      }, l.prototype.getOpenDisplay = function() {
        return this.openDisplay;
      }, l.prototype.getSyncDisplay = function() {
        return this.syncDisplay;
      }, l.prototype.getAllLayerData = function() {
        return this.databsae.getLayerTable().getAllLayerData();
      }, l);
      function l(t2) {
        this._openFile = "", this.mxObj = null, this.databsae = null, this.openDisplay = null, this.syncDisplay = null, this.select = null, this.grip = null, this.mxObj = t2, this.databsae = new i.MxCADDatabase(t2), this.openDisplay = new r.MxCADOpenDisplay(this.databsae), this.syncDisplay = new i.MxCADSyncDisplay(this.databsae), this.select = new a.MxCADSelect(t2), this.grip = new o.MxCADGrip(t2);
      }
      n.MxCADObject = s;
    }, { "./MxCADEditDisplay": 21, "./MxCADGrip": 22, "./MxCADOpenDisplay": 25, "./MxCADSelect": 26 }], 25: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCADOpenDisplay = void 0;
      var i = t("three"), r = t("./MxCADNetData"), a = t("./MxCADEditDisplay"), o = (s.prototype.createAllInstanceCall = function(t2, e2, n2, r2, o2) {
        if (!r2.get(t2.getId())) {
          r2.set(t2.getId(), true);
          var s2 = new a.MxCADDisplayBlockInstance();
          if (s2.mat = new i.Matrix4(), s2.mat.copy(n2), s2.idBlkRef = e2.id, s2.mat.multiply(e2.mat), e2.clipPlans.clipPlanArray.length == 0)
            s2.clipPlans = o2;
          else {
            s2.clipPlans = e2.clipPlans;
            for (var l = s2.clipPlans.clipPlanArray.length, c = 0; c < l; c++) {
              var u = new i.Vector3(s2.clipPlans.clipPlanArray[c].x1, s2.clipPlans.clipPlanArray[c].y1, 0), h = new i.Vector3(s2.clipPlans.clipPlanArray[c].x2, s2.clipPlans.clipPlanArray[c].y2, 0);
              u.applyMatrix4(s2.mat), h.applyMatrix4(s2.mat), s2.clipPlans.clipPlanArray[c].x1 = u.x, s2.clipPlans.clipPlanArray[c].y1 = u.y, s2.clipPlans.clipPlanArray[c].x2 = h.x, s2.clipPlans.clipPlanArray[c].y2 = h.y;
            }
          }
          t2.addInstance(s2);
          for (var d = this.database.getDisplayBlockTable(), p = t2.getAllBlkRef().values(), f = p.next(); !f.done; ) {
            var m = f.value;
            if (m.blkRecId != 0) {
              var g = d.getBlockRecord(m.blkRecId);
              g != null && (this.createAllInstanceCall(g, m, s2.mat, r2, s2.clipPlans), f = p.next());
            }
          }
          r2.set(t2.getId(), false);
        }
      }, s.prototype.deleteAllInstance = function() {
        for (var t2 = this.database.getDisplayBlockTable().getAllBlockRecord().values(), e2 = t2.next(); !e2.done; )
          e2.value.deleteAllInstance(), e2 = t2.next();
      }, s.prototype.createAllInstance = function() {
        this.deleteAllInstance();
        var t2 = this.database.getDisplayBlockTable().getBlockRecord(0);
        if (t2 == null)
          return false;
        var e2 = this.database.getDisplayRootBlockRef(), n2 = new i.Matrix4(), r2 = /* @__PURE__ */ new Map(), o2 = new a.MxCADDisplayClipPlans();
        return this.createAllInstanceCall(t2, e2, n2, r2, o2), this.isCreateInstance = true;
      }, s.prototype.creteDisplayForMemData = function(t2) {
        var e2 = this.database.getDisplayBlockTable().getBlockRecord(t2.blockId);
        if (e2 == null)
          return false;
        var n2 = e2.getLayerTable().createLayerRecord(t2.layerId), i2 = this.database.getLayerTable().getColor(t2.layerId), r2 = this.database.getLayerTable().isOff(t2.layerId), o2 = this.mxObj.getScene(), s2 = e2.getInstances_class(), l = s2.aryInstanceNoClip, c = s2.mapInstanceClip;
        0 < l.length && a.MxCADDisplayFun.createThreejsObjForMemData(l, t2, n2, o2, i2, r2);
        for (var u = c.values(), h = u.next(); !h.done; ) {
          var d = h.value;
          a.MxCADDisplayFun.createThreejsObjForMemData_Clip(d, t2, n2, o2, i2, r2, this.mxObj), h = u.next();
        }
      }, s.prototype.creteDisplayForNewData = function() {
        if (this.isCreateInstance || this.isGetDisplayBlockRef && this.isGetLayerTable && this.createAllInstance(), this.isCreateInstance) {
          for (var t2 = this.vecNewCreateDisplayData.length, e2 = 0; e2 < t2; e2++) {
            var n2 = this.vecNewCreateDisplayData[e2];
            this.creteDisplayForMemData(n2);
          }
          this.vecNewCreateDisplayData = [];
        }
      }, s.prototype.reInit = function() {
        this.isGetDisplayBlockRef = false, this.isCreateInstance = false, this.isGetLayerTable = false, this.vecNewCreateDisplayData = [];
      }, s.prototype.getMxOb = function() {
        return this.mxObj;
      }, s.prototype.OnMessageLayerData = function(t2) {
        var e2 = this.database.getLayerTable(), n2 = JSON.parse(t2);
        if (n2 != null) {
          var i2 = n2.list;
          for (var r2 in i2)
            e2.add(i2[r2].id, i2[r2].colorvalue, i2[r2].name, i2[r2].off == 1), i2[r2].zerolayer == 1 && e2.setZeroLayerId(i2[r2].id);
        }
        this.isGetLayerTable = true, this.creteDisplayForNewData();
      }, s.prototype.OnMessageDisplayBlockRef = function(t2) {
        var e2 = this.database.getDisplayBlockTable();
        e2.reInitData(), this.isCreateInstance = false;
        for (var n2 = new r.MxCADNetData(t2).getMxCADBlockRefsHead(), o2 = n2.nBlockRefCount, s2 = n2.nOffset, l = 1, c = 0; c < o2; c++) {
          var u = t2.getInt32(s2, true);
          s2 += 4;
          var h = t2.getInt32(s2, true);
          s2 += 4;
          var d = t2.getInt32(s2, true);
          s2 += 4;
          var p = t2.getInt32(s2, true);
          s2 += 4;
          var f = t2.getInt32(s2, true);
          s2 += 4;
          for (var m = new Array(), g = 0; g < 16; g++) {
            var v = t2.getFloat32(s2, true);
            s2 += 4, m.push(v);
          }
          var y = t2.getInt32(s2, true);
          s2 += 4;
          var x = new a.MxCADDisplayClipPlans();
          x.id = l, l++, x.clipPlanArray = [];
          for (var b = 0; b < y; b++) {
            var w = t2.getFloat32(s2, true);
            s2 += 4;
            var M = t2.getFloat32(s2, true);
            s2 += 4;
            var _5 = t2.getFloat32(s2, true);
            s2 += 4;
            var S = t2.getFloat32(s2, true);
            s2 += 4;
            var C = new a.MxCADDisplayClipPlan();
            C.x1 = w, C.y1 = M, C.x2 = _5, C.y2 = S, x.clipPlanArray.push(C);
          }
          var T = new a.MxCADDisplayBlockRef();
          T.mat = new i.Matrix4(), T.mat.fromArray(m), T.blkRecId = p, T.blkOwnerId = h, T.layerId = d, T.color = f, T.clipPlans = x, T.id = u, e2.crateBlockRecord(p), e2.crateBlockRecord(h);
          var E = e2.getBlockRecord(h);
          E ? E.addBlkRef(T) : console.log("ownerBlkRec == null,assert(0)");
        }
        this.isGetDisplayBlockRef = true, this.creteDisplayForNewData();
      }, s.prototype.OnMessageDisplayMemorySections = function(t2) {
        for (var e2 = this.database.getMemSections(), n2 = new r.MxCADNetData(t2), i2 = n2.getMxCADPointMemorySectionsHead(), o2 = i2.nOffset, s2 = 0; s2 < i2.datacount; s2++) {
          var l = n2.getMxCADPointMemorySectionHead(o2);
          o2 = l.offset;
          var c = new a.MxCADDisplayMemorySection();
          c.layerId = l.layerId, c.blockId = l.blkId, c.id = l.memId, c.color = l.memColor, c.type = l.memType;
          var u = l.pointCount;
          if (!(u < 1)) {
            for (var h = [], d = 0; d < u; d++) {
              var p = t2.getFloat32(o2, true);
              o2 += 4;
              var f = t2.getFloat32(o2, true);
              o2 += 4, h.push(p, f);
            }
            c.points = h, e2.add(c), this.vecNewCreateDisplayData.push(c);
          }
        }
        this.creteDisplayForNewData();
      }, s);
      function s(t2) {
        this.database = null, this.isGetDisplayBlockRef = false, this.isCreateInstance = false, this.isGetLayerTable = false, this.vecNewCreateDisplayData = [], this.mxObj = null, this.database = t2, this.mxObj = t2.getMxObj();
      }
      n.MxCADOpenDisplay = o;
    }, { "./MxCADEditDisplay": 21, "./MxCADNetData": 23, three: 19 }], 26: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCADSelect = n.MxCADSelectDisplayEntityData = n.MxCADSelectDisplayEntityDataType = void 0;
      var i, r, a = t("three"), o = t("../MxFun"), s = t("three.meshline"), l = t("./MxCADNetData"), c = t("../MxManager");
      (r = i = n.MxCADSelectDisplayEntityDataType || (n.MxCADSelectDisplayEntityDataType = {}))[r.kLinesType = 1] = "kLinesType", r[r.kTriangleType = 2] = "kTriangleType";
      var u = function() {
        this.type = i.kLinesType, this.points = [];
      };
      n.MxCADSelectDisplayEntityData = u;
      var h = (d.prototype.getParentObject = function() {
        return this.mxObj.getScene();
      }, d.prototype.removeAllEntity = function() {
        for (var t2 = this.getParentObject(), e2 = this.aryThreeObject.length, n2 = 0; n2 < e2; n2++)
          o.MxFun.removeThreejsObject(this.aryThreeObject[n2], t2);
        this.aryThreeObject = [];
      }, d.prototype.clearAllSelect = function(t2) {
        return t2 === void 0 && (t2 = true), t2 && this.mxObj.callCommand("MxCAD_ClearSelect"), this.aryThreeObject.length != 0 && (this.removeAllEntity(), true);
      }, d.prototype.OnMessageEntityDisplayDatas = function(t2) {
        for (var e2 = new l.MxCADNetData(t2), n2 = e2.getEntityDisplayDatasHead(), r2 = n2.nOffset, o2 = [], h2 = 0; h2 < n2.nCount; h2++) {
          var d2 = e2.getEntityDisplayDataHead(r2);
          r2 = d2.nOffset, (_5 = new u()).type = d2.type;
          var p = d2.nCount;
          if (!(p < 1)) {
            for (var f = [], m = 0; m < p; m += 2) {
              var g = t2.getFloat32(r2, true);
              r2 += 4;
              var v = t2.getFloat32(r2, true);
              r2 += 4, f.push(g, v);
            }
            _5.points = f, o2.push(_5);
          }
        }
        var y = this.mxObj.getViewWidth(), x = this.mxObj.getViewHeight();
        this.material.resolution = new a.Vector2(y, x);
        for (var b = o2.length, w = this.getParentObject(), M = 0; M < b; M++) {
          var _5;
          if ((_5 = o2[M]).type == i.kLinesType)
            for (var S = _5.points.length, C = 0; C + 3 < S; C += 4) {
              var T = new Float32Array(6);
              T[0] = _5.points[C], T[1] = _5.points[C + 1], T[2] = 0, T[3] = _5.points[C + 2], T[4] = _5.points[C + 3], T[5] = 0;
              var E = new s.MeshLine();
              E.setGeometry(T);
              var D = new a.Mesh(E.geometry, this.material);
              D.renderOrder = c.MxData.iSelectRenderOrder, w.add(D), this.aryThreeObject.push(D);
            }
          else if (_5.type == i.kTriangleType) {
            S = _5.points.length;
            var A = new a.Geometry(), O = 0;
            for (C = 0; C + 5 < S; C += 6) {
              var L = new a.Vector3(_5.points[C], _5.points[C + 1], 0), I = new a.Vector3(_5.points[C + 2], _5.points[C + 3], 0), P = new a.Vector3(_5.points[C + 4], _5.points[C + 5], 0);
              A.vertices.push(L), A.vertices.push(I), A.vertices.push(P);
              var R = new a.Face3(O, O + 1, O + 2);
              A.faces.push(R), O += 3;
            }
            var k = new a.Mesh(A, this.materialFill);
            k.renderOrder = c.MxData.iSelectRenderOrder, w.add(k), this.aryThreeObject.push(k);
          }
        }
      }, d);
      function d(t2) {
        this.aryThreeObject = [], this.mxObj = null, this.material = new s.MeshLineMaterial({ useMap: false, color: new a.Color(2641557), opacity: 1, resolution: new a.Vector2(500, 500), sizeAttenuation: false, lineWidth: 10, transparent: true, depthTest: false }), this.materialFill = new a.MeshBasicMaterial({ color: new a.Color(2641557), opacity: 0.8, side: a.DoubleSide, transparent: true, depthTest: false }), this.mxObj = t2;
      }
      n.MxCADSelect = h;
    }, { "../MxFun": 34, "../MxManager": 36, "./MxCADNetData": 23, three: 19, "three.meshline": 18 }], 27: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCadSketchLayers = n.MxCadSketchLayer = void 0;
      var i = (r.prototype.addEntity = function(t2) {
        this._setEntityId.add(t2);
      }, r.prototype.getId = function() {
        return this.id;
      }, r.prototype.setId = function(t2) {
        this.id = t2;
      }, r.prototype.removeEntity = function(t2) {
        this._setEntityId.delete(t2);
      }, r.prototype.show = function(t2) {
        var e2 = this;
        this._setEntityId.forEach(function(n2) {
          var i2 = e2._mxobj.getEntity(n2);
          if (i2 != null)
            for (var r2 = 0, a2 = i2.length; r2 < a2; r2++)
              i2[r2].visible = t2;
        });
      }, r);
      function r(t2) {
        this._setEntityId = /* @__PURE__ */ new Set(), this.id = 0, this._mxobj = null, this._mxobj = t2;
      }
      n.MxCadSketchLayer = i;
      var a = (o.prototype.getLayer = function(t2, e2) {
        e2 === void 0 && (e2 = true);
        var n2 = this._mapId2Layers.get(t2);
        return n2 == null && ((n2 = new i(this._mxobj)).setId(t2), this._mapId2Layers.set(t2, n2)), n2;
      }, o.prototype.addEntity = function(t2, e2) {
        this.getLayer(e2).addEntity(t2);
      }, o.prototype.removeEntity = function(t2) {
        this._mapId2Layers.forEach(function(e2) {
          e2.removeEntity(t2);
        });
      }, o.prototype.removeAllEntity = function() {
        this._mapId2Layers.clear();
      }, o);
      function o(t2) {
        this._mxobj = null, this._mapId2Layers = /* @__PURE__ */ new Map(), this._mxobj = t2;
      }
      n.MxCadSketchLayers = a;
    }, {}], 28: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawCommands = void 0;
      var i = t("./MxFun"), r = t("./MxType"), a = t("./Operate/MxIntelliSelect"), o = t("./Operate/MxJigCmdManager"), s = t("./MxWindowsEvent"), l = t("./MxDrawData");
      function c(t2) {
        if (t2 != null && t2.pt1 != null) {
          var e2 = new a.MxIntelliSelectJig(t2.pt1, false);
          e2.setDisableDynInput(true), e2.setDisableOsnap(true);
          var n2 = t2.pt1, r2 = i.MxFun.getCurrentMx();
          if (!l.MxDrawData.m_isMultipleSelect) {
            var c2 = r2.getMxCAD();
            c2.getSelect().clearAllSelect(), c2.getGrip().clearAll();
          }
          e2.doPointSelect(i.MxFun.getCurrentMx(), t2.pt1, function(t3) {
            if (JSON.parse(t3).lCount != 0 && (r2.getMxCAD().getGrip().onIntelliSelect(t3), l.MxDrawData.m_isMultipleSelect)) {
              var e3 = s.MxWindowsEvent.getCurrentMousePostion();
              if (r2.screenCoord2Doc(e3.x, e3.y, 0).distanceTo(n2) < r2.screenCoordLong2Doc(10)) {
                var i2 = o.MxJigCmdManager.getCurCmd();
                i2 && i2.getTypeName() == "MxIntelliSelect" && o.MxJigCmdManager.stopCmd();
              }
            }
          }), l.MxDrawData.m_isMultipleSelect && o.MxJigCmdManager.runCmd(e2);
        }
      }
      function u(t2) {
        t2 != null && t2.grips != null && t2.ids != null && i.MxFun.getCurrentMx().getMxCAD().getGrip().gripEditImp(t2);
      }
      function h(t2) {
        if (t2 != null && t2.pt != null) {
          var e2 = i.MxFun.getCurrentMx(), n2 = t2.pt;
          if (!e2.getMxDatabase().getGripManager().doPointSelect(n2) && l.MxDrawData.m_isMultipleSelect) {
            var r2 = e2.screenCoord2Doc(n2.x, n2.y, 0), s2 = new a.MxIntelliSelectJig(r2, true);
            s2.setDisableDynInput(true), s2.setDisableOsnap(true), o.MxJigCmdManager.runCmd(s2);
          }
        }
      }
      function d(t2) {
        t2 != null && t2.grips != null && t2.ents != null && i.MxFun.getCurrentMx().getMxDatabase().getGripManager().gripEditImp(t2);
      }
      (n.MxDrawCommands || (n.MxDrawCommands = {})).registerCommand = function() {
        i.MxFun.addCommand("Mx_IntelliSel", c, r.MxType.CommandFlags.MCRX_CMD_TRANSPARENT), i.MxFun.addCommand("Mx_GripEdit", u, r.MxType.CommandFlags.MCRX_CMD_TRANSPARENT), i.MxFun.addCommand("Mx_FrontEndWebpageIntelliSel", h, r.MxType.CommandFlags.MCRX_CMD_TRANSPARENT), i.MxFun.addCommand("Mx_FrontEndWebpageGripEdit", d, r.MxType.CommandFlags.MCRX_CMD_TRANSPARENT);
      };
    }, { "./MxDrawData": 29, "./MxFun": 34, "./MxType": 46, "./MxWindowsEvent": 48, "./Operate/MxIntelliSelect": 56, "./Operate/MxJigCmdManager": 58 }], 29: [function(t, e, n) {
      "use strict";
      var i;
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawData = void 0, (i = n.MxDrawData || (n.MxDrawData = {})).m_isEnableIntelliSelect = false, i.m_isEnableGripEidt = true, i.m_isMultipleSelect = true, i.m_isAutoResetRenderer = false, i.m_isCorrectLargeCoordinates = false, i.m_dGridWidth = 16, i.getCursorWidthPixels = function() {
        return 16;
      }, i.setIniset = function(t2) {
        t2.EnableIntelliSelect !== void 0 && typeof t2.EnableIntelliSelect == "boolean" && (i.m_isEnableIntelliSelect = t2.EnableIntelliSelect), t2.EnableGripEidt !== void 0 && typeof t2.EnableGripEidt == "boolean" && (i.m_isEnableGripEidt = t2.EnableGripEidt), t2.multipleSelect !== void 0 && typeof t2.multipleSelect == "boolean" && (i.m_isMultipleSelect = t2.multipleSelect), t2.autoResetRenderer !== void 0 && typeof t2.autoResetRenderer == "boolean" && (i.m_isAutoResetRenderer = t2.autoResetRenderer), t2.correctLargeCoordinates !== void 0 && typeof t2.autoResetRenderer == "boolean" && (i.m_isCorrectLargeCoordinates = t2.correctLargeCoordinates);
      };
    }, {}], 30: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawObject = n.IniSetName = n.MxRunMode = void 0;
      var i, r, a, o = t("three"), s = t("./MxFun"), l = t("./MxCAD/MxCadSketchLayer"), c = t("./View/MxBrowseLayerData"), u = t("./View/MxBrowseDisplay"), h = t("./MxNetData"), d = t("./MxNetData"), p = t("./MxSelect"), f = t("./MxManager"), m = t("./MxSystemVariable"), g = t("./MxCAD/MxCADObject"), v = t("./MxLocalFileLoad"), y = t("./Operate/MxDrawObjectOsnap"), x = t("./View/MxDbDatabase"), b = t("./View/MxDrawMapBox"), w = t("./MxDrawObjectEvent"), M = t("./View/MxDbEntityGrip"), _5 = t("./cpp/McDrawObject");
      (r = i = n.MxRunMode || (n.MxRunMode = {}))[r.kBrowse = 1] = "kBrowse", r[r.kMxCAD = 2] = "kMxCAD", r[r.kMxCADBrowseApp = 3] = "kMxCADBrowseApp", (a = n.IniSetName || (n.IniSetName = {})).kEnableOsnapFunction = "EnableOsnapFunction";
      var S = (C.prototype.getEventManager = function() {
        return this.eventManager;
      }, C.prototype.setCurrentLoadUrl = function(t2) {
        this._sCurrentLoadURL = t2;
      }, C.prototype.getCurrentLoadUrl = function() {
        return this._sCurrentLoadURL;
      }, C.prototype.isWebgl2 = function() {
        return !(!this._rendererParam || this._rendererParam.retver != "webgl2");
      }, C.prototype.getMxDatabase = function() {
        return this.m_mxDatabase;
      }, C.prototype.updateCanvasSize = function() {
        this._onResizeFun && this._onResizeFun();
      }, C.prototype.mapBoxRender = function(t2, e2) {
        this.camera.projectionMatrix = e2, this.renderer.state.reset(), this.renderer.render(this.scene, this.camera);
      }, C.prototype.mapBoxInitThreeJSObject = function(t2, e2, n2) {
        this.scene = t2, this.camera = e2, this.renderer = n2;
      }, C.prototype.addMxEntity = function(t2) {
        return this.m_mxDatabase.addMxEntity(t2);
      }, C.prototype.getMxEntity = function(t2) {
        return this.m_mxDatabase.getEntity(t2);
      }, C.prototype.getMxEntityUserObject = function(t2) {
        var e2 = this.getMxEntity(t2);
        return e2 ? e2.getUserObject() : null;
      }, C.prototype.eraseAllMxEntity = function() {
        this.m_mxDatabase.eraseAllEntity();
      }, C.prototype.eraseMxEntity = function(t2) {
        var e2 = this.m_mxDatabase.getEntity(t2);
        return !!e2 && e2.erase();
      }, C.prototype.getAllMxEntity = function() {
        var t2 = [];
        return this.m_mxDatabase.getAllEntity().forEach(function(e2) {
          e2 && t2.push(e2.getUserObject());
        }), t2;
      }, C.prototype.getMxAllSelect = function() {
        var t2 = this.m_mxDatabase.getSelectManager().getAllSelect(), e2 = this.m_mxDatabase.getGripManager().getAllSelect(), n2 = /* @__PURE__ */ new Set();
        return t2.forEach(function(t3) {
          n2.add(t3);
        }), e2.forEach(function(e3) {
          n2.has(e3) || t2.push(e3);
        }), t2;
      }, C.prototype.getPrvCommandSelect = function() {
        return this.m_mxDatabase.getSelectManager().getPrvCommandSelect();
      }, C.prototype.addMxCurrentSelect = function(t2) {
        this.m_mxDatabase.getGripManager().addSelect(t2);
      }, C.prototype.clearMxCurrentSelect = function() {
        var t2 = this.m_mxDatabase.clearMxCurrentSelect();
        if (this._mxCAD) {
          var e2 = this._mxCAD.getSelect().clearAllSelect(), n2 = this._mxCAD.getGrip().clearAll();
          (e2 || n2) && (t2 = true);
        }
        return t2;
      }, C.prototype.addViewObject = function(t2) {
        this.secenView ? this.threejsselectObjectsView.add(t2) : console.log("this.secenView is null");
      }, C.prototype.removeViewObject = function(t2) {
        s.MxFun.removeThreejsObject(t2, this.threejsselectObjectsView);
      }, C.prototype.setOtherRefFile = function(t2) {
        this._tzDwgStaticFile = t2;
      }, C.prototype.setRequestHeader = function(t2) {
        this._requestHeader = t2;
      }, C.prototype.initZoomW = function(t2, e2) {
        this._initZoomwCoordPt1 = t2.clone(), this._initZoomWCoordPt2 = e2.clone();
      }, C.prototype.getMxCAD = function() {
        return this._mxCAD;
      }, C.prototype.setMouseRightRotate = function(t2) {
        this._mouseRightRotate = t2, this.controls != null && (this.controls.mouseButtons.RIGHT = t2 ? o.MOUSE.ROTATE : o.MOUSE.PAN);
      }, C.prototype.setZoomSpeed = function(t2) {
        var e2 = this.controls.zoomSpeed;
        return this.controls.zoomSpeed = t2, e2;
      }, C.prototype.resetRenderer = function() {
        this.renderer.info.reset();
      }, C.prototype.setMouseMiddlePan = function(t2) {
        this._isMouseMiddlePan = t2 ? 1 : 0, this.controls != null && (t2 ? (this.controls.mouseButtons.LEFT = -1, this.controls.mouseButtons.RIGHT = -1, this.controls.mouseButtons.MIDDLE = o.MOUSE.PAN) : (this.controls.mouseButtons.LEFT = o.MOUSE.PAN, this._mouseRightRotate ? this.controls.mouseButtons.RIGHT = o.MOUSE.ROTATE : this.controls.mouseButtons.RIGHT = o.MOUSE.PAN, this.controls.mouseButtons.MIDDLE = 1));
      }, C.prototype.resetThreeJSControls = function() {
        this.controls && (this.controls.saveState(), this.controls.reset());
      }, C.prototype.enableZoom = function(t2) {
        this.controls != null && (this.controls.enableZoom = t2);
      }, C.prototype.enablePan = function(t2) {
        this.controls != null && (this.controls.enablePan = t2);
      }, C.prototype.getOrbitControls = function() {
        return this.controls;
      }, C.prototype.enableViewControls = function(t2) {
        this.controls.enabled = t2;
      }, C.prototype.initRunMode = function(t2) {
        this._isCreate ? console.log("iniRunMode failed,mxobject already created") : this._runMode = t2;
      }, C.prototype.getRunMode = function() {
        return this._runMode;
      }, C.prototype.setStaticLocalLoad = function(t2) {
        this._isStaticLocalLoad = t2;
      }, C.prototype.isStaticLocalLoad = function() {
        return this._isStaticLocalLoad;
      }, C.prototype.setStaticLocalLoadPath = function(t2) {
        this._staticLocalLoadPath = t2;
      }, C.prototype.addEvent = function(t2, e2) {
        this._event[t2] = e2;
      }, C.prototype.removeEvent = function(t2) {
        this._event[t2] = void 0;
      }, C.prototype.getEvent = function() {
        return this._event;
      }, C.prototype.sysVariable = function() {
        return this.m_sysVariable;
      }, C.prototype.setIniset = function(t2) {
        this.m_iniSet = t2;
      }, C.prototype.getInisetValue = function(t2) {
        return this.m_iniSet[t2];
      }, C.prototype.getViewColor = function() {
        return this._viewcolor;
      }, C.prototype.isWhiteViewColor = function() {
        return this._viewcolor == 16777215;
      }, C.prototype.initUserLoginData = function(t2, e2) {
        this._userIdentitySign = t2, this._userRandomToken = e2;
      }, C.prototype.initRendererParam = function(t2) {
        this._rendererParam = t2;
      }, C.prototype.automaticInversionColor = function(t2) {
        return this._viewcolor != 16777215 || t2 != 16777215 ? t2 : 0;
      }, C.prototype.automaticInversionColor2 = function(t2) {
        return this._viewcolor == 16777215 && (16777215 & t2) == 16777215 ? 4278190080 & t2 : t2;
      }, C.prototype.setViewColor = function(t2) {
        this._viewcolor = t2, this.scene != null && (this.scene.background = new o.Color(t2));
      }, C.prototype.getViewAngle = function() {
        return this._viewangle;
      }, C.prototype.callInitCompleteEvent = function() {
        this._event.loadComplete != null && this._event.loadComplete();
      }, C.prototype.callInitObjectEvent = function() {
        this._event.initObject != null && this._event.initObject();
      }, C.prototype.callOpenFileComplete = function(t2) {
        this._event.openFileComplete != null && this._event.openFileComplete(t2);
      }, C.prototype.hasEvent = function(t2) {
        return this._event[t2] != null;
      }, C.prototype.callEvent = function(t2, e2) {
        return this._event[t2] != null && this._event[t2](e2);
      }, C.prototype.userLoginResult = function(t2) {
        this._event.userLoginResult != null && this._event.userLoginResult(t2);
      }, C.prototype.serverReturn = function(t2) {
        var e2 = JSON.parse(t2);
        this._event.serverReturn != null && this._event.serverReturn(e2);
      }, C.prototype.openFileResult = function(t2) {
        JSON.parse(t2).linkServer || console.log("link mx serverobj error"), this._event.openFileResult != null && this._event.openFileResult(t2);
      }, C.prototype.xzSize = function(t2) {
        var e2 = this._devicePixelRatio;
        if (e2 - 1 <= 1e-4 && -1e-4 <= e2 - 1)
          return t2;
        for (var n2 = 9999999, i2 = t2, r2 = 0, a2 = t2; r2 < 100; r2++) {
          if ((s2 = (o2 = a2 * e2) - Math.floor(o2)) <= 1e-3)
            return a2;
          s2 < n2 && (n2 = s2, i2 = a2), a2 += 1;
        }
        for (a2 = t2; r2 < 100; r2++) {
          var o2, s2;
          if ((s2 = (o2 = a2 * e2) - Math.floor(o2)) <= 1e-3)
            return a2;
          s2 < n2 && (n2 = s2, i2 = a2), --a2;
        }
        return i2;
      }, C.prototype.setSize = function(t2, e2) {
        this._viewWidth = t2, this._viewHeight = e2, this._userCanvas != null && (this._userCanvas.width = t2, this._userCanvas.height = e2, this._userCanvas.style.width = t2 + "px", this._userCanvas.style.height = e2 + "px"), this.onResizeImp(), this.updateDisplay();
      }, C.prototype.getCurrentColor = function() {
        return this._color;
      }, C.prototype.setCurrentColor = function(t2) {
        this._color = t2;
      }, C.prototype.getSelect = function() {
        return this._select;
      }, C.prototype.call = function(t2, e2, n2) {
        this._net.getSend().CallServerJS(t2, e2, n2);
      }, C.prototype.zoomAll = function() {
        this._is2d && this.call("getDatabaseBoundHelp", '{"isBackground":1}', function(t2) {
          if (t2.length != 0) {
            var e2 = JSON.parse(t2);
            this.zoomW(new o.Vector3(e2[0], e2[1], 0), new o.Vector3(e2[2], e2[3], 0));
          }
        });
      }, C.prototype.tempDisableSelect = function(t2) {
        this._select.tmpDisable = t2;
      }, C.prototype.getViewCenterDocCoord = function() {
        return this._userCanvas != null ? this.screenCoord2Doc(0.5 * this._userCanvas.clientWidth, 0.5 * this._userCanvas.clientHeight, 0) : this.screenCoord2Doc(0.5 * this._viewWidth, 0.5 * this._viewHeight, 0);
      }, C.prototype.closeWebSocket = function() {
        this._net.closeWebSocket();
      }, C.prototype.findMxEntityAtPoint = function(t2, e2, n2) {
        !e2 && e2 !== void 0 || (t2 = this.docCoord2Screen(t2.x, t2.y, 0));
        var i2 = [], r2 = this.m_mxDatabase.getIntersectObjects(t2);
        if (r2.length == 0)
          return i2;
        var a2 = /* @__PURE__ */ new Map();
        return r2.forEach(function(t3) {
          var e3 = (0, M.MxGetMxDbEntitForThreeJsObject)(t3.object);
          if (e3) {
            var i3 = e3.objectId();
            if (!a2.has(i3)) {
              if (n2) {
                var r3 = (0, M.MxGetWordDrawxDataForThreeJsObject)(t3.object);
                r3 && n2(i3, r3);
              }
              a2.set(i3, e3.getUserObject());
            }
          }
        }), a2.forEach(function(t3) {
          i2.push(t3);
        }), i2;
      }, C.prototype.isMxCAD = function() {
        return this._runMode == i.kMxCAD;
      }, C.prototype.onLoad = function(t2) {
        if (this._isStaticLocalLoad)
          this._net = new d.MxNet(), this._net.init(this, false), 0 < this._openFile.length && (this._staticLocalNet = new v.MxLocalDwgFileLoad(this._net), this._staticLocalNet.load(encodeURIComponent(this._staticLocalLoadPath), encodeURIComponent(this._openFile)));
        else {
          this._net = new d.MxNet();
          var e2 = true;
          if (this._runMode == i.kMxCAD ? e2 = true : (e2 = !s.MxFun.isStaticLoad(), this._is2d || (e2 = true)), this._openFile.substring(this._openFile.lastIndexOf(".") + 1).toLowerCase() == "wgh" && (e2 = false), 0 < this._staticLoadingOpenFiles.length && (e2 = false), this._net.init(this, e2), !e2 && (this._staticNet = new d.MxHFileLoad(this._net), this._staticNet.setRequestHeader(this._requestHeader), this._staticNet.setUrlParam(t2), this._staticNet.load(this._openFile, this._staticLoadingOpenFiles), this._tzDwgStaticFile && 0 < this._tzDwgStaticFile.length)) {
            var n2 = new d.MxNet();
            n2.init(this, false), this._extRefManager.createTzDwgExternalReferences(99999), n2.setCurrentDatabaseId(99999), this._staticLoadTzNet = new d.MxHFileLoad(n2), this._staticLoadTzNet.setShowloading(false), this._staticLoadTzNet.setRequestHeader(this._requestHeader), this._staticLoadTzNet.load(this._tzDwgStaticFile, []);
          }
        }
      }, C.prototype.stopAllLoading = function() {
        this._staticNet && this._staticNet.stopAllLoading();
      }, C.prototype.getStaticNet = function() {
        return this._staticNet;
      }, C.prototype.isStaticFileNet = function() {
        return !this._isStaticLocalLoad && this._staticNet != null;
      }, C.prototype.getStaticLocalNet = function() {
        return this._staticLocalNet;
      }, C.prototype.getStaticLoadTzNet = function() {
        return this._staticLoadTzNet;
      }, C.prototype.getViewWidth = function() {
        return this._userCanvas != null ? this._userCanvas.clientWidth : this._viewWidth;
      }, C.prototype.getViewHeight = function() {
        return this._userCanvas != null ? this._userCanvas.clientHeight : this._viewHeight;
      }, C.prototype.makeCurrent = function() {
        f.MxManager.setCurrentMx(this);
      }, C.prototype.createCanvasImageData = function(t2, e2) {
        var n2 = this, i2 = 0, r2 = 0, a2 = false;
        e2 && e2.width && e2.height && (i2 = this.getViewWidth(), r2 = this.getViewHeight(), a2 = true, this.setSize(e2.width, e2.height)), this._callCreateCanvasImageData = function(e3) {
          a2 && n2.setSize(i2, r2), t2(e3);
        }, this.updateDisplay();
      }, C.prototype.getIntersectObjects = function(t2) {
        var e2 = new o.Raycaster();
        e2.linePrecision = this.screenCoordLong2Doc(4);
        var n2 = this.getCanvas(), i2 = n2.clientWidth, r2 = n2.clientHeight;
        return t2 = new o.Vector2(t2.x / i2 * 2 - 1, -t2.y / r2 * 2 + 1), e2.setFromCamera(t2, this.camera), e2.intersectObjects(this.threejsselectObjects.children, true);
      }, C.prototype.addObject = function(t2) {
        this.threejsselectObjects.add(t2);
      }, C.prototype.removeAllSelectObject = function() {
        for (; this.threejsselectObjects.children.length; )
          this.threejsselectObjects.remove(this.threejsselectObjects.children[0]);
      }, C.prototype.removeObject = function(t2) {
        this.threejsselectObjects.remove(t2);
      }, C.prototype.render = function() {
        this.secenView ? (this.mcObject.updateDisplay() ? (this.renderer.autoClear = false, this.renderer.state.reset()) : this.renderer.autoClear = true, this.renderer.render(this.secenView, this.cameraView), this.renderer.autoClear = false) : this.mcObject.updateDisplay() ? (this.renderer.autoClear = false, this.renderer.state.reset()) : this.renderer.autoClear = true, this.renderer.render(this.scene, this.camera), this._callCreateCanvasImageData != null && (this._callCreateCanvasImageData(this.renderer.domElement.toDataURL("image/png")), this._callCreateCanvasImageData = void 0), this.callEvent("render", this.renderer);
      }, C.prototype.updateDisplay = function(t2) {
        t2 === void 0 && (t2 = false), this.mxdrawThreeJS.updateDisplay(t2);
      }, C.prototype.updateDisplayImplement = function(t2) {
        function e2() {
          n2.m_mxDatabase.upDirtyDisplay(), n2._isAnimation ? (n2._isAnimationStarting = true, requestAnimationFrame(this.needRander)) : n2._isWaiteCount = 0, n2.render();
        }
        t2 === void 0 && (t2 = false);
        var n2 = this;
        t2 !== true ? this._isAnimationStarting || (this._isAnimation ? requestAnimationFrame(e2) : ((5 < this._isWaiteCount || this._isWaiteCount < 0) && (this._isWaiteCount = 0), this._isWaiteCount <= 0 && requestAnimationFrame(e2), this._isWaiteCount++)) : e2();
      }, C.prototype.gotoLayout = function(t2) {
        t2 == "Model" && (t2 = "");
        var e2 = this._openFile;
        if (e2) {
          var n2 = e2.lastIndexOf(".dwg");
          if (n2 !== void 0 && n2 !== -1) {
            if ((e2 = e2.substring(0, n2))[e2.length - 1] == "#") {
              var i2 = e2.substring(0, e2.length - 1), r2 = i2.lastIndexOf("#");
              r2 !== void 0 && r2 !== -1 && (e2 = i2.substring(0, r2));
            }
            0 < t2.length ? e2 = e2 + "#" + t2 + "#.dwg.mxb1.wgh" : e2 += ".dwg.mxb1.wgh";
            var a2 = s.MxFun.getLocationPageUrl() + "?file=" + e2;
            window.location.href = encodeURI(a2);
          }
        }
      }, C.prototype.addInitParam = function(t2, e2) {
        var n2 = new Array();
        n2.push(t2), n2.push(e2), this._iniParam.push(n2);
      }, C.prototype.openFile = function(t2, e2) {
        if (e2 === void 0 && (e2 = ""), !this._isCreate)
          return console.log("mx: openFile Fialed mxasser(_isCreate == false)"), false;
        if (this.stopAllLoading(), t2.length == 0)
          return false;
        this.reInit(), this._devicePixelRatio = window.devicePixelRatio, t2 instanceof Array ? (this._openFile = t2[0], this._staticLoadingOpenFiles = t2) : this._openFile = t2, this._openFileExtName = this._openFile.substring(this._openFile.lastIndexOf(".") + 1), this._iniParam = [], this._initZoomwCoordPt1 = null, this._initZoomWCoordPt2 = null;
        var n2 = new Array();
        return n2.push("file"), n2.push(this._openFile), this._iniParam.push(n2), this.onLoad(e2), true;
      }, C.prototype.updateCameraDisplayRange = function(t2, e2, n2) {
        this.mxdrawThreeJS.updateCameraDisplayRange(t2, e2, n2);
      }, C.prototype.newFile = function(t2, e2, n2, i2) {
        if (!this._isCreate)
          return console.log("mx: openFile Fialed mxasser(_isCreate == false)"), false;
        var r2, a2;
        if (a2 = t2 instanceof Object && e2 instanceof Object ? (r2 = t2, e2) : (r2 = new o.Vector3(t2, e2, 0), new o.Vector3(n2, i2, 0)), r2.x > a2.x) {
          var l2 = r2.x;
          r2.x = a2.x, a2.x = l2;
        }
        if (r2.y > a2.y) {
          var c2 = r2.y;
          r2.y = a2.y, a2.y = c2;
        }
        this.reInit(), this._devicePixelRatio = window.devicePixelRatio, this._openFile = "", this._openFileExtName = "dwg", this._iniParam = [], this._initZoomwCoordPt1 = null, this._initZoomWCoordPt2 = null;
        var u2 = new o.Matrix4();
        u2.identity(), this.intiDoc2Wold(u2), this.mxdrawThreeJS.updateCameraDisplayRange(r2, a2, 0), this.updateDisplay(true);
        var h2 = s.MxFun.getUiObj();
        h2 != null && (h2.SetLayoutData(this._allLayoutName), h2.UpDisplayLayout());
      }, C.prototype.calcViewsize = function() {
        if (this._userCanvas == null)
          return { viewWidth: window.innerWidth, viewHeight: window.innerHeight };
        var t2 = this._userCanvas.clientWidth, e2 = this._userCanvas.clientHeight;
        if (this._event.onResize != null) {
          var n2 = this._event.onResize();
          n2 != null && (t2 = parseInt(n2.width), e2 = parseInt(n2.height));
        }
        return { viewWidth: t2, viewHeight: e2 };
      }, C.prototype.initMxCpp = function(t2) {
        t2 && (this.mcObject.init(this, t2), this.secenView != null ? this.secenView.background = null : this.scene.background = null);
      }, C.prototype.create = function(t2, e2, n2, r2) {
        if (this._is2d ? r2 ? (this.mxdrawThreeJS = new b.MxDrawMapBoxThreeJS(r2, this), this._viewcolor = 16777215) : this.mxdrawThreeJS = new b.MxDrawObject2dThreeJS(this) : this.mxdrawThreeJS = new b.MxDrawObject3dThreeJS(this), this._callCreateCanvasImageData = void 0, this._devicePixelRatio = window.devicePixelRatio, e2 instanceof Array ? (this._openFile = e2[0], this._staticLoadingOpenFiles = e2) : this._openFile = e2, this._iniParam = s.MxFun.getUrlParams(), this._openFileExtName = this._openFile.substring(this._openFile.lastIndexOf(".") + 1), this._openFile != "" && this._runMode != i.kMxCAD && this._runMode != i.kMxCADBrowseApp) {
          var a2 = new Array();
          a2.push("file"), a2.push(this._openFile), this._iniParam.push(a2);
        }
        this._userIdentitySign != "" && (this.addInitParam("userIdentitySign", this._userIdentitySign), this.addInitParam("userRandomToken", this._userRandomToken)), this.addInitParam("runMode", this._runMode == i.kMxCAD || this._runMode == i.kMxCADBrowseApp ? "mxcad" : "browse"), this._runMode == i.kMxCAD || this._runMode == i.kMxCADBrowseApp ? (this._openFile == "empty" && (this._openFile = ""), this._mxCAD = new g.MxCADObject(this)) : this._mxCAD = null, this._userCanvas = t2;
        var l2 = window.innerWidth, c2 = window.innerHeight;
        if (t2 != null && (l2 = t2.clientWidth, c2 = t2.clientHeight), this._viewWidth = l2, this._viewHeight = c2, this.m_mxDatabase.getSelectManager().setCanvasSize(l2, c2), this.mxdrawThreeJS.onInitThreejs(), this.eventManager.registEvent(this), this.onCreate(), this.m_mxDatabase.init(this), this._parentDocObject = new o.Object3D(), this.scene.add(this._parentDocObject), this.threejsselectObjects = new o.Object3D(), this.scene.add(this.threejsselectObjects), this._objectsOsnap = new y.MxDrawObjectOsnap(this), this._select = new p.MxSelect(this, this.getCanvas()), this._select.enabled = s.MxFun.isEnableSelect(), this._select.init(), this._is2d || (this._select.enabled = false), this._runMode != i.kBrowse && (this._select.enabled = false), f.MxManager.add(this), f.MxManager.setCurrentMx(this), this.mxdrawThreeJS.addControlsChangeEvent(), this.updateDisplay(), this.mxdrawThreeJS.getType() == b.MxThreeJSType.kMapBox)
          this.mxdrawThreeJS.addWindowResizeEvent();
        else {
          var u2 = this;
          if (t2 == null) {
            var h2 = function() {
              u2._viewWidth = window.innerWidth, u2._viewHeight = window.innerHeight, u2.onResizeImp(), u2.updateDisplay();
            };
            window.addEventListener("resize", h2, false), this._onResizeFun = h2;
          } else {
            var d2 = function(t3) {
              t3 && t3.viewWidth && t3.viewHeight || (t3 = u2.calcViewsize()), u2._viewWidth = t3.viewWidth, u2._viewHeight = t3.viewHeight, u2.onResizeImp(u2._viewWidth, u2._viewHeight), u2.updateDisplay();
            };
            if (this._onResizeFun = d2, this._event.addResizeEvent != null ? this._event.addResizeEvent(d2, t2) : window.addEventListener("resize", d2, false), window.setTimeout(function() {
              d2();
            }, 5), this._event.onResize != null) {
              var m2 = u2.calcViewsize();
              d2(m2);
              var v2 = 0, x2 = 0, w2 = true, M2 = window.setInterval(function() {
                x2++;
                var t3 = u2.calcViewsize();
                if (t3.viewWidth == m2.viewWidth && t3.viewHeight == m2.viewHeight && 0 < t3.viewWidth && 0 < t3.viewHeight) {
                  if (8 < ++v2)
                    return clearInterval(M2), void d2(t3);
                  1 <= v2 && w2 && (d2(t3), 2 <= v2 && (w2 = false));
                } else
                  v2 = 0;
                m2 = t3, 50 < x2 && (clearInterval(M2), 0 < t3.viewWidth && 0 < t3.viewHeight ? d2(t3) : console.log("mxassert(0) error view size"));
              }, 50);
            }
          }
        }
        this.onLoad(n2), this.callInitObjectEvent(), this._isCreate = true;
      }, C.prototype.initResize = function() {
        if (this._userCanvas == null)
          this._viewWidth = window.innerWidth, this._viewHeight = window.innerHeight, this.onResizeImp();
        else {
          if (this._viewWidth = this._userCanvas.clientWidth, this._viewHeight = this._userCanvas.clientHeight, this._event.onResize != null) {
            var t2 = this._event.onResize();
            t2 != null && (this._viewWidth = t2.width, this._viewHeight = t2.height);
          }
          this.onResizeImp(this._viewWidth, this._viewHeight);
        }
        this.updateDisplay();
      }, C.prototype.is2D = function() {
        return this._is2d;
      }, C.prototype.getOpenFile = function() {
        return this._openFile;
      }, C.prototype.getFileTitle = function() {
        var t2 = this._openFile;
        if (this._openFile.substring(this._openFile.lastIndexOf(".") + 1).toLowerCase() == "wgh") {
          var e2 = this._openFile.substring(0, this._openFile.indexOf(".mxb1.wgh")).split("/");
          (t2 = e2.length == 1 ? e2[0] : e2[e2.length - 1])[0] == "$" && (t2 = t2.substring(1));
        }
        return t2;
      }, C.prototype.getIniParam = function() {
        return this._iniParam;
      }, C.prototype.getOpenFileExtName = function() {
        return this._openFileExtName;
      }, C.prototype.loadCodeToServer = function(t2, e2) {
        this._net.getSend().CallLoadCodeToServer(t2, e2);
      }, C.prototype.userLogin = function(t2, e2) {
        this._net.getSend().UserLogin(t2, e2);
      }, C.prototype.getUserCanvas = function() {
        return this._userCanvas;
      }, C.prototype.getCanvas = function() {
        return this._userCanvas != null ? this._userCanvas : this.renderer.domElement;
      }, C.prototype.getScene = function() {
        return this.scene;
      }, C.prototype.getCamera = function() {
        return this.camera;
      }, C.prototype.callCommand = function(t2, e2, n2) {
        e2 === void 0 && (e2 = ""), this._net.getSend().DoCommand(t2, e2, n2);
      }, C.prototype.undoMark = function() {
        this._net.getSend().UndoMark();
      }, C.prototype.loadCodeFileToServer = function(t2, e2, n2) {
        var i2 = '{"path":"' + t2 + '","reload":' + (n2 != null ? "true" : "false") + "}";
        this._net.getSend().DoCommand("Mx_LoadCodeFormServerFile", i2, e2);
      }, C.prototype.deleteAll = function() {
        this.removeAllEntity(), this.callCommand("Mx_ClearAll"), this.updateDisplay();
      }, C.prototype.undo = function() {
        this.callCommand("Mx_Undo");
      }, C.prototype.save = function() {
        this.callCommand("Mx_Save");
      }, C.prototype.initAllLayoutName = function(t2) {
        this._allLayoutName = t2;
      }, C.prototype.getAllLayoutName = function() {
        return this._allLayoutName;
      }, C.prototype.updataClipMaterial = function() {
        this._blocks.updataClipMaterial(this);
      }, C.prototype.getSketchLayers = function() {
        return this._sketchLayers;
      }, C.prototype.getExtRefManager = function() {
        return this._extRefManager;
      }, C.prototype.showLayer = function(t2, e2, n2) {
        typeof t2 == "string" && (t2 = this._layers.getLayerIdForName(t2)), n2 ? this._sketchLayers.getLayer(t2).show(e2) : this._blocks.showLayer(t2, e2), this.updateDisplay();
      }, C.prototype.addLayerInfo = function(t2, e2, n2) {
        e2 = this.automaticInversionColor(16777215 & e2), this._layers.add(t2, e2, n2);
      }, C.prototype.setZeroLayerId = function(t2) {
        this._layers.setZeroLayerId(t2);
      }, C.prototype.addLayerInfoComplete = function() {
        this._layers.initComplete();
      }, C.prototype.addEntity = function(t2, e2) {
        var n2 = this._mapId2Entity.get(t2);
        n2 == null && (n2 = new Array(), this._mapId2Entity.set(t2, n2)), n2.push(e2);
      }, C.prototype.getEntity = function(t2) {
        return this._mapId2Entity.get(t2);
      }, C.prototype.clearThreejsScence = function() {
        s.MxFun.removeThreejsObject(this.threejsselectObjects, this.scene), this.threejsselectObjects = new o.Object3D(), s.MxFun.removeThreejsObject(this._parentDocObject, this.scene), this._parentDocObject = new o.Object3D(), this.scene.remove(), this.scene.dispose(), this.scene = new o.Scene(), this.scene.add(this.threejsselectObjects), this.scene.add(this._parentDocObject), this._objectsOsnap = new y.MxDrawObjectOsnap(this), this.m_mxDatabase.init(this), this.mxdrawThreeJS.onInitScene(), s.MxFun.removeThreejsObject(this.threejsselectObjectsView, this.secenView), this.threejsselectObjectsView = null, this.secenView.remove(), this.secenView.dispose(), this.secenView = null, this.onInitViewScene();
      }, C.prototype.reInit = function() {
        this.clearThreejsScence(), this._openFile = "", this._openFileExtName = "", this._select.removeAll(), this._is2d || (this._select.enabled = false), this._mapId2Entity = /* @__PURE__ */ new Map(), this._setAdyDelete = /* @__PURE__ */ new Map(), this._sketchLayers = new l.MxCadSketchLayers(this), this._layers = new c.MxBrowseLayerData(), this._blocks = new u.Blocks(), this._extRefManager = new u.ExternalReferenceManager(), this._doc2World = new o.Matrix4(), this._word2doc = new o.Matrix4(), this._allLayoutName = new Array(), this._tzDwgStaticFile = "", this._devicePixelRatio = window.devicePixelRatio, this._blocks.initRootBlockRef();
      }, C.prototype.removeEntity = function(t2) {
        if (this._setAdyDelete[t2] == null) {
          this._setAdyDelete[t2] = true;
          var e2 = this._mapId2Entity.get(t2);
          if (e2 != null) {
            for (var n2 in e2)
              this.scene.remove(e2[n2]);
            this._sketchLayers.removeEntity(t2), this._mapId2Entity.delete(t2);
          }
        }
      }, C.prototype.removeEntityFromServer = function(t2) {
        for (var e2 = t2.getInt32(4, true), n2 = 0; n2 < e2; n2++) {
          var i2 = t2.getInt32(4 * (n2 + 20), true);
          this.removeEntity(i2);
        }
      }, C.prototype.removeAllEntity = function() {
        var t2 = this;
        this._mapId2Entity.forEach(function(e2, n2, i2) {
          for (var r2 in e2)
            t2.scene.remove(e2[r2]);
        }), this._mapId2Entity.clear(), this._sketchLayers.removeAllEntity();
      }, C.prototype.mxWebAddEntity = function(t2) {
        this._setAdyDelete.clear();
        var e2 = this.mxWebAddEntity_3DChild(t2);
        this.mxWebAddEntity_Curve(t2, e2), this._setAdyDelete.clear();
      }, C.prototype.screenCoord2World = function(t2, e2, n2) {
        var i2 = this.getCanvas(), r2 = i2.clientWidth, a2 = i2.clientHeight;
        n2 = 0.5;
        var s2 = this.camera;
        s2 && s2.isOrthographicCamera && (n2 = (s2.near + s2.far) / (s2.near - s2.far));
        var l2 = new o.Vector3(t2 / r2 * 2 - 1, -e2 / a2 * 2 + 1, n2);
        return l2.unproject(this.camera), l2;
      }, C.prototype.worldCoord2Screen = function(t2, e2, n2) {
        var i2 = new o.Vector3(t2, e2, n2).project(this.camera), r2 = this.getCanvas(), a2 = r2.clientWidth / 2, s2 = r2.clientHeight / 2, l2 = Math.round(i2.x * a2 + a2), c2 = Math.round(-i2.y * s2 + s2);
        return new o.Vector3(l2, c2, 0);
      }, C.prototype.worldCoordLong2Doc = function(t2) {
        var e2 = this.worldCoord2Doc(0, 0, 0), n2 = this.worldCoord2Doc(t2, 0, 0);
        return e2.distanceTo(n2);
      }, C.prototype.docCoordLong2World = function(t2) {
        var e2 = this.docCoord2World(0, 0, 0), n2 = this.docCoord2World(t2, 0, 0);
        return e2.distanceTo(n2);
      }, C.prototype.getDoc2CADMatrix = function() {
        return this._doc2CAD;
      }, C.prototype.docCoord2Cad = function(t2, e2, n2) {
        var i2 = new o.Vector3(t2, e2, n2);
        return i2.applyMatrix4(this._doc2CAD), i2;
      }, C.prototype.cadCoord2Doc = function(t2, e2, n2) {
        var i2 = new o.Vector3(t2, e2, n2);
        return i2.applyMatrix4(this._cad2Doc), i2;
      }, C.prototype.docCoord2World = function(t2, e2, n2) {
        var i2 = new o.Vector3(t2, e2, n2);
        return i2.applyMatrix4(this._doc2World), i2;
      }, C.prototype.getDoc2World = function() {
        return this._doc2World;
      }, C.prototype.getWorldToDoc = function() {
        return this._word2doc;
      }, C.prototype.worldCoord2Doc = function(t2, e2, n2) {
        var i2 = new o.Vector3(t2, e2, n2);
        return i2.applyMatrix4(this._word2doc), i2;
      }, C.prototype.screenCoord2Doc = function(t2, e2, n2) {
        var i2 = this.screenCoord2World(t2, e2, n2);
        return this.worldCoord2Doc(i2.x, i2.y, 0);
      }, C.prototype.docCoord2Screen = function(t2, e2, n2) {
        var i2 = this.docCoord2World(t2, e2, n2);
        return this.worldCoord2Screen(i2.x, i2.y, i2.z);
      }, C.prototype.screenCoordLong2Doc = function(t2) {
        var e2 = this.screenCoord2Doc(0, 0, 0), n2 = this.screenCoord2Doc(t2, 0, 0);
        return e2.distanceTo(n2);
      }, C.prototype.screenCoordLong2DocScale = function() {
        var t2 = this.screenCoord2Doc(0, 0, 0), e2 = this.screenCoord2Doc(1, 0, 0);
        return t2.distanceTo(e2);
      }, C.prototype.docCoordLong2Screen = function(t2) {
        var e2 = this.docCoord2Screen(0, 0, 0), n2 = this.docCoord2Screen(0 < t2 ? t2 : -t2, 0, 0);
        return 0 <= t2 ? e2.distanceTo(n2) : -e2.distanceTo(n2);
      }, C.prototype.screenCoordLong2World = function(t2) {
        var e2 = this.screenCoord2World(0, 0, 0), n2 = this.screenCoord2World(0 < t2 ? t2 : -t2, 0, 0);
        return 0 <= t2 ? e2.distanceTo(n2) : -e2.distanceTo(n2);
      }, C.prototype.worldCoordLong2Screen = function(t2) {
        var e2 = this.worldCoord2Screen(0, 0, 0), n2 = this.worldCoord2Screen(t2, 0, 0);
        return e2.distanceTo(n2);
      }, C.prototype.initCAD2Doc = function(t2) {
        t2 instanceof Array ? this._cad2Doc.fromArray(t2) : this._cad2Doc = t2, this._doc2CAD.getInverse(this._cad2Doc);
      }, C.prototype.intiDoc2Wold = function(t2) {
        t2 instanceof Array ? this._doc2World.fromArray(t2) : this._doc2World = t2, this._word2doc.getInverse(this._doc2World), this.m_mxDatabase.intiDoc2Wold(this._doc2World), this._parentDocObject.matrix = this._doc2World, this._parentDocObject.matrixAutoUpdate = false, this.threejsselectObjects.matrix = this._doc2World, this.threejsselectObjects.matrixAutoUpdate = false;
      }, C.prototype.getDrawContainer = function() {
        return this.threejsselectObjects;
      }, C.prototype.getTheTempDrawContainer = function() {
        return this._parentDocObject;
      }, C.prototype.enableSingleTouchPan = function(t2) {
        this.controls.enablePan = t2;
      }, C.prototype.mxWebAddEntityFor2dPointMeshBuffers = function(t2, e2) {
        var n2 = new h.MxNetData(t2), i2 = n2.getdPointMeshBuffersHead(), r2 = i2.zeroLayerIdIndex, a2 = i2.databaseIndex;
        e2 != -1 && (a2 = e2);
        for (var o2 = i2.datasize, s2 = 0; s2 < i2.datacount; s2++) {
          var l2 = n2.getdPointMeshBufferDataHead(o2);
          o2 = l2.offset;
          var c2 = l2.layerId, u2 = c2 == r2, d2 = l2.blkId, p2 = l2.pointCount;
          if (!(p2 < 1)) {
            for (var f2 = [], m2 = [], g2 = [], v2 = [], y2 = [], x2 = 0; x2 < p2; x2++) {
              var b2 = t2.getFloat32(o2, true);
              o2 += 4;
              var w2 = t2.getFloat32(o2, true);
              o2 += 4;
              var M2 = t2.getFloat32(o2, true);
              o2 += 4;
              var _6 = t2.getFloat32(o2, true);
              o2 += 4;
              var S2 = t2.getFloat32(o2, true);
              o2 += 4;
              var C2 = t2.getFloat32(o2, true);
              o2 += 4;
              var T = t2.getInt32(o2, true);
              o2 += 4;
              var E = T >> 24 & 255;
              E == 2 ? (v2.push(b2, w2), v2.push(M2, _6), v2.push(S2, C2)) : E == 1 ? d2 != 0 && u2 ? (y2.push(b2, w2), y2.push(M2, _6), y2.push(S2, C2)) : (g2.push(b2, w2), g2.push(M2, _6), g2.push(S2, C2)) : (T = this.automaticInversionColor(16777215 & T), f2.push(b2, w2), f2.push(M2, _6), f2.push(S2, C2), m2.push((255 & T) / 255, (T >> 8 & 255) / 255, (T >> 16 & 255) / 255), m2.push((255 & T) / 255, (T >> 8 & 255) / 255, (T >> 16 & 255) / 255), m2.push((255 & T) / 255, (T >> 8 & 255) / 255, (T >> 16 & 255) / 255));
            }
            var D = this._blocks, A = this._layers;
            a2 != 0 && (D = this._extRefManager.getBlocks(a2), A = this._extRefManager.getLayers(a2));
            var O = D.crateBlock(d2);
            O.addGeometryMesh(f2, m2, c2, v2, g2, y2), D.createThreejsObj(O, this, A);
          }
        }
      }, C.prototype.mxWebAddEntityForMemorySections = function(t2, e2) {
        var n2 = new h.MxNetData(t2), i2 = n2.getMemorySectionsHead(), r2 = (i2.zeroLayerIdIndex, i2.databaseIndex);
        e2 != -1 && (r2 = e2);
        var a2 = i2.nOffset, o2 = this._blocks, s2 = this._layers;
        r2 != 0 && (o2 = this._extRefManager.getBlocks(r2), s2 = this._extRefManager.getLayers(r2));
        for (var l2 = 0; l2 < i2.datacount; l2++) {
          var c2 = n2.getMemorySectionHead(a2);
          a2 = c2.offset;
          var d2 = new u.MxNewDisplayMemorySection();
          d2.layerId = c2.layerId, d2.blockId = c2.blkId, d2.id = c2.memId, d2.color = c2.memColor, d2.type = c2.memType;
          var p2 = false;
          d2.type == u.MxNewDisplayMemorySectionType.kLinesType_Float ? (p2 = true, d2.type = u.MxNewDisplayMemorySectionType.kLinesType) : d2.type == u.MxNewDisplayMemorySectionType.kTriangleType_Float ? (p2 = true, d2.type = u.MxNewDisplayMemorySectionType.kTriangleType) : d2.type == u.MxNewDisplayMemorySectionType.kPointType_Float && (p2 = true, d2.type = u.MxNewDisplayMemorySectionType.kPointType);
          var f2 = c2.pointCount;
          if (!(f2 < 1)) {
            for (var m2 = [], g2 = 0; g2 < f2; g2++)
              if (p2) {
                var v2 = t2.getFloat32(a2, true);
                a2 += 4;
                var y2 = t2.getFloat32(a2, true);
                a2 += 4, t2.getFloat32(a2, true), a2 += 4, m2.push(v2, y2, 0);
              } else
                v2 = t2.getFloat64(a2, true), a2 += 8, y2 = t2.getFloat64(a2, true), a2 += 8, t2.getFloat64(a2, true), a2 += 8, m2.push(v2, y2, 0);
            d2.points = m2;
            var x2 = o2.crateBlock(d2.blockId);
            x2.addMemorySections(d2), o2.createThreejsObj(x2, this, s2);
          }
        }
      }, C.prototype.mxWebAddEntityFor2dPointTextureBuffers = function(t2, e2) {
        var n2 = new h.MxNetData(t2), i2 = n2.getdPointTextureBuffersHead(), r2 = i2.ver, a2 = (i2.zeroLayerIdIndex, i2.databaseIndex);
        e2 != -1 && (a2 = e2);
        for (var o2 = i2.datasize, s2 = 0; s2 < i2.datacount; s2++) {
          var l2 = n2.getdPointTextureBufferDataHead(o2);
          o2 = l2.offset;
          var c2 = l2.layerId, u2 = l2.blkId, d2 = l2.dataCount;
          if (!(d2 < 1)) {
            var p2 = 0, f2 = this._blocks, m2 = this._layers;
            a2 != 0 && (f2 = this._extRefManager.getBlocks(a2), m2 = this._extRefManager.getLayers(a2));
            for (var g2 = f2.crateBlock(u2); p2 < d2; p2++) {
              var v2 = t2.getFloat64(o2, true);
              o2 += 8;
              var y2 = t2.getFloat64(o2, true);
              o2 += 8;
              var x2 = t2.getFloat64(o2, true);
              o2 += 8;
              var b2 = t2.getUint32(o2, true);
              o2 += 4;
              var w2 = t2.getUint32(o2, true);
              o2 += 4;
              var M2 = String.fromCharCode.apply(null, new Uint8Array(t2.buffer.slice(o2, o2 + w2)));
              o2 += w2;
              var _6 = [], S2 = [], C2 = [];
              if (!(b2 < 1)) {
                for (var T = 0; T < b2; T++) {
                  if (5 <= r2) {
                    var E = t2.getFloat64(o2, true);
                    o2 += 8;
                    var D = t2.getFloat64(o2, true);
                    o2 += 8, t2.getFloat64(o2, true), o2 += 8;
                    var A = t2.getFloat64(o2, true);
                    o2 += 8;
                    var O = t2.getFloat64(o2, true);
                    o2 += 8, t2.getFloat64(o2, true), o2 += 8;
                    var L = t2.getFloat64(o2, true);
                    o2 += 8;
                    var I = t2.getFloat64(o2, true);
                    o2 += 8, t2.getFloat64(o2, true), o2 += 8, _6.push(E, D), _6.push(A, O), _6.push(L, I);
                  } else
                    E = t2.getFloat32(o2, true), o2 += 4, D = t2.getFloat32(o2, true), o2 += 4, A = t2.getFloat32(o2, true), o2 += 4, O = t2.getFloat32(o2, true), o2 += 4, L = t2.getFloat32(o2, true), o2 += 4, I = t2.getFloat32(o2, true), o2 += 4, _6.push(E, D), _6.push(A, O), _6.push(L, I);
                  var P = t2.getInt32(o2, true);
                  o2 += 4;
                  var R = t2.getFloat32(o2, true);
                  o2 += 4;
                  var k = t2.getFloat32(o2, true);
                  o2 += 4;
                  var B = t2.getFloat32(o2, true);
                  o2 += 4;
                  var N = t2.getFloat32(o2, true);
                  o2 += 4;
                  var F = t2.getFloat32(o2, true);
                  o2 += 4;
                  var j = t2.getFloat32(o2, true);
                  o2 += 4;
                  var V = P >> 24 & 255;
                  P = V == 2 || V == 1 ? 16777215 : this.automaticInversionColor(16777215 & P), C2.push(R, k), C2.push(B, N), C2.push(F, j), S2.push((255 & P) / 255, (P >> 8 & 255) / 255, (P >> 16 & 255) / 255), S2.push((255 & P) / 255, (P >> 8 & 255) / 255, (P >> 16 & 255) / 255), S2.push((255 & P) / 255, (P >> 8 & 255) / 255, (P >> 16 & 255) / 255);
                }
                g2.addGeometryTexture(_6, C2, S2, c2, M2, v2, y2, x2);
              }
            }
            f2.createThreejsObj(g2, this, m2);
          }
        }
      }, C.prototype.mxWebAddEntityFor2dPointCurveBuffers = function(t2, e2) {
        var n2 = new h.MxNetData(t2), i2 = n2.getdPointCurveBuffersHead(), r2 = i2.zeroLayerIdIndex, a2 = i2.databaseIndex;
        e2 != -1 && (a2 = e2);
        for (var o2 = i2.datasize, s2 = 0; s2 < i2.datacount; s2++) {
          var l2 = n2.getdPointCurveBufferDataHead(o2);
          o2 = l2.offset;
          var c2 = l2.layerId, u2 = c2 == r2, d2 = l2.blkId, p2 = l2.pointCount;
          if (!(p2 < 1)) {
            for (var f2 = [], m2 = [], g2 = [], v2 = [], y2 = [], x2 = 0; x2 < p2; x2++) {
              var b2 = t2.getFloat32(o2, true);
              o2 += 4;
              var w2 = t2.getFloat32(o2, true);
              o2 += 4;
              var M2 = t2.getFloat32(o2, true);
              o2 += 4;
              var _6 = t2.getFloat32(o2, true);
              o2 += 4;
              var S2 = t2.getInt32(o2, true);
              o2 += 4;
              var C2 = S2 >> 24 & 255;
              C2 == 2 ? (v2.push(b2, w2), v2.push(M2, _6)) : C2 == 1 ? d2 != 0 && u2 ? (y2.push(b2, w2), y2.push(M2, _6)) : (g2.push(b2, w2), g2.push(M2, _6)) : (f2.push(b2, w2), f2.push(M2, _6), S2 = this.automaticInversionColor(16777215 & S2), m2.push((255 & S2) / 255, (S2 >> 8 & 255) / 255, (S2 >> 16 & 255) / 255), m2.push((255 & S2) / 255, (S2 >> 8 & 255) / 255, (S2 >> 16 & 255) / 255));
            }
            var T = this._blocks, E = this._layers;
            a2 != 0 && (T = this._extRefManager.getBlocks(a2), E = this._extRefManager.getLayers(a2));
            var D = T.crateBlock(d2);
            D.addGeometryCurve(f2, m2, c2, v2, g2, y2), T.createThreejsObj(D, this, E);
          }
        }
      }, C.prototype.mxWebAddEntityFor2dPointCurveBuffer = function(t2, e2) {
        var n2 = new h.MxNetData(t2);
        if (!n2.getIsSketchEntity()) {
          var i2, r2 = n2.getLayerId(), a2 = r2 == n2.getZeroLayerId(), o2 = n2.getBlockId();
          if (!((i2 = t2.getInt32(20, true) / 20) < 1)) {
            for (var s2 = 80, l2 = [], c2 = [], u2 = [], d2 = [], p2 = [], f2 = 0; f2 < i2; f2++) {
              var m2 = t2.getFloat32(s2, true);
              s2 += 4;
              var g2 = t2.getFloat32(s2, true);
              s2 += 4;
              var v2 = t2.getFloat32(s2, true);
              s2 += 4;
              var y2 = t2.getFloat32(s2, true);
              s2 += 4;
              var x2 = t2.getInt32(s2, true);
              s2 += 4;
              var b2 = x2 >> 24 & 255;
              b2 == 2 ? (d2.push(m2, g2), d2.push(v2, y2)) : b2 == 1 ? o2 != 0 && a2 ? (p2.push(m2, g2), p2.push(v2, y2)) : (u2.push(m2, g2), u2.push(v2, y2)) : (x2 = this.automaticInversionColor(16777215 & x2), l2.push(m2, g2), l2.push(v2, y2), c2.push((255 & x2) / 255, (x2 >> 8 & 255) / 255, (x2 >> 16 & 255) / 255), c2.push((255 & x2) / 255, (x2 >> 8 & 255) / 255, (x2 >> 16 & 255) / 255));
            }
            var w2 = n2.getDatabaseIndex();
            e2 != -1 && (w2 = e2);
            var M2 = this._blocks, _6 = this._layers;
            w2 != 0 && (M2 = this._extRefManager.getBlocks(w2), _6 = this._extRefManager.getLayers(w2));
            var S2 = M2.crateBlock(o2);
            S2.addGeometryCurve(l2, c2, r2, d2, u2, p2), M2.createThreejsObj(S2, this, _6);
          }
        }
      }, C.prototype.mxWebAddEntityFor2dPointMeshBuffer = function(t2, e2) {
        var n2 = new h.MxNetData(t2);
        if (!n2.getIsSketchEntity()) {
          var i2, r2 = n2.getLayerId(), a2 = n2.getBlockId(), o2 = r2 == n2.getZeroLayerId();
          if (!((i2 = t2.getInt32(12, true) / 28) < 1)) {
            for (var s2 = 80, l2 = [], c2 = [], u2 = [], d2 = [], p2 = [], f2 = 0; f2 < i2; f2++) {
              var m2 = t2.getFloat32(s2, true);
              s2 += 4;
              var g2 = t2.getFloat32(s2, true);
              s2 += 4;
              var v2 = t2.getFloat32(s2, true);
              s2 += 4;
              var y2 = t2.getFloat32(s2, true);
              s2 += 4;
              var x2 = t2.getFloat32(s2, true);
              s2 += 4;
              var b2 = t2.getFloat32(s2, true);
              s2 += 4;
              var w2 = t2.getInt32(s2, true);
              s2 += 4;
              var M2 = w2 >> 24 & 255;
              M2 == 2 ? (d2.push(m2, g2), d2.push(v2, y2), d2.push(x2, b2)) : M2 == 1 ? a2 != 0 && o2 ? (p2.push(m2, g2), p2.push(v2, y2), p2.push(x2, b2)) : (u2.push(m2, g2), u2.push(v2, y2), u2.push(x2, b2)) : (l2.push(m2, g2), l2.push(v2, y2), l2.push(x2, b2), w2 = this.automaticInversionColor(16777215 & w2), c2.push((255 & w2) / 255, (w2 >> 8 & 255) / 255, (w2 >> 16 & 255) / 255), c2.push((255 & w2) / 255, (w2 >> 8 & 255) / 255, (w2 >> 16 & 255) / 255), c2.push((255 & w2) / 255, (w2 >> 8 & 255) / 255, (w2 >> 16 & 255) / 255));
            }
            var _6 = n2.getDatabaseIndex();
            e2 != -1 && (_6 = e2);
            var S2 = this._blocks, C2 = this._layers;
            _6 != 0 && (S2 = this._extRefManager.getBlocks(_6), C2 = this._extRefManager.getLayers(_6));
            var T = S2.crateBlock(a2);
            T.addGeometryMesh(l2, c2, r2, d2, u2, p2), S2.createThreejsObj(T, this, C2);
          }
        }
      }, C.prototype.mxWebCreateAllBlocks = function(t2, e2) {
        var n2 = new h.MxNetData(t2).getDatabaseIndex();
        e2 != -1 && (n2 = e2);
        var i2 = this._blocks;
        n2 != 0 && (i2 = this._extRefManager.getBlocks(n2)), i2.createBlocks(t2, this.scene);
      }, C.prototype.mxWebEntitysData = function(t2, e2) {
        e2 == -1 && this._objectsOsnap.mxWebEntitysData(t2, e2);
      }, C.prototype.getObjectOsnap = function() {
        return this._objectsOsnap;
      }, C.prototype.saveMxEntityToJson = function(t2) {
        return this.m_mxDatabase.saveJson(t2);
      }, C.prototype.getDtabaseJsonString = function() {
        return JSON.stringify(this.m_mxDatabase.toJsonObject());
      }, C.prototype.loadMxEntityFromJson = function(t2) {
        return this.m_mxDatabase.loadJson(t2);
      }, C);
      function C(t2) {
        this._is2d = true, this._runMode = i.kBrowse, this._mxCAD = null, this._userCanvas = null, this._openFile = "empty", this._staticLoadingOpenFiles = [], this._openFileExtName = "", this._userIdentitySign = "", this._rendererParam = void 0, this._userRandomToken = "", this._isCreate = false, this.m_iniSet = {}, this._net = null, this._staticNet = null, this._staticLoadTzNet = null, this._staticLocalNet = null, this._isStaticLocalLoad = false, this._staticLocalLoadPath = "", this._viewWidth = 1, this._viewHeight = 1, this.m_sysVariable = new m.MxSystemVariable(), this._color = "#FFFFFF", this._viewcolor = 15790320, this._isAnimation = false, this._isAnimationStarting = false, this._isWaiteCount = 0, this._callCreateCanvasImageData = void 0, this._event = {}, this.scene = null, this.camera = null, this.secenView = null, this.cameraView = null, this.renderer = null, this.controls = null, this.threejsselectObjectsView = null, this._mouseRightRotate = true, this._isMouseMiddlePan = -1, this._mapId2Entity = /* @__PURE__ */ new Map(), this._setAdyDelete = /* @__PURE__ */ new Map(), this._sketchLayers = new l.MxCadSketchLayers(this), this._layers = new c.MxBrowseLayerData(), this._blocks = new u.Blocks(), this._extRefManager = new u.ExternalReferenceManager(), this._doc2World = new o.Matrix4(), this._word2doc = new o.Matrix4(), this._cad2Doc = new o.Matrix4(), this._doc2CAD = new o.Matrix4(), this._allLayoutName = new Array(), this._devicePixelRatio = 1, this._tzDwgStaticFile = "", this._requestHeader = "", this._objectsOsnap = null, this._initZoomwCoordPt1 = null, this._initZoomWCoordPt2 = null, this.m_mxDatabase = null, this._parentDocObject = null, this.threejsselectObjects = null, this._onResizeFun = null, this._sCurrentLoadURL = "", this.mxdrawThreeJS = null, this.eventManager = new w.MxDrawObjectEvent(), this._viewangle = 0, this.mcObject = new _5.McDrawObject(), this._is2d = t2, this._blocks.initRootBlockRef(), this.m_iniSet[a.kEnableOsnapFunction] = false, this.m_sysVariable.init(this), this.m_mxDatabase = new x.MxDbDatabase();
      }
      n.MxDrawObject = S;
    }, { "./MxCAD/MxCADObject": 24, "./MxCAD/MxCadSketchLayer": 27, "./MxDrawObjectEvent": 33, "./MxFun": 34, "./MxLocalFileLoad": 35, "./MxManager": 36, "./MxNetData": 38, "./MxSelect": 39, "./MxSystemVariable": 43, "./Operate/MxDrawObjectOsnap": 54, "./View/MxBrowseDisplay": 68, "./View/MxBrowseLayerData": 69, "./View/MxDbDatabase": 70, "./View/MxDbEntityGrip": 72, "./View/MxDrawMapBox": 77, "./cpp/McDrawObject": 78, three: 19 }], 31: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawObject2d = void 0;
      var a, o = t("three"), s = t("./MxFun"), l = t("./MxDrawObject"), c = t("three-orbitcontrols"), u = t("./MxNetData"), h = t("./MxMaterial"), d = t("./MxDrawData"), p = (r(f, a = l.MxDrawObject), f.prototype.set3DDraw = function(t2) {
        this.is3DDraw = t2;
      }, f.prototype.getOrthographicCamera = function() {
        return this.camera instanceof o.OrthographicCamera ? this.camera : null;
      }, f.prototype.getFullDisplayRange = function() {
        return { minPt: this._initMinDisplayPoint, maxPt: this._initMaxDisplayPoint };
      }, f.prototype.zoomW = function(t2, e2, n2) {
        if (n2 != null && n2 || (t2 = this.docCoord2World(t2.x, t2.y, 0), e2 = this.docCoord2World(e2.x, e2.y, 0)), this._curMinDisplayPoint = t2, this._curMaxDisplayPoint = e2, t2.x > e2.x) {
          var i2 = t2.x;
          t2.x = e2.x, e2.x = i2;
        }
        t2.y > e2.y && (i2 = t2.y, t2.y = e2.y, e2.y = i2);
        var r2 = this.getViewWidth(), a2 = this.getViewHeight(), s2 = Math.abs(t2.x - e2.x), l2 = Math.abs(t2.y - e2.y), c2 = this.getOrthographicCamera();
        if (s2 / l2 < r2 / a2) {
          var u2 = 0.5 * l2, h2 = r2 / a2;
          c2.left = -u2 * h2, c2.right = u2 * h2, c2.top = u2, c2.bottom = -u2;
        } else
          u2 = 0.5 * s2, h2 = a2 / r2, c2.left = -u2, c2.right = u2, c2.top = u2 * h2, c2.bottom = -u2 * h2;
        var d2 = s2, p2 = l2, f2 = d2;
        f2 < d2 && (f2 = p2), c2.far < 2 * f2 && (c2.far = 2 * f2);
        var m = t2.x + 0.5 * d2, g = t2.y + 0.5 * p2;
        c2.zoom = 1, c2.position.set(m, g, 0.5 * f2), c2.lookAt(new o.Vector3(m, g, 0)), c2.updateProjectionMatrix(), this.controls.target.x = m, this.controls.target.y = g, this.controls.target.z = 0, this.controls.update();
      }, f.prototype.zoomScale = function(t2) {
        var e2 = this.getOrthographicCamera();
        e2.zoom = Math.max(this.controls.minZoom, Math.min(this.controls.maxZoom, e2.zoom * t2)), e2.updateProjectionMatrix(), this.controls.update();
      }, f.prototype.zoomCenter = function(t2, e2) {
        var n2 = this.getOrthographicCamera(), i2 = this.docCoord2World(t2, e2, 0);
        t2 = i2.x, e2 = i2.y, n2.position.set(t2, e2, n2.position.z), n2.lookAt(new o.Vector3(t2, e2, 0)), n2.updateProjectionMatrix(), this.controls.target.x = t2, this.controls.target.y = e2, this.controls.target.z = 0, this.controls.update();
      }, f.prototype.calcCameraUp = function(t2) {
        var e2 = new o.Vector3(0, 1, 0), n2 = new o.Matrix4();
        return n2.makeRotationZ(t2), e2.applyMatrix4(n2), e2;
      }, f.prototype.updateCameraDisplayRangeImp = function(t2, e2, n2) {
        this._initZoomwCoordPt1 != null && this._initZoomWCoordPt2 != null ? (this._initMinDisplayPoint = this.docCoord2World(this._initZoomwCoordPt1.x, this._initZoomwCoordPt1.y, 0), this._initMaxDisplayPoint = this.docCoord2World(this._initZoomWCoordPt2.x, this._initZoomWCoordPt2.y, 0)) : (this._initMinDisplayPoint = t2, this._initMaxDisplayPoint = e2), this._viewangle = n2, this.camera.up = this.calcCameraUp(n2), this.cameraView.up = this.calcCameraUp(n2), this.cameraView.updateProjectionMatrix(), this.zoomW(this._initMinDisplayPoint, this._initMaxDisplayPoint, true);
      }, f.prototype.setViewAngle = function(t2) {
        this._viewangle = t2;
        var e2 = this.getOrthographicCamera();
        e2 && (e2.up = this.calcCameraUp(t2), e2.updateProjectionMatrix()), this.cameraView.up = this.calcCameraUp(t2), this.cameraView.updateProjectionMatrix(), this.controls.update();
      }, f.prototype.zoomInitialStates = function() {
        this._initMinDisplayPoint != null && this._initMaxDisplayPoint != null ? (this.camera.up = this.calcCameraUp(this._viewangle), this.cameraView.up = this.calcCameraUp(this._viewangle), this.cameraView.updateProjectionMatrix(), this.zoomW(this._initMinDisplayPoint, this._initMaxDisplayPoint, true)) : console.log("mx assert(0)");
      }, f.prototype.onInitScene = function() {
        var t2 = this.getEvent(), e2 = 0;
        if (t2.initScene != null && (e2 = t2.initScene(this.scene, this.controls, true)), e2 == 0) {
          var n2 = new o.AmbientLight(3355443, 1);
          this.scene.add(n2);
          var i2 = new o.DirectionalLight(16777215, 1);
          i2.position.set(-2, 2, 3).normalize(), this.scene.add(i2);
        }
      }, f.prototype.updataCameraView = function(t2, e2) {
        var n2 = t2, i2 = e2;
        this.cameraView.left = 0, this.cameraView.right = n2, this.cameraView.top = i2, this.cameraView.bottom = 0, this.cameraView.updateProjectionMatrix();
      }, f.prototype.onInitViewScene = function() {
        if (!this.secenView) {
          this.secenView = new o.Scene(), this.secenView.background = new o.Color(this._viewcolor);
          var t2 = this.getViewWidth(), e2 = this.getViewHeight();
          t2 = this.xzSize(t2), e2 = this.xzSize(e2), this.cameraView = new o.OrthographicCamera(0, t2, e2, 0, 1, 2e3), this.cameraView.position.set(0, 0, 2e3), this.cameraView.lookAt(new o.Vector3(0, 0, 0)), this.cameraView.updateProjectionMatrix();
          var n2 = new o.AmbientLight(3355443, 1);
          this.secenView.add(n2);
          var i2 = new o.DirectionalLight(16777215, 1);
          i2.position.set(-2, 2, 3).normalize(), this.secenView.add(i2), this.threejsselectObjectsView = new o.Object3D(), this.secenView.add(this.threejsselectObjectsView);
        }
      }, f.prototype.onInitThreejs = function() {
        var t2 = this.getViewWidth(), e2 = this.getViewHeight(), n2 = (t2 = this.xzSize(t2)) / (e2 = this.xzSize(e2)) * 50;
        this.onInitViewScene(), this.camera = new o.OrthographicCamera(n2 / -2, n2 / 2, 25, -25, 1, 1e3), this.camera.position.set(0, 0, 200), this.scene = new o.Scene();
        var i2 = this.getUserCanvas(), r2 = this._rendererParam;
        r2 = r2 || {}, i2 == null ? (r2.antialias = false, r2.stencil = true, this.renderer = new o.WebGLRenderer(r2), this.renderer.setClearColor(0, 1), this.renderer.setPixelRatio(this._devicePixelRatio), this.renderer.setSize(t2, e2), document.body.appendChild(this.renderer.domElement)) : (r2.canvas = i2, r2.stencil = true, this.renderer = new o.WebGLRenderer(r2), this.renderer.setClearColor(0, 1), this.renderer.setPixelRatio(this._devicePixelRatio)), this.renderer.sortObjects = true, this.renderer.info.autoReset = d.MxDrawData.m_isAutoResetRenderer, this.renderer.info.reset();
        var a2 = this.getUserCanvas();
        a2 == null && (a2 = this.renderer.domElement), this.controls = new c.OrbitControls(this.camera, a2), this.is3DDraw || (this.controls.enableZoom = true), s.MxFun.isPC() ? (this.controls.zoomSpeed = 4, this.controls.mouseButtons.LEFT = o.MOUSE.PAN, this._mouseRightRotate ? this.controls.mouseButtons.RIGHT = o.MOUSE.ROTATE : this.controls.mouseButtons.RIGHT = o.MOUSE.PAN, this.controls.screenSpacePanning = true, this._isMouseMiddlePan != -1 && this.setMouseMiddlePan(this._isMouseMiddlePan == 1)) : (this.controls.zoomSpeed = 1.5, this.controls.touches.ONE = o.TOUCH.PAN, this.controls.screenSpacePanning = true), this._is2d && (this._runMode != l.MxRunMode.kMxCAD && this._runMode != l.MxRunMode.kMxCADBrowseApp || (this.controls.mouseButtons.LEFT = -1, this.controls.mouseButtons.RIGHT = -1, this.controls.mouseButtons.MIDDLE = o.MOUSE.PAN));
      }, f.prototype.onCreate = function() {
        this._is2d = true, this.mxdrawThreeJS.onInitScene();
      }, f.prototype.mxWebAddEntity_3DChild = function(t2) {
        var e2 = new u.MxNetData(t2), n2 = e2.getMesh();
        if (n2.id == null)
          return n2.size;
        var i2 = new o.Mesh(n2.geometry, h.MxMaterial.GetBaseColorMaterial(n2.nColorIndex));
        return this.removeEntity(n2.id), this.scene.add(i2), n2.isSketchEntity && (this.addEntity(n2.id, i2), this.getSketchLayers().addEntity(n2.id, e2.getLayerId())), n2.size;
      }, f.prototype.mxWebAddEntity_Curve = function(t2, e2) {
        var n2 = new u.MxNetData(t2), i2 = n2.getCurve(e2);
        if (i2.id != null) {
          var r2 = h.MxMaterial.GetCurveColorMaterial(i2.colorIndex), a2 = new o.LineSegments(i2.geometry, r2);
          this.removeEntity(i2.id), this.scene.add(a2), i2.isSketchEntity && (this.addEntity(i2.id, a2), this.getSketchLayers().addEntity(i2.id, n2.getLayerId()));
        }
      }, f.prototype.onResizeImp = function(t2, e2) {
        var n2 = this.getViewWidth();
        t2 != null && (n2 = t2);
        var i2 = this.getViewHeight();
        e2 != null && (i2 = e2), n2 = this.xzSize(n2), i2 = this.xzSize(i2);
        var r2 = this.getOrthographicCamera();
        if (this._curMinDisplayPoint == null || this._curMaxDisplayPoint == null) {
          var a2 = 50, o2 = n2 / i2;
          r2.left = a2 * o2 / -2, r2.right = a2 * o2 / 2, r2.top = a2 / 2, r2.bottom = a2 / -2, r2.updateProjectionMatrix();
        } else {
          var s2 = Math.abs(this._curMinDisplayPoint.x - this._curMaxDisplayPoint.x), l2 = Math.abs(this._curMinDisplayPoint.y - this._curMaxDisplayPoint.y);
          s2 / l2 < n2 / i2 ? (a2 = 0.5 * l2, o2 = n2 / i2, r2.left = -a2 * o2, r2.right = a2 * o2, r2.top = a2, r2.bottom = -a2) : (a2 = 0.5 * s2, o2 = i2 / n2, r2.left = -a2, r2.right = a2, r2.top = a2 * o2, r2.bottom = -a2 * o2), r2.updateProjectionMatrix();
        }
        this.renderer.setSize(n2, i2), this.updataClipMaterial(), this.updataCameraView(n2, i2), this.callEvent("viewsizechange", { width: n2, height: i2 }), this.callEvent("viewchange"), this.m_mxDatabase.getSelectManager().setCanvasSize(n2, i2), this.m_mxDatabase.onViewChange();
      }, f);
      function f() {
        var t2 = a.call(this, true) || this;
        return t2._initMinDisplayPoint = null, t2._initMaxDisplayPoint = null, t2._curMinDisplayPoint = null, t2._curMaxDisplayPoint = null, t2.is3DDraw = s.MxFun.is3DDwg(), t2;
      }
      n.MxDrawObject2d = p;
    }, { "./MxDrawData": 29, "./MxDrawObject": 30, "./MxFun": 34, "./MxMaterial": 37, "./MxNetData": 38, three: 19, "three-orbitcontrols": 17 }], 32: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawObject3d = void 0;
      var a, o = t("three"), s = t("./MxDrawObject"), l = t("three-orbitcontrols"), c = t("./MxNetData"), u = t("./MxMaterial"), h = t("./MxTools"), d = (r(p, a = s.MxDrawObject), p.prototype.mxWebAddEntity_Curve = function(t2, e2) {
        var n2, i2 = new c.MxNetData(t2), r2 = t2.getInt32(32, true) == 0, a2 = i2.getIsSketchEntity();
        if (!((n2 = r2 ? t2.getInt32(20, true) / 4 / 3 : t2.getInt32(20, true) / 4 / 2) < 2)) {
          for (var s2 = new o.Geometry(), l2 = e2, d2 = 0; d2 < n2; d2++) {
            var p2 = t2.getFloat32(l2, true);
            l2 += 4;
            var f = t2.getFloat32(l2, true);
            l2 += 4;
            var m = 0;
            r2 && (m = t2.getFloat32(l2, true), l2 += 4), s2.vertices.push(h.MxTools.AsThreeJsPoint(p2, f, m));
          }
          var g = t2.getInt32(28, true), v = u.MxMaterial.GetCurveColorMaterial(g), y = new o.LineSegments(s2, v), x = t2.getInt32(4, true);
          this.removeEntity(x), this.scene.add(y), a2 && this.addEntity(x, y);
        }
      }, p.prototype.mxWebAddEntity_3DChild = function(t2) {
        var e2 = new c.MxNetData(t2), n2 = e2.getId(), i2 = (e2.getColorIndex(), e2.getBufferType() == 0), r2 = e2.getIsSketchEntity();
        this.removeEntity(n2);
        var a2 = new o.Mesh(new o.Geometry()), s2 = this.mxWebUpdateEntity_3DChild(a2, t2, i2);
        return this.scene.add(a2), r2 && this.addEntity(n2, a2), a2.geometry.computeBoundingBox(), a2.geometry.computeBoundingSphere(), s2;
      }, p.prototype.mxWebUpdateEntity_3DChild = function(t2, e2, n2) {
        var i2 = new c.MxNetData(e2), r2 = i2.getVertexBufferSize(), a2 = i2.getIndexBufferSize(), s2 = i2.getColorIndex();
        if (r2 === 0 || a2 === 0)
          return i2.getDrawDataOffset();
        var l2 = i2.getMateria(), d2 = void 0, p2 = true, f = false, m = false;
        l2.length != 0 && ((d2 = JSON.parse(l2)).computeFaceNonmal != null && (p2 = d2.computeFaceNonmal), d2.castShadow != null && (f = d2.castShadow), d2.receiveShadow != null && (m = d2.receiveShadow)), t2.material = u.MxMaterial.createMaterial(d2), t2.material == null && (t2.material = u.MxMaterial.GetColorMaterial(s2)), t2.castShadow = f, t2.receiveShadow = m;
        var g, v = i2.getDrawDataOffset();
        g = n2 ? r2 / 4 / 8 : r2 / 4 / 2;
        var y = t2.geometry;
        y.vertices = [], y.faces = [];
        for (var x = 0; x < g; x++) {
          var b = e2.getFloat32(v + 0, true), w = e2.getFloat32(v + 4, true), M = 0, _5 = 0, S = 0, C = 0, T = 0, E = 0;
          n2 ? (M = e2.getFloat32(v + 8, true), _5 = e2.getFloat32(v + 12, true), S = e2.getFloat32(v + 16, true), C = e2.getFloat32(v + 20, true), T = e2.getFloat32(v + 24, true), E = e2.getFloat32(v + 28, true), v += 32) : v += 8;
          var D = h.MxTools.AsThreeJsPoint(b, w, M);
          y.vertices.push(D), y.vertices[x].normal = h.MxTools.AsThreeJsPoint(_5, S, C), y.vertices[x].uv = new o.Vector2(T, E);
        }
        var A = a2 / 4;
        for (x = 0; x < A; x += 3) {
          var O = e2.getInt32(v, true);
          v += 4;
          var L = e2.getInt32(v, true);
          v += 4;
          var I = e2.getInt32(v, true);
          v += 4;
          var P = new o.Face3(O, L, I);
          p2 || P.vertexNormals.push(y.vertices[O].normal, y.vertices[L].normal, y.vertices[I].normal), y.faces.push(P), y.faceVertexUvs[0].push([y.vertices[O].uv, y.vertices[L].uv, y.vertices[I].uv]);
        }
        return p2 && y.computeFaceNormals(), v;
      }, p.prototype.updateUVs = function(t2) {
        t2.faceVertexUvs[0] = [], t2.faces.forEach(function(e2) {
          var n2 = ["x", "y", "z"].sort(function(t3, n3) {
            return Math.abs(e2.normal[t3]) - Math.abs(e2.normal[n3]);
          }), i2 = t2.vertices[e2.a], r2 = t2.vertices[e2.b], a2 = t2.vertices[e2.c], s2 = new o.Vector2(i2[n2[0]], i2[n2[1]]), l2 = new o.Vector2(r2[n2[0]], r2[n2[1]]), c2 = new o.Vector2(a2[n2[0]], a2[n2[1]]);
          t2.faceVertexUvs[0].push([s2, l2, c2]);
        }), t2.uvsNeedUpdate = true;
      }, p.prototype.onInitThreejs = function() {
        var t2 = this.getViewWidth(), e2 = this.getViewHeight(), n2 = (t2 = this.xzSize(t2)) / (e2 = this.xzSize(e2)) * 50;
        this.camera = new o.OrthographicCamera(n2 / -2, n2 / 2, 25, -25, 1, 1e3), this.camera.position.set(-200, 200, 200), this.scene = new o.Scene(), this.scene.background = new o.Color(this._viewcolor);
        var i2 = this.getUserCanvas();
        i2 == null ? (this.renderer = new o.WebGLRenderer({ antialias: true, alpha: true }), this.renderer.setPixelRatio(this._devicePixelRatio), this.renderer.setSize(t2, e2), document.body.appendChild(this.renderer.domElement)) : (this.renderer = new o.WebGLRenderer({ canvas: i2, antialias: true, alpha: true }), this.renderer.setPixelRatio(this._devicePixelRatio));
        var r2 = this.getUserCanvas();
        r2 == null && (r2 = this.renderer.domElement), this.controls = new l.OrbitControls(this.camera, r2);
      }, p.prototype.onInitViewScene = function() {
      }, p.prototype.onInitScene = function() {
        var t2 = this.getEvent(), e2 = 0;
        if (t2.initScene != null && (e2 = t2.initScene(this.scene, this.controls, false)), e2 == 0) {
          var n2 = new o.AmbientLight(2236962);
          n2.integrity = 1, this.scene.add(n2);
          var i2 = new o.DirectionalLight(16777215, 1);
          i2.position.set(-2, 2, 3).normalize(), this.scene.add(i2);
          var r2 = new o.GridHelper(2e3, 100);
          r2.position.y = -199, r2.material.opacity = 0.25, r2.material.transparent = true, this.scene.add(r2);
          var a2 = new o.AxesHelper(20);
          this.scene.add(a2);
        }
      }, p.prototype.onCreate = function() {
        this._is2d = false;
        var t2 = this.getEvent();
        t2.initRenderer != null && t2.initRenderer(this.renderer), this.mxdrawThreeJS.onInitScene();
      }, p.prototype.getOrthographicCamera = function() {
        return this.camera instanceof o.OrthographicCamera ? this.camera : null;
      }, p.prototype.onResizeImp = function(t2, e2) {
        var n2 = this.getViewWidth();
        t2 != null && (n2 = t2);
        var i2 = this.getViewHeight();
        e2 != null && (i2 = e2), n2 = this.xzSize(n2), i2 = this.xzSize(i2);
        var r2 = this.getOrthographicCamera(), a2 = n2 / i2;
        r2.left = 50 * a2 / -2, r2.right = 50 * a2 / 2, r2.top = 25, r2.bottom = -25, r2.updateProjectionMatrix(), this.renderer.setSize(n2, i2);
      }, p.prototype.zoomInitialStates = function() {
      }, p.prototype.zoomScale = function(t2) {
      }, p.prototype.zoomW = function(t2, e2, n2) {
      }, p.prototype.zoomCenter = function(t2, e2) {
      }, p.prototype.setViewAngle = function(t2) {
        this._viewangle = t2;
      }, p.prototype.getFullDisplayRange = function() {
        return {};
      }, p);
      function p() {
        var t2 = a.call(this, false) || this;
        return t2._viewcolor = 15790320, t2;
      }
      n.MxDrawObject3d = d;
    }, { "./MxDrawObject": 30, "./MxMaterial": 37, "./MxNetData": 38, "./MxTools": 45, three: 19, "three-orbitcontrols": 17 }], 33: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawObjectEvent = n.MxDrawObjectEventDefautProc = void 0;
      var i = t("./MxFun"), r = t("./Operate/MxJigCmdManager"), a = t("three"), o = t("./UI/MxUiVue"), s = t("./MxDrawData"), l = (c.prototype.onMousemove = function(t2) {
        if (o.MxUiVue.isNull())
          return 0;
        var e2 = this.mxObj.screenCoord2Doc(t2.offsetX, t2.offsetY, 0);
        return e2 = this.mxObj.docCoord2Cad(e2.x, e2.y, e2.z), o.MxUiVue.setTipCoord(i.MxFun.formatString("{0},{1},0.000", e2.x.toFixed(3), e2.y.toFixed(3))), 0;
      }, c.prototype.onTouchStart = function(t2) {
        if (s.MxDrawData.m_isEnableIntelliSelect && !r.MxJigCmdManager.isRunning()) {
          var e2 = t2.touches[0].pageX, n2 = t2.touches[0].pageY, o2 = this.mxObj, l2 = o2.screenCoord2Doc(e2, n2, 0);
          if (o2.isMxCAD()) {
            var c2 = o2.getMxCAD();
            if (!c2)
              return;
            var u2 = true;
            if (c2 && c2.getGrip().onMouseLBDown(l2) && (u2 = false), u2)
              return i.MxFun.sendStringToExecute("Mx_IntelliSel", { pt1: l2 }), 1;
          } else if (!o2.getMxDatabase().getGripManager().onMouseLBDown(l2)) {
            var h2 = new a.Vector3(e2, n2, 0);
            return i.MxFun.sendStringToExecute("Mx_FrontEndWebpageIntelliSel", { pt: h2 }), 1;
          }
        }
        return 0;
      }, c.prototype.onMousdown = function(t2) {
        if (t2.button == r.MxJigCmdManager.MouseButton.kRight && r.MxJigCmdManager.isRunning())
          return r.MxJigCmdManager.stopCmd(), 0;
        if (s.MxDrawData.m_isEnableIntelliSelect && t2.button == r.MxJigCmdManager.MouseButton.kLeft && !r.MxJigCmdManager.isRunning()) {
          var e2 = this.mxObj, n2 = e2.screenCoord2Doc(t2.offsetX, t2.offsetY, 0);
          if (e2.isMxCAD()) {
            var o2 = e2.getMxCAD();
            if (!o2)
              return;
            var l2 = true;
            if (o2 && o2.getGrip().onMouseLBDown(n2) && (l2 = false), l2)
              return i.MxFun.sendStringToExecute("Mx_IntelliSel", { pt1: n2 }), 1;
          } else if (!e2.getMxDatabase().getGripManager().onMouseLBDown(n2)) {
            var c2 = new a.Vector3(t2.offsetX, t2.offsetY, 0);
            return i.MxFun.sendStringToExecute("Mx_FrontEndWebpageIntelliSel", { pt: c2 }), 1;
          }
        }
        return 0;
      }, c.prototype.init = function(t2, e2) {
        this.mxObj = t2;
        var n2 = this;
        e2.addEventListener("mousemove", function(t3) {
          return n2.onMousemove(t3);
        }), e2.addEventListener("mousedown", function(t3) {
          return n2.onMousdown(t3);
        }), e2.addEventListener("touchstart", function(t3) {
          return n2.onTouchStart(t3);
        });
      }, c);
      function c() {
      }
      n.MxDrawObjectEventDefautProc = l;
      var u = (h.prototype.onMousedown = function(t2) {
        this.callEvent("mousedown", t2);
      }, h.prototype.onMousemove = function(t2) {
        this.callEvent("mousemove", t2);
      }, h.prototype.onMouseup = function(t2) {
        this.callEvent("mouseup", t2);
      }, h.prototype.registEvent = function(t2) {
        var e2 = t2.getOrbitControls();
        if (!e2)
          return false;
        var n2 = e2.domElement, r2 = this;
        i.MxFun.isPC() ? (n2.addEventListener("mouseup", function(t3) {
          r2.onMouseup(t3);
        }, true), n2.addEventListener("mousemove", function(t3) {
          r2.onMousemove(t3);
        }, true), n2.addEventListener("mousedown", function(t3) {
          r2.onMousedown(t3);
        }, true)) : (n2.addEventListener("touchstart", function(t3) {
          r2.callEvent("touchstart", t3);
        }, true), n2.addEventListener("touchend", function(t3) {
          r2.callEvent("touchend", t3);
        }, true), n2.addEventListener("touchmove", function(t3) {
          r2.callEvent("touchmove", t3);
        }, true)), this.defautProc.init(t2, this);
      }, h.prototype.getEventCall = function(t2) {
        var e2;
        return t2 == "mousemove" ? e2 = this.aryMousemoveEventCall : t2 == "mouseup" ? e2 = this.aryMouseupEventCall : t2 == "mousedown" ? e2 = this.aryMousedownEventCall : t2 == "touchstart" ? e2 = this.aryTouchstartEventCall : t2 == "touchend" ? e2 = this.aryTouchendEventCall : t2 == "touchmove" && (e2 = this.aryTouchmoveEventCall), e2;
      }, h.prototype.callEvent = function(t2, e2) {
        var n2 = this.getEventCall(t2);
        if (n2) {
          for (var i2 = n2.slice(), r2 = 0, a2 = i2.length; r2 < a2; r2++) {
            var o2 = i2[r2](e2);
            if (o2 == 1)
              return o2;
          }
          return 0;
        }
      }, h.prototype.addEventListener = function(t2, e2, n2) {
        n2 === void 0 && (n2 = false);
        var i2 = this.getEventCall(t2);
        return !!i2 && (-1 < i2.indexOf(e2) || (n2 ? i2.unshift(e2) : i2.push(e2)), true);
      }, h.prototype.removeEventListener = function(t2, e2) {
        var n2 = this.getEventCall(t2);
        if (!n2)
          return false;
        var i2 = n2.indexOf(e2);
        return -1 < i2 && (n2.splice(i2, 1), true);
      }, h);
      function h() {
        this.aryMousedownEventCall = [], this.aryMouseupEventCall = [], this.aryMousemoveEventCall = [], this.aryTouchstartEventCall = [], this.aryTouchendEventCall = [], this.aryTouchmoveEventCall = [], this.defautProc = new l();
      }
      n.MxDrawObjectEvent = u;
    }, { "./MxDrawData": 29, "./MxFun": 34, "./Operate/MxJigCmdManager": 58, "./UI/MxUiVue": 67, three: 19 }], 34: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxFun = void 0;
      var i, r, a, o, s, l, c, u, h, d, p, f, m, g, v = t("three"), y = t("./MxManager"), x = t("./MxDrawObject2d"), b = t("./MxDrawObject3d"), w = t("./UI/MxUiObjectMobile"), M = t("./UI/MxUiObjectPC"), _5 = t("./Operate/MxJigCmdManager"), S = t("./Operate/MxJigGetLine"), C = t("./Operate/MxCmdRunManager"), T = t("./UI/MxUiVue"), E = t("./MxThreeJS"), D = t("./MxWindowsEvent"), A = t("./MxTools"), O = t("./MxDrawCommands"), L = t("./MxDrawData"), I = t("./MxCAD/MxCADEditDisplay"), P = t("./MxLocalFileLoad"), R = t("./TempTest/MxTestJig"), k = t("./MxVersion"), B = t("./MrxDbgUtils");
      function N(t2) {
        t2.cmd && U(t2.cmd);
      }
      function F(t2) {
        var e2 = new RegExp("(^|&)" + t2 + "=([^&]*)(&|$)"), n2 = window.location.href, i2 = n2.indexOf("?"), r2 = (n2 = i2 == -1 ? "" : n2.substring(i2)).substr(1).match(e2);
        return r2 != null ? decodeURIComponent(r2[2]) : "";
      }
      function j() {
        return y.MxManager.currentMx();
      }
      function V() {
        return y.MxManager.currentMx();
      }
      function z(t2, e2) {
        var n2 = {};
        if (t2 != null)
          if (t2 instanceof Array)
            n2.is2d = true;
          else {
            t2.length == 0 && (t2 = "empty");
            var i2 = t2.substring(t2.lastIndexOf(".") + 1).toLowerCase();
            if (i2 != "dwg" && i2 != "dxf" && i2 != "dwf" && i2 != "mwg" && i2 != "wgh" || (n2.is2d = true), e2 != 1 && e2 != null && i2 != "wgh") {
              var r2 = void 0, a2 = t2.split("/");
              (r2 = a2.length == 1 ? a2[0] : a2[a2.length - 1])[0] == "$" && (r2 = r2.substring(1));
              for (var o2 = void 0, s2 = 0; s2 < a2.length - 1; s2++)
                o2 = s2 == 0 ? a2[s2] : o2 + "/" + a2[s2];
              t2 = o2 ? o2 + "/$" + r2 + ".mxb1.wgh" : "$" + r2 + ".mxb1.wgh";
            }
          }
        else
          t2 = "empty";
        return n2.sFileName = t2, n2;
      }
      function G(t2) {
        if (typeof t2 == "string") {
          var e2 = t2.substring(t2.lastIndexOf(".") + 1).toLowerCase();
          if (e2 != "dwg" && e2 != "wgh") {
            var n2 = t2.lastIndexOf("?");
            if (n2 != -1) {
              var i2 = t2.substring(n2, t2.length);
              return { sFileName: t2 = t2.substring(0, n2), sUrlParam: i2 };
            }
          }
        }
        return null;
      }
      function U(t2, e2) {
        var n2 = V();
        return C.MxCmdRunManager.runCmd(n2, t2, e2);
      }
      function H(t2) {
        t2 != null && (t2.init(), T.MxUiVue.init(t2)), p || (console.log("MxDraw Version:" + k.MxBulid.getVersion()), p = true, g = new P.MxLocalNodeJs(), _5.MxJigCmdManager.init(), D.MxWindowsEvent.registEvent(), y.MxManager.init(), O.MxDrawCommands.registerCommand(), window.mxConfig_isLoadTest && R.MxTest.registerCommand(), m.sendStringToExecute = N);
      }
      i = n.MxFun || (n.MxFun = {}), r = ".", c = s = o = -1, d = null, p = !(h = "ws://localhost:5090"), m = {}, g = f = u = l = a = void 0, i.getUiObj = function() {
        return d;
      }, i.getNodeJs = function() {
        return g;
      }, i.setMxServer = function(t2) {
        h = t2;
      }, i.getMxServer = function() {
        return h;
      }, i.isPC = function() {
        return !/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent);
      }, i.getClientPlatform = function() {
        return navigator.platform;
      }, i.getClientInfo = function() {
        return { width: document.body.clientWidth, height: document.body.clientHeight };
      }, i.curPath = function() {
        return r;
      }, i.setCurPath = function(t2) {
        r = t2;
      }, i.getQueryString = F, i.getLocationPageUrl = function() {
        var t2 = window.location.href, e2 = t2.lastIndexOf("?");
        return e2 == -1 ? t2 : t2.substring(0, e2);
      }, i.getUrlParams = function() {
        var t2 = window.location.search, e2 = t2.substr(1, t2.length).split("&"), n2 = new Array();
        if (e2 != null)
          for (var i2 = 0; i2 < e2.length; i2++) {
            var r2 = e2[i2].replace(/[=|^==]/, "&").split("&");
            if (1 < r2.length) {
              var a2 = new Array();
              a2.push(decodeURIComponent(r2[0])), a2.push(decodeURIComponent(r2[1])), n2.push(a2);
            }
          }
        return n2;
      }, i.call = function(t2, e2, n2) {
        e2 == null ? e2 = "{}" : typeof e2 == "string" ? e2.length == 0 ? e2 = "{}" : e2[0] == "[" && e2[e2.length - 1] == "]" || e2[0] == "{" && e2[e2.length - 1] == "}" || (e2 = '"' + (e2 = e2.replace(/"/g, "'")) + '"') : e2 = typeof e2 == "object" ? JSON.stringify(e2) : "{}", y.MxManager.currentMx().call(t2, e2, n2);
      }, i.loadCodeToServer = function(t2, e2) {
        y.MxManager.currentMx().loadCodeToServer(t2, e2);
      }, i.getCurrentMx = j, i.getCurrentMxCAD = function() {
        var t2 = j();
        return t2 ? t2.getMxCAD() : null;
      }, i.loadCodeFileToServer = function(t2, e2, n2) {
        y.MxManager.currentMx().loadCodeFileToServer(t2, e2, n2);
      }, i.isEnableSelect = function() {
        if (o != -1)
          return o == 1;
        var t2 = F("select");
        return o = 0, t2 != null && t2.toLowerCase() == "y" && (o = 1), o == 1;
      }, i.is3DDwg = function() {
        if (c != -1)
          return c == 1;
        var t2 = F("3ddwg");
        return c = 0, t2 != null && t2.toLowerCase() == "y" && (c = 1), c == 1;
      }, i.isStaticLoad = function() {
        if (s != -1)
          return s == 1;
        var t2 = F("static");
        return s = 0, t2 != null && t2.toLowerCase() == "y" && (s = 1), s == 1;
      }, i.enableSelect = function(t2) {
        o = t2 ? 1 : 0;
      }, i.enablStaticLoad = function(t2) {
        s = t2 == null || t2 ? 1 : 0;
      }, i.dwgDir = function() {
        return l != null || (l = F("dwgdir")) == null && (l = ""), l;
      }, i.setDwgDir = function(t2) {
        l = t2;
      }, i.getStaticServer = function() {
        return u != null || (u = F("staticServer")) == null && (u = ""), u;
      }, i.setStaticServer = function(t2) {
        u = t2;
      }, i.is2dParam = function() {
        if (a != null)
          return a;
        var t2 = F("file");
        if (a = false, t2 != null) {
          var e2 = t2.substring(t2.lastIndexOf(".") + 1);
          e2.toLowerCase() != "dwg" && e2.toLowerCase() != "dxf" && e2.toLowerCase() != "dwf" && e2.toLowerCase() != "mwg" || (a = true);
        }
        return a;
      }, i.set2dParam = function(t2) {
        a = t2;
      }, i.showLayer = function(t2, e2, n2) {
        var i2 = y.MxManager.currentMx().getMxCAD();
        if (!i2)
          return y.MxManager.currentMx().showLayer(t2, e2, n2);
        typeof t2 == "number" && I.MxCADDisplayFun.showLayer(i2.getDatabase(), t2, e2);
      }, i.upDisplayForLayerData = function(t2) {
        var e2 = y.MxManager.currentMx().getMxCAD();
        return !!e2 && e2.getDatabase().getLayerTable().upDisplayForLayerData(e2.getDatabase(), t2);
      }, i.screenCoord2World = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().screenCoord2World(t2.x, t2.y, t2.z) : y.MxManager.currentMx().screenCoord2World(t2, e2, n2);
      }, i.worldCoord2Screen = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().worldCoord2Screen(t2.x, t2.y, t2.z) : y.MxManager.currentMx().worldCoord2Screen(t2, e2, n2);
      }, i.docCoord2Cad = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().docCoord2Cad(t2.x, t2.y, t2.z) : y.MxManager.currentMx().docCoord2Cad(t2, e2, n2);
      }, i.cadCoord2Doc = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().cadCoord2Doc(t2.x, t2.y, t2.z) : y.MxManager.currentMx().cadCoord2Doc(t2, e2, n2);
      }, i.docCoord2World = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().docCoord2World(t2.x, t2.y, t2.z) : y.MxManager.currentMx().docCoord2World(t2, e2, n2);
      }, i.worldCoord2Doc = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().worldCoord2Doc(t2.x, t2.y, t2.z) : y.MxManager.currentMx().worldCoord2Doc(t2, e2, n2);
      }, i.screenCoord2Doc = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().screenCoord2Doc(t2.x, t2.y, t2.z) : y.MxManager.currentMx().screenCoord2Doc(t2, e2, n2);
      }, i.docCoord2Screen = function(t2, e2, n2) {
        return t2 instanceof Object ? y.MxManager.currentMx().docCoord2Screen(t2.x, t2.y, t2.z) : y.MxManager.currentMx().docCoord2Screen(t2, e2, n2);
      }, i.zoomCenter = function(t2, e2) {
        y.MxManager.currentMx().is2D() && (y.MxManager.currentMx().zoomCenter(t2, e2), y.MxManager.currentMx().updateDisplay());
      }, i.zoomW = function(t2, e2, n2, i2, r2) {
        y.MxManager.currentMx().is2D() && (y.MxManager.currentMx().zoomW(new v.Vector3(t2, e2, 0), new v.Vector3(n2, i2, 0), r2), y.MxManager.currentMx().updateDisplay());
      }, i.zoomScale = function(t2) {
        y.MxManager.currentMx().is2D() && (y.MxManager.currentMx().zoomScale(t2), y.MxManager.currentMx().updateDisplay());
      }, i.zoomAll = function() {
        y.MxManager.currentMx().is2D() && (y.MxManager.currentMx().zoomAll(), y.MxManager.currentMx().updateDisplay());
      }, i.deleteAll = function() {
        return y.MxManager.currentMx().deleteAll();
      }, i.callCommand = function(t2, e2, n2) {
        y.MxManager.currentMx().callCommand(t2, e2, n2);
      }, i.getCurrentColor = function() {
        return y.MxManager.currentMx().getCurrentColor();
      }, i.setCurrentColor = function(t2) {
        y.MxManager.currentMx().setCurrentColor(t2);
      }, i.undo = function() {
        y.MxManager.currentMx().undo();
      }, i.save = function() {
        y.MxManager.currentMx().save();
      }, i.showLoading = function() {
        d != null && d.ShowLoading();
      }, i.hideLoading = function() {
        d != null && d.HideLoading();
      }, i.showProp = function(t2) {
        d != null && d.ShowObjectProperty(t2);
      }, i.hideProp = function() {
        d != null && d.HideObjectProp();
      }, i.getUiObject = function() {
        return d;
      }, i.getViewCenterDocCoord = function() {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().getViewCenterDocCoord() : new v.Vector3(0, 0, 0);
      }, i.screenCoordLong2Doc = function(t2) {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().screenCoordLong2Doc(t2) : t2;
      }, i.docCoordLong2Screen = function(t2) {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().docCoordLong2Screen(t2) : t2;
      }, i.worldCoordLong2Doc = function(t2) {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().worldCoordLong2Doc(t2) : t2;
      }, i.docCoordLong2World = function(t2) {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().docCoordLong2World(t2) : t2;
      }, i.screenCoordLong2World = function(t2) {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().screenCoordLong2World(t2) : t2;
      }, i.worldCoordLong2Screen = function(t2) {
        return y.MxManager.currentMx().is2D() ? y.MxManager.currentMx().worldCoordLong2Screen(t2) : t2;
      }, i.addSelectEvent = function(t2) {
        y.MxManager.addSelectEvent(t2);
      }, i.clearSelectEvent = function() {
        y.MxManager.clearSelectEvent();
      }, i.removeThreejsObject = function(t2, e2, n2) {
        t2 && (t2.traverse(function(t3) {
          (t3 instanceof v.Mesh || t3 instanceof v.Line || t3 instanceof v.LineLoop) && (t3.geometry.dispose(), n2 && (t3.material instanceof Array ? t3.material.forEach(function(t4) {
            t4.dispose();
          }) : t3.material.dispose()));
        }), e2.remove(t2));
      }, i.setOutServerDebugCall = function(t2) {
        y.MxManager.setOutDebugCall(t2);
      }, i.updateDisplay = function() {
        y.MxManager.updateDisplay();
      }, i.getCurrentDraw = V, i.formatString = function(t2) {
        for (var e2 = [], n2 = 1; n2 < arguments.length; n2++)
          e2[n2 - 1] = arguments[n2];
        for (var i2 = 0; i2 < e2.length; i2++)
          t2 = t2.replace("{".concat(i2, "}"), e2[i2]);
        return t2;
      }, i.createMxUiObject = function(t2) {
        var e2;
        return e2 = this.isPC() ? new M.MxUiObjectPC() : new w.MxUiObjectMobile(), t2(d = e2), e2.create(), e2;
      }, i.openFile = function(t2, e2) {
        var n2 = "";
        if (typeof t2 == "string") {
          var i2 = G(t2);
          i2 && (n2 = i2.sUrlParam, t2 = i2.sFileName);
        }
        e2 == null && (e2 = false);
        var r2 = z(t2, e2);
        return r2.is2d && (a = r2.is2d), t2 = r2.sFileName, y.MxManager.currentMx().openFile(t2, n2);
      }, i.createMxObject = function(t2, e2, n2, r2, a2, o2, s2) {
        p || H(), typeof t2 == "string" && (t2 = t2.length == 0 ? void 0 : document.getElementById(t2));
        var l2 = "";
        if (e2 == null)
          e2 = i.getQueryString("file");
        else {
          var c2 = G(e2);
          c2 && (l2 = c2.sUrlParam, e2 = c2.sFileName);
        }
        var u2 = r2 != null && r2, h2 = z(e2, o2);
        h2.is2d && (u2 = h2.is2d), e2 = h2.sFileName, a2 == 1 && (e2 = "");
        var d2 = null;
        return u2 ? (d2 = new x.MxDrawObject2d()).setViewColor(0) : (d2 = new b.MxDrawObject3d()).setViewColor(15790320), n2 != null && n2(d2), d2.create(t2, e2, l2, s2), d2;
      }, i.getMxObjectFormElement = function(t2) {
        return y.MxManager.getMxObject(t2);
      }, i.isRunningCommand = function() {
        return _5.MxJigCmdManager.isRunning();
      }, i.stopRunCommand = function() {
        return _5.MxJigCmdManager.stopCmd();
      }, i.runCommand = function(t2) {
        return _5.MxJigCmdManager.runCmd(t2);
      }, i.getTHREE = function() {
        return v;
      }, i.getLine = function(t2) {
        var e2 = new S.MxJigGetLine();
        e2.setRetCall(t2), _5.MxJigCmdManager.runCmd(e2);
      }, i.addCommand = function(t2, e2, n2) {
        C.MxCmdRunManager.addCommand(t2, e2, n2);
      }, i.sendStringToExecute = U, i.getMxEntity = function(t2) {
        var e2 = V();
        return e2 ? e2.getMxEntityUserObject(t2) : null;
      }, i.initUiDataObject = function(t2) {
        T.MxUiVue.isNull() && (t2.init(i), T.MxUiVue.init(t2));
      }, i.init = H, i.addWindowsEvent = function(t2) {
        D.MxWindowsEvent.addEvent(t2);
      }, i.getCurrentMousePostion = function() {
        return D.MxWindowsEvent.getCurrentMousePostion();
      }, i.getMxThreeJS = function() {
        return E.MxThreeJS;
      }, i.getMxTools = function() {
        return A.MxTools;
      }, i.getMxCmdRunManager = function() {
        return C.MxCmdRunManager;
      }, i.getMxJigCmdManager = function() {
        return _5.MxJigCmdManager;
      }, i.initQuickCommand = function(t2) {
        C.MxCmdRunManager.InitQuickCommand(t2);
      }, i.Assert = function(t2) {
        t2 || console.log("MxAssert error");
      }, i.setIniset = function(t2) {
        L.MxDrawData.setIniset(t2);
      }, i.setPostMessageToParentFrameFunction = function(t2) {
        f = t2;
      }, i.postMessageToParentFrame = function(t2) {
        return f != null && (f(t2), true);
      }, i.onParentFrameMessage = function(t2) {
        t2 != null && t2.type != null && m[t2.type] && m[t2.type](t2);
      }, i.acutPrintf = function(t2) {
        for (var e2 = [], n2 = 1; n2 < arguments.length; n2++)
          e2[n2 - 1] = arguments[n2];
        if (!T.MxUiVue.isNull()) {
          for (var i2 = arguments, r2 = i2[0], a2 = 0; a2 < i2.length - 1; a2++) {
            var o2 = new RegExp("\\{" + a2 + "\\}", "gm");
            r2 = r2.replace(o2, i2[a2 + 1]);
          }
          T.MxUiVue.AcutPrintfNoFormat(r2, true);
        }
      }, i.loadImageMaterial = function(t2, e2) {
        y.MxManager.getMxDbTextureManager().loadImage(t2, e2);
      }, i.loadSVG = function(t2, e2, n2, i2) {
        y.MxManager.getMxDbSvgManager().loadSVG(t2, e2, n2, i2);
      }, i.initMxDbEntityType = function(t2) {
        y.MxManager.getMxDbEntityClassHierarchy().init(t2);
      }, i.initDynamicCreate = function(t2) {
        y.MxManager.getMxDbEntityClassHierarchy().initDynamic(t2);
      }, i.ceneratecursor = function(t2, e2, n2, i2) {
        t2 === void 0 && (t2 = 128), e2 === void 0 && (e2 = 10), n2 === void 0 && (n2 = true);
        var r2 = document.createElement("canvas");
        r2.width = r2.height = t2, r2.style.background = "transparent";
        var a2 = r2.getContext("2d"), o2 = t2 % 2 == 0 ? -0.5 : 0, s2 = e2 % 2 == 0 ? -0.5 : 0;
        a2.strokeStyle = i2 || "#fff", n2 && (a2.beginPath(), a2.moveTo(r2.width / 2 + o2, o2), a2.lineTo(r2.width / 2 + o2, r2.height + o2), a2.stroke(), a2.beginPath(), a2.moveTo(o2, r2.height / 2 + o2), a2.lineTo(r2.width + o2, r2.height / 2 + o2), a2.stroke()), a2.beginPath(), a2.strokeRect(t2 / 2 - e2 / 2 + s2, t2 / 2 - e2 / 2 + s2, e2, e2), a2.stroke();
        var l2 = new Image();
        return l2.src = r2.toDataURL("image/png"), l2.src;
      }, i.getMrxDbgUtilsClass = function() {
        return B.MrxDbgUtils;
      };
    }, { "./MrxDbgUtils": 20, "./MxCAD/MxCADEditDisplay": 21, "./MxDrawCommands": 28, "./MxDrawData": 29, "./MxDrawObject2d": 31, "./MxDrawObject3d": 32, "./MxLocalFileLoad": 35, "./MxManager": 36, "./MxThreeJS": 44, "./MxTools": 45, "./MxVersion": 47, "./MxWindowsEvent": 48, "./Operate/MxCmdRunManager": 53, "./Operate/MxJigCmdManager": 58, "./Operate/MxJigGetLine": 59, "./TempTest/MxTestJig": 63, "./UI/MxUiObjectMobile": 65, "./UI/MxUiObjectPC": 66, "./UI/MxUiVue": 67, three: 19 }], 35: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxLocalDwgFileLoad = n.MxLocalFileLoad = n.MxLocalNodeJs = void 0;
      var i = t("./MxFun"), r = (a.prototype.init = function(t2) {
        this.loadFileCall = t2.loadFileFun;
      }, a.prototype.loadFile = function(t2, e2, n2, i2, r2) {
        this.loadFileCall != null ? this.loadFileCall(t2, e2, n2, i2, r2) : r2(void 0);
      }, a);
      function a() {
        this.loadFileCall = null;
      }
      n.MxLocalNodeJs = r;
      var o = (s.prototype.setPath = function(t2) {
        this.path = t2;
      }, s.prototype.setBinary = function(t2) {
        this.isBinary = t2;
      }, s.prototype.load = function(t2, e2, n2, r2) {
        i.MxFun.getNodeJs().loadFile(this.path + t2, this.isBinary, e2, n2, r2);
      }, s);
      function s() {
        this.path = "", this.isBinary = false;
      }
      n.MxLocalFileLoad = o;
      var l = (c.prototype.setShowloading = function(t2) {
        this._isShowLoading = t2;
      }, c.prototype.load = function(t2, e2) {
        var n2 = "$" + e2 + ".mxb1.wgh";
        this._path = t2, this._filename = e2;
        var i2 = this;
        this.getFile(this._path, n2, false, function(t3) {
          typeof t3 == "string" ? i2.net.onStaticHeadMessage(t3) : console.log("mx error h1");
        }, function() {
          console.log("mx get " + n2 + " faild");
        });
      }, c.prototype.getDatas = function() {
        if (this._iGet >= this._dataNum)
          this._isShowLoading && i.MxFun.hideLoading();
        else {
          var t2 = this._dataType[this._iGet];
          this._iGet++;
          var e2 = this, n2 = this._iGet + 1, r2 = "$" + this._filename + ".mxb" + n2 + ".wgh", a2 = t2 != 0;
          this.getFile(this._path, r2, a2, function(t3) {
            e2.net.onStaticMessage(t3), e2.getDatas();
          }, function() {
            e2._dataNum = 0, e2._iGet = 0, e2._isShowLoading && i.MxFun.hideLoading(), console.log("mx get " + r2 + " faild");
          });
        }
      }, c.prototype.onRenderHead = function(t2) {
        var e2 = JSON.parse(t2);
        this._dataType = e2.type, this._dataNum = e2.count, this._iGet = 0, this._isShowLoading && i.MxFun.showLoading(), this.getDatas();
      }, c.prototype.getFile = function(t2, e2, n2, i2, r2) {
        var a2 = new o();
        a2.setPath(t2), a2.setBinary(n2), a2.load(e2, i2, function() {
        }, r2);
      }, c);
      function c(t2) {
        this.net = null, this._dataNum = 0, this._iGet = 0, this._dataType = [], this._path = "", this._filename = "", this._isShowLoading = true, this.net = t2;
      }
      n.MxLocalDwgFileLoad = l;
    }, { "./MxFun": 34 }], 36: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxManager = n.MxData = void 0;
      var i, r, a, o, s, l, c, u, h, d = t("./View/MxDbEntity"), p = t("./View/MxDbTextureManager"), f = t("./SVGLoader/MxSVGLoader");
      (i = n.MxData || (n.MxData = {})).iSelectRenderOrder = 5, i.iCADMeshRenderOrder = 10, i.iCADCurveRenderOrder = 20, i.iMxEntityRenderOrder = 30, i.iGripRenderOrder = 110, i.iDynJigRenderOrder = 120, r = n.MxManager || (n.MxManager = {}), a = [], o = null, s = [], l = void 0, c = new p.MxDbTextureManager(), u = new f.MxSvgManager(), h = new d.MxDbEntityClassHierarchy(), r.add = function(t2) {
        a.push(t2);
      }, r.getMxDbEntityClassHierarchy = function() {
        return h;
      }, r.getMxDbTextureManager = function() {
        return c;
      }, r.getMxDbSvgManager = function() {
        return u;
      }, r.outDebugString = function(t2) {
        l == null ? console.log(t2) : l(t2);
      }, r.setOutDebugCall = function(t2) {
        l = t2;
      }, r.onLoad = function() {
        for (var t2 in a)
          a[t2].onLoad("");
      }, r.updateDisplay = function() {
        for (var t2 in a)
          a[t2].updateDisplay();
      }, r.currentMx = function() {
        return o;
      }, r.setCurrentMx = function(t2) {
        o = t2;
      }, r.initResize = function() {
        for (var t2 in a)
          a[t2].initResize();
      }, r.addSelectEvent = function(t2) {
        s.push(t2);
      }, r.clearSelectEvent = function() {
        s = [];
      }, r.callSelectObject = function(t2) {
        for (var e2 in s)
          if (s[e2](t2) == 1)
            break;
      }, r.init = function() {
      }, r.getMxObject = function(t2) {
        for (var e2 in a)
          if (a[e2].getCanvas() === t2)
            return a[e2];
        return null;
      };
    }, { "./SVGLoader/MxSVGLoader": 61, "./View/MxDbEntity": 71, "./View/MxDbTextureManager": 76 }], 37: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxMaterial = void 0;
      var i = t("three");
      !function(t2) {
        t2.shaderUniforms = { crAmbient: { value: new i.Vector3(1, 0, 0) }, crDiffuse: { value: new i.Vector3(1, 0, 0) }, crSpecular: { value: new i.Vector3(1, 0, 0) } }, t2.m_arrSystemColors = new Array(0, 16711680, 16776960, 65280, 65535, 255, 16711935, 16777215, 8421504, 12632256, 16711680, 16744319, 13369344, 13395558, 10027008, 10046540, 8323072, 8339263, 4980736, 4990502, 16727808, 16752511, 13382400, 13401958, 10036736, 10051404, 8331008, 8343359, 4985600, 4992806, 16744192, 16760703, 13395456, 13408614, 10046464, 10056268, 8339200, 8347455, 4990464, 4995366, 16760576, 16768895, 13408512, 13415014, 10056192, 10061132, 8347392, 8351551, 4995328, 4997670, 16776960, 16777087, 13421568, 13421670, 10066176, 10066252, 8355584, 8355647, 5000192, 5000230, 12582656, 14679935, 10079232, 11717734, 7510272, 8755532, 6258432, 7307071, 3755008, 4344870, 8388352, 12582783, 6736896, 10079334, 5019904, 7510348, 4161280, 6258495, 2509824, 3755046, 4194048, 10485631, 3394560, 8375398, 2529536, 6265164, 2064128, 5209919, 1264640, 3099686, 65280, 8388479, 52224, 6736998, 39168, 5019980, 32512, 4161343, 19456, 2509862, 65343, 8388511, 52275, 6737023, 39206, 5019999, 32543, 4161359, 19475, 2509871, 65407, 8388543, 52326, 6737049, 39244, 5020018, 32575, 4161375, 19494, 2509881, 65471, 8388575, 52377, 6737074, 39282, 5020037, 32607, 4161391, 19513, 2509890, 65535, 8388607, 52428, 6737100, 39321, 5020057, 32639, 4161407, 19532, 2509900, 49151, 8380415, 39372, 6730444, 29337, 5014937, 24447, 4157311, 14668, 2507340, 32767, 8372223, 26316, 6724044, 19609, 5010073, 16255, 4153215, 9804, 2505036, 16383, 8364031, 13260, 6717388, 9881, 5005209, 8063, 4149119, 4940, 2502476, 255, 8355839, 204, 6710988, 153, 5000345, 127, 4145023, 76, 2500172, 4129023, 10452991, 3342540, 8349388, 2490521, 6245529, 2031743, 5193599, 1245260, 3089996, 8323327, 12550143, 6684876, 10053324, 4980889, 7490713, 4128895, 6242175, 2490444, 3745356, 12517631, 14647295, 10027212, 11691724, 7471257, 8735897, 6226047, 7290751, 3735628, 4335180, 16711935, 16744447, 13369548, 13395660, 10027161, 10046617, 8323199, 8339327, 4980812, 4990540, 16711871, 16744415, 13369497, 13395634, 10027122, 10046597, 8323167, 8339311, 4980793, 4990530, 16711807, 16744383, 13369446, 13395609, 10027084, 10046578, 8323135, 8339295, 4980774, 4990521, 16711743, 16744351, 13369395, 13395583, 10027046, 10046559, 8323103, 8339279, 4980755, 4990511, 3355443, 5987163, 8684676, 11382189, 14079702, 16777215), t2.m_arrDefUseMaterials = new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null), t2.m_arrDefUseCurveMaterials = new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null), t2.m_arrDefUseBasicMaterials = new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null), t2.m_selectMaterial = new i.MeshPhongMaterial({ color: 255, opacity: 0.2, transparent: true, side: i.DoubleSide }), t2.m_mouseMoveMaterial = new i.MeshPhongMaterial({ color: 16776960, side: i.DoubleSide }), t2.m_lockedMaterial = new i.MeshPhongMaterial({ color: 197379, side: i.DoubleSide }), t2.m_samplePoints = new i.PointsMaterial({ color: 255, depthTest: false, size: 8 }), t2.m_samplePointsMouseMove = new i.PointsMaterial({ color: 16711680, depthTest: false, size: 12 });
        var e2 = new i.MeshBasicMaterial({ color: 16777215, transparent: true, depthTest: false, side: i.DoubleSide, opacity: 1, stencilWrite: false, colorWrite: false });
        t2.getStencilMaterial = function() {
          return e2;
        }, t2.GetColorByIndex = function(e3) {
          return t2.m_arrSystemColors[e3];
        }, t2.GetColorMaterial = function(e3) {
          var n2 = t2.m_arrDefUseMaterials[e3];
          return n2 === null && (n2 = new i.MeshLambertMaterial({ color: t2.m_arrSystemColors[e3], side: i.DoubleSide }), t2.m_arrDefUseMaterials[e3] = n2), n2;
        }, t2.GetBaseColorMaterial = function(e3) {
          var n2 = t2.m_arrDefUseBasicMaterials[e3];
          return n2 === null && (n2 = new i.MeshBasicMaterial({ color: t2.m_arrSystemColors[e3], side: i.DoubleSide }), t2.m_arrDefUseMaterials[e3] = n2), n2;
        }, t2.GetCurveColorMaterial = function(e3) {
          var n2 = t2.m_arrDefUseCurveMaterials[e3];
          return n2 === null && (n2 = new i.LineBasicMaterial({ color: t2.m_arrSystemColors[e3], linewidth: 1 }), t2.m_arrDefUseCurveMaterials[e3] = n2), n2;
        }, t2.GetSelectMaterial = function() {
          return t2.m_selectMaterial;
        }, t2.GetMouseMoveMaterial = function() {
          return t2.m_mouseMoveMaterial;
        }, t2.GetLockedMaterial = function() {
          return t2.m_lockedMaterial;
        }, t2.GetSamplePointsMaterial = function() {
          return t2.m_samplePoints;
        }, t2.GetSamplePointsMouseMoveMaterial = function() {
          return t2.m_samplePointsMouseMove;
        }, t2.createMaterial = function(t3) {
          var e3 = void 0;
          if (t3 == null)
            return e3;
          function n2(t4, e4) {
            if (e4.map != null) {
              var n3 = e4.map, r = new i.TextureLoader().load(n3);
              r.wrapS = r.wrapT = i.RepeatWrapping, t4.map = r, t4.side = i.DoubleSide;
            }
          }
          return t3.transparent != 0 ? t3.transparent = true : t3.transparent = false, t3.name == "MeshPhongMaterial" ? n2(e3 = new i.MeshPhongMaterial(t3), t3) : t3.name == "MeshBasicMaterial" ? n2(e3 = new i.MeshBasicMaterial(t3), t3) : t3.name == "MeshDepthMaterial" ? n2(e3 = new i.MeshDepthMaterial(t3), t3) : t3.name == "MeshNormalMaterial" ? n2(e3 = new i.MeshNormalMaterial(t3), t3) : t3.name == "MeshLambertMaterial" ? n2(e3 = new i.MeshLambertMaterial(t3), t3) : t3.name == "MeshStandardMaterial" && n2(e3 = new i.MeshStandardMaterial(t3), t3), e3;
        };
      }(n.MxMaterial || (n.MxMaterial = {}));
    }, { three: 19 }], 38: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxHFileLoad = n.MxNet = n.MxNetBinMessageType = n.MxNetSend = n.MxNetMessage = n.MxNetMessageType = n.MxNetData = void 0;
      var i, r, a = t("three"), o = t("./MxFun"), s = t("pako"), l = t("./MxManager"), c = t("./MxDrawData"), u = (h.prototype.getId = function() {
        return this._dataView.getInt32(4, true);
      }, h.prototype.getVersion_MwBlobHead = function() {
        return this._dataView.getInt32(60, true);
      }, h.prototype.getVersion_MwBlobHeadDynLen = function() {
        return this._dataView.getInt32(4, true);
      }, h.prototype.getdPointCurveBuffersHead = function() {
        var t2 = {};
        return t2.ver = this._dataView.getInt32(4, true), t2.databaseIndex = this._dataView.getInt32(8, true), t2.zeroLayerIdIndex = this._dataView.getInt32(16, true), t2.datacount = this._dataView.getInt32(20, true), t2.datasize = this._dataView.getInt32(24, true), t2;
      }, h.prototype.getdPointMeshBuffersHead = function() {
        var t2 = {};
        return t2.ver = this._dataView.getInt32(4, true), t2.databaseIndex = this._dataView.getInt32(8, true), t2.id = this._dataView.getInt32(12, true), t2.zeroLayerIdIndex = this._dataView.getInt32(16, true), t2.datacount = this._dataView.getInt32(20, true), t2.datasize = this._dataView.getInt32(24, true), t2;
      }, h.prototype.getdPointTextureBuffersHead = function() {
        var t2 = {};
        return t2.ver = this._dataView.getInt32(4, true), t2.databaseIndex = this._dataView.getInt32(8, true), t2.zeroLayerIdIndex = this._dataView.getInt32(16, true), t2.datacount = this._dataView.getInt32(20, true), t2.datasize = this._dataView.getInt32(24, true), t2;
      }, h.prototype.getBlobHeadForMemorySectionsHead = function(t2) {
        var e2 = {};
        return e2.type = this._dataView.getInt32(t2, true), t2 += 4, e2.ver = this._dataView.getInt32(t2, true), t2 += 4, e2.databaseIndex = this._dataView.getInt32(t2, true), t2 += 4, e2.nOffset = t2, e2;
      }, h.prototype.getMemorySectionsHead = function() {
        var t2 = this.getBlobHeadForMemorySectionsHead(0);
        return t2.zeroLayerIdIndex = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datacount = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize = this._dataView.getInt32(t2.nOffset, true), t2.nOffset += 4, t2.datasize != t2.nOffset && console.log("mx: sectionshead size assert(0)"), t2;
      }, h.prototype.getMemorySectionHead = function(t2) {
        var e2 = this.getBlobHeadForMemorySectionsHead(t2);
        return t2 = e2.nOffset, e2.pointCount = this._dataView.getInt32(t2, true), t2 += 4, e2.layerId = this._dataView.getInt32(t2, true), t2 += 4, e2.blkId = this._dataView.getInt32(t2, true), t2 += 4, e2.memColor = this._dataView.getInt32(t2, true), t2 += 4, e2.memId = this._dataView.getInt32(t2, true), t2 += 4, e2.memType = this._dataView.getInt32(t2, true), t2 += 4, e2.offset = t2, e2;
      }, h.prototype.getdPointTextureBufferDataHead = function(t2) {
        t2 += 4, t2 += 4, t2 += 4;
        var e2 = {};
        return e2.dataCount = this._dataView.getInt32(t2, true), t2 += 4, e2.layerId = this._dataView.getInt32(t2, true), t2 += 4, e2.blkId = this._dataView.getInt32(t2, true), t2 += 4, e2.offset = t2, e2;
      }, h.prototype.getdPointCurveBufferDataHead = function(t2) {
        t2 += 4, t2 += 4, t2 += 4;
        var e2 = {};
        return e2.pointCount = this._dataView.getInt32(t2, true), t2 += 4, e2.layerId = this._dataView.getInt32(t2, true), t2 += 4, e2.blkId = this._dataView.getInt32(t2, true), t2 += 4, e2.offset = t2, e2;
      }, h.prototype.getdPointMeshBufferDataHead = function(t2) {
        t2 += 4, t2 += 4, t2 += 4;
        var e2 = {};
        return e2.pointCount = this._dataView.getInt32(t2, true), t2 += 4, e2.layerId = this._dataView.getInt32(t2, true), t2 += 4, e2.blkId = this._dataView.getInt32(t2, true), t2 += 4, e2.offset = t2, e2;
      }, h.prototype.getDatabaseIndex = function() {
        return this._dataView.getInt32(8, true);
      }, h.prototype.getColorIndex = function() {
        return this._dataView.getInt32(24, true);
      }, h.prototype.getBufferType = function() {
        return this._dataView.getInt32(32, true);
      }, h.prototype.getIsSketchEntity = function() {
        return this._dataView.getInt32(40, true);
      }, h.prototype.getLayerId = function() {
        return this._dataView.getInt32(44, true);
      }, h.prototype.getBlockId = function() {
        return this._dataView.getInt32(48, true);
      }, h.prototype.getVertexBufferSize = function() {
        return this._dataView.getInt32(12, true);
      }, h.prototype.getIndexBufferSize = function() {
        return this._dataView.getInt32(16, true);
      }, h.prototype.getZeroLayerId = function() {
        return this._dataView.getInt32(52, true);
      }, h.prototype.getSelectMark = function() {
        return this._dataView.getInt32(56, true);
      }, h.prototype.getMateria = function() {
        var t2 = this._dataView.getInt32(36, true);
        if (t2 == 0)
          return "";
        for (var e2 = [], n2 = 0; n2 < t2; n2++) {
          var i2 = String.fromCharCode(this._dataView.getUint8(80 + n2));
          e2.push(i2);
        }
        return e2.join("");
      }, h.prototype.getDrawDataOffset = function() {
        return this._dataView.getInt32(36, true) + 80;
      }, h.prototype.getMesh = function() {
        var t2 = this._dataView.getInt32(4, true), e2 = this._dataView.getInt32(32, true) == 0, n2 = {}, i2 = this._dataView.getInt32(12, true), r2 = this._dataView.getInt32(16, true);
        if (i2 === 0 || r2 === 0)
          return n2.size = 80, n2;
        var o2, s2 = new a.Geometry(), l2 = 80;
        o2 = e2 ? i2 / 4 / 8 : i2 / 4 / 2;
        for (var c2 = 0; c2 < o2; c2++) {
          var u2 = this._dataView.getFloat32(l2 + 0, true), h2 = this._dataView.getFloat32(l2 + 4, true), d2 = 0;
          e2 ? (d2 = this._dataView.getFloat32(l2 + 8, true), this._dataView.getFloat32(l2 + 12, true), this._dataView.getFloat32(l2 + 16, true), this._dataView.getFloat32(l2 + 20, true), this._dataView.getFloat32(l2 + 24, true), this._dataView.getFloat32(l2 + 28, true), l2 += 32) : l2 += 8;
          var p2 = new a.Vector3(u2, h2, d2);
          s2.vertices.push(p2);
        }
        var f2 = r2 / 4;
        for (c2 = 0; c2 < f2; c2 += 3) {
          var m2 = this._dataView.getInt32(l2, true);
          l2 += 4;
          var g2 = this._dataView.getInt32(l2, true);
          l2 += 4;
          var v2 = this._dataView.getInt32(l2, true);
          l2 += 4;
          var y2 = new a.Face3(m2, g2, v2);
          s2.faces.push(y2);
        }
        var x2 = this.getIsSketchEntity();
        return n2.size = l2, n2.geometry = s2, n2.id = t2, n2.isSketchEntity = x2, n2.nColorIndex = this._dataView.getInt32(24, true), n2;
      }, h.prototype.getCurve = function(t2) {
        var e2, n2 = this._dataView.getInt32(32, true), i2 = this.getIsSketchEntity(), r2 = n2 == 0, o2 = {};
        if ((e2 = r2 ? this._dataView.getInt32(20, true) / 4 / 3 : this._dataView.getInt32(20, true) / 4 / 2) < 2)
          return o2;
        for (var s2 = new a.Geometry(), l2 = t2, c2 = 0; c2 < e2; c2++) {
          var u2 = this._dataView.getFloat32(l2, true);
          l2 += 4;
          var h2 = this._dataView.getFloat32(l2, true);
          l2 += 4;
          var d2 = 0;
          r2 && (d2 = this._dataView.getFloat32(l2, true), l2 += 4), s2.vertices.push(new a.Vector3(u2, h2, d2));
        }
        var p2 = this._dataView.getInt32(4, true);
        return o2.size = l2, o2.geometry = s2, o2.id = p2, o2.isSketchEntity = i2, o2.colorIndex = this._dataView.getInt32(28, true), o2;
      }, h);
      function h(t2) {
        this._dataView = t2;
      }
      n.MxNetData = u, (r = i = n.MxNetMessageType || (n.MxNetMessageType = {})).kAddLayer = "00000007", r.kClearLayer = "00000008", r.kHideLayer = "00000009", r.kShowLayer = "00000010", r.kUpdateDisplayRange = "00000011", r.kCallJsReturn = "00000012", r.kLayerData = "00000013", r.kSendDebugString = "00000014", r.kShowLoading = "00000015", r.kHideLoading = "00000016", r.kSelectObject = "00000017", r.kGlRenderHead = "00000018", r.kUserLoginResult = "00000019", r.kOpenFileResult = "00000020", r.kServerReturn = "00000021", r.kMxCADLayerData = "00000056", r.kMxCADSystemVariable = "00000057";
      var d = (p.prototype.setJsRetCall = function(t2, e2, n2) {
        this.serverJsRetCall.set(e2 + n2, t2);
      }, p.prototype.onSocketErrort = function() {
        this.serverJsRetCall.forEach(function(t2) {
          t2(void 0);
        }), this.serverJsRetCall = /* @__PURE__ */ new Map();
      }, p.prototype.Do = function(t2) {
        var e2 = this.net.getCurrentDatabaseId();
        if (e2 == -1) {
          var n2 = t2.substring(0, 4);
          e2 = parseInt(n2);
        }
        var i2 = t2.substring(4, 12), r2 = t2.substring(12);
        return this.messageCall[i2] != null && (this.messageCall[i2](r2, e2), true);
      }, p);
      function p(t2, e2) {
        this.messageCall = /* @__PURE__ */ new Map(), this.serverJsRetCall = /* @__PURE__ */ new Map(), this.net = null, this.net = e2;
        var n2 = this;
        this.messageCall[i.kUpdateDisplayRange] = function(e3) {
          if (!n2.net.isTzDwgStaticFile()) {
            e3 = e3.replace(/\\/g, "\\\\");
            try {
              var i2 = JSON.parse(e3);
              if (i2 != null && t2.is2D()) {
                t2.initCAD2Doc(new a.Matrix4()), i2.newbrownermode ? i2.DToSMat ? c.MxDrawData.m_isCorrectLargeCoordinates ? (t2.intiDoc2Wold(new a.Matrix4()), t2.initCAD2Doc(i2.DToSMat)) : t2.intiDoc2Wold(i2.DToSMat) : t2.intiDoc2Wold(new a.Matrix4()) : t2.intiDoc2Wold(i2.DToWMat), t2.updateCameraDisplayRange(new a.Vector3(+i2.pt1[0], +i2.pt1[1], +i2.pt1[2]), new a.Vector3(+i2.pt2[0], +i2.pt2[1], +i2.pt2[2]), +i2.viewangle), t2.initAllLayoutName(i2.layout), t2.updateDisplay(true);
                var r2 = o.MxFun.getUiObj();
                r2 != null && (r2.SetLayoutData(i2.layout), r2.UpDisplayLayout());
              }
            } catch (e4) {
              console.log("UpdateDisplayRange exception");
            }
          }
        }, this.messageCall[i.kCallJsReturn] = function(t3) {
          if (t3.length != 0) {
            var e3 = JSON.parse(t3);
            e3.cmd.length == 0 && (e3.cmd = "__mx_loadcode");
            var i2 = e3.cmd + e3.count, r2 = n2.serverJsRetCall.get(i2);
            r2 && (n2.serverJsRetCall.delete(i2), typeof e3.ret == "string" && (e3.ret = e3.ret.replace(/\'/g, '"')), r2(e3.ret));
          } else
            console.log("assert(0),kCallJsReturn return empty");
        }, this.messageCall[i.kSendDebugString] = function(t3) {
          l.MxManager.outDebugString(t3);
        }, this.messageCall[i.kUserLoginResult] = function(e3) {
          t2.userLoginResult(e3);
        }, this.messageCall[i.kOpenFileResult] = function(e3) {
          t2.openFileResult(e3);
        }, this.messageCall[i.kServerReturn] = function(e3) {
          t2.serverReturn(e3);
        }, this.messageCall[i.kShowLoading] = function(t3) {
          n2.net.isTzDwgStaticFile() || o.MxFun.showLoading();
        }, this.messageCall[i.kHideLoading] = function(e3) {
          n2.net.isTzDwgStaticFile() || (o.MxFun.hideLoading(), t2.callInitCompleteEvent());
        }, this.messageCall[i.kSelectObject] = function(t3) {
          var e3 = JSON.parse(t3);
          l.MxManager.callSelectObject(parseInt(e3.id));
        }, this.messageCall[i.kGlRenderHead] = function(e3) {
          t2.isStaticLocalLoad() ? t2.getStaticLocalNet().onRenderHead(e3) : (n2.net.isTzDwgStaticFile() ? t2.getStaticLoadTzNet() : t2.getStaticNet()).onRenderHead(e3);
        }, this.messageCall[i.kMxCADLayerData] = function(e3, n3) {
          t2.getMxCAD().getOpenDisplay().OnMessageLayerData(e3);
        }, this.messageCall[i.kMxCADSystemVariable] = function(e3, n3) {
          t2.sysVariable().OnMessageMxCADSystemVariable(e3);
        }, this.messageCall[i.kLayerData] = function(e3, n3) {
          if (n3 == 0) {
            if (t2.addLayerInfoComplete(), (s2 = JSON.parse(e3)) != null) {
              if (!s2.isSketch) {
                var i2 = s2.list;
                for (var r2 in i2)
                  t2.addLayerInfo(i2[r2].id, i2[r2].colorvalue, i2[r2].name), i2[r2].zerolayer == 1 && t2.setZeroLayerId(i2[r2].id);
              }
              s2.isSketch || t2.callEvent("uiSetLayerData", s2.list);
              var a2 = o.MxFun.getUiObj();
              a2 != null && (s2.isSketch ? a2.SetSketchLayerData(s2.list) : a2.SetLayerData(s2.list), a2.UpDisplayLayer());
            }
          } else {
            var s2, l2 = t2.getExtRefManager().getLayers(n3);
            if (l2.initComplete(), (s2 = JSON.parse(e3)) != null)
              for (var r2 in i2 = s2.list)
                l2.add(i2[r2].id, i2[r2].colorvalue, i2[r2].name), i2[r2].zerolayer == 1 && l2.setZeroLayerId(i2[r2].id);
          }
        };
      }
      n.MxNetMessage = d;
      var f, m, g = (v.prototype.setWebSocket = function(t2) {
        this._webSocket = t2;
      }, v.prototype.UndoMark = function() {
        this._webSocket != null && this._webSocket.send(this.SendType.kUndoMark + "");
      }, v.prototype.DoCommand = function(t2, e2, n2) {
        this._webSocket != null && (n2 != null ? (this._callCount++, 200 < this._callCount && (this._callCount = 1), this._msg.setJsRetCall(n2, t2, this._callCount), e2 == null && (e2 = ""), this._webSocket.send(this.SendType.kCmdEx + "," + t2 + "," + this._callCount + "," + e2)) : e2 == null ? this._webSocket.send(this.SendType.kCmd + "," + t2) : this._webSocket.send(this.SendType.kCmd + "," + t2 + "," + e2));
      }, v.prototype.OpenFile = function(t2) {
        this._webSocket != null && this._webSocket.send(this.SendType.kOpenFile + "," + t2);
      }, v.prototype.UserLogin = function(t2, e2, n2) {
        if (this._webSocket != null) {
          var i2 = {};
          i2.IdentitySign = t2, i2.RandomToken = e2 == null ? "" : e2, i2.Init = n2 == null ? "" : n2, this._webSocket.send(this.SendType.kUserLogin + "," + JSON.stringify(i2));
        }
      }, v.prototype.Init = function(t2) {
        this._webSocket != null && this._webSocket.send(this.SendType.kInit + "," + t2);
      }, v.prototype.CallServerJS = function(t2, e2, n2) {
        this._webSocket != null && (n2 == null ? e2 == null || e2 == null || e2.length == 0 ? this._webSocket.send(this.SendType.kCallJS + ',{"command":"' + t2 + '","param":"{}"}') : this._webSocket.send(this.SendType.kCallJS + ',{"command":"' + t2 + '","param":' + e2 + "}") : (this._callCount++, 200 < this._callCount && (this._callCount = 1), this._msg.setJsRetCall(n2, t2, this._callCount), e2 == null || e2 == null || e2.length == 0 ? this._webSocket.send(this.SendType.kCallJS + ',{"command":"' + t2 + '","param":"{}","count":"' + this._callCount + '"}') : this._webSocket.send(this.SendType.kCallJS + ',{"command":"' + t2 + '","param":' + e2 + ',"count":"' + this._callCount + '"}')));
      }, v.prototype.CallLoadCodeToServer = function(t2, e2) {
        this._webSocket != null && (this._msg.setJsRetCall(e2, "__mx_loadcode", 0), t2 != null && t2 != null && t2.length != 0 && this._webSocket.send(this.SendType.kCallJS + "," + t2));
      }, v.prototype.DeleteObject = function(t2) {
        this._webSocket != null && this._webSocket.send(this.SendType.kDelete + "," + t2);
      }, v.prototype.SelectObject = function(t2) {
        this._webSocket != null && this._webSocket.send(this.SendType.kSelect + "," + t2);
      }, v.prototype.QuitSelectObject = function(t2) {
        this._webSocket != null && this._webSocket.send(this.SendType.kQuitSelect + "," + t2);
      }, v.prototype.SendDragDrawEntity = function(t2) {
        this._webSocket != null && this._webSocket.send(this.SendType.kAddDragDraw + "," + t2);
      }, v.prototype.SendDragDrawRequest = function() {
        this._webSocket != null && (this.SendMousePickRay(), this._webSocket.send(this.SendType.kRequestDragDraw));
      }, v.prototype.SendDragDrawDetermine = function() {
        this._webSocket != null && (this.SendMousePickRay(), this._webSocket.send(this.SendType.kDetermineDragDraw));
      }, v.prototype.SendDragDrawCancel = function() {
        this._webSocket != null && this._webSocket.send(this.SendType.kCancelDragDraw);
      }, v.prototype.SendMousePickRay = function() {
        this._webSocket;
      }, v);
      function v(t2, e2) {
        this.SendType = {}, this._callCount = 1, this._webSocket = t2, this._msg = e2, this.SendType.kCmd = 0, this.SendType.kDelete = 1, this.SendType.kSelect = 2, this.SendType.kOpenFile = 3, this.SendType.kGetDemoList = 4, this.SendType.kCallJS = 5, this.SendType.kAddDragDraw = 6, this.SendType.kRequestDragDraw = 7, this.SendType.kMousePickRay = 8, this.SendType.kDetermineDragDraw = 9, this.SendType.kCancelDragDraw = 10, this.SendType.kQuitSelect = 11, this.SendType.kInit = 12, this.SendType.kCmdEx = 13, this.SendType.kUserLogin = 14, this.SendType.kUndoMark = 15;
      }
      n.MxNetSend = g, (m = f = n.MxNetBinMessageType || (n.MxNetBinMessageType = {})).eBlockRef = 10, m.eEntitysData = 14, m.eAddEntityFor2dPointTextureBuffers = 15, m.eMxNewMemorySections = 16, m.kMxCADBlockRef = 56, m.kMxCADMemorySections = 57, m.kMxCADMemorySectionsFromChange = 59, m.kMxCADNotUseMemorySectionsForChage = 61, m.kMxCADEntityDisplayDatas = 62;
      var y = (x.prototype.setCurrentDatabaseId = function(t2) {
        this._iCurrentDatabaseId = t2;
      }, x.prototype.getMxDrawObject = function() {
        return this._mx;
      }, x.prototype.getCurrentDatabaseId = function() {
        return this._iCurrentDatabaseId;
      }, x.prototype.isTzDwgStaticFile = function() {
        return this._iCurrentDatabaseId != -1;
      }, x.prototype.onBinMessage = function(t2) {
        var e2 = this._mx, n2 = s.inflate(t2), i2 = new DataView(n2.buffer), r2 = i2.getInt32(0, true);
        this._binMessageCall.has(r2) ? this._binMessageCall.get(r2)(i2, this._iCurrentDatabaseId) : (this._iCurrentDatabaseId == -1 && (r2 == 0 ? e2.mxWebAddEntity(i2) : r2 == 2 ? e2.getSelect().mxWebAddEntity(i2) : r2 == 6 ? e2.removeEntityFromServer(i2) : r2 == 11 && e2.getExtRefManager().createExternalReferences(i2)), r2 == 12 ? e2.mxWebAddEntityFor2dPointCurveBuffers(i2, this._iCurrentDatabaseId) : r2 == 13 ? e2.mxWebAddEntityFor2dPointMeshBuffers(i2, this._iCurrentDatabaseId) : r2 == 8 ? e2.mxWebAddEntityFor2dPointCurveBuffer(i2, this._iCurrentDatabaseId) : r2 == 9 ? e2.mxWebAddEntityFor2dPointMeshBuffer(i2, this._iCurrentDatabaseId) : r2 == f.eBlockRef && e2.mxWebCreateAllBlocks(i2, this._iCurrentDatabaseId));
      }, x.prototype.socket_onErrort = function() {
        this._msg.onSocketErrort();
      }, x.prototype.socket_onMessageImp = function(t2, e2) {
        if (e2 === void 0 && (e2 = false), typeof t2 == "string")
          this._msg.Do(t2);
        else if (e2)
          this.onBinMessage(t2);
        else {
          var n2 = new FileReader();
          n2.readAsArrayBuffer(t2);
          var i2 = this;
          n2.onload = function(t3) {
            i2._mx.updateDisplay(), i2.onBinMessage(n2.result);
          };
        }
        this._mx.updateDisplay();
      }, x.prototype.initBinMessage = function() {
        var t2 = this._mx;
        this._binMessageCall.set(f.kMxCADBlockRef, function(e2, n2) {
          t2.getMxCAD().getOpenDisplay().OnMessageDisplayBlockRef(e2);
        }), this._binMessageCall.set(f.kMxCADMemorySections, function(e2, n2) {
          t2.getMxCAD().getOpenDisplay().OnMessageDisplayMemorySections(e2);
        }), this._binMessageCall.set(f.kMxCADMemorySectionsFromChange, function(e2, n2) {
          t2.getMxCAD().getSyncDisplay().OnMessageDisplayMemorySectionsFromChange(e2);
        }), this._binMessageCall.set(f.kMxCADNotUseMemorySectionsForChage, function(e2, n2) {
          t2.getMxCAD().getSyncDisplay().OnMessageDisplayNotUseMemorySectionsForChage(e2);
        }), this._binMessageCall.set(f.kMxCADEntityDisplayDatas, function(e2, n2) {
          t2.getMxCAD().getSelect().OnMessageEntityDisplayDatas(e2);
        }), this._binMessageCall.set(f.eEntitysData, function(e2, n2) {
          t2.mxWebEntitysData(e2, n2);
        }), this._binMessageCall.set(f.eAddEntityFor2dPointTextureBuffers, function(e2, n2) {
          t2.mxWebAddEntityFor2dPointTextureBuffers(e2, n2);
        }), this._binMessageCall.set(f.eMxNewMemorySections, function(e2, n2) {
          t2.mxWebAddEntityForMemorySections(e2, n2);
        });
      }, x.prototype.init = function(t2, e2) {
        var n2 = this;
        this._mx = t2, this._msg = new d(t2, this), this.initBinMessage(), e2 && (this._webSocket = new WebSocket(o.MxFun.getMxServer()), this._webSocket.onopen = function() {
          var t3 = n2._mx.getIniParam();
          if (t3.length != 0) {
            for (var e3 = "{", i2 = t3.length, r2 = 0; r2 < i2; r2++)
              e3 = r2 == 0 ? e3 + '"' + t3[r2][0] + '":"' + t3[r2][1] + '"' : e3 + ',"' + t3[r2][0] + '":"' + t3[r2][1] + '"';
            e3 += "}", n2._send.Init(e3);
          }
        }, this._webSocket.onmessage = function(t3) {
          n2.socket_onMessageImp(t3.data);
        }, this._webSocket.onerror = function() {
          console.log("mx: socket error"), n2.socket_onErrort();
        }), this._send = new g(this._webSocket, this._msg);
      }, x.prototype.closeWebSocket = function() {
        this._webSocket && (this._send.setWebSocket(null), this._webSocket.close(), this._webSocket = null);
      }, x.prototype.getOnMessage = function() {
        return this._msg;
      }, x.prototype.getSend = function() {
        return this._send;
      }, x.prototype.onStaticMessage = function(t2) {
        try {
          return this.socket_onMessageImp(t2, true), true;
        } catch (t3) {
          return console.log("mx file data error!"), console.log(t3), false;
        }
      }, x.prototype.onStaticHeadMessage = function(t2) {
        return typeof t2 == "string" && this._msg.Do(t2);
      }, x);
      function x() {
        this._webSocket = null, this._send = null, this._msg = null, this._mx = null, this._binMessageCall = /* @__PURE__ */ new Map(), this._iCurrentDatabaseId = -1;
      }
      n.MxNet = y;
      var b = (w.prototype.stopAllLoading = function() {
        this._isStopLoading || (this._isStopLoading = true, this._isShowLoading && o.MxFun.hideLoading());
      }, w.prototype.setShowloading = function(t2) {
        this._isShowLoading = t2;
      }, w.prototype.showLoading = function() {
        this._isShowLoading && o.MxFun.showLoading();
      }, w.prototype.hideLoading = function(t2) {
        this._isStopLoading || (this._isShowLoading && o.MxFun.hideLoading(), this.net.getMxDrawObject().callInitCompleteEvent(), this.net.getMxDrawObject().callOpenFileComplete(t2));
      }, w.prototype.setRequestHeader = function(t2) {
        this._requestHeader = t2;
      }, w.prototype.setUrlParam = function(t2) {
        this._urlParam = t2;
      }, w.prototype.load = function(t2, e2) {
        var n2 = o.MxFun.curPath(), i2 = o.MxFun.dwgDir(), r2 = o.MxFun.getStaticServer(), a2 = "/buf/";
        if (t2.substring(t2.lastIndexOf(".") + 1).toLowerCase() == "wgh") {
          a2 = "/";
          var s2 = t2.substring(0, t2.indexOf(".mxb1.wgh")).split("/");
          (t2 = s2.length == 1 ? s2[0] : (r2 = t2.substring(0, t2.lastIndexOf("/")), s2[s2.length - 1]))[0] == "$" && (t2 = t2.substring(1));
        }
        var l2 = "$" + (t2 = encodeURIComponent(t2)) + ".mxb1.wgh";
        r2.length != 0 ? n2 = r2 + a2 : i2.length != 0 ? n2 = n2 + "/" + i2 + a2 : n2 += a2, this._path = n2, this._filename = t2, 1 < (this._staticLoadingOpenFiles = e2).length && (l2 = e2[0], this._path = void 0);
        var c2 = this;
        this.getFile(this._path, l2, function(t3) {
          if (!c2._isStopLoading)
            return typeof t3 != "string" ? (console.log("mx error h1"), void c2.hideLoading(4)) : c2.net.onStaticHeadMessage(t3) ? void 0 : (console.log("mx error h1:" + t3), void c2.hideLoading(2));
        }, function() {
          c2.hideLoading(3), console.log("mx get " + l2 + " faild");
        });
      }, w.prototype.getData = function() {
        if (this._isStopLoading)
          this.hideLoading(5);
        else if (this._iGet >= this._dataNum)
          this.hideLoading(0);
        else {
          var t2 = this._dataType[this._iGet];
          this._iGet++;
          var e2 = this, n2 = this._iGet + 1, i2 = "$" + this._filename + ".mxb" + n2 + ".wgh";
          if (1 < this._staticLoadingOpenFiles.length) {
            if (this._iGet >= this._staticLoadingOpenFiles.length)
              return console.log("Mx staticLoadingOpenFiles error!"), void this.hideLoading(7);
            i2 = this._staticLoadingOpenFiles[this._iGet];
          }
          var r2 = i2;
          this._path && (r2 = this._path + i2);
          var a2 = r2.substring(0, r2.lastIndexOf("/") + 1);
          if (this.net.getMxDrawObject().setCurrentLoadUrl(a2), t2 == 0)
            this.getFile(this._path, i2, function(t3) {
              e2._isStopLoading || (e2.net.onStaticMessage(t3) || (console.log(this._path), console.log(i2)), e2.getData());
            }, function() {
              e2._dataNum = 0, e2._iGet = 0, e2.hideLoading(8), console.log("mx get " + i2 + " faild");
            });
          else {
            var o2 = new XMLHttpRequest(), s2 = i2;
            this._path && (s2 = this._path + i2), this._urlParam.length != 0 ? o2.open("GET", s2 + this._urlParam) : o2.open("GET", s2), this._requestHeader.length != 0 && o2.setRequestHeader("usertoken", this._requestHeader), o2.responseType = "arraybuffer", o2.onload = function() {
              e2._isStopLoading || (e2.net.onStaticMessage(o2.response) || console.log(s2), e2.getData());
            }, o2.addEventListener("error", function(t3) {
              e2._dataNum = 0, e2._iGet = 0, e2.hideLoading(9), console.log("mx get " + i2 + " faild");
            }, false), o2.send();
          }
        }
      }, w.prototype.onRenderHead = function(t2) {
        if (!this._isStopLoading) {
          var e2 = JSON.parse(t2);
          this._dataType = e2.type, this._dataNum = e2.count, this._iGet = 0, this.showLoading(), this.getData();
        }
      }, w.prototype.getFile = function(t2, e2, n2, i2) {
        var r2 = new a.FileLoader(this.manager);
        r2.setPath(t2);
        var o2 = e2;
        this._urlParam.length != 0 && (o2 = e2 + this._urlParam), this._requestHeader.length != 0 && (r2.requestHeader = { usertoken: this._requestHeader }), r2.load(o2, n2, function() {
        }, i2);
      }, w);
      function w(t2, e2) {
        this.net = null, this.manager = null, this._dataNum = 0, this._iGet = 0, this._dataType = [], this._path = "", this._filename = "", this._staticLoadingOpenFiles = [], this._isShowLoading = true, this._requestHeader = "", this._isStopLoading = false, this._urlParam = "", this.net = t2, this.manager = e2 !== void 0 ? e2 : a.DefaultLoadingManager;
      }
      n.MxHFileLoad = b;
    }, { "./MxDrawData": 29, "./MxFun": 34, "./MxManager": 36, pako: 1, three: 19 }], 39: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxSelect = void 0;
      var i = t("three"), r = t("three.meshline"), a = t("./MxFun"), o = t("./MxNetData"), s = t("./MxMaterial"), l = (c.prototype.removeAll = function() {
        this._mapSelectMark2Entity = /* @__PURE__ */ new Map();
      }, c.prototype.addEntity = function(t2, e2) {
        var n2 = this._mapSelectMark2Entity.get(t2);
        n2 == null && (n2 = new Array(), this._mapSelectMark2Entity.set(t2, n2)), n2.push(e2);
      }, c.prototype.removeEntity = function(t2) {
        var e2 = /* @__PURE__ */ new Map(), n2 = function(t3, e3) {
          var n3 = this.mx.getScene(), i2 = e3;
          return function(e4, r2, o2) {
            if (t3 == null || r2 != t3)
              for (var s2 in e4)
                a.MxFun.removeThreejsObject(e4[s2], n3);
            else {
              var l2 = e4.concat();
              i2.set(t3, l2);
            }
          };
        }.call(this, t2, e2);
        this._mapSelectMark2Entity.forEach(n2), this._mapSelectMark2Entity = e2;
      }, c.prototype.init = function() {
        var t2 = this;
        t2.domElement.addEventListener("mousedown", function(e2) {
          if (t2.enabled !== false && !t2.tmpDisable && e2.button == i.MOUSE.LEFT) {
            var n2 = t2.mx.screenCoord2Doc(e2.clientX, e2.clientY, 0), r2 = t2.mx.screenCoordLong2Doc(10), o2 = a.MxFun.formatString("[{0},{1},{2},{3}]", n2.x.toString(), n2.y.toString(), "0", r2.toString());
            t2.mx.callCommand("Mx_Select", o2);
          }
        }, false);
      }, c.prototype.mxWebAddEntity = function(t2) {
        var e2 = new o.MxNetData(t2), n2 = e2.getSelectMark();
        this.removeEntity(n2);
        var i2 = this.mxWebAddEntity_3DChild(e2);
        this.mxWebAddEntity_Curve(e2, i2);
      }, c.prototype.mxWebAddEntity_3DChild = function(t2) {
        var e2 = t2.getMesh();
        if (e2.id == null)
          return e2.size;
        var n2 = new i.Mesh(e2.geometry, s.MxMaterial.GetBaseColorMaterial(1));
        this.mx.getScene().add(n2);
        var r2 = t2.getSelectMark();
        return this.addEntity(r2, n2), e2.size;
      }, c.prototype.mxWebAddEntity_Curve = function(t2, e2) {
        var n2 = t2.getCurve(e2);
        if (n2.id != null) {
          var a2 = this.mx.getViewWidth(), o2 = this.mx.getViewHeight();
          this._material.resolution = new i.Vector2(a2, o2);
          for (var s2 = t2.getSelectMark(), l2 = n2.geometry, c2 = this.mx.getScene(), u = 0; u + 1 < l2.vertices.length; u += 2) {
            var h = l2.vertices[u], d = l2.vertices[u + 1], p = new Float32Array(6);
            p[0] = h.x, p[1] = h.y, p[2] = h.z, p[3] = d.x, p[4] = d.y, p[5] = d.z;
            var f = new r.MeshLine();
            f.setGeometry(p);
            var m = new i.Mesh(f.geometry, this._material);
            c2.add(m), this.addEntity(s2, m);
          }
        }
      }, c);
      function c(t2, e2) {
        this.enabled = true, this.tmpDisable = false, this.mx = void 0, this.domElement = void 0, this._mapSelectMark2Entity = /* @__PURE__ */ new Map(), this._material = new r.MeshLineMaterial({ useMap: false, color: new i.Color(16711680), opacity: 0.5, resolution: new i.Vector2(500, 500), sizeAttenuation: false, lineWidth: 10, transparent: true }), this.mx = t2, this.domElement = e2 !== void 0 ? e2 : document;
      }
      n.MxSelect = l;
    }, { "./MxFun": 34, "./MxMaterial": 37, "./MxNetData": 38, three: 19, "three.meshline": 18 }], 40: [function(t, e, n) {
      "use strict";
      var i;
      Object.defineProperty(n, "__esModule", { value: true }), n.MxShader = void 0, (i = n.MxShader || (n.MxShader = {})).VSHADER_COLOR_POINT = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nattribute vec2 position; \nattribute vec3 color; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nattribute float ishide; \nvarying vec4 vColor; \nvoid main(){ \n mat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \nif(ishide > 0.1) \n   vColor = vec4(color,0.0); \nelse \n   vColor = vec4(color,1.0); \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.VSHADER_COLOR_POINT_BYLAYER = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nuniform vec3 color; \nattribute vec2 position; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nattribute float ishide; \nvarying vec4 vColor; \nvoid main(){ \n mat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \nif(ishide > 0.1) \n   vColor = vec4(color,0.0); \nelse \n   vColor = vec4(color,1.0); \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.FSHADER_COLOR_POINT = " precision highp float; \nvarying vec4 vColor; \nvoid main() { \ngl_FragColor = vColor; \n} \n", i.VSHADER_COLOR_POINT_TEXTURE = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nattribute vec2 position; \nattribute vec2 uv; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nvarying vec2 vUv; \nvoid main(){ \nvUv = uv; \nmat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.FSHADER_COLOR_POINT_TEXTURE = " precision highp float; \nvarying vec2 vUv; \nuniform sampler2D texture; \nvoid main() { \ngl_FragColor = texture2D( texture, vUv ); \n} \n", i.VSHADER_COLOR_POINT_CLIP = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nuniform vec2 clippt1; \nuniform vec2 clippt2; \nuniform float vieww; \nuniform float viewh; \nattribute vec2 position; \nattribute vec3 color; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nattribute float ishide; \nvarying vec4 vColor; \nvarying vec2 vCp1; \nvarying vec2 vCp2; \nvoid main(){ \n mat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \nvec4 pt1 = projectionMatrix * modelViewMatrix * vec4( clippt1.x,clippt1.y,0.0, 1.0 ); \nvec4 pt2 = projectionMatrix * modelViewMatrix * vec4( clippt2.x,clippt2.y,0.0, 1.0 ); \nvCp1 = vec2(pt1.x * vieww + vieww,pt1.y * viewh + viewh); \nvCp2 = vec2(pt2.x * vieww + vieww,pt2.y * viewh + viewh); \nif(ishide > 0.1) \n   vColor = vec4(color,0.0); \nelse \n   vColor = vec4(color,1.0); \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.VSHADER_COLOR_POINT_BYLAYER_CLIP = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nuniform vec3 color; \nuniform vec2 clippt1; \nuniform vec2 clippt2; \nuniform float vieww; \nuniform float viewh; \nattribute vec2 position; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nattribute float ishide; \nvarying vec4 vColor; \nvarying vec2 vCp1; \nvarying vec2 vCp2; \nvoid main(){ \n mat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \nvec4 pt1 = projectionMatrix * modelViewMatrix * vec4( clippt1.x,clippt1.y,0.0, 1.0 ); \nvec4 pt2 = projectionMatrix * modelViewMatrix * vec4( clippt2.x,clippt2.y,0.0, 1.0 ); \nvCp1 = vec2(pt1.x * vieww + vieww,pt1.y * viewh + viewh); \nvCp2 = vec2(pt2.x * vieww + vieww,pt2.y * viewh + viewh); \nif(ishide > 0.1) \n   vColor = vec4(color,0.0); \nelse \n   vColor = vec4(color,1.0); \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.FSHADER_COLOR_POINT_CLIP = "precision highp float; \nvarying vec4 vColor; \nvarying vec2 vCp1; \nvarying vec2 vCp2; \nvoid main() { \nif(gl_FragCoord.x > vCp1.x && gl_FragCoord.x < vCp2.x && gl_FragCoord.y > vCp1.y && gl_FragCoord.y < vCp2.y) \ngl_FragColor = vColor; \nelse \ndiscard; \n} \n", i.VSHADER_COLOR_POINT_FORMXCAD = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nuniform vec3 color; \nattribute vec2 position; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nattribute float ishide; \nvarying vec4 vColor; \nvoid main(){ \n mat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \ngl_PointSize = 1.0;\nif(ishide > 0.1) \n   vColor = vec4(color,0.0); \nelse \n   vColor = vec4(color,1.0); \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.FSHADER_COLOR_POINT_FORMXCAD = " precision highp float; \nvarying vec4 vColor; \nvoid main() { \ngl_FragColor = vColor; \n} \n", i.VSHADER_COLOR_POINT_CLIP_FORMXCAD = " precision highp float; \nuniform mat4 modelViewMatrix; \nuniform mat4 projectionMatrix; \nuniform vec3 color; \nuniform vec2 clippt1; \nuniform vec2 clippt2; \nuniform float vieww; \nuniform float viewh; \nattribute vec2 position; \nattribute vec4 tran1; \nattribute vec4 tran2; \nattribute vec4 tran3; \nattribute vec4 tran4; \nattribute float ishide; \nvarying vec4 vColor; \nvarying vec2 vCp1; \nvarying vec2 vCp2; \nvoid main(){ \n mat4 tran; \ntran[0][0] = tran1.x;tran[0][1] = tran1.y;tran[0][2] = tran1.z;tran[0][3] = tran1.w; \ntran[1][0] = tran2.x;tran[1][1] = tran2.y;tran[1][2] = tran2.z;tran[1][3] = tran2.w; \ntran[2][0] = tran3.x;tran[2][1] = tran3.y;tran[2][2] = tran3.z;tran[2][3] = tran3.w; \ntran[3][0] = tran4.x;tran[3][1] = tran4.y;tran[3][2] = tran4.z;tran[3][3] = tran4.w; \nvec4 pt1 = projectionMatrix * modelViewMatrix * vec4( clippt1.x,clippt1.y,0.0, 1.0 ); \nvec4 pt2 = projectionMatrix * modelViewMatrix * vec4( clippt2.x,clippt2.y,0.0, 1.0 ); \nvCp1 = vec2(pt1.x * vieww + vieww,pt1.y * viewh + viewh); \nvCp2 = vec2(pt2.x * vieww + vieww,pt2.y * viewh + viewh); \nif(ishide > 0.1) \n   vColor = vec4(color,0.0); \nelse \n   vColor = vec4(color,1.0); \ngl_Position = projectionMatrix * modelViewMatrix * tran *  vec4( position.x,position.y,0.0, 1.0 ); \n} \n", i.FSHADER_COLOR_POINT_CLIP_FORMXCAD = "precision highp float; \nvarying vec4 vColor; \nvarying vec2 vCp1; \nvarying vec2 vCp2; \nvoid main() { \nif(gl_FragCoord.x > vCp1.x && gl_FragCoord.x < vCp2.x && gl_FragCoord.y > vCp1.y && gl_FragCoord.y < vCp2.y) \ngl_FragColor = vColor; \nelse \ndiscard; \n} \n";
    }, {}], 41: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxStencilObject = void 0;
      var i = t("three"), r = t("./MxMaterial"), a = (o.prototype.object_onAfterRender = function(t2) {
        var e2 = this.aryMeshStencil;
        if (e2 && 0 < e2.length) {
          t2.getContext();
          var n2 = t2.state.buffers;
          n2.stencil.setLocked(false), n2.depth.setTest(true), n2.stencil.setTest(false);
        }
      }, o.prototype.object_onBeforeRender = function(t2, e2, n2) {
        var i2 = this.aryMeshStencil;
        if (i2 && 0 < i2.length) {
          var r2 = t2.getContext(), a2 = t2.state.buffers;
          a2.color.setMask(false), a2.color.setLocked(true), a2.depth.setTest(false), a2.stencil.setTest(true), a2.stencil.setMask(255), a2.stencil.setClear(0), t2.clearStencil(), a2.stencil.setLocked(true);
          var o2 = 1, s = true;
          i2.forEach(function(i3) {
            s ? (s = false, a2.stencil.setFunc(r2.ALWAYS, o2, 255), a2.stencil.setOp(r2.KEEP, r2.KEEP, r2.REPLACE)) : (a2.stencil.setFunc(r2.EQUAL, o2, 255), a2.stencil.setOp(r2.KEEP, r2.KEEP, r2.INCR), o2++), t2.mxRenderObject(i3, e2, n2, i3.material, null);
          }), a2.color.setLocked(false), a2.color.setMask(true), a2.stencil.setMask(0), a2.stencil.setFunc(r2.EQUAL, o2, 255);
        }
      }, o.prototype.associateObject = function(t2, e2) {
        var n2 = this;
        e2.forEach(function(t3) {
          if (3 <= t3.length) {
            var e3 = new i.Shape(t3), a3 = new i.ShapeGeometry(e3), o2 = new i.Mesh(a3, r.MxMaterial.getStencilMaterial());
            n2.aryMeshStencil.push(o2);
          }
        });
        var a2 = this;
        t2.onBeforeRender = function(t3, e3, n3) {
          a2.object_onBeforeRender(t3, e3, n3);
        }, t2.onAfterRender = function(t3) {
          a2.object_onAfterRender(t3);
        };
      }, o);
      function o() {
        this.aryMeshStencil = [];
      }
      n.MxStencilObject = a;
    }, { "./MxMaterial": 37, three: 19 }], 42: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxString = void 0;
      var i = (r.prototype.Find = function(t2) {
        return this.m_val.indexOf(t2);
      }, r.prototype.Left = function(t2) {
        return this.m_val.substring(0, t2);
      }, r.prototype.Right = function(t2) {
        return this.m_val.substring(t2 + 1, this.m_val.length);
      }, r.prototype.TrimLeft = function(t2) {
        for (; 0 < this.m_val.length && this.m_val[0] == t2; )
          this.m_val = this.m_val.slice(1);
      }, r.prototype.TrimRight = function(t2) {
        for (; 0 < this.m_val.length && this.m_val[this.m_val.length - 1] == t2; )
          this.m_val = this.m_val.slice(0, -1);
      }, r.prototype.AnalyzeString = function(t2) {
        return this.m_val.split(t2);
      }, r.prototype.IsEmpty = function() {
        return this.m_val.length == 0;
      }, r.prototype.MakeUpper = function() {
        this.m_val = this.m_val.toUpperCase();
      }, r.prototype.MakeLower = function() {
        this.m_val = this.m_val.toLowerCase();
      }, r.prototype.GetLength = function() {
        return this.m_val.length;
      }, r);
      function r(t2) {
        this.m_val = "", t2 != null && (this.m_val = t2);
      }
      n.MxString = i;
    }, {}], 43: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxSystemVariable = void 0;
      var i = t("three"), r = t("./Operate/McEdJigOsnap"), a = (o.prototype.init = function(t2) {
        this.m_mxObj = t2;
      }, o.prototype.getAllLinetypeName = function() {
        return this.m_vecLinetype;
      }, o.prototype.getSysVarBool = function(t2) {
        return this.m_data[t2] != null && this.m_data[t2];
      }, o.prototype.setSysVarBool = function(t2, e2) {
        this.m_data[t2] = e2;
      }, o.prototype.setSysVarPoint = function(t2, e2) {
        this.m_data[t2] = e2;
      }, o.prototype.OnMessageMxCADSystemVariable = function(t2) {
        this.m_vecLinetype = [];
        var e2 = JSON.parse(t2);
        if (e2 != null) {
          var n2 = e2.vecLinetypeName;
          for (var i2 in n2)
            this.m_vecLinetype.push(n2[i2]);
          this.m_data.CELTYPE = e2.curLinetypeName, this.m_data.CLAYER = e2.clayer, this.m_data.CECOLOR = e2.cecolor, this.m_data.CECOLORINDEX = e2.cecolorindex;
        }
        this.m_mxObj.callEvent("loadSystmeVariableComplete");
      }, o.prototype.getSysVarPoint = function(t2) {
        return this.m_data[t2] == null ? new i.Vector3(0, 0, 0) : this.m_data[t2];
      }, o.prototype.setSysVarNumber = function(t2, e2) {
        this.m_data[t2] = e2;
      }, o.prototype.getSysVarNumber = function(t2) {
        return this.m_data[t2] == null ? 0 : this.m_data[t2];
      }, o.prototype.getSysVar = function(t2) {
        return this.m_data[t2];
      }, o.prototype.setSysVar = function(t2, e2) {
        this.m_data[t2] = e2;
      }, o);
      function o() {
        this.m_data = {}, this.m_mxObj = null, this.m_vecLinetype = [], this.m_data.DYNINPUT = true, this.m_data.GETPOINTSTATUS = 0, this.m_data.CELTYPE = "Continuous", this.m_data.CLAYER = "0", this.m_data.CECOLOR = 67108863, this.m_data.CECOLORINDEX = 7, this.m_data.OSMODE = r.MxOsnapDefine.OsModeAll;
      }
      n.MxSystemVariable = a;
    }, { "./Operate/McEdJigOsnap": 49, three: 19 }], 44: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxThreeJS = void 0;
      var i, r = t("three"), a = t("./MxFun");
      function o(t2) {
        return Math.pow(2, Math.floor(Math.log(t2) / Math.LN2));
      }
      (i = n.MxThreeJS || (n.MxThreeJS = {})).createLine = function(t2, e2, n2, i2) {
        var a2, o2 = new r.Geometry();
        return a2 = i2 && i2 != 1 || i2 == 0 ? new r.LineBasicMaterial({ color: n2, transparent: true, depthTest: false, opacity: i2 }) : new r.LineBasicMaterial({ color: n2, transparent: true, depthTest: false }), o2.vertices.push(t2, e2), new r.Line(o2, a2);
      }, i.createCircle = function(t2, e2, n2) {
        var i2 = new r.CircleGeometry(e2, 64, 3, 2 * Math.PI), a2 = new r.LineBasicMaterial({ color: n2, transparent: true, depthTest: false });
        i2.vertices.shift();
        var o2 = new r.LineLoop(i2, a2);
        return o2.position.x = t2.x, o2.position.y = t2.y, o2.position.z = t2.z, o2;
      }, i.clacTextSize = function(t2, e2) {
        var n2 = document.createElement("canvas").getContext("2d");
        if (n2 == null)
          return e2;
        var i2 = a.MxFun.formatString("normal {0}px Arial", "256");
        return n2.font = i2, n2.measureText(t2).width * e2 / 256;
      }, i.clacTextSpriteSize = function(t2, e2, n2) {
        e2 <= 1e-8 && (e2 = 1);
        var i2 = document.createElement("canvas"), r2 = i2.getContext("2d"), s = a.MxFun.formatString("normal {0}px Arial", "256");
        r2.font = s;
        var l = e2 / 256, c = 0, u = [], h = true, d = 0;
        if (n2) {
          c = n2;
          for (var p = 0, f = 0, m = 0; f < t2.length; f++)
            (g = r2.measureText(t2.substring(p, f + 1))).width * l > c && (d += (g.fontBoundingBoxAscent + g.fontBoundingBoxDescent) * l, u.push(t2.substring(p, f)), p = f, m++);
          if (p < f) {
            var g = r2.measureText(t2.substring(p, f));
            u.push(t2.substring(p, f)), d += (g.fontBoundingBoxAscent + g.fontBoundingBoxDescent) * l, m++;
          }
          h = m <= 1;
        } else
          d = e2, c = (g = r2.measureText(t2)).width * l, u.push(t2), h = false;
        var v = d / c * (i2.width = 1024);
        return i2.height = o(v), i2.height < v && (i2.height *= 2), i2.height == 0 && (i2.height = 512), { spritewidth: c, spriteheight: c * i2.height / i2.width, textwidth: c, allTextHeight: d, singleline: h };
      }, i.creatTextSprite = function(t2, e2, n2, i2, s, l, c) {
        n2 <= 1e-8 && (n2 = 1);
        var u = document.createElement("canvas"), h = u.getContext("2d");
        c ? (h.font = c(256), h.font.length == 0 && (h.font = a.MxFun.formatString("normal {0}px Arial", "256"))) : h.font = a.MxFun.formatString("normal {0}px Arial", "256");
        var d = n2 / 256, p = 0, f = [], m = [], g = 0;
        if (l) {
          p = l;
          for (var v = 0, y = 0; y < t2.length; y++)
            (b = h.measureText(t2.substring(v, y + 1))).width * d > p && (g += x = (b.fontBoundingBoxAscent + b.fontBoundingBoxDescent) * d, f.push(t2.substring(v, y)), m.push(x), v = y);
          if (v < y) {
            var x, b = h.measureText(t2.substring(v, y));
            f.push(t2.substring(v, y)), g += x = (b.fontBoundingBoxAscent + b.fontBoundingBoxDescent) * d, m.push(x);
          }
        } else
          g = n2, p = (b = h.measureText(t2)).width * d, f.push(t2), m.push(g);
        var w = g / p * (u.width = 1024);
        u.height = o(w), u.height < w && (u.height *= 2), u.height == 0 && (u.height = 512);
        var M = 1024 / p, _5 = M * n2;
        c ? (h.font = c(_5), h.font.length == 0 && (h.font = a.MxFun.formatString("normal {0}px Arial", "" + _5))) : h.font = a.MxFun.formatString("normal {0}px Arial", "" + _5);
        var S = a.MxFun.formatString("rgba({0}, {1}, {2}, 1.0)", (s >> 16 & 255) + "", (s >> 8 & 255) + "", (255 & s) + "");
        h.fillStyle = S, h.textAlign = "left", h.textBaseline = "bottom";
        for (var C = 0, T = 0; C < f.length; C++)
          T += M * m[C];
        for (C = 0, T = 0.5 * (u.height - T); C < f.length; C++)
          T += M * m[C], h.fillText(f[C], 0, T);
        var E = new r.Texture(u);
        E.needsUpdate = true;
        var D = new r.SpriteMaterial({ transparent: true, depthTest: false, map: E });
        D.rotation = i2;
        var A = new r.Sprite(D);
        return A.scale.set(p, p / u.width * u.height, 1), A.position.set(e2.x, e2.y, e2.z), A;
      }, i.createTriangle = function(t2, e2, n2) {
        if (!(t2.length < 3)) {
          for (var i2 = t2.length, a2 = new r.Geometry(), o2 = 0; o2 + 2 < i2; o2 += 3) {
            a2.vertices.push(t2[o2]), a2.vertices.push(t2[o2 + 1]), a2.vertices.push(t2[o2 + 2]);
            var s = new r.Face3(o2, o2 + 1, o2 + 2);
            a2.faces.push(s);
          }
          a2.computeFaceNormals(), a2.computeVertexNormals(), n2 == null && (n2 = 1);
          var l = new r.MeshBasicMaterial({ color: e2, transparent: true, depthTest: false, side: r.DoubleSide, opacity: n2 });
          return new r.Mesh(a2, l);
        }
      }, i.createLines = function(t2, e2, n2) {
        var i2, a2 = new r.Geometry();
        return a2.vertices = t2, i2 = n2 && n2 != 1 || n2 == 0 ? new r.LineBasicMaterial({ color: e2, transparent: true, depthTest: false, opacity: n2 }) : new r.LineBasicMaterial({ color: e2, transparent: true, depthTest: false }), new r.Line(a2, i2);
      }, i.createDashedLines = function(t2, e2, n2, i2) {
        var a2 = new r.Geometry();
        a2.vertices = t2;
        var o2 = new r.Line(a2, new r.LineDashedMaterial({ color: e2, dashSize: n2, gapSize: i2, transparent: true, depthTest: false }));
        return o2.computeLineDistances(), o2;
      };
    }, { "./MxFun": 34, three: 19 }], 45: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxPair = n.MxTools = void 0;
      var i, r = t("three");
      (i = n.MxTools || (n.MxTools = {})).AsMxWebPoint = function(t2, e2, n2) {
        return new r.Vector3(-t2, n2, e2);
      }, i.AsMxWebPoint_pt = function(t2) {
        return new r.Vector3(-t2.x, t2.z, t2.y);
      }, i.AsThreeJsPoint = function(t2, e2, n2) {
        return new r.Vector3(-t2, n2, e2);
      }, i.stringTrimLeftSpace = function(t2) {
        return t2.replace(/^\s*/g, "");
      }, i.stringDeleteAllSpace = function(t2) {
        return t2.replace(/\s*/g, "");
      }, i.stringTrimLeftRightSpace = function(t2) {
        return t2.replace(/^\s*|\s*$/g, "");
      }, i.stringTrimRightSpace = function(t2) {
        return t2.replace(/(\s*$)/g, "");
      }, i.IsNumerical = function(t2) {
        if (typeof t2 == "string") {
          var e2 = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;
          return !(!/^\d+(\.\d+)?$/.test(t2) && !e2.test(t2));
        }
        var n2 = t2.m_val;
        return e2 = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/, !(!/^\d+(\.\d+)?$/.test(n2) && !e2.test(n2));
      }, i.formatString = function(t2) {
        for (var e2 = [], n2 = 1; n2 < arguments.length; n2++)
          e2[n2 - 1] = arguments[n2];
        for (var i2 = 0; i2 < e2.length; i2++)
          t2 = t2.replace("{".concat(i2, "}"), e2[i2]);
        return t2;
      }, i._tstof = function(t2) {
        return parseFloat(t2);
      }, i._tstoi = function(t2) {
        return parseInt(t2);
      }, i.IsZero = function(t2) {
        return -1e-7 < t2 && t2 < 1e-7;
      }, i.MillimeterToPixels = function(t2) {
        return 10 * t2;
      }, i.getXYPlanDistance = function(t2, e2) {
        var n2 = new r.Vector2(t2.x, t2.y), i2 = new r.Vector2(e2.x, e2.y);
        return n2.distanceTo(i2);
      }, i.MxASSERT = function(t2, e2) {
        t2 || console.log("MxASSERT(0):" + e2);
      }, i.generateUUID = function() {
        return r.MathUtils.generateUUID();
      }, n.MxPair = function(t2, e2) {
        this.first = t2, this.second = e2;
      };
    }, { three: 19 }], 46: [function(t, e, n) {
      "use strict";
      var i, r, a;
      Object.defineProperty(n, "__esModule", { value: true }), n.MxType = void 0, (r = (i = n.MxType || (n.MxType = {})).CommandFlags || (i.CommandFlags = {}))[r.MCRX_CMD_MODAL = 0] = "MCRX_CMD_MODAL", r[r.MCRX_CMD_TRANSPARENT = 1] = "MCRX_CMD_TRANSPARENT", r[r.MCRX_CMD_NO_UNDO_MARKER = 2] = "MCRX_CMD_NO_UNDO_MARKER", r[r.MCRX_CMD_NOPRV = 4] = "MCRX_CMD_NOPRV", (a = i.MxCloneType || (i.MxCloneType = {}))[a.kClone = 1] = "kClone", a[a.kDragClone = 2] = "kDragClone", a[a.kMxFileClone = 3] = "kMxFileClone", a[a.kSaveDwgClone = 4] = "kSaveDwgClone";
    }, {}], 47: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxBulid = void 0, window.MxDrawVersion = "1.0(2023-01-24 11:56)", (n.MxBulid || (n.MxBulid = {})).getVersion = function() {
        return window.MxDrawVersion ? window.MxDrawVersion : "inalid version";
      };
    }, {}], 48: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxWindowsEvent = void 0;
      var i, r, a, o, s = t("./MxFun"), l = t("./Operate/MxJigCmdManager"), c = t("three"), u = t("./MxDrawData");
      function h(t2, e2) {
        for (var n2 = 0, i2 = o.length; n2 < i2; n2++) {
          var r2 = o[n2](t2, e2);
          if (r2 != 0)
            return r2;
        }
      }
      function d(t2) {
        a.x = t2.offsetX, a.y = t2.offsetY, h("mousemove", t2);
      }
      function p(t2) {
        h("mouseup", t2);
      }
      function f(t2) {
        h("dblclick", t2);
      }
      function m(t2) {
        a.x = t2.offsetX, a.y = t2.offsetY, h("mousedown", t2);
      }
      function g(t2) {
        var e2 = t2 || window.event || arguments.callee.caller.arguments[0];
        if (e2 && e2.keyCode == 27)
          if (u.MxDrawData.m_isEnableIntelliSelect && !l.MxJigCmdManager.isRunning()) {
            var n2 = false, i2 = s.MxFun.getCurrentMx(), r2 = i2.getMxCAD();
            if (r2) {
              var a2 = r2.getSelect().clearAllSelect(), o2 = r2.getGrip().clearAll();
              (a2 || o2) && (n2 = true);
            }
            i2.getMxDatabase().getGripManager().removeAllGrips() && (n2 = true), i2.getMxDatabase().getSelectManager().removeAllEntity() && (n2 = true), n2 && i2.updateDisplay();
          } else
            l.MxJigCmdManager.isRunning() && l.MxJigCmdManager.stopCmd();
      }
      i = n.MxWindowsEvent || (n.MxWindowsEvent = {}), r = false, a = new c.Vector2(0, 0), o = new Array(), i.addEvent = function(t2) {
        o.push(t2);
      }, i.getCurrentMousePostion = function() {
        return a;
      }, i.registEvent = function() {
        r || (r = true, s.MxFun.isPC() && (document.addEventListener("mousemove", d, false), document.addEventListener("mouseup", p, false), document.addEventListener("mousedown", m, false), document.addEventListener("dblclick", f, false), document.onkeydown = g));
      };
    }, { "./MxDrawData": 29, "./MxFun": 34, "./Operate/MxJigCmdManager": 58, three: 19 }], 49: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.McEdJigOsnap = n.McEdImpJigGlobalData = n.MxOsnapDefine = void 0;
      var i, r, a, o, s, l, c, u, h, d, p, f = t("three"), m = t("../MxDrawObject"), g = t("../MxFun"), v = t("./MxJigCmdManager"), y = t("../MxTools"), x = t("../MxDrawData"), b = t("../MxWindowsEvent");
      (r = i = n.MxOsnapDefine || (n.MxOsnapDefine = {}))[r.OsModeInvalid = 0] = "OsModeInvalid", r[r.OsModeEnd = 1] = "OsModeEnd", r[r.OsModeMid = 2] = "OsModeMid", r[r.OsModeCen = 4] = "OsModeCen", r[r.OsModeNode = 8] = "OsModeNode", r[r.OsModeQuad = 16] = "OsModeQuad", r[r.OsModeInt = 32] = "OsModeInt", r[r.OsModeIns = 64] = "OsModeIns", r[r.OsModePerp = 128] = "OsModePerp", r[r.OsModeTan = 256] = "OsModeTan", r[r.OsModeNear = 512] = "OsModeNear", r[r.OsModeApp = 2048] = "OsModeApp", r[r.OsModeExt = 4096] = "OsModeExt", r[r.OsModePar = 8192] = "OsModePar", r[r.OsModeOff = 16384] = "OsModeOff", r[r.OsModeAll = 16383] = "OsModeAll", o = a = n.McEdImpJigGlobalData || (n.McEdImpJigGlobalData = {}), s = false, l = new f.Vector3(), c = new f.Vector3(), u = 0, d = h = false, p = new Array(), o.setPrvPoint = function(t2) {
        l = t2, d = true;
      }, o.isOsnapZValue = function() {
        return false;
      }, o.setIsValidPrvpoint = function(t2) {
        d = t2;
      }, o.isValidPrvpoint = function() {
        return d;
      }, o.getPrvPoint = function() {
        return l;
      }, o.setIsValidBasepoint = function(t2) {
        s = t2;
      }, o.isValidBasepoint = function() {
        return s;
      }, o.setBasepoint = function(t2) {
        s = true, c = t2;
      }, o.getBasepoint = function() {
        return c;
      }, o.initStartCommand = function() {
        h = s = false;
      }, o.setIsTmpDisableOsmode = function(t2) {
        h = t2;
      }, o.isTmpDisableOsmode = function() {
        return h;
      }, o.intiStartDrag = function(t2) {
        u = t2.sysVariable().getSysVarNumber("OSMODE");
      }, o.isEnableOsmode = function() {
        return !(u == 0 || u & i.OsModeOff || h);
      }, o.getOSmode = function() {
        return u;
      }, o.addDynDrawObject = function(t2) {
        p.push(t2);
      }, o.clearDisplay = function(t2) {
        for (var e2 = p.length, n2 = 0; n2 < e2; n2++)
          g.MxFun.removeThreejsObject(p[n2], t2);
        p = [];
      };
      var w = (M.prototype.drawLine = function(t2, e2, n2) {
        var i2 = new f.Geometry(), r2 = new f.LineBasicMaterial({ color: this.m_iColor });
        i2.vertices.push(new f.Vector3(t2.x, t2.y, t2.z), new f.Vector3(e2.x, e2.y, e2.z));
        var o2 = new f.Line(i2, r2);
        n2.add(o2), a.addDynDrawObject(o2);
      }, M.prototype.drawPolyline = function(t2, e2) {
        for (var n2 = new f.Geometry(), i2 = new f.LineBasicMaterial({ color: this.m_iColor }), r2 = t2.length, o2 = 0; o2 < r2; o2++)
          n2.vertices.push(new f.Vector3(t2[o2].x, t2[o2].y, t2[o2].z));
        var s2 = new f.Line(n2, i2);
        e2.add(s2), a.addDynDrawObject(s2);
      }, M.prototype.setWidth = function(t2) {
        this.m_dOsmodeWdith = t2;
      }, M.prototype.GetDrawRect = function() {
        var t2 = 0.5 * this.m_dOsmodeWdith, e2 = {};
        return e2.left = this.m_pt.x - t2, e2.right = this.m_pt.x + t2, e2.top = this.m_pt.y - t2, e2.bottom = this.m_pt.y + t2, e2;
      }, M.prototype.DrawNear = function(t2) {
        var e2 = this.GetDrawRect(), n2 = [new f.Vector3(), new f.Vector3()];
        n2[0].x = e2.left, n2[0].y = e2.top, n2[1].x = e2.right, n2[1].y = e2.top, this.drawLine(n2[0], n2[1], t2), n2[0].x = e2.left, n2[0].y = e2.bottom, n2[1].x = e2.right, n2[1].y = e2.bottom, this.drawLine(n2[0], n2[1], t2), n2[0].x = e2.right, n2[0].y = e2.top, n2[1].x = e2.left, n2[1].y = e2.bottom, this.drawLine(n2[0], n2[1], t2), n2[0].x = e2.right, n2[0].y = e2.bottom, n2[1].x = e2.left, n2[1].y = e2.top, this.drawLine(n2[0], n2[1], t2);
      }, M.prototype.DrawEnd = function(t2) {
        var e2 = this.GetDrawRect(), n2 = [new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3()];
        n2[0].x = e2.left, n2[0].y = e2.top, n2[1].x = e2.right, n2[1].y = e2.top, n2[2].x = e2.right, n2[2].y = e2.bottom, n2[3].x = e2.left, n2[3].y = e2.bottom, this.drawLine(n2[0], n2[1], t2), this.drawLine(n2[1], n2[2], t2), this.drawLine(n2[2], n2[3], t2), this.drawLine(n2[3], n2[0], t2);
      }, M.prototype.DrawMid = function(t2) {
        var e2 = this.GetDrawRect(), n2 = 1.2 * (e2.right - e2.left), i2 = n2 / 2 / Math.sin(60 * 3.14159265 / 180), r2 = i2 * Math.sin(0.5235987750000001), a2 = new f.Vector3(this.m_pt.x, this.m_pt.y, this.m_pt.z);
        a2.y -= i2;
        var o2 = new f.Vector3();
        o2.x = this.m_pt.x + n2 / 2, o2.y = this.m_pt.y + r2;
        var s2 = new f.Vector3();
        s2.x = this.m_pt.x - n2 / 2, s2.y = this.m_pt.y + r2;
        var l2 = [new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3()];
        l2[0].x = a2.x, l2[0].y = a2.y, l2[1].x = o2.x, l2[1].y = o2.y, l2[2].x = s2.x, l2[2].y = s2.y, l2[3].x = a2.x, l2[3].y = a2.y, this.drawLine(l2[0], l2[1], t2), this.drawLine(l2[1], l2[2], t2), this.drawLine(l2[2], l2[3], t2);
      }, M.prototype.DrawPerp = function(t2) {
        var e2 = this.GetDrawRect(), n2 = [new f.Vector3(), new f.Vector3(), new f.Vector3()];
        n2[0].x = e2.left, n2[0].y = e2.top, n2[1].x = e2.left, n2[1].y = e2.bottom, n2[2].x = e2.right, n2[2].y = e2.bottom, this.drawPolyline(n2, t2), n2[0].x = e2.left, n2[0].y = this.m_pt.y, n2[1].x = this.m_pt.x, n2[1].y = this.m_pt.y, n2[2].x = this.m_pt.x, n2[2].y = e2.bottom, this.drawPolyline(n2, t2);
      }, M.prototype.DrawCircle = function(t2, e2, n2) {
        n2 == null && (n2 = 0.5 * this.m_dOsmodeWdith);
        for (var i2 = [], r2 = 0, a2 = 3.14159265 / 180; r2 <= 360; r2 += 15) {
          var o2 = n2 * Math.cos(r2 * a2) + t2.x, s2 = n2 * Math.sin(r2 * a2) + t2.y;
          i2.push(new f.Vector3(o2, s2));
        }
        this.drawPolyline(i2, e2);
      }, M.prototype.DrawInt = function(t2) {
        var e2 = this.GetDrawRect(), n2 = [new f.Vector3(), new f.Vector3()];
        n2[0].x = e2.right, n2[0].y = e2.top, n2[1].x = e2.left, n2[1].y = e2.bottom, this.drawLine(n2[0], n2[1], t2), n2[0].x = e2.right, n2[0].y = e2.bottom, n2[1].x = e2.left, n2[1].y = e2.top, this.drawLine(n2[0], n2[1], t2);
      }, M.prototype.DrawCen = function(t2) {
        this.DrawInt(t2), this.DrawCircle(this.m_pt, t2);
      }, M.prototype.DrawTan = function(t2) {
        this.DrawEnd(t2);
      }, M.prototype.DrawIns = function(t2) {
        var e2 = this.GetDrawRect(), n2 = {}, i2 = (e2.right - e2.left) / 1.5;
        n2.left = this.m_pt.x - i2, n2.right = this.m_pt.x + i2, n2.top = this.m_pt.y - i2, n2.bottom = this.m_pt.y + i2;
        var r2 = this.m_pt.x, a2 = this.m_pt.y, o2 = [new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3()];
        o2[0].x = n2.left, o2[0].y = n2.top, o2[1].x = n2.left, o2[1].y = a2 + 2, o2[2].x = r2, o2[2].y = a2 + 2, o2[3].x = r2, o2[3].y = n2.bottom, o2[4].x = n2.right, o2[4].y = n2.bottom, o2[5].x = n2.right, o2[5].y = a2 - 2, o2[6].x = r2, o2[6].y = a2 - 2, o2[7].x = r2, o2[7].y = n2.top, o2[8].x = n2.left, o2[8].y = n2.top, this.drawPolyline(o2, t2);
      }, M.prototype.DrawNode = function(t2) {
        var e2 = this.GetDrawRect(), n2 = {}, i2 = (e2.right - e2.left) / 1.5;
        n2.left = this.m_pt.x - i2, n2.right = this.m_pt.x + i2, n2.top = this.m_pt.y - i2, n2.bottom = this.m_pt.y + i2;
        var r2 = {}, a2 = this.m_dOsmodeWdith / 1.3;
        r2.left = this.m_pt.x - a2, r2.right = this.m_pt.x + a2, r2.top = this.m_pt.y - a2, r2.bottom = this.m_pt.y + a2;
        var o2 = [new f.Vector3(), new f.Vector3(), new f.Vector3(), new f.Vector3()];
        o2[0].x = n2.left, o2[0].y = n2.top, o2[1].x = n2.right, o2[1].y = n2.bottom, o2[2].x = n2.left, o2[2].y = n2.bottom, o2[3].x = n2.right, o2[3].y = n2.top, this.drawLine(o2[0], o2[1], t2), this.drawLine(o2[2], o2[3], t2), this.DrawCircle(this.m_pt, t2, a2);
      }, M.prototype.upDisplay = function(t2, e2, n2) {
        this.m_pt = t2, this.m_osmode = e2, this.clearDisplay(n2);
        var i2 = n2.getMxObject().getTheTempDrawContainer(), r2 = 0.5 * this.m_dOsmodeWdith;
        if (this.m_osmode != v.MxJigCmdManager.OsnapMode.kOsModekValid)
          if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeNear)
            this.DrawNear(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeEnd)
            this.DrawEnd(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeMid)
            this.DrawMid(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModePerp)
            this.DrawPerp(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeInt)
            this.DrawInt(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeCen)
            this.DrawCen(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeTan)
            this.DrawTan(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeIns)
            this.DrawIns(i2);
          else if (this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModeNode)
            this.DrawNode(i2);
          else {
            var a2 = new f.Vector3(t2.x - r2, t2.y - r2, 0), o2 = new f.Vector3(t2.x + r2, t2.y + r2, 0);
            this.drawLine(a2, o2, i2);
            var s2 = new f.Vector3(t2.x - r2, t2.y + r2, 0), l2 = new f.Vector3(t2.x + r2, t2.y - r2, 0);
            this.drawLine(s2, l2, i2);
          }
      }, M.prototype.clearDisplay = function(t2) {
        var e2 = t2.getMxObject().getTheTempDrawContainer();
        a.clearDisplay(e2);
      }, M);
      function M() {
        this.m_iColor = 16711935, this.m_pt = new f.Vector3(), this.m_osmode = v.MxJigCmdManager.OsnapMode.kOsModekValid, this.m_dOsmodeWdith = 10;
      }
      var _5 = (S.prototype.resetData = function() {
        this.m_osmode = v.MxJigCmdManager.OsnapMode.kOsModekValid, this.m_isValidPrvInputPoint = false, this.m_lOSmode = 0, this.m_vecOffset.set(0, 0, 0), this.m_isValid = false, this.m_iLongprogressStatus = -1;
      }, S.prototype.notifyOsnapToServer = function() {
        var t2 = this;
        if (this.m_isRuning) {
          var e2 = { ptx: this.m_pt.x, pty: this.m_pt.y, osmode: this.m_lOSmode, isValidPrvInputPoint: this.m_isValidPrvInputPoint };
          this.m_isValidPrvInputPoint && (e2.prvPtx = this.m_prvInputPoint.x, e2.prvPty = this.m_prvInputPoint.y);
          var n2 = this.m_mxJig.getMxObject();
          if (n2.getRunMode() == m.MxRunMode.kBrowse) {
            var i2 = this, r2 = b.MxWindowsEvent.getCurrentMousePostion();
            n2.getObjectOsnap().getOsnapData(r2, function(t3, e3) {
              t3 = n2.worldCoord2Doc(t3.x, t3.y, t3.z), i2.m_ptSnapPoint.x = t3.x, i2.m_ptSnapPoint.y = t3.y, i2.m_ptSnapPoint.z = 0, i2.m_ptSnapSrcPoint.x = i2.m_pt.x, i2.m_ptSnapSrcPoint.y = i2.m_pt.y, i2.m_ptSnapSrcPoint.z = 0, i2.m_osmode = e3, i2.m_draw.setWidth(n2.screenCoordLong2Doc(x.MxDrawData.getCursorWidthPixels())), i2.m_draw.upDisplay(new f.Vector3(t3.x, t3.y, 0), e3, i2.m_mxJig);
            });
          } else {
            e2.SearchRnge = n2.screenCoordLong2Doc(x.MxDrawData.getCursorWidthPixels());
            var a2 = this;
            n2.callCommand("MxCAD_NotifyOsnap", JSON.stringify(e2), function(e3) {
              if (!(typeof e3 != "string" || e3.length < 1) && a2.m_isRuning) {
                var i3 = JSON.parse(e3);
                t2.m_ptSnapPoint.x = i3.ptsx, t2.m_ptSnapPoint.y = i3.ptsy, t2.m_ptSnapPoint.z = i3.ptsz, t2.m_ptSnapSrcPoint.x = i3.ptx, t2.m_ptSnapSrcPoint.y = i3.pty, t2.m_ptSnapSrcPoint.z = 0, t2.m_osmode = i3.osmode, a2.m_draw.setWidth(n2.screenCoordLong2Doc(x.MxDrawData.getCursorWidthPixels())), a2.m_draw.upDisplay(new f.Vector3(i3.ptsx, i3.ptsy, i3.ptsz), i3.osmode, a2.m_mxJig);
              }
            });
          }
        }
      }, S.prototype.startDrag = function(t2, e2) {
        this.m_mxJig = e2;
        var n2, i2, r2 = this.m_mxJig.getMxObject();
        function a2() {
          n2.notifyOsnapToServer();
        }
        return e2.isDisableOsnap() ? this.m_isEnable = false : this.m_isEnable = r2.getInisetValue(m.IniSetName.kEnableOsnapFunction) === true, this.m_isOffsetInputPostion = t2, this.m_isRuning = true, this.m_draw.setWidth(r2.screenCoordLong2Doc(x.MxDrawData.getCursorWidthPixels())), this.resetData(), this.m_notifyOsnap_delayCall = (n2 = this, 100, i2 = null, function() {
          clearTimeout(i2), i2 = setTimeout(a2, 100);
        }), true;
      }, S.prototype.endDrag = function() {
        return this.m_isRuning = false, this.m_draw.clearDisplay(this.m_mxJig), true;
      }, S.prototype.reCompteCurrentPoint = function(t2) {
        return t2;
      }, S.prototype.isEnable = function() {
        return this.m_isEnable && a.isEnableOsmode();
      }, S.prototype.notifyOsnap = function(t2, e2) {
        this.m_lOSmode = t2, e2 == null ? this.m_isValidPrvInputPoint = false : (this.m_isValidPrvInputPoint = true, this.m_prvInputPoint = e2), this.m_osmode == v.MxJigCmdManager.OsnapMode.kOsModekValid && this.m_draw.clearDisplay(this.m_mxJig), this.m_notifyOsnap_delayCall();
      }, S.prototype.setPoint = function(t2, e2) {
        if (this.isEnable()) {
          t2 == null ? (this.m_isValid = false, this.m_osmode = v.MxJigCmdManager.OsnapMode.kOsModekValid) : (this.m_iLongprogressStatus == -1 || this.m_iLongprogressStatus, this.m_pt = t2, this.m_inPoint = t2, this.m_isValid = true, (e2 == null || this.m_osmode != v.MxJigCmdManager.OsnapMode.kOsModekValid && y.MxTools.getXYPlanDistance(this.m_ptSnapSrcPoint, t2) > e2) && (this.m_osmode = v.MxJigCmdManager.OsnapMode.kOsModekValid));
          var n2 = a.getOSmode(), i2 = a.getPrvPoint();
          this.notifyOsnap(n2, a.isValidPrvpoint() ? i2 : void 0);
        }
      }, S.prototype.seInValidPoint = function() {
        this.setPoint(void 0);
      }, S.prototype.getCurrentOSnapPoint = function(t2) {
        var e2 = {};
        return this.isEnable() ? (e2.pt = t2, e2.osmode = this.m_osmode, this.m_osmode != v.MxJigCmdManager.OsnapMode.kOsModekValid ? (e2.pt.x = this.m_ptSnapPoint.x, e2.pt.y = this.m_ptSnapPoint.y, e2.pt.z = this.m_ptSnapPoint.z, a.isOsnapZValue() || (t2.z = 0)) : e2.pt = t2) : (e2.pt = t2, e2.osmode = v.MxJigCmdManager.OsnapMode.kOsModekValid), e2;
      }, S.prototype.setLongprogressStatus = function(t2) {
        this.m_iLongprogressStatus = t2;
      }, S.prototype.reComputeOffset = function() {
      }, S);
      function S(t2) {
        this.m_inPoint = new f.Vector3(), this.m_vecOffset = new f.Vector3(), this.m_pt = new f.Vector3(), this.m_isValid = false, this.m_ptSnapPoint = new f.Vector3(), this.m_ptSnapSrcPoint = new f.Vector3(), this.m_osmode = v.MxJigCmdManager.OsnapMode.kOsModekValid, this.m_prvInputPoint = new f.Vector3(), this.m_isValidPrvInputPoint = false, this.m_lOSmode = 0, this.m_iLongprogressStatus = -1, this.m_isOffsetInputPostion = false, this.m_mxJig = null, this.m_notifyOsnap_delayCall = void 0, this.m_isRuning = false, this.m_isEnable = false, this.m_mxJig = t2, this.m_draw = new w();
      }
      n.McEdJigOsnap = _5;
    }, { "../MxDrawData": 29, "../MxDrawObject": 30, "../MxFun": 34, "../MxTools": 45, "../MxWindowsEvent": 48, "./MxJigCmdManager": 58, three: 19 }], 50: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.McGiWorldDrawSelect = n.McGiWorldDraw = n.McGiWorldDrawType = void 0;
      var a, o, s = t("three"), l = t("../MxThreeJS"), c = t("../MxManager"), u = t("three.meshline");
      (o = a = n.McGiWorldDrawType || (n.McGiWorldDrawType = {}))[o.kWorldDraw = 1] = "kWorldDraw", o[o.kDynDragDraw = 2] = "kDynDragDraw", o[o.kSelectDraw = 3] = "kSelectDraw";
      var h = (d.prototype.getType = function() {
        return this.worldDrawType;
      }, d.prototype.setXData = function(t2) {
        this.xData = t2;
      }, d.prototype.setMatrix = function(t2) {
        this.matrix = t2;
      }, d.prototype.getMatrix = function() {
        return this.matrix;
      }, d.prototype.setOpacity = function(t2) {
        this.opacity = t2;
      }, d.prototype.getOpacity = function() {
        return this.opacity;
      }, d.prototype.setColor = function(t2) {
        this.iColor != t2 && (this.widthMaterial = null), this.iColor = t2;
      }, d.prototype.setDash = function(t2, e2) {
        this.dDashArray = t2, this.dDashRatio = e2;
      }, d.prototype.getDash = function() {
        return { dDashArray: this.dDashArray, dDashRatio: this.dDashRatio };
      }, d.prototype.setDashLineDisplay = function(t2) {
        t2 ? (this.dDashArray = 0.03, this.dDashRatio = 0.1, this.dLineWidth == 0 && (this.dLineWidth = 6, this.lineWidthByPixels = true)) : (this.dDashArray = 0, this.dDashRatio = 0);
      }, d.prototype.isDashLineDisplay = function() {
        return 0 < this.dDashArray && 0 < this.dDashRatio;
      }, d.prototype.getColor = function() {
        return this.iColor;
      }, d.prototype.setRenderOrder = function(t2) {
        this.iRenderOrder = t2;
      }, d.prototype.getRenderOrder = function() {
        return this.iRenderOrder;
      }, d.prototype.setLineWidthByPixels = function(t2) {
        this.lineWidthByPixels != t2 && (this.widthMaterial = null), this.lineWidthByPixels = t2;
      }, d.prototype.getLineWidthByPixels = function() {
        return this.lineWidthByPixels;
      }, d.prototype.setLineWidth = function(t2) {
        this.dLineWidth != t2 && (this.widthMaterial = null), this.dLineWidth = t2;
      }, d.prototype.getLineWidth = function() {
        return this.dLineWidth;
      }, d.prototype.drawEntity = function(t2) {
        var e2 = this.iRenderOrder;
        t2.type == "Group" ? t2.traverse(function(t3) {
          t3.type != "Group" && (t3.renderOrder = e2);
        }) : t2.renderOrder = e2, this.matrix != null && t2.applyMatrix4(this.matrix), this.aryEntity.push(t2), this.xData && (t2.MxWordDrawXData = this.xData, this.xData = null);
      }, d.prototype.getEntitys = function() {
        return this.aryEntity;
      }, d.prototype.getMxObject = function() {
        return this.mxObj;
      }, d.prototype.createWidthMaterial = function() {
        this.widthMaterial == null && (0 < this.dDashArray && 0 < this.dDashRatio ? this.widthMaterial = new u.MeshLineMaterial({ useMap: false, color: this.iColor, opacity: 1, resolution: new s.Vector2(this.mxObj.getViewWidth(), this.mxObj.getViewHeight()), sizeAttenuation: !this.lineWidthByPixels, lineWidth: this.dLineWidth, transparent: true, depthTest: false, dashArray: this.dDashArray, dashRatio: this.dDashRatio }) : this.widthMaterial = new u.MeshLineMaterial({ useMap: false, color: this.iColor, opacity: 1, resolution: new s.Vector2(this.mxObj.getViewWidth(), this.mxObj.getViewHeight()), sizeAttenuation: !this.lineWidthByPixels, lineWidth: this.dLineWidth, transparent: true, depthTest: false }));
      }, d.prototype.drawSolid = function(t2) {
        if (!(t2.length < 3)) {
          var e2 = new s.Shape(t2.map(function(t3) {
            var e3 = t3.x, n3 = t3.y;
            return new s.Vector2(e3, n3);
          })), n2 = new s.ShapeGeometry(e2), i2 = new s.Mesh(n2, new s.MeshPhongMaterial({ color: this.getColor(), side: s.DoubleSide, transparent: true, opacity: this.getOpacity() }));
          this.drawEntity(i2);
        }
      }, d.prototype.drawLines = function(t2) {
        if (!(t2.length < 2))
          if (this.dLineWidth != 0) {
            this.createWidthMaterial();
            var e2 = new s.Geometry();
            e2.vertices = t2;
            var n2 = new u.MeshLine();
            n2.setGeometry(e2);
            var i2 = new s.Mesh(n2.geometry, this.widthMaterial);
            this.drawEntity(i2), this.drawEntity(l.MxThreeJS.createLines(t2.slice(0), this.iColor, 0));
          } else
            this.drawEntity(l.MxThreeJS.createLines(t2.slice(0), this.iColor, this.opacity));
      }, d.prototype.drawGeometryLines = function(t2) {
        if (!(t2.vertices.length < 2))
          if (this.dLineWidth != 0) {
            this.createWidthMaterial();
            var e2 = new u.MeshLine();
            if (!(t2 instanceof s.Geometry)) {
              var n2 = new s.Geometry();
              n2.vertices = t2.vertices, t2 = n2;
            }
            e2.setGeometry(t2);
            var i2 = new s.Mesh(e2.geometry, this.widthMaterial);
            this.drawEntity(i2);
            var r2 = new s.LineBasicMaterial({ color: this.iColor, transparent: true, depthTest: false, opacity: 0 }), a2 = new s.Line(t2, r2);
            this.drawEntity(a2);
          } else
            r2 = void 0, r2 = this.opacity && this.opacity != 1 || this.opacity == 0 ? new s.LineBasicMaterial({ color: this.iColor, transparent: true, depthTest: false, opacity: this.opacity }) : new s.LineBasicMaterial({ color: this.iColor, transparent: true, depthTest: false }), a2 = new s.Line(t2, r2), this.drawEntity(a2);
      }, d.prototype.drawSelectLine = function(t2, e2, n2, i2) {
        t2 instanceof Object && e2 instanceof Object ? this.drawEntity(l.MxThreeJS.createLine(t2, e2, this.iColor, 0)) : typeof t2 == "number" && typeof e2 == "number" && this.drawEntity(l.MxThreeJS.createLine(new s.Vector3(t2, e2, 0), new s.Vector3(n2, i2, 0), this.iColor, 0));
      }, d.prototype.drawLine = function(t2, e2, n2, i2) {
        var r2, a2;
        if (t2 instanceof Object && e2 instanceof Object ? (r2 = t2, a2 = e2) : typeof t2 == "number" && typeof e2 == "number" && (r2 = new s.Vector3(t2, e2, 0), a2 = new s.Vector3(n2, i2, 0)), this.dLineWidth != 0) {
          this.createWidthMaterial();
          var o2 = new Float32Array(6);
          o2[0] = r2.x, o2[1] = r2.y, o2[2] = 0, o2[3] = a2.x, o2[4] = a2.y, o2[5] = 0;
          var c2 = new u.MeshLine();
          c2.setGeometry(o2);
          var h2 = new s.Mesh(c2.geometry, this.widthMaterial);
          h2.renderOrder = this.iRenderOrder, this.drawEntity(h2), this.drawSelectLine(r2, a2);
        } else
          this.drawEntity(l.MxThreeJS.createLine(r2, a2, this.iColor, this.opacity));
      }, d.prototype.drawCircle = function(t2, e2) {
        this.drawEntity(l.MxThreeJS.createCircle(t2, e2, this.iColor));
      }, d.prototype.drawText = function(t2, e2, n2, i2, r2, a2) {
        var o2 = l.MxThreeJS.creatTextSprite(t2, i2, e2, n2, this.iColor, r2, a2);
        return this.drawEntity(o2), o2;
      }, d.prototype.setupForEntity = function(t2) {
        this.iColor = t2.getColor(), this.iRenderOrder = t2.getRenderOrder(), this.opacity = t2.opacity, this.dLineWidth = t2.getLineWidth(), this.lineWidthByPixels = t2.getLineWidthByPixels(), this.dDashArray = t2.getDash().dDashArray, this.dDashRatio = t2.getDash().dDashRatio;
      }, d);
      function d(t2, e2) {
        this.aryEntity = [], this.iColor = 16777215, this.dLineWidth = 0, this.lineWidthByPixels = true, this.iRenderOrder = c.MxData.iMxEntityRenderOrder, this.worldDrawType = 1, this.widthMaterial = null, this.dDashArray = 0, this.dDashRatio = 0, this.matrix = null, this.opacity = 1, this.xData = null, this.mxObj = t2, this.worldDrawType = e2;
      }
      n.McGiWorldDraw = h;
      var p, f = (r(m, p = h), m.prototype.setCurEntityId = function(t2) {
        this.curEntityId = t2;
      }, m.prototype.drawEntity = function(t2) {
      }, m.prototype.drawText = function(t2, e2, n2, i2, r2, a2) {
        return null;
      }, m.prototype.drawSelectLine = function(t2, e2, n2, i2) {
      }, m.prototype.isValid = function() {
        return this.curEntityId != 0 || (console.log("this.curEntityId == 0"), false);
      }, m.prototype.drawLine = function(t2, e2, n2, i2) {
        var r2, a2;
        this.isValid() && (t2 instanceof Object && e2 instanceof Object ? (r2 = t2, a2 = e2) : typeof t2 == "number" && typeof e2 == "number" && (r2 = new s.Vector3(t2, e2, 0), a2 = new s.Vector3(n2, i2, 0)), this.selectManager.addLineDisplay(this.curEntityId, r2, a2));
      }, m.prototype.drawCircle = function(t2, e2) {
        this.isValid() && this.selectManager.addCircleDisplay(this.curEntityId, t2, e2);
      }, m.prototype.drawLines = function(t2) {
        if (!(t2.length < 2))
          for (var e2 = t2.length, n2 = 0; n2 < e2 - 1; n2++)
            this.selectManager.addLineDisplay(this.curEntityId, t2[n2], t2[n2 + 1]);
      }, m);
      function m(t2, e2) {
        var n2 = p.call(this, t2, a.kSelectDraw) || this;
        return n2.selectManager = e2, n2.curEntityId = 0, n2;
      }
      n.McGiWorldDrawSelect = f;
    }, { "../MxManager": 36, "../MxThreeJS": 44, three: 19, "three.meshline": 18 }], 51: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MrxDbgUiPrBase = n.MrxDbgUiPrBase_Return = n.McEdGetPointWorldDrawObject = n.McEdGetPointWorldDraw = void 0;
      var a = t("./MxJig"), o = t("./MxJigCmdManager"), s = t("../MxThreeJS"), l = t("../UI/MxUiVue"), c = t("../MxString"), u = t("./McGiWorldDraw"), h = (d.prototype.setMcEdJig = function(t2) {
        this.m_pJig = t2;
      }, d.prototype.setColor = function(t2) {
        this.m_iColor = t2;
      }, d.prototype.getColor = function() {
        return this.m_iColor;
      }, d.prototype.drawLine = function(t2, e2) {
        this.m_pJig.drawEntity(s.MxThreeJS.createLine(t2, e2, this.m_iColor));
      }, d.prototype.drawCircle = function(t2, e2) {
        this.m_pJig.drawEntity(s.MxThreeJS.createCircle(t2, e2, this.m_iColor));
      }, d.prototype.drawEntity = function(t2, e2) {
        this.m_pJig.drawEntity(t2, e2);
      }, d.prototype.drawText = function(t2, e2, n2, i2) {
        var r2 = s.MxThreeJS.creatTextSprite(t2, i2, e2, n2, this.m_iColor);
        this.drawEntity(r2);
      }, d.prototype.drawCustomEntity = function(t2, e2) {
        var n2 = new u.McGiWorldDraw(this.m_pJig.getMxObject(), u.McGiWorldDrawType.kDynDragDraw);
        n2.setupForEntity(t2), t2.worldDraw(n2);
        for (var i2 = n2.getEntitys(), r2 = i2.length, a2 = 0; a2 < r2; a2++)
          this.drawEntity(i2[a2], e2);
      }, d);
      function d() {
        this.m_pJig = null, this.m_iColor = 16777215;
      }
      n.McEdGetPointWorldDraw = h;
      var p, f, m, g = (r(v, p = h), v.prototype.setDraw = function(t2) {
        this.m_callDraw = t2;
      }, v.prototype.worldDraw = function(t2) {
        this.m_callDraw != null && this.m_callDraw(t2, this);
      }, v);
      function v() {
        var t2 = p !== null && p.apply(this, arguments) || this;
        return t2.m_callDraw = void 0, t2;
      }
      n.McEdGetPointWorldDrawObject = g, (m = f = n.MrxDbgUiPrBase_Return || (n.MrxDbgUiPrBase_Return = {}))[m.kCancel = -2] = "kCancel", m[m.kNone = -1] = "kNone", m[m.kOk = 0] = "kOk", m[m.kKeyWord = 1] = "kKeyWord";
      var y, x = (r(b, y = a.McEdJigCommand), b.prototype.procInKeyword = function(t2) {
        t2.status >= o.MxJigCmdManager.DragStatus.kKW1 && 0 < t2.sKeyValue.length ? this.m_keyWordPicked = t2.sKeyValue.toUpperCase() : this.m_keyWordPicked = "";
      }, b.prototype.getReturnStatus = function(t2) {
        switch (t2) {
          case o.MxJigCmdManager.DragStatus.kNoChange:
            return f.kNone;
          case o.MxJigCmdManager.DragStatus.kCancel:
            return f.kCancel;
          case o.MxJigCmdManager.DragStatus.kNull:
            return f.kNone;
          case o.MxJigCmdManager.DragStatus.kNormal:
            return f.kOk;
        }
        return 1 <= t2 ? f.kKeyWord : f.kCancel;
      }, b.prototype.setInputToucheType = function(t2) {
        this.m_toucheType = t2;
      }, b.prototype.getInputToucheType = function() {
        return this.m_toucheType;
      }, b.prototype.keyWords = function() {
        return this.m_keyWords;
      }, b.prototype.setKeyWords = function(t2) {
        this.m_keyWords = t2;
      }, b.prototype.message = function() {
        return this.m_message;
      }, b.prototype.setMessage = function(t2) {
        this.m_message = t2;
      }, b.prototype.keyWordPicked = function() {
        return this.m_keyWordPicked;
      }, b.prototype.isKeyWordPicked = function(t2) {
        return t2 = t2.toUpperCase(), this.m_keyWordPicked == t2;
      }, b.prototype.setUserDraw = function(t2) {
        t2.setMcEdJig(this), this.m_pWorldDraw = t2;
      }, b.prototype.printMessage = function() {
        var t2 = new c.MxString(this.m_message);
        t2.TrimRight(":"), 1 < this.m_keyWords.length && this.m_keyWords[0] == "[" && this.m_keyWords[this.m_keyWords.length - 1] == "]" ? l.MxUiVue.acutPrintf(t2.m_val + " \u6216" + this.m_keyWords + ":") : l.MxUiVue.acutPrintf(t2.m_val + ":");
      }, b);
      function b() {
        var t2 = y !== null && y.apply(this, arguments) || this;
        return t2.m_keyWords = "", t2.m_message = "", t2.m_keyWordPicked = "", t2.m_pWorldDraw = null, t2.m_toucheType = o.MxJigCmdManager.InType.kGetBegan, t2;
      }
      n.MrxDbgUiPrBase = x;
    }, { "../MxString": 42, "../MxThreeJS": 44, "../UI/MxUiVue": 67, "./McGiWorldDraw": 50, "./MxJig": 57, "./MxJigCmdManager": 58 }], 52: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MrxDbgUiPrPoint = void 0;
      var a, o = t("three"), s = t("./MxJigCmdManager"), l = t("../MxFun"), c = t("./MrxDbgUiPrBase"), u = t("../UI/MxUiVue"), h = t("../MxThreeJS"), d = (r(p, a = c.MrxDbgUiPrBase), p.prototype.value = function() {
        return new o.Vector3(this.m_value.x, this.m_value.y, 0);
      }, p.prototype.basePt = function() {
        return new o.Vector3(this.m_basePt.x, this.m_basePt.y, 0);
      }, p.prototype.setBasePt = function(t2) {
        this.m_basePt == null ? this.m_basePt = new o.Vector3(t2.x, t2.y, 0) : (this.m_basePt.x = t2.x, this.m_basePt.y = t2.y);
      }, p.prototype.setUseBasePt = function(t2) {
        this.m_useBasePt = t2;
      }, p.prototype.initGo = function() {
        this.m_keyWordPicked = "", this.m_retcall = null, this.m_retWhileCall = null, this.m_exitCall = null;
      }, p.prototype.go = function(t2) {
        this.initGo(), this.m_retcall = t2, s.MxJigCmdManager.runCmd(this);
      }, p.prototype.goWhile = function(t2, e2) {
        this.initGo(), this.m_retWhileCall = t2, e2 && (this.m_exitCall = e2), s.MxJigCmdManager.runCmd(this);
      }, p.prototype.onExitCommand = function() {
        var t2 = this;
        u.MxUiVue.setCursorType(u.MxUiVue.CursorType.kNormal);
        var e2 = false;
        this.m_retcall != null && (s.MxJigCmdManager.setRunCmdEvent(function() {
          a.prototype.onExitCommand.call(t2, false), e2 = true;
        }), this.m_retcall(this.getReturnStatus(this.m_resultDragStatus)), s.MxJigCmdManager.setRunCmdEvent(void 0)), !e2 && s.MxJigCmdManager.isWaitCmdNull() && u.MxUiVue.restoreCmdStatus(), e2 || a.prototype.onExitCommand.call(this, true);
      }, p.prototype.onStartCommand = function() {
        u.MxUiVue.setCursorType(u.MxUiVue.CursorType.kCross), this.printMessage(), s.MxJigCmdManager.setKeywordList(this.keyWords()), a.prototype.onStartCommand.call(this);
      }, p.prototype.sampler = function() {
        var t2 = this.acquirePoint(this.m_toucheType);
        return this.procInKeyword(t2), t2.status == s.MxJigCmdManager.DragStatus.kNormal && (this.m_value == null ? this.m_value = new o.Vector3(t2.pt.x, t2.pt.y, 0) : (this.m_value.x = t2.pt.x, this.m_value.y = t2.pt.y)), t2.status;
      }, p.prototype.done = function(t2) {
        if (this.m_retcall != null)
          return this.m_resultDragStatus = t2, this.m_exitCall && this.m_exitCall(this.getReturnStatus(this.m_resultDragStatus)), s.MxJigCmdManager.DoneStatius.kExitCommand;
        if (this.m_retWhileCall != null) {
          if ((this.m_resultDragStatus = t2) == s.MxJigCmdManager.DragStatus.kCancel)
            return this.m_exitCall && this.m_exitCall(this.getReturnStatus(this.m_resultDragStatus)), s.MxJigCmdManager.DoneStatius.kExitCommand;
          var e2 = false;
          t2 == s.MxJigCmdManager.DragStatus.kNull && (e2 = true);
          var n2 = this.m_retWhileCall(this.getReturnStatus(this.m_resultDragStatus));
          return n2 != null && n2.exit != null && (e2 = n2.exit), e2 ? (this.m_exitCall && this.m_exitCall(this.getReturnStatus(this.m_resultDragStatus)), s.MxJigCmdManager.DoneStatius.kExitCommand) : (s.MxJigCmdManager.setKeywordList(this.keyWords()), this.printMessage(), s.MxJigCmdManager.DoneStatius.kContinueCommand);
        }
        l.MxFun.Assert(0);
      }, p.prototype.upDisplay = function() {
        this.m_value && (this.m_pWorldDraw && this.m_pWorldDraw.worldDraw(this.m_value), this.m_useBasePt && this.m_basePt && this.drawEntity(h.MxThreeJS.createLine(this.m_value, this.m_basePt, 16777215)));
      }, p);
      function p() {
        var t2 = a !== null && a.apply(this, arguments) || this;
        return t2.m_useBasePt = false, t2.m_basePt = null, t2.m_value = null, t2.m_retcall = null, t2.m_retWhileCall = null, t2.m_exitCall = null, t2.m_resultDragStatus = s.MxJigCmdManager.DragStatus.kCancel, t2;
      }
      n.MrxDbgUiPrPoint = d;
    }, { "../MxFun": 34, "../MxThreeJS": 44, "../UI/MxUiVue": 67, "./MrxDbgUiPrBase": 51, "./MxJigCmdManager": 58, three: 19 }], 53: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxCmdRunManager = void 0;
      var i, r, a, o, s, l, c, u = t("../MxFun"), h = t("../MxType"), d = t("./MxJigCmdManager"), p = t("../UI/MxUiVue"), f = t("../MxDrawData");
      i = n.MxCmdRunManager || (n.MxCmdRunManager = {}), r = {}, a = new Array(), o = 0, s = false, l = "", c = {}, i.InitQuickCommand = function(t2) {
        for (var e2 = t2.length, n2 = 0; n2 < e2; n2++) {
          var i2 = t2[n2];
          if (!(i2.length < 2)) {
            var r2 = i2[0];
            if (r2.length != 0)
              for (var a2 = i2.length, o2 = 1; o2 < a2; o2++)
                i2[o2].length != 0 && (c[i2[o2].toUpperCase()] = r2);
          }
        }
      }, i.MoveUpKey = function() {
        return s ? ++o >= a.length && (o = 0) : s = true, true;
      }, i.MoveDownKey = function() {
        return !!s && (--o < 0 && (o = a.length - 1), true);
      }, i.GetListCommad = function() {
        return o < 0 || o >= a.length ? "" : a[o];
      }, i.ClearPrvCmd = function() {
        l = "";
      }, i.GetPrvCmd = function() {
        return l;
      }, i.SetPrvCmd = function(t2) {
        l = t2;
      }, i.runCmd = function(t2, e2, n2) {
        var i2 = e2.toUpperCase(), m = r[i2];
        if (t2 && m == null) {
          var g = c[i2];
          if (g != null && (m = r[g.toUpperCase()]), m == null)
            return p.MxUiVue.isNull() ? console.log(u.MxFun.formatString('\u672A\u77E5\u547D\u4EE4"{0}"', e2)) : p.MxUiVue.acutPrintf('\u672A\u77E5\u547D\u4EE4"{0}"\u3002\n\u547D\u4EE4:', e2), false;
        }
        if (!m)
          return false;
        var v = a.indexOf(m.cmd);
        -1 < v && a.splice(v, 1), s = !(o = 0), a.push(m.cmd), l = m.cmd;
        var y = m.fun;
        if (t2 && (m.flag & h.MxType.CommandFlags.MCRX_CMD_TRANSPARENT) == 0 && p.MxUiVue.acutPrintf("{0}\n", m.cmd), d.MxJigCmdManager.stopCmd(), t2 && t2.undoMark(), t2 && e2 != "Mx_GripEdit" && e2 != "Mx_IntelliSel" && e2 != "Mx_FrontEndWebpageIntelliSel" && e2 != "Mx_FrontEndWebpageGripEdit") {
          var x = false, b = t2.getMxCAD();
          if (b) {
            t2.callCommand("MxCAD_StartCommandEvent");
            var w = b.getSelect().clearAllSelect(false), M = b.getGrip().clearAll();
            (w || M) && (x = true);
          } else {
            var _5 = t2.getMxAllSelect();
            t2.getMxDatabase().getGripManager().removeAllGrips() && (x = true), t2.getMxDatabase().getSelectManager().removeAllEntity() && (x = true), t2.getMxDatabase().getSelectManager().setPrvCommandSelect(_5);
          }
          x && t2.updateDisplay();
        }
        return y(n2), t2 && (d.MxJigCmdManager.isRunning() || p.MxUiVue.restoreCmdStatus(), t2.updateDisplay(), f.MxDrawData.m_isAutoResetRenderer || t2.resetRenderer()), true;
      }, i.addCommand = function(t2, e2, n2) {
        n2 == null && (n2 = h.MxType.CommandFlags.MCRX_CMD_MODAL);
        var i2 = t2.toUpperCase();
        r[i2] = { fun: e2, cmd: t2, flag: n2 };
      };
    }, { "../MxDrawData": 29, "../MxFun": 34, "../MxType": 46, "../UI/MxUiVue": 67, "./MxJigCmdManager": 58 }], 54: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawObjectOsnap = n.McDbLine = n.McDbCurve = n.McDbEntity = n.McDbType = void 0;
      var a, o, s = t("three"), l = t("../MxThreeJS"), c = t("../MxDrawData"), u = t("./MxJigCmdManager"), h = t("./McEdJigOsnap");
      (o = a = n.McDbType || (n.McDbType = {}))[o.kInValid = 0] = "kInValid", o[o.kLine = 1] = "kLine";
      var d = (p.prototype.getType = function() {
        return this.m_type;
      }, p);
      function p() {
        this.m_type = a.kInValid;
      }
      n.McDbEntity = d;
      var f, m = (r(g, f = d), g);
      function g() {
        return f !== null && f.apply(this, arguments) || this;
      }
      n.McDbCurve = m;
      var v, y = (r(x, v = m), x);
      function x() {
        var t2 = v.call(this) || this;
        return t2.m_type = a.kLine, t2;
      }
      n.McDbLine = y;
      var b = (w.prototype.getBlobHead = function(t2, e2) {
        var n2 = {};
        return n2.type = t2.getInt32(e2, true), e2 += 4, n2.ver = t2.getInt32(e2, true), e2 += 4, n2.databaseIndex = t2.getInt32(e2, true), e2 += 4, n2.nOffset = e2, n2;
      }, w.prototype.clearData = function() {
        this.threejsObjects = new s.Object3D();
      }, w.prototype.calculateDistance = function(t2, e2, n2) {
        var i2 = new s.Vector3().subVectors(e2, t2), r2 = new s.Vector3().subVectors(n2, t2), a2 = i2.clone().normalize(), o2 = r2.clone().normalize(), l2 = a2.dot(o2), c2 = new s.Vector3().subVectors(n2, e2), u2 = new s.Vector3().subVectors(t2, e2), h2 = c2.clone().normalize(), d2 = u2.clone().normalize();
        if (0 < h2.dot(d2) && 0 < l2) {
          var p2 = Math.sqrt(1 - l2 * l2), f2 = t2.distanceTo(n2), m2 = f2 * p2, g2 = f2 * l2, v2 = i2.clone().normalize().multiplyScalar(g2), y2 = t2.clone().add(v2), x2 = i2.clone().normalize().multiplyScalar(200 + g2);
          return { pt1: t2, pt2: e2, pt: n2, distance: m2, targetPt: y2, warningPt: t2.clone().add(x2) };
        }
        return null;
      }, w.prototype.getOsnapData = function(t2, e2) {
        if (this.threejsObjects) {
          var n2 = new s.Raycaster(), i2 = c.MxDrawData.getCursorWidthPixels();
          n2.linePrecision = this.mxObj.screenCoordLong2World(i2);
          var r2 = this.mxObj.getCanvas(), o2 = r2.clientWidth, l2 = r2.clientHeight, d2 = this.mxObj.screenCoord2World(t2.x, t2.y);
          d2.z = 0, t2 = new s.Vector2(t2.x / o2 * 2 - 1, -t2.y / l2 * 2 + 1), n2.setFromCamera(t2, this.mxObj.getCamera());
          var p2 = n2.intersectObjects(this.threejsObjects.children, true), f2 = this.mxObj.sysVariable().getSysVarNumber("OSMODE"), m2 = /* @__PURE__ */ new Map();
          if (p2.length)
            for (var g2 = 0; g2 < p2.length; g2++) {
              var v2 = p2[g2];
              if (v2.object.userData && v2.object.userData.obj.getType() == a.kLine) {
                var y2 = v2.object.userData.obj;
                if (f2 & h.MxOsnapDefine.OsModeEnd) {
                  var x2 = d2.distanceTo(y2.pt1);
                  y2.pt1.type = u.MxJigCmdManager.OsnapMode.kOsModeEnd, m2.set(x2, y2.pt1);
                  var b2 = d2.distanceTo(y2.pt2);
                  y2.pt2.type = u.MxJigCmdManager.OsnapMode.kOsModeEnd, m2.set(b2, y2.pt2);
                }
                if (f2 & h.MxOsnapDefine.OsModeNear && (!y2.bulge || y2.bulge == 0)) {
                  var w2 = this.calculateDistance(y2.pt1, y2.pt2, d2);
                  w2 && (w2.targetPt.type = u.MxJigCmdManager.OsnapMode.kOsModeNear, m2.set(w2.distance, w2.targetPt));
                }
              }
            }
          if (m2.size) {
            var M = this.mxObj.screenCoordLong2World(i2), _5 = Array.from(m2);
            _5.sort(function(t3, e3) {
              return t3[0] - e3[0];
            }), _5[0][0] < M && e2(_5[0][1], _5[0][1].type);
          }
        }
      }, w.prototype.mxWebEntitysData = function(t2, e2) {
        var n2 = this.getBlobHead(t2, 0);
        t2.getInt32(n2.nOffset, true), n2.nOffset += 4;
        var i2 = t2.getInt32(n2.nOffset, true);
        n2.nOffset += 4;
        var r2 = t2.getInt32(n2.nOffset, true);
        if (n2.nOffset += 4, 1 < r2)
          console.log("mx:error mxfun.js version is old!");
        else {
          var a2 = t2.getInt32(n2.nOffset, true);
          if (n2.nOffset += 4, a2 == n2.nOffset) {
            this.threejsObjects = new s.Object3D();
            for (var o2 = 0; o2 < i2; o2++) {
              var c2 = t2.getInt8(n2.nOffset);
              n2.nOffset += 1;
              var u2 = t2.getInt32(n2.nOffset, true);
              if (n2.nOffset += 4, c2 == 1) {
                var h2 = t2.getFloat32(n2.nOffset, true);
                n2.nOffset += 4;
                var d2 = t2.getFloat32(n2.nOffset, true);
                n2.nOffset += 4;
                var p2 = t2.getFloat32(n2.nOffset, true);
                n2.nOffset += 4;
                var f2 = t2.getFloat32(n2.nOffset, true);
                n2.nOffset += 4, (_5 = new y()).pt1 = new s.Vector3(h2, d2, 0), _5.pt2 = new s.Vector3(p2, f2, 0), (S = l.MxThreeJS.createLine(_5.pt1, _5.pt2, 16777215)).userData.obj = _5, this.threejsObjects.add(S);
              } else if (c2 == 2) {
                var m2 = t2.getInt8(n2.nOffset);
                n2.nOffset += 1;
                var g2 = t2.getInt32(n2.nOffset, true);
                n2.nOffset += 4;
                for (var v2 = new s.Vector3(), x2 = 0, b2 = null, w2 = 0; w2 < g2; w2++) {
                  var M = new s.Vector3();
                  M.x = t2.getFloat32(n2.nOffset, true), n2.nOffset += 4, M.y = t2.getFloat32(n2.nOffset, true), n2.nOffset += 4;
                  var _5, S, C = t2.getFloat32(n2.nOffset, true);
                  n2.nOffset += 4, 0 < w2 && ((_5 = new y()).pt1 = v2.clone(), _5.pt2 = M.clone(), _5.bulge = C, (S = l.MxThreeJS.createLine(_5.pt1, _5.pt2, 16777215)).userData.obj = _5, this.threejsObjects.add(S)), v2 = M, x2 = C, w2 == 0 && (b2 = M);
                }
                m2 && 2 < g2 && ((_5 = new y()).pt1 = b2.clone(), _5.pt2 = v2.clone(), _5.bulge = x2, (S = l.MxThreeJS.createLine(_5.pt1, _5.pt2, 16777215)).userData.obj = _5, this.threejsObjects.add(S));
              } else
                console.log("mx:error mxWebEntitysData type"), n2.nOffset = n2.nOffset - 5 + u2;
            }
          } else
            console.log("mx: mxWebEntitysData size assert(0)");
        }
      }, w);
      function w(t2) {
        this.threejsObjects = null, this.mxObj = null, this.mxObj = t2;
      }
      n.MxDrawObjectOsnap = b;
    }, { "../MxDrawData": 29, "../MxThreeJS": 44, "./McEdJigOsnap": 49, "./MxJigCmdManager": 58, three: 19 }], 55: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxEntSelJig = void 0;
      var a, o = t("./MxJig"), s = t("./MxJigCmdManager"), l = t("../UI/MxUiVue"), c = t("../MrxDbgUtils"), u = (r(h, a = o.McEdJigCommand), h.prototype.sampler = function() {
        var t2 = s.MxJigCmdManager.InType.kGetBegan, e2 = this.acquirePoint(t2);
        return e2.status == s.MxJigCmdManager.DragStatus.kNormal && (this.point = e2.pt), e2.status;
      }, h.prototype.done = function(t2) {
        if (t2 == s.MxJigCmdManager.DragStatus.kNormal) {
          var e2 = this;
          c.MrxDbgUtils.findEntAtPoint(this.getMxObject(), this.point, this.filter).then(function(t3) {
            e2.callRet(t3);
          });
        } else
          this.callRet([]);
        return s.MxJigCmdManager.DoneStatius.kExitCommand;
      }, h.prototype.onStartCommand = function() {
        l.MxUiVue.setCursorType(l.MxUiVue.CursorType.kRect), a.prototype.onStartCommand.call(this);
      }, h.prototype.onExitCommand = function() {
        l.MxUiVue.setCursorType(l.MxUiVue.CursorType.kNormal), s.MxJigCmdManager.isWaitCmdNull() && l.MxUiVue.restoreCmdStatus(), a.prototype.onExitCommand.call(this, true);
      }, h.prototype.upDisplay = function() {
      }, h);
      function h() {
        return a !== null && a.apply(this, arguments) || this;
      }
      n.MxEntSelJig = u;
    }, { "../MrxDbgUtils": 20, "../UI/MxUiVue": 67, "./MxJig": 57, "./MxJigCmdManager": 58 }], 56: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxIntelliSelectJig = void 0;
      var a, o = t("three"), s = t("./MxJig"), l = t("./MxJigCmdManager"), c = t("../MxThreeJS"), u = (r(h, a = s.McEdJigCommand), h.prototype.sampler = function() {
        var t2 = l.MxJigCmdManager.InType.kGetBegan, e2 = this.acquirePoint(t2);
        return e2.status == l.MxJigCmdManager.DragStatus.kNormal && (this.m_pt2 = e2.pt), e2.status;
      }, h.prototype.getTypeName = function() {
        return "MxIntelliSelect";
      }, h.prototype.done = function(t2) {
        if (t2 == l.MxJigCmdManager.DragStatus.kNormal) {
          var e2 = this.getMxObject();
          if (this.m_isFrontEndWebpage)
            e2.getMxDatabase().getGripManager().doWindowsSelect(this.m_pt1, this.m_pt2);
          else {
            var n2 = { x1: this.m_pt1.x, y1: this.m_pt1.y, x2: this.m_pt2.x, y2: this.m_pt2.y };
            e2.callCommand("MxCAD_IntelliSelect", JSON.stringify(n2), function(t3) {
              e2.getMxCAD().getGrip().onIntelliSelect(t3);
            });
          }
        }
        return l.MxJigCmdManager.DoneStatius.kExitCommand;
      }, h.prototype.doPointSelect = function(t2, e2, n2) {
        var i2 = t2.screenCoordLong2Doc(16), r2 = { x: e2.x, y: e2.y, tol: i2 };
        t2.callCommand("MxCAD_IntelliSelect_Point", JSON.stringify(r2), function(t3) {
          n2(t3);
        });
      }, h.prototype.upDisplay = function() {
        var t2 = new o.Vector3(this.m_pt1.x, this.m_pt2.y, this.m_pt2.z), e2 = new o.Vector3(this.m_pt2.x, this.m_pt1.y, this.m_pt2.z), n2 = [];
        n2.push(this.m_pt1), n2.push(t2), n2.push(this.m_pt2), n2.push(e2), n2.push(this.m_pt1);
        var i2 = null, r2 = 65280;
        if (this.m_pt2.x > this.m_pt1.x)
          i2 = c.MxThreeJS.createLines(n2, 16777215), r2 = 255;
        else {
          var a2 = this.getMxObject().screenCoordLong2Doc(3);
          i2 = c.MxThreeJS.createDashedLines(n2, 16777215, 2 * a2, a2);
        }
        var s2 = [];
        s2.push(this.m_pt1), s2.push(t2), s2.push(this.m_pt2), s2.push(this.m_pt1), s2.push(this.m_pt2), s2.push(e2);
        var l2 = c.MxThreeJS.createTriangle(s2, r2, 0.27);
        this.drawEntity(l2, 30), this.drawEntity(i2, 31);
      }, h);
      function h(t2, e2) {
        var n2 = a.call(this) || this;
        return n2.m_pt1 = t2, n2.m_pt2 = t2, n2.m_isFrontEndWebpage = e2, n2;
      }
      n.MxIntelliSelectJig = u;
    }, { "../MxThreeJS": 44, "./MxJig": 57, "./MxJigCmdManager": 58, three: 19 }], 57: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.McEdJigCommand = n.MxDynamicInput = void 0;
      var i = t("three"), r = t("../MxFun"), a = t("./MxJigCmdManager"), o = t("../MxManager"), s = t("../MxTools"), l = t("../UI/MxUiVue"), c = t("./McEdJigOsnap"), u = t("../MxWindowsEvent"), h = (d.prototype.onKeyDonw = function(t2) {
        if (t2 == 27)
          return this.m_isInputStatus ? (this.m_isInputStatus = false, l.MxUiVue.OnMxEvent({ name: "dynInputReSet" }), 1) : 0;
        if (t2 != 32 && t2 != 13)
          return this.m_isInputStatus = true, 0;
        if (this.m_isInputStatus && l.MxUiVue.DynamicInput_isShow() && l.MxUiVue.DynamicInput_getType() == a.MxJigCmdManager.DynamicInputType.kXYCoordInput) {
          var e2, n2 = l.MxUiVue.DynamicInput_getValue1(), i2 = l.MxUiVue.DynamicInput_getValue2(), o2 = l.MxUiVue.DynamicInput_getFocusValue();
          e2 = s.MxTools.IsNumerical(n2) && s.MxTools.IsNumerical(i2) ? r.MxFun.formatString("{0},{1}", n2, i2) : o2, l.MxUiVue.setCmdText(e2);
        }
        return this.m_isInputStatus = false, 0;
      }, d.prototype.isInputStatus = function() {
        return this.m_isInputStatus;
      }, d.prototype.initDynInput = function(t2) {
        this.m_jig = t2;
        var e2 = this.m_jig.getMxObject();
        l.MxUiVue.DynamicInput_setType(this.m_dynType), this.m_dynType == a.MxJigCmdManager.DynamicInputType.kAutoInput && (this._dynamicInputBasePoint != null || e2.sysVariable().getSysVarNumber("GETPOINTSTATUS") & a.MxJigCmdManager.GETPOINTSTATUS.OsModeSValidLastPoint ? l.MxUiVue.DynamicInput_setType(a.MxJigCmdManager.DynamicInputType.kDistanceInput) : l.MxUiVue.DynamicInput_setType(a.MxJigCmdManager.DynamicInputType.kXYCoordInput));
      }, d.prototype.setFocus = function(t2) {
        l.MxUiVue.OnMxEvent({ name: "dynInputSetFocus", param: { isFocus: t2 } });
      }, d.prototype.exitDynInput = function() {
        this._dynamicInputBasePoint = void 0, l.MxUiVue.DynamicInput_setShow(false), l.MxUiVue.DynamicInput_upDisplay();
      }, d.prototype.isShow = function() {
        return l.MxUiVue.DynamicInput_isShow();
      }, d.prototype.upDynInput = function() {
        var t2, e2 = this.m_jig.getMxObject();
        if (t2 = !this.m_jig.isDisableDynInput() && e2.sysVariable().getSysVarBool("DYNINPUT"), l.MxUiVue.DynamicInput_setShow(t2), t2) {
          if (l.MxUiVue.DynamicInput_setTip(l.MxUiVue.getCmdTip()), a.MxJigCmdManager.getAcquireStatus() == a.MxJigCmdManager.AcquireStatus.kMove) {
            var n2 = a.MxJigCmdManager.getAcquirePoint();
            if (l.MxUiVue.DynamicInput_setPos(r.MxFun.docCoord2Screen(n2.x, n2.y, n2.z)), l.MxUiVue.DynamicInput_getType() == a.MxJigCmdManager.DynamicInputType.kXYCoordInput) {
              var i2 = n2;
              l.MxUiVue.DynamicInput_setValue1(i2.x.toFixed(3)), l.MxUiVue.DynamicInput_setValue2(i2.y.toFixed(3));
            } else
              l.MxUiVue.DynamicInput_getType(), a.MxJigCmdManager.DynamicInputType.kDistanceInput;
          }
          l.MxUiVue.DynamicInput_upDisplay();
        }
      }, d.prototype.setDynamicInputBasePoint = function(t2) {
        this._dynamicInputBasePoint = t2;
      }, d.prototype.setDynamicInputType = function(t2) {
        this.m_dynType = t2;
      }, d.prototype.getDynamicInputType = function() {
        return this.m_dynType;
      }, d);
      function d(t2) {
        this.m_dynType = a.MxJigCmdManager.DynamicInputType.kAutoInput, this._dynamicInputBasePoint = void 0, this.m_isInputStatus = false, this.m_jig = t2;
      }
      n.MxDynamicInput = h;
      var p = (f.prototype.getTypeName = function() {
        return "";
      }, f.prototype.getSence = function() {
        return this._mxObject.getTheTempDrawContainer();
      }, f.prototype.onExitCommand = function(t2) {
        t2 && this.m_dynInput.exitDynInput(), this.m_osnap.endDrag();
      }, f.prototype.getOsnap = function() {
        return this.m_osnap;
      }, f.prototype.isDisableDynInput = function() {
        return this.m_isDisableDynInput;
      }, f.prototype.setDisableDynInput = function(t2) {
        this.m_isDisableDynInput = t2;
      }, f.prototype.setDisableOsnap = function(t2) {
        this.m_isDisableOsnap = t2;
      }, f.prototype.isDisableOsnap = function() {
        return this.m_isDisableOsnap;
      }, f.prototype.onStartCommand = function() {
        this._isCancle = false, this._isExit = false, this.m_dynInput.initDynInput(this), c.McEdImpJigGlobalData.intiStartDrag(this._mxObject), this.m_osnap.startDrag(this.m_isOffsetInputPostion, this);
        var t2 = u.MxWindowsEvent.getCurrentMousePostion(), e2 = this._mxObject.screenCoord2Doc(t2.x, t2.y, 0);
        this.m_osnap.setPoint(e2), a.MxJigCmdManager.doMouseMoveImp(), this.m_dynInput.setFocus(true);
      }, f.prototype.getDynImput = function() {
        return this.m_dynInput;
      }, f.prototype.setMxObject = function(t2) {
        this._mxObject = t2;
      }, f.prototype.getMxObject = function() {
        return this._mxObject;
      }, f.prototype.setColor = function(t2) {
        this._iColor = t2;
      }, f.prototype.getColor = function() {
        return this._iColor;
      }, f.prototype.setDynamicInputType = function(t2) {
        this.m_dynInput.setDynamicInputType(t2);
      }, f.prototype.getDynamicInputType = function() {
        return this.m_dynInput.getDynamicInputType();
      }, f.prototype.createTriangle = function(t2, e2, n2) {
        var r2 = new i.MeshBasicMaterial({ color: this._iColor, side: i.DoubleSide }), a2 = new i.Geometry();
        a2.vertices.push(t2), a2.vertices.push(e2), a2.vertices.push(n2);
        var o2 = new i.Vector3(1, 1, 1), s2 = new i.Color(this._iColor), l2 = new i.Face3(0, 1, 2, o2, s2, 0);
        return a2.faces.push(l2), a2.computeFaceNormals(), a2.computeVertexNormals(), new i.Mesh(a2, r2);
      }, f.prototype.createPoint = function(t2) {
        var e2 = new i.Geometry();
        e2.vertices.push(t2);
        var n2 = new i.PointsMaterial({ color: this._iColor, size: 3 });
        return new i.Points(e2, n2);
      }, f.prototype.createLine = function(t2, e2) {
        var n2 = new i.Geometry(), r2 = new i.LineBasicMaterial({ color: this._iColor });
        return n2.vertices.push(t2, e2), new i.Line(n2, r2);
      }, f.prototype.drawReserve = function(t2) {
        this.m_isReserveDrawStatus = true, this.m_callReserveDrawAddEntity = t2, this.upDisplay(), this.m_isReserveDrawStatus = false, this.m_callReserveDrawAddEntity = null;
      }, f.prototype.drawEntity = function(t2, e2) {
        if (t2 != null)
          if (this.m_isReserveDrawStatus)
            t2.renderOrder = e2 != null ? e2 : o.MxData.iDynJigRenderOrder, this._mxObject.addObject(t2), this.m_callReserveDrawAddEntity && this.m_callReserveDrawAddEntity(t2);
          else {
            var n2 = "MxDynDraw_" + this._DynNameId.toString();
            t2.name = n2, t2.renderOrder = e2 != null ? e2 : o.MxData.iDynJigRenderOrder, this._aryDynDrawObjectNamesId == null && (this._aryDynDrawObjectNamesId = new Array()), this._aryDynDrawObjectNamesId.push(this._DynNameId), this._DynNameId++, this.getSence().add(t2);
          }
      }, f.prototype.floorPowerOfTwo = function(t2) {
        return Math.pow(2, Math.floor(Math.log(t2) / Math.LN2));
      }, f.prototype.makeTextSprite = function(t2, e2, n2, a2, o2) {
        var s2, l2 = document.createElement("canvas"), c2 = l2.getContext("2d"), u2 = r.MxFun.formatString("normal {0}px Arial", "256");
        c2.font = u2;
        var h2 = c2.measureText(t2);
        s2 = 2 * this.floorPowerOfTwo(h2.width), l2.width = s2, l2.height = 256, c2.font = u2, c2.textAlign = "center", c2.textBaseline = "middle";
        var d2 = r.MxFun.formatString("#{0}", o2.toString(16));
        c2.fillStyle = d2, c2.fillText(t2, s2 / 2, 128);
        var p2 = new i.Texture(l2);
        p2.needsUpdate = true;
        var f2 = new i.SpriteMaterial({ map: p2 });
        f2.transparent = false, f2.rotation = a2;
        var m = new i.Sprite(f2);
        return m.scale.set(s2 / 256 * n2, n2, 1), m.position.set(e2.x, e2.y, 0), m;
      }, f.prototype.drawText = function(t2, e2, n2, i2) {
        var r2 = this.makeTextSprite(t2, i2, e2, n2, this._iColor);
        this.drawEntity(r2);
      }, f.prototype.drawPoints = function(t2) {
        for (var e2 = 0; e2 < t2.length; e2++) {
          var n2 = new i.Geometry();
          n2.vertices.push(t2[e2]);
          var r2 = new i.PointsMaterial({ color: this._iColor, size: 3 }), a2 = new i.Points(n2, r2);
          this.drawEntity(a2);
        }
      }, f.prototype.drawPoint = function(t2) {
        var e2 = new i.Geometry();
        e2.vertices.push(t2);
        var n2 = new i.PointsMaterial({ color: this._iColor, size: 3 }), r2 = new i.Points(e2, n2);
        this.drawEntity(r2);
      }, f.prototype.drawPolyline = function(t2) {
        for (var e2 = new i.Geometry(), n2 = 0; n2 < t2.length; n2++)
          e2.vertices.push(t2[n2]);
        var r2 = new i.LineBasicMaterial({ color: this._iColor }), a2 = new i.Line(e2, r2);
        this.drawEntity(a2);
      }, f.prototype.drawSpline = function(t2) {
      }, f.prototype.drawCircle = function(t2, e2) {
        var n2 = new i.CircleGeometry(e2, 64, 3, 2 * Math.PI), r2 = new i.LineBasicMaterial({ color: this._iColor });
        n2.vertices.shift();
        var a2 = new i.LineLoop(n2, r2);
        a2.position.x = t2.x, a2.position.y = t2.y, a2.position.z = t2.z, this.drawEntity(a2);
      }, f.prototype.drawArc = function(t2, e2, n2, r2) {
        var a2 = new i.CircleGeometry(e2, 64, n2, r2), o2 = new i.LineBasicMaterial({ color: this._iColor });
        a2.vertices.shift();
        var s2 = new i.Line(a2, o2);
        s2.position.x = t2.x, s2.position.y = t2.y, s2.position.z = t2.z, this.drawEntity(s2);
      }, f.prototype.drawLine = function(t2, e2) {
        var n2 = new i.Geometry(), r2 = new i.LineBasicMaterial({ color: this._iColor });
        n2.vertices.push(t2, e2);
        var a2 = new i.Line(n2, r2);
        this.drawEntity(a2);
      }, f.prototype.removeDynDrawObject = function() {
        if (this._aryDynDrawObjectNamesId != null) {
          for (var t2 = 0; t2 < this._aryDynDrawObjectNamesId.length; t2++) {
            var e2 = "MxDynDraw_" + this._aryDynDrawObjectNamesId[t2].toString(), n2 = this.getSence().getObjectByName(e2);
            r.MxFun.removeThreejsObject(n2, this.getSence());
          }
          this._aryDynDrawObjectNamesId = [];
        }
      }, f.prototype.acquirePoint = function(t2) {
        var e2 = a.MxJigCmdManager.acquirePoint(t2);
        return this._isExit = e2.exit, e2;
      }, f.prototype.notifyCancleExit = function() {
        this._isCancle = true, this.removeDynDrawObject(), this.done(a.MxJigCmdManager.DragStatus.kCancel), this.onExitCommand(true), a.MxJigCmdManager.commandRunComplete(this);
      }, f.prototype.notifySampler = function() {
        var t2 = this.sampler();
        if (this.m_dynInput.upDynInput(), t2 == a.MxJigCmdManager.DragStatus.kNormal && (this.removeDynDrawObject(), this.upDisplay()), this._isExit) {
          var e2 = this.done(t2);
          this._isCancle || (e2 == a.MxJigCmdManager.DoneStatius.kContinueCommand ? (this._isExit = false, a.MxJigCmdManager.doMouseMoveImp(), l.MxUiVue.OnMxEvent({ name: "dynInputReSet" })) : (this.removeDynDrawObject(), a.MxJigCmdManager.commandRunComplete(this), this.onExitCommand(true)));
        }
        this._mxObject.updateDisplay();
      }, f.prototype.getCurrentMouseButton = function() {
        return a.MxJigCmdManager.getCurrentMouseButton();
      }, f.prototype.userInputControls = function() {
        return this._userInputContros;
      }, f.prototype.setUserInputControls = function(t2) {
        this._userInputContros = t2;
      }, f);
      function f() {
        this._isExit = false, this._aryDynDrawObjectNamesId = void 0, this._DynNameId = 1, this._iColor = 16777215, this._isCancle = false, this.m_isDisableDynInput = false, this.m_isDisableOsnap = false, this.m_dynInput = new h(this), this.m_osnap = new c.McEdJigOsnap(this), this._userInputContros = a.MxJigCmdManager.UserInputControls.kNullResponseAccepted, this.m_isOffsetInputPostion = false, this.m_isReserveDrawStatus = false, this.m_callReserveDrawAddEntity = null, this._mxObject = null;
      }
      n.McEdJigCommand = p;
    }, { "../MxFun": 34, "../MxManager": 36, "../MxTools": 45, "../MxWindowsEvent": 48, "../UI/MxUiVue": 67, "./McEdJigOsnap": 49, "./MxJigCmdManager": 58, three: 19 }], 58: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxJigCmdManager = n.AcquireReturn = void 0;
      var i, r = t("three"), a = t("../MxFun"), o = t("./MxJig"), s = t("../MxManager"), l = t("./MrxDbgUiPrPoint"), c = t("./MrxDbgUiPrBase"), u = t("../UI/MxUiVue"), h = t("../MxTools"), d = t("../MxString"), p = t("../MxWindowsEvent"), f = t("../MxDrawObject"), m = t("./McEdJigOsnap"), g = t("../MxDrawData"), v = function() {
        this.status = i.DragStatus.kNoChange, this.exit = true, this.sKeyValue = "";
      };
      n.AcquireReturn = v, function(t2) {
        var e2, n2, i2, y, x, b, w, M, _5, S, C, T, E, D, A, O, L, I;
        (n2 = e2 = t2.UserInputControls || (t2.UserInputControls = {}))[n2.kGovernedByOrthoMode = 1] = "kGovernedByOrthoMode", n2[n2.kNullResponseAccepted = 2] = "kNullResponseAccepted", n2[n2.kDontEchoCancelForCtrlC = 4] = "kDontEchoCancelForCtrlC", n2[n2.kDontUpdateLastPoint = 8] = "kDontUpdateLastPoint", n2[n2.kNoDwgLimitsChecking = 16] = "kNoDwgLimitsChecking", n2[n2.kNoZeroResponseAccepted = 32] = "kNoZeroResponseAccepted", n2[n2.kNoNegativeResponseAccepted = 64] = "kNoNegativeResponseAccepted", n2[n2.kAccept3dCoordinates = 128] = "kAccept3dCoordinates", n2[n2.kAcceptMouseUpAsPoint = 256] = "kAcceptMouseUpAsPoint", n2[n2.kAnyBlankTerminatesInput = 512] = "kAnyBlankTerminatesInput", n2[n2.kInitialBlankTerminatesInput = 1024] = "kInitialBlankTerminatesInput", n2[n2.kAcceptOtherInputString = 2048] = "kAcceptOtherInputString", n2[n2.kGovernedByUCSDetect = 4096] = "kGovernedByUCSDetect", n2[n2.kNoZDirectionOrtho = 8192] = "kNoZDirectionOrtho", n2[n2.kSpacesInAccepted = 16384] = "kSpacesInAccepted", (y = i2 = t2.AcquireStatus || (t2.AcquireStatus = {}))[y.kNoChange = 0] = "kNoChange", y[y.kMove = 1] = "kMove", y[y.kBegan = 2] = "kBegan", y[y.kEnd = 3] = "kEnd", y[y.kMouseUp = 4] = "kMouseUp", y[y.kMouseDown = 5] = "kMouseDown", y[y.kCancle = 6] = "kCancle", (b = x = t2.DragStatus || (t2.DragStatus = {}))[b.kNoChange = -6] = "kNoChange", b[b.kCancel = -4] = "kCancel", b[b.kOther = -3] = "kOther", b[b.kNull = -1] = "kNull", b[b.kNormal = 0] = "kNormal", b[b.kKW1 = 1] = "kKW1", (w = t2.DoneStatius || (t2.DoneStatius = {}))[w.kContinueCommand = 0] = "kContinueCommand", w[w.kExitCommand = 1] = "kExitCommand", (_5 = M = t2.InType || (t2.InType = {}))[_5.kGetBegan = 1] = "kGetBegan", _5[_5.kGetEnd = 2] = "kGetEnd", (C = S = t2.MouseButton || (t2.MouseButton = {}))[C.kInvalid = -1] = "kInvalid", C[C.kLeft = 0] = "kLeft", C[C.kMid = 1] = "kMid", C[C.kRight = 2] = "kRight", (E = T = t2.COMMAND_IN || (t2.COMMAND_IN = {}))[E.COMMAND_IN_NO_ENTITY = 0] = "COMMAND_IN_NO_ENTITY", E[E.COMMAND_IN_EMTPY = 1] = "COMMAND_IN_EMTPY", E[E.COMMAND_IN_KEY = 2] = "COMMAND_IN_KEY", E[E.COMMAND_IN_STRING = 3] = "COMMAND_IN_STRING", E[E.COMMAND_IN_COORD = 5] = "COMMAND_IN_COORD", E[E.COMMAND_IN_DIST = 6] = "COMMAND_IN_DIST", E[E.COMMAND_IN_INVALID = 7] = "COMMAND_IN_INVALID", E[E.COMMAND_IN_INVALID_ZERO = 8] = "COMMAND_IN_INVALID_ZERO", E[E.COMMAND_IN_INVALID_NEG = 9] = "COMMAND_IN_INVALID_NEG", E[E.COMMAND_IN_INT = 10] = "COMMAND_IN_INT", (A = D = t2.COMMAND_GET || (t2.COMMAND_GET = {}))[A.COMMAND_GET_STRING = 1] = "COMMAND_GET_STRING", A[A.COMMAND_GET_KEY = 2] = "COMMAND_GET_KEY", A[A.COMMAND_GET_DIST = 4] = "COMMAND_GET_DIST", A[A.COMMAND_GET_COORD = 8] = "COMMAND_GET_COORD", A[A.COMMAND_GET_INT = 16] = "COMMAND_GET_INT", (O = t2.DynamicInputType || (t2.DynamicInputType = {}))[O.kNoInput = 0] = "kNoInput", O[O.kXYCoordInput = 1] = "kXYCoordInput", O[O.kDistanceInput = 2] = "kDistanceInput", O[O.kDynTip = 3] = "kDynTip", O[O.kAutoInput = 4] = "kAutoInput", O[O.kAngleInput = 5] = "kAngleInput", (L = t2.GETPOINTSTATUS || (t2.GETPOINTSTATUS = {}))[L.OsModeSValidLastPoint = 1] = "OsModeSValidLastPoint", L[L.OsModeSTempDisable = 2] = "OsModeSTempDisable", L[L.OsModeOrthoTempDisable = 4] = "OsModeOrthoTempDisable", L[L.OsModeSInvalidLastMovePoint = 8] = "OsModeSInvalidLastMovePoint", L[L.OsModePoloarTempDisable = 16] = "OsModePoloarTempDisable", L[L.OsModeDynTraceTempDisable = 32] = "OsModeDynTraceTempDisable", L[L.OsModeGridSnapTempDisable = 64] = "OsModeGridSnapTempDisable", (I = t2.OsnapMode || (t2.OsnapMode = {}))[I.kOsModekValid = 0] = "kOsModekValid", I[I.kOsModeEnd = 1] = "kOsModeEnd", I[I.kOsModeMid = 2] = "kOsModeMid", I[I.kOsModeCen = 3] = "kOsModeCen", I[I.kOsModeNode = 4] = "kOsModeNode", I[I.kOsModeQuad = 5] = "kOsModeQuad", I[I.kOsModeIns = 7] = "kOsModeIns", I[I.kOsModePerp = 8] = "kOsModePerp", I[I.kOsModeTan = 9] = "kOsModeTan", I[I.kOsModeNear = 10] = "kOsModeNear", I[I.kOsModeInt = 11] = "kOsModeInt";
        var P, R = void 0, k = void 0, B = i2.kNoChange, N = S.kInvalid, F = -9999999, j = new r.Vector2(F, F), V = false, z = void 0, G = false, U = /* @__PURE__ */ new Map(), H = new Array(), W = new d.MxString(), J = true, q = void 0;
        function X() {
          R != null && R.notifySampler();
        }
        function Y(t3) {
          var e3 = t3.srcElement;
          if (e3 && e3.tagName == "CANVAS") {
            if (R == null)
              return;
            if (R.getDynImput().isInputStatus())
              return;
            j.x = t3.offsetX, j.y = t3.offsetY, et(j), t3.stopPropagation();
          }
        }
        function Z(t3) {
          if (t3.button != S.kLeft)
            return 0;
          var e3 = t3.srcElement;
          return !e3 || e3.tagName != "CANVAS" || R == null || R.getDynImput().isInputStatus() ? 0 : (j.x = t3.offsetX, j.y = t3.offsetY, P = R.getMxObject().screenCoord2Doc(t3.offsetX, t3.offsetY, 0), B = i2.kMouseUp, N = t3.button, X(), t3.stopPropagation(), 1);
        }
        function $2(t3) {
          if (t3.button != S.kLeft)
            return 0;
          R != null && R.getDynImput().isShow() && R.getDynImput().setFocus(true);
          var e3 = t3.srcElement;
          if (e3 && e3.tagName == "CANVAS") {
            if (R == null)
              return 0;
            if (R.getDynImput().isInputStatus())
              return 0;
            j.x = t3.offsetX, j.y = t3.offsetY;
            var n3 = R.getMxObject().screenCoord2Doc(t3.offsetX, t3.offsetY, 0), r2 = R.getOsnap(), a2 = r2.getCurrentOSnapPoint(n3);
            return n3 = a2.pt, a2.osmode, m.McEdImpJigGlobalData.setPrvPoint(n3), r2.seInValidPoint(), P = n3, B = i2.kMouseDown, N = t3.button, X(), t3.stopPropagation(), 1;
          }
          return 0;
        }
        function K(t3) {
          if (t3.touches.length != 0) {
            R != null && R.getDynImput().isShow() && R.getDynImput().setFocus(true);
            var e3 = t3.srcElement;
            if (e3 && e3.tagName == "CANVAS") {
              if (R == null)
                return;
              if (R.getDynImput().isInputStatus())
                return;
              j.x = t3.touches[0].pageX, j.y = t3.touches[0].pageY;
              var n3 = R.getMxObject().screenCoord2Doc(t3.touches[0].pageX, t3.touches[0].pageY, 0), r2 = R.getOsnap(), a2 = r2.getCurrentOSnapPoint(n3);
              return n3 = a2.pt, a2.osmode, m.McEdImpJigGlobalData.setPrvPoint(n3), r2.seInValidPoint(), P = n3, B = i2.kBegan, N = S.kInvalid, X(), t3.stopPropagation(), 1;
            }
          }
        }
        function Q(t3) {
          var e3 = t3.srcElement;
          if (e3 && e3.tagName == "CANVAS") {
            if (R == null)
              return;
            if (R.getDynImput().isInputStatus())
              return;
            if (j.x == F || j.y == F)
              return;
            return P = R.getMxObject().screenCoord2Doc(j.x, j.y, 0), B = i2.kEnd, N = S.kInvalid, X(), t3.stopPropagation(), 1;
          }
        }
        function tt(t3) {
          var e3 = t3.srcElement;
          if (e3 && e3.tagName == "CANVAS") {
            if (R == null)
              return;
            if (R.getDynImput().isInputStatus())
              return;
            j.x = t3.touches[0].pageX, j.y = t3.touches[0].pageY, et(j);
          }
        }
        function et(e3) {
          if (G = false, e3 == null) {
            if (j.x == F || j.y == F)
              return;
            e3 = j;
          }
          var n3 = R.getMxObject().screenCoord2Doc(e3.x, e3.y, 0), r2 = R.getOsnap(), a2 = R.getMxObject().screenCoordLong2Doc(0.5 * g.MxDrawData.getCursorWidthPixels());
          r2.setPoint(n3, a2), t2.OsnapMode.kOsModekValid, P = n3, B = i2.kMove, X.call(this);
        }
        function nt() {
          R && (q = R.getMxObject().getEventManager(), a.MxFun.isPC() ? (q.addEventListener("mouseup", Z, true), q.addEventListener("mousemove", Y, true), q.addEventListener("mousedown", $2, true)) : (q.addEventListener("touchstart", K, true), q.addEventListener("touchend", Q, true), q.addEventListener("touchmove", tt, true)));
        }
        function it() {
          q && (a.MxFun.isPC() ? (q.removeEventListener("mouseup", Z, true), q.removeEventListener("mousemove", Y, true), q.removeEventListener("mousedown", $2, true)) : (q.removeEventListener("touchstart", K, true), q.removeEventListener("touchend", Q, true), q.removeEventListener("touchmove", tt, true)), q = void 0);
        }
        function rt(t3) {
          var e3 = t3.getOrbitControls();
          a.MxFun.isPC() || (e3.enabled = false), e3.resetStatusValue(), t3.getRunMode() == f.MxRunMode.kBrowse && t3.enableSingleTouchPan(false), t3.tempDisableSelect(true), t3.updateDisplay();
        }
        function at(t3) {
          var e3 = new r.Vector3(), n3 = false, i3 = new d.MxString(t3), a2 = i3.AnalyzeString(",");
          if (a2.length < 2)
            for (; !i3.IsEmpty() && h.MxTools.IsNumerical(i3); ) {
              var o2 = h.MxTools._tstof(i3.m_val);
              if (h.MxTools.IsZero(o2))
                break;
              break;
            }
          else {
            var s2 = new d.MxString(a2[0]), l2 = new d.MxString(a2[1]), c2 = new d.MxString("0");
            2 < a2.length && (c2.m_val = a2[2]), s2.IsEmpty() || s2.Left(1) != "@" ? h.MxTools.IsNumerical(s2) && h.MxTools.IsNumerical(l2) && h.MxTools.IsNumerical(c2) ? (n3 = true, e3.x = h.MxTools._tstof(s2.m_val), e3.y = h.MxTools._tstof(l2.m_val), e3.z = h.MxTools._tstof(c2.m_val)) : n3 = false : (s2.m_val = s2.Right(s2.GetLength() - 1), h.MxTools.IsNumerical(s2) && h.MxTools.IsNumerical(l2) && h.MxTools.IsNumerical(c2) || (n3 = false));
          }
          return n3 ? e3 : null;
        }
        function ot(t3, e3) {
          e3 === void 0 && (e3 = false), J && u.MxUiVue.AcutPrintfNoFormat(t3, e3);
        }
        function st(t3, n3) {
          if (t3 == T.COMMAND_IN_INVALID) {
            var i3 = u.MxUiVue.getCmdTip();
            return ot(n3), ot(i3), x.kNoChange;
          }
          return t3 == T.COMMAND_IN_INVALID_ZERO ? (i3 = u.MxUiVue.getCmdTip(), R.userInputControls() & e2.kNoNegativeResponseAccepted ? ot("\n \u503C\u5FC5\u987B\u4E3A\u6B63 \u4E14\u975E\u96F6\u3002 \n") : ot("\n \u503C\u5FC5\u4E0D\u80FD\u4E3A\u96F6\u3002 \n"), ot(i3), x.kOther) : t3 != T.COMMAND_IN_INVALID_NEG ? x.kNoChange : (i3 = u.MxUiVue.getCmdTip(), R.userInputControls() & e2.kNoZeroResponseAccepted ? ot("\n \u503C\u5FC5\u987B\u4E3A\u6B63 \u4E14\u975E\u96F6\u3002 \n") : ot("\n \u503C\u5FC5\u4E0D\u80FD\u4E3A\u8D1F\u3002 \n"), ot(i3), x.kOther);
        }
        function lt(t3) {
          var n3 = { iRet: T.COMMAND_IN_NO_ENTITY, sValue: "", iKey: x.kNull, dDist: 0, iVal: 0, pt: null };
          if (!G)
            return n3;
          var i3 = R.userInputControls(), r2 = u.MxUiVue.getCmdText();
          if (r2.length == 0)
            return i3 & e2.kNullResponseAccepted ? n3.iRet = T.COMMAND_IN_EMTPY : n3.iRet = T.COMMAND_IN_INVALID, n3;
          if (t3 & D.COMMAND_GET_KEY && 0 < U.size) {
            var a2 = new d.MxString(r2);
            a2.MakeUpper(), a2.TrimLeft(" "), a2.TrimRight(" ");
            var o2 = U.get(a2.m_val);
            if (o2 != null)
              return n3.iRet = T.COMMAND_IN_KEY, n3.iKey = o2, n3.sValue = a2.m_val, n3;
          }
          if (t3 & D.COMMAND_GET_DIST && h.MxTools.IsNumerical(r2))
            return n3.dDist = h.MxTools._tstof(r2), i3 & e2.kNoZeroResponseAccepted && h.MxTools.IsZero(n3.dDist) ? n3.iRet = T.COMMAND_IN_INVALID_ZERO : i3 & e2.kNoNegativeResponseAccepted && n3.dDist < 0 ? n3.iRet = T.COMMAND_IN_INVALID_NEG : (n3.sValue = r2, n3.iRet = T.COMMAND_IN_DIST), n3;
          if (t3 & D.COMMAND_GET_INT && h.MxTools.IsNumerical(r2))
            return n3.iVal = h.MxTools._tstoi(r2), i3 & e2.kNoZeroResponseAccepted && n3.iiVal == 0 ? n3.iRet = T.COMMAND_IN_INVALID_ZERO : i3 & e2.kNoNegativeResponseAccepted && n3.iiVal < 0 ? n3.iRet = T.COMMAND_IN_INVALID_NEG : (n3.sValue = r2, n3.iRet = T.COMMAND_IN_INT), n3;
          if (t3 & D.COMMAND_GET_COORD) {
            var s2 = at(r2);
            if (s2 != null)
              return n3.sValue = r2, n3.iRet = T.COMMAND_IN_COORD, n3.pt = s2, n3;
          }
          return t3 & D.COMMAND_GET_STRING ? (n3.sValue = r2, n3.iRet = T.COMMAND_IN_STRING) : n3.iRet = T.COMMAND_IN_INVALID, n3;
        }
        t2.getInputKeyword = function(t3) {
          if (t3 < 1)
            return "";
          for (var e3, n3 = U.entries(); !(e3 = n3.next()).done; )
            if (e3.value == t3)
              return e3.key;
          return "";
        }, t2.GetKeyWordToString = function() {
          return H;
        }, t2.keywordList = function() {
          return W.m_val;
        }, t2.setKeywordList = function(t3) {
          if (W.m_val = t3, U.clear(), H.length = 0, !W.IsEmpty())
            if (W.TrimLeft(" "), W.TrimRight(" "), W.m_val[0] == "[" && W.m_val[W.m_val.length - 1] == "]") {
              W.TrimLeft("["), W.TrimRight("]");
              for (var e3 = W.AnalyzeString("/"), n3 = 1, i3 = 0; i3 < e3.length; i3++) {
                var r2 = (s2 = new d.MxString(e3[i3])).Find("(");
                if (r2 != -1) {
                  var a2 = new d.MxString(s2.Left(r2)), o2 = new d.MxString(s2.Right(s2.GetLength() - r2 - 1));
                  o2.TrimRight(")"), a2.IsEmpty() || o2.IsEmpty() || (o2.MakeUpper(), U.set(o2.m_val, n3), n3++, H.push(new h.MxPair(o2.m_val, a2.m_val)));
                }
              }
            } else
              for (e3 = W.AnalyzeString(" "), n3 = 1, i3 = 0; i3 < e3.length; i3++) {
                var s2;
                (s2 = new d.MxString(e3[i3])).IsEmpty() || (s2.MakeUpper(), U.set(s2.m_val, n3), n3++);
              }
        }, t2.getAcquirePoint = function() {
          return P;
        }, t2.getAcquireStatus = function() {
          return B;
        }, t2.doMouseMoveImp = et, t2.OnThreeControlsChage = function() {
          R == null || j.x != F && j.y != F && et(j);
        }, t2.OnEnter = function(t3) {
          G = true, B = i2.kNoChange, X(), G = false;
        }, t2.Test = function() {
          G = true;
        }, t2.registEvent = nt, t2.unRegistEvent = it, t2.getCurrentMouseButton = function() {
          return N;
        }, t2.isRunning = function() {
          return R != null;
        }, t2.getCurCmd = function() {
          return R;
        }, t2.commandRunComplete = function(t3) {
          R != t3 && console.log("aseert:_curCmd == cmd");
          var e3, n3 = s.MxManager.currentMx();
          R != null && (n3 = R.getMxObject()), k != null ? (R = k, k = void 0, N = S.kInvalid, nt(), R.onStartCommand(), rt(n3)) : (it(), R = void 0, e3 = n3, a.MxFun.isPC() || (e3.getOrbitControls().enabled = true), e3.getRunMode() == f.MxRunMode.kBrowse && e3.enableSingleTouchPan(true), e3.tempDisableSelect(false), e3.updateDisplay(), g.MxDrawData.m_isAutoResetRenderer || e3.resetRenderer());
        }, t2.isWaitCmdNull = function() {
          return k == null;
        }, t2.stopCmd = function() {
          R != null && (V = true, R.notifyCancleExit(), V = false);
        }, t2.setRunCmdEvent = function(t3) {
          z = t3;
        }, t2.runCmd = function(t3) {
          if (!V) {
            var e3 = s.MxManager.currentMx();
            t3.setMxObject(e3), a.MxFun.isPC() ? j = p.MxWindowsEvent.getCurrentMousePostion() : (j.x = F, j.y = F), z && z(), R == null ? (R = t3, N = S.kInvalid, nt(), R.onStartCommand(), rt(e3)) : (k = t3, V = true, R.notifyCancleExit(), V = false);
          }
        }, t2.GetAcqurePointFromStringTo = at, t2.ProcCommandRetResult = st, t2.GetCommandLineContent = lt, t2.acquirePoint = function(t3) {
          var e3 = new v();
          if (R == null)
            return e3.status = x.kCancel, e3;
          var n3 = lt(D.COMMAND_GET_COORD | D.COMMAND_GET_KEY);
          return n3.iRet == T.COMMAND_IN_EMTPY ? (e3.status = x.kNull, e3.exit = true) : n3.iRet == T.COMMAND_IN_KEY ? (e3.status = n3.iKey, e3.exit = true, e3.sKeyValue = n3.sValue) : n3.iRet == T.COMMAND_IN_COORD ? (e3.status = x.kNormal, e3.pt = new r.Vector3(n3.pt.x, n3.pt.y, n3.pt.z), e3.exit = true) : (st(n3.iRet, "\n \u9700\u8981\u70B9\u6216\u9009\u9879\u5173\u952E\u5B57\u3002 \n"), B == i2.kMove ? (e3.status = x.kNormal, e3.pt = P, e3.exit = false) : B == i2.kEnd ? t3 & M.kGetEnd ? (e3.status = x.kNormal, e3.pt = P, e3.exit = true) : (e3.status = x.kNormal, e3.pt = P, e3.exit = false) : B == i2.kCancle ? (e3.status = x.kCancel, e3.pt = P, e3.exit = true) : B == i2.kBegan ? t3 & M.kGetBegan ? (e3.status = x.kNormal, e3.pt = P, e3.exit = true) : (e3.status = x.kNormal, e3.pt = P, e3.exit = false) : B == i2.kMouseDown ? (e3.status = x.kNormal, e3.pt = P, e3.exit = true) : (e3.status = x.kNoChange, e3.pt = void 0, e3.exit = false)), e3;
        }, t2.getMcEdJigCommandClass = function() {
          return o.McEdJigCommand;
        }, t2.getMrxDbgUiPrPointClass = function() {
          return l.MrxDbgUiPrPoint;
        }, t2.getMcEdGetPointWorldDrawClass = function() {
          return c.McEdGetPointWorldDraw;
        }, t2.McEdGetPointWorldDrawObjectClass = function() {
          return c.McEdGetPointWorldDrawObject;
        }, t2.init = function() {
          this._curCmd = void 0;
        };
      }(i = n.MxJigCmdManager || (n.MxJigCmdManager = {}));
    }, { "../MxDrawData": 29, "../MxDrawObject": 30, "../MxFun": 34, "../MxManager": 36, "../MxString": 42, "../MxTools": 45, "../MxWindowsEvent": 48, "../UI/MxUiVue": 67, "./McEdJigOsnap": 49, "./MrxDbgUiPrBase": 51, "./MrxDbgUiPrPoint": 52, "./MxJig": 57, three: 19 }], 59: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxJigGetLine = void 0;
      var a, o = t("./MxJig"), s = t("./MxJigCmdManager"), l = t("../MxFun"), c = (r(u, a = o.McEdJigCommand), u.prototype.sampler = function() {
        var t2 = s.MxJigCmdManager.InType.kGetBegan;
        this._isGetPt1 || (t2 = s.MxJigCmdManager.InType.kGetEnd);
        var e2 = this.acquirePoint(t2);
        return e2.status == s.MxJigCmdManager.DragStatus.kNormal && (this._isGetPt1 ? this._pt1 = e2.pt : this._pt2 = e2.pt), e2.status;
      }, u.prototype.setRetCall = function(t2) {
        this._retCall = t2;
      }, u.prototype.done = function(t2) {
        if (this._isGetPt1)
          return this._isGetPt1 = false, s.MxJigCmdManager.DoneStatius.kContinueCommand;
        var e2 = {};
        return e2.pt1 = l.MxFun.worldCoord2Doc(this._pt1.x, this._pt1.y, this._pt1.z), e2.pt2 = l.MxFun.worldCoord2Doc(this._pt2.x, this._pt2.y, this._pt2.z), this._retCall(e2), s.MxJigCmdManager.DoneStatius.kExitCommand;
      }, u.prototype.upDisplay = function() {
        this._isGetPt1 || this._pt1 == null || this._pt2 == null || this.drawLine(this._pt1, this._pt2);
      }, u);
      function u() {
        var t2 = a !== null && a.apply(this, arguments) || this;
        return t2._isGetPt1 = true, t2;
      }
      n.MxJigGetLine = c;
    }, { "../MxFun": 34, "./MxJig": 57, "./MxJigCmdManager": 58 }], 60: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true });
      var i = t("./MxFun");
      function r() {
      }
      (r.CreateMx = function() {
        i.MxFun.init(), typeof MxMain != "undefined" && MxMain(t) == 0 || i.MxFun.createMxObject();
        var e2 = i.MxFun.getUiObject();
        e2 != null && (e2.sTitle = i.MxFun.getCurrentDraw().getFileTitle(), setTimeout(function() {
          e2.init();
        }, 400));
      }, r.Main = function() {
        if (typeof MxUiMain != "undefined") {
          MxUiMain(t);
          var e2 = i.MxFun.getUiObject();
          e2 != null && e2.writeUICSS();
        }
        typeof MxDocumentReady == "undefined" ? $(document).ready(function() {
          r.CreateMx();
        }) : MxDocumentReady(t, r.CreateMx);
      }, r).Main();
    }, { "./MxFun": 34 }], 61: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxSvgManager = void 0;
      var i = t("three"), r = t("three"), a = t("./SVGLoader"), o = (s.prototype.loadSVGImp = function(t2, e2, n2, r2) {
        new a.SVGLoader().load(t2, function(o2) {
          if (o2.paths.length) {
            var s2 = [], l2 = o2.paths, c2 = new i.Group(), u = true, h = true, d = false, p = false;
            r2 && (r2.drawStrokes && (u = r2.drawStrokes), r2.drawFillShapes && (h = r2.drawFillShapes), r2.fillShapesWireframe && (d = r2.fillShapesWireframe), r2.strokesWireframe && (p = r2.strokesWireframe));
            for (var f = 0; f < l2.length; f++) {
              var m = l2[f], g = m.userData.style.fill;
              if (h && g !== void 0 && g !== "none") {
                for (var v = new i.MeshBasicMaterial({ color: e2 || new i.Color().setStyle(g), opacity: m.userData.style.fillOpacity, transparent: m.userData.style.fillOpacity < 1, side: i.DoubleSide, depthWrite: false, wireframe: d }), y = a.SVGLoader.createShapes(m), x = 0; x < y.length; x++) {
                  var b = y[x], w = new i.ShapeBufferGeometry(b), M = new i.Mesh(w, v);
                  c2.add(M);
                }
                s2.push(v);
              }
              var _5 = m.userData.style.stroke;
              if (u && _5 !== void 0 && _5 !== "none") {
                v = new i.MeshBasicMaterial({ color: e2 || new i.Color().setStyle(_5), opacity: m.userData.style.strokeOpacity, transparent: m.userData.style.strokeOpacity < 1, side: i.DoubleSide, depthWrite: false, wireframe: p }), x = 0;
                for (var S = m.subPaths.length; x < S; x++) {
                  var C = m.subPaths[x];
                  (w = a.SVGLoader.pointsToStroke(C.getPoints(), m.userData.style, 12, 1e-3)) && (M = new i.Mesh(w, v), c2.add(M));
                }
                s2.push(v);
              }
            }
            n2 && n2(c2, s2);
          } else
            console.log("mx svg:" + t2 + " data.paths.length == 0"), n2 && n2(null, null);
        }, void 0, function() {
          n2 && n2(null, null);
        });
      }, s.prototype.loadSVG = function(t2, e2, n2, a2) {
        var o2 = this, s2 = this.mapSvgUrlToData.get(t2), l2 = !a2 || !a2.useBuffer || a2.useBuffer;
        if (s2 && l2) {
          if (n2)
            if (s2 == null)
              n2(null, null);
            else {
              var c2 = s2.svg.clone();
              c2.boxSize = s2.boxSize, n2(c2, s2.aryMeterial);
            }
        } else
          this.loadSVGImp(t2, e2, function(e3, a3) {
            if (e3 && a3) {
              var s3 = new function() {
                this.svg = new i.Group(), this.aryMeterial = [], this.boxSize = new r.Vector3(1, 1, 1);
              }();
              s3.svg = e3, s3.aryMeterial = a3;
              var l3 = new r.Box3().setFromObject(e3);
              s3.boxSize.x = l3.max.x - l3.min.x, s3.boxSize.y = l3.max.y - l3.min.y, s3.boxSize.x !== -1 / 0 && s3.boxSize.y !== -1 / 0 || console.log("mx svg:" + t2 + " boxSize invalid"), o2.mapSvgUrlToData.set(t2, s3);
              var c3 = s3.svg.clone();
              c3.boxSize = s3.boxSize, n2 && n2(c3, s3.aryMeterial);
            } else
              o2.mapSvgUrlToData.set(t2, null), n2 && n2(null, null);
          }, a2);
      }, s);
      function s() {
        this.mapSvgUrlToData = /* @__PURE__ */ new Map();
      }
      var l = (c.prototype.loadSVG = function(t2, e2, n2, i2) {
        n2 && this.mxThreeJsBuffer.loadSVG(t2, e2, n2, i2);
      }, c);
      function c() {
        this.mxThreeJsBuffer = new o();
      }
      n.MxSvgManager = l;
    }, { "./SVGLoader": 62, three: 19 }], 62: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.SVGLoader = void 0;
      var a, o = t("three"), s = (r(l, a = o.Loader), l.prototype.load = function(t2, e2, n2, i2) {
        var r2 = this, a2 = new o.FileLoader(r2.manager);
        a2.setPath(r2.path), a2.setRequestHeader(r2.requestHeader), a2.setWithCredentials(r2.withCredentials), a2.load(t2, function(n3) {
          try {
            e2(r2.parse(n3));
          } catch (n4) {
            i2 ? i2(n4) : console.error(n4), r2.manager.itemError(t2);
          }
        }, n2, i2);
      }, l.prototype.parse = function(t2) {
        var e2 = this;
        function n2(t3, e3, n3, r3, a3, o2, s3, l3) {
          if (e3 != 0 && n3 != 0) {
            r3 = r3 * Math.PI / 180, e3 = Math.abs(e3), n3 = Math.abs(n3);
            var c2 = (s3.x - l3.x) / 2, u2 = (s3.y - l3.y) / 2, h2 = Math.cos(r3) * c2 + Math.sin(r3) * u2, d2 = -Math.sin(r3) * c2 + Math.cos(r3) * u2, p2 = e3 * e3, f2 = n3 * n3, m2 = h2 * h2, g2 = d2 * d2, v2 = m2 / p2 + g2 / f2;
            if (1 < v2) {
              var y2 = Math.sqrt(v2);
              p2 = (e3 *= y2) * e3, f2 = (n3 *= y2) * n3;
            }
            var x2 = p2 * g2 + f2 * m2, b2 = (p2 * f2 - x2) / x2, w2 = Math.sqrt(Math.max(0, b2));
            a3 === o2 && (w2 = -w2);
            var M = w2 * e3 * d2 / n3, _5 = -w2 * n3 * h2 / e3, S = Math.cos(r3) * M - Math.sin(r3) * _5 + (s3.x + l3.x) / 2, C = Math.sin(r3) * M + Math.cos(r3) * _5 + (s3.y + l3.y) / 2, T = i2(1, 0, (h2 - M) / e3, (d2 - _5) / n3), E = i2((h2 - M) / e3, (d2 - _5) / n3, (-h2 - M) / e3, (-d2 - _5) / n3) % (2 * Math.PI);
            t3.currentPath.absellipse(S, C, e3, n3, T, T + E, o2 === 0, r3);
          } else
            t3.lineTo(l3.x, l3.y);
        }
        function i2(t3, e3, n3, i3) {
          var r3 = t3 * n3 + e3 * i3, a3 = Math.sqrt(t3 * t3 + e3 * e3) * Math.sqrt(n3 * n3 + i3 * i3), o2 = Math.acos(Math.max(-1, Math.min(1, r3 / a3)));
          return t3 * i3 - e3 * n3 < 0 && (o2 = -o2), o2;
        }
        function r2(t3, e3) {
          e3 = Object.assign({}, e3);
          var n3 = {};
          if (t3.hasAttribute("class"))
            for (var i3 = t3.getAttribute("class").split(/\s/).filter(Boolean).map(function(t4) {
              return t4.trim();
            }), r3 = 0; r3 < i3.length; r3++)
              n3 = Object.assign(n3, d["." + i3[r3]]);
          function a3(i4, r4, a4) {
            a4 === void 0 && (a4 = function(t4) {
              return t4.startsWith("url") && console.warn("SVGLoader: url access in attributes is not implemented."), t4;
            }), t3.hasAttribute(i4) && (e3[r4] = a4(t3.getAttribute(i4))), n3[i4] && (e3[r4] = a4(n3[i4])), t3.style && t3.style[i4] !== "" && (e3[r4] = a4(t3.style[i4]));
          }
          function o2(t4) {
            return Math.max(0, Math.min(1, u(t4)));
          }
          function s3(t4) {
            return Math.max(0, u(t4));
          }
          return t3.hasAttribute("id") && (n3 = Object.assign(n3, d["#" + t3.getAttribute("id")])), a3("fill", "fill"), a3("fill-opacity", "fillOpacity", o2), a3("fill-rule", "fillRule"), a3("opacity", "opacity", o2), a3("stroke", "stroke"), a3("stroke-opacity", "strokeOpacity", o2), a3("stroke-width", "strokeWidth", s3), a3("stroke-linejoin", "strokeLineJoin"), a3("stroke-linecap", "strokeLineCap"), a3("stroke-miterlimit", "strokeMiterLimit", s3), a3("visibility", "visibility"), e3;
        }
        function a2(t3, e3) {
          return t3 - (e3 - t3);
        }
        function s2(t3, e3, n3) {
          if (typeof t3 != "string")
            throw new TypeError("Invalid input: " + typeof t3);
          var i3, r3 = { SEPARATOR: /[ \t\r\n\,.\-+]/, WHITESPACE: /[ \t\r\n]/, DIGIT: /[\d]/, SIGN: /[-+]/, POINT: /\./, COMMA: /,/, EXP: /e/i, FLAGS: /[01]/ }, a3 = 0, o2 = true, s3 = "", l3 = "", c2 = [];
          function u2(t4, e4, n4) {
            var i4 = new SyntaxError('Unexpected character "' + t4 + '" at index ' + e4 + ".");
            throw i4.partial = n4, i4;
          }
          function h2() {
            s3 !== "" && (l3 === "" ? c2.push(Number(s3)) : c2.push(Number(s3) * Math.pow(10, Number(l3)))), l3 = s3 = "";
          }
          for (var d2 = t3.length, p2 = 0; p2 < d2; p2++)
            if (i3 = t3[p2], Array.isArray(e3) && e3.includes(c2.length % n3) && r3.FLAGS.test(i3))
              a3 = 1, s3 = i3, h2();
            else {
              if (a3 === 0) {
                if (r3.WHITESPACE.test(i3))
                  continue;
                if (r3.DIGIT.test(i3) || r3.SIGN.test(i3)) {
                  a3 = 1, s3 = i3;
                  continue;
                }
                if (r3.POINT.test(i3)) {
                  a3 = 2, s3 = i3;
                  continue;
                }
                r3.COMMA.test(i3) && (o2 && u2(i3, p2, c2), o2 = true);
              }
              if (a3 === 1) {
                if (r3.DIGIT.test(i3)) {
                  s3 += i3;
                  continue;
                }
                if (r3.POINT.test(i3)) {
                  s3 += i3, a3 = 2;
                  continue;
                }
                if (r3.EXP.test(i3)) {
                  a3 = 3;
                  continue;
                }
                r3.SIGN.test(i3) && s3.length === 1 && r3.SIGN.test(s3[0]) && u2(i3, p2, c2);
              }
              if (a3 === 2) {
                if (r3.DIGIT.test(i3)) {
                  s3 += i3;
                  continue;
                }
                if (r3.EXP.test(i3)) {
                  a3 = 3;
                  continue;
                }
                r3.POINT.test(i3) && s3[s3.length - 1] === "." && u2(i3, p2, c2);
              }
              if (a3 === 3) {
                if (r3.DIGIT.test(i3)) {
                  l3 += i3;
                  continue;
                }
                if (r3.SIGN.test(i3)) {
                  if (l3 === "") {
                    l3 += i3;
                    continue;
                  }
                  l3.length === 1 && r3.SIGN.test(l3) && u2(i3, p2, c2);
                }
              }
              r3.WHITESPACE.test(i3) ? (h2(), a3 = 0, o2 = false) : r3.COMMA.test(i3) ? (h2(), o2 = !(a3 = 0)) : r3.SIGN.test(i3) ? (h2(), a3 = 1, s3 = i3) : r3.POINT.test(i3) ? (h2(), a3 = 2, s3 = i3) : u2(i3, p2, c2);
            }
          return h2(), c2;
        }
        var l2 = ["mm", "cm", "in", "pt", "pc", "px"], c = { mm: { mm: 1, cm: 0.1, in: 1 / 25.4, pt: 72 / 25.4, pc: 6 / 25.4, px: -1 }, cm: { mm: 10, cm: 1, in: 1 / 2.54, pt: 72 / 2.54, pc: 6 / 2.54, px: -1 }, in: { mm: 25.4, cm: 2.54, in: 1, pt: 72, pc: 6, px: -1 }, pt: { mm: 25.4 / 72, cm: 2.54 / 72, in: 1 / 72, pt: 1, pc: 6 / 72, px: -1 }, pc: { mm: 25.4 / 6, cm: 2.54 / 6, in: 1 / 6, pt: 12, pc: 1, px: -1 }, px: { px: 1 } };
        function u(t3) {
          var n3 = "px";
          if (typeof t3 == "string" || t3 instanceof String)
            for (var i3 = 0, r3 = l2.length; i3 < r3; i3++) {
              var a3 = l2[i3];
              if (t3.endsWith(a3)) {
                n3 = a3, t3 = t3.substring(0, t3.length - a3.length);
                break;
              }
            }
          var o2 = void 0;
          return n3 === "px" && e2.defaultUnit !== "px" ? o2 = c.in[e2.defaultUnit] / e2.defaultDPI : (o2 = c[n3][e2.defaultUnit]) < 0 && (o2 = c[n3].in * e2.defaultDPI), o2 * parseFloat(t3);
        }
        var h = [], d = {}, p = [], f = new o.Matrix3(), m = new o.Matrix3(), g = new o.Matrix3(), v = new o.Matrix3(), y = new o.Vector2(), x = new o.Vector3(), b = new o.Matrix3(), w = new DOMParser().parseFromString(t2, "image/svg+xml");
        return function t3(e3, i3) {
          if (e3.nodeType === 1) {
            var l3, c2, w2, M, _5, S, C, T, E, D, A, O, L = function(t4) {
              if (!(t4.hasAttribute("transform") || t4.nodeName === "use" && (t4.hasAttribute("x") || t4.hasAttribute("y"))))
                return null;
              var e4 = function(t5) {
                var e5 = new o.Matrix3(), n3 = f;
                if (t5.nodeName === "use" && (t5.hasAttribute("x") || t5.hasAttribute("y"))) {
                  var i4 = u(t5.getAttribute("x")), r3 = u(t5.getAttribute("y"));
                  e5.translate(i4, r3);
                }
                if (t5.hasAttribute("transform"))
                  for (var a3 = t5.getAttribute("transform").split(")"), l4 = a3.length - 1; 0 <= l4; l4--) {
                    var c3 = a3[l4].trim();
                    if (c3 !== "") {
                      var h2 = c3.indexOf("("), d2 = c3.length;
                      if (0 < h2 && h2 < d2) {
                        var p2 = c3.substr(0, h2), y2 = s2(c3.substr(h2 + 1, d2 - h2 - 1));
                        switch (n3.identity(), p2) {
                          case "translate":
                            1 <= y2.length && (r3 = i4 = y2[0], 2 <= y2.length && (r3 = y2[1]), n3.translate(i4, r3));
                            break;
                          case "rotate":
                            if (1 <= y2.length) {
                              var x2, b2 = 0, w3 = 0;
                              x2 = -y2[0] * Math.PI / 180, 3 <= y2.length && (b2 = y2[1], w3 = y2[2]), m.identity().translate(-b2, -w3), g.identity().rotate(x2), v.multiplyMatrices(g, m), m.identity().translate(b2, w3), n3.multiplyMatrices(m, v);
                            }
                            break;
                          case "scale":
                            if (1 <= y2.length) {
                              var M2 = y2[0], _6 = M2;
                              2 <= y2.length && (_6 = y2[1]), n3.scale(M2, _6);
                            }
                            break;
                          case "skewX":
                            y2.length === 1 && n3.set(1, Math.tan(y2[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);
                            break;
                          case "skewY":
                            y2.length === 1 && n3.set(1, 0, 0, Math.tan(y2[0] * Math.PI / 180), 1, 0, 0, 0, 1);
                            break;
                          case "matrix":
                            y2.length === 6 && n3.set(y2[0], y2[2], y2[4], y2[1], y2[3], y2[5], 0, 0, 1);
                        }
                      }
                      e5.premultiply(n3);
                    }
                  }
                return e5;
              }(t4);
              return 0 < p.length && e4.premultiply(p[p.length - 1]), b.copy(e4), p.push(e4), e4;
            }(e3), I = true, P = null;
            switch (e3.nodeName) {
              case "svg":
                break;
              case "style":
                !function(t4) {
                  if (t4.sheet && t4.sheet.cssRules && t4.sheet.cssRules.length)
                    for (var e4 = 0; e4 < t4.sheet.cssRules.length; e4++) {
                      var n3 = t4.sheet.cssRules[e4];
                      if (n3.type === 1)
                        for (var i4 = n3.selectorText.split(/,/gm).filter(Boolean).map(function(t5) {
                          return t5.trim();
                        }), r3 = 0; r3 < i4.length; r3++)
                          d[i4[r3]] = Object.assign(d[i4[r3]] || {}, n3.style);
                    }
                }(e3);
                break;
              case "g":
                i3 = r2(e3, i3);
                break;
              case "path":
                i3 = r2(e3, i3), e3.hasAttribute("d") && (P = function(t4) {
                  for (var e4 = new o.ShapePath(), i4 = new o.Vector2(), r3 = new o.Vector2(), l4 = new o.Vector2(), c3 = true, u2 = false, h2 = t4.getAttribute("d").match(/[a-df-z][^a-df-z]*/gi), d2 = 0, p2 = h2.length; d2 < p2; d2++) {
                    var f2 = h2[d2], m2 = f2.charAt(0), g2 = f2.substr(1).trim();
                    c3 === true && (c3 = !(u2 = true));
                    var v2 = void 0;
                    switch (m2) {
                      case "M":
                        for (var y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 2)
                          i4.x = v2[y2 + 0], i4.y = v2[y2 + 1], r3.x = i4.x, r3.y = i4.y, y2 === 0 ? e4.moveTo(i4.x, i4.y) : e4.lineTo(i4.x, i4.y), y2 === 0 && l4.copy(i4);
                        break;
                      case "H":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2++)
                          i4.x = v2[y2], r3.x = i4.x, r3.y = i4.y, e4.lineTo(i4.x, i4.y), y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "V":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2++)
                          i4.y = v2[y2], r3.x = i4.x, r3.y = i4.y, e4.lineTo(i4.x, i4.y), y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "L":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 2)
                          i4.x = v2[y2 + 0], i4.y = v2[y2 + 1], r3.x = i4.x, r3.y = i4.y, e4.lineTo(i4.x, i4.y), y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "C":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 6)
                          e4.bezierCurveTo(v2[y2 + 0], v2[y2 + 1], v2[y2 + 2], v2[y2 + 3], v2[y2 + 4], v2[y2 + 5]), r3.x = v2[y2 + 2], r3.y = v2[y2 + 3], i4.x = v2[y2 + 4], i4.y = v2[y2 + 5], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "S":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 4)
                          e4.bezierCurveTo(a2(i4.x, r3.x), a2(i4.y, r3.y), v2[y2 + 0], v2[y2 + 1], v2[y2 + 2], v2[y2 + 3]), r3.x = v2[y2 + 0], r3.y = v2[y2 + 1], i4.x = v2[y2 + 2], i4.y = v2[y2 + 3], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "Q":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 4)
                          e4.quadraticCurveTo(v2[y2 + 0], v2[y2 + 1], v2[y2 + 2], v2[y2 + 3]), r3.x = v2[y2 + 0], r3.y = v2[y2 + 1], i4.x = v2[y2 + 2], i4.y = v2[y2 + 3], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "T":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 2) {
                          var b2 = a2(i4.x, r3.x), w3 = a2(i4.y, r3.y);
                          e4.quadraticCurveTo(b2, w3, v2[y2 + 0], v2[y2 + 1]), r3.x = b2, r3.y = w3, i4.x = v2[y2 + 0], i4.y = v2[y2 + 1], y2 === 0 && u2 === true && l4.copy(i4);
                        }
                        break;
                      case "A":
                        for (y2 = 0, x2 = (v2 = s2(g2, [3, 4], 7)).length; y2 < x2; y2 += 7)
                          if (v2[y2 + 5] != i4.x || v2[y2 + 6] != i4.y) {
                            var M2 = i4.clone();
                            i4.x = v2[y2 + 5], i4.y = v2[y2 + 6], r3.x = i4.x, r3.y = i4.y, n2(e4, v2[y2], v2[y2 + 1], v2[y2 + 2], v2[y2 + 3], v2[y2 + 4], M2, i4), y2 === 0 && u2 === true && l4.copy(i4);
                          }
                        break;
                      case "m":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 2)
                          i4.x += v2[y2 + 0], i4.y += v2[y2 + 1], r3.x = i4.x, r3.y = i4.y, y2 === 0 ? e4.moveTo(i4.x, i4.y) : e4.lineTo(i4.x, i4.y), y2 === 0 && l4.copy(i4);
                        break;
                      case "h":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2++)
                          i4.x += v2[y2], r3.x = i4.x, r3.y = i4.y, e4.lineTo(i4.x, i4.y), y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "v":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2++)
                          i4.y += v2[y2], r3.x = i4.x, r3.y = i4.y, e4.lineTo(i4.x, i4.y), y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "l":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 2)
                          i4.x += v2[y2 + 0], i4.y += v2[y2 + 1], r3.x = i4.x, r3.y = i4.y, e4.lineTo(i4.x, i4.y), y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "c":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 6)
                          e4.bezierCurveTo(i4.x + v2[y2 + 0], i4.y + v2[y2 + 1], i4.x + v2[y2 + 2], i4.y + v2[y2 + 3], i4.x + v2[y2 + 4], i4.y + v2[y2 + 5]), r3.x = i4.x + v2[y2 + 2], r3.y = i4.y + v2[y2 + 3], i4.x += v2[y2 + 4], i4.y += v2[y2 + 5], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "s":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 4)
                          e4.bezierCurveTo(a2(i4.x, r3.x), a2(i4.y, r3.y), i4.x + v2[y2 + 0], i4.y + v2[y2 + 1], i4.x + v2[y2 + 2], i4.y + v2[y2 + 3]), r3.x = i4.x + v2[y2 + 0], r3.y = i4.y + v2[y2 + 1], i4.x += v2[y2 + 2], i4.y += v2[y2 + 3], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "q":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 4)
                          e4.quadraticCurveTo(i4.x + v2[y2 + 0], i4.y + v2[y2 + 1], i4.x + v2[y2 + 2], i4.y + v2[y2 + 3]), r3.x = i4.x + v2[y2 + 0], r3.y = i4.y + v2[y2 + 1], i4.x += v2[y2 + 2], i4.y += v2[y2 + 3], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "t":
                        for (y2 = 0, x2 = (v2 = s2(g2)).length; y2 < x2; y2 += 2)
                          b2 = a2(i4.x, r3.x), w3 = a2(i4.y, r3.y), e4.quadraticCurveTo(b2, w3, i4.x + v2[y2 + 0], i4.y + v2[y2 + 1]), r3.x = b2, r3.y = w3, i4.x = i4.x + v2[y2 + 0], i4.y = i4.y + v2[y2 + 1], y2 === 0 && u2 === true && l4.copy(i4);
                        break;
                      case "a":
                        for (y2 = 0, x2 = (v2 = s2(g2, [3, 4], 7)).length; y2 < x2; y2 += 7)
                          v2[y2 + 5] == 0 && v2[y2 + 6] == 0 || (M2 = i4.clone(), i4.x += v2[y2 + 5], i4.y += v2[y2 + 6], r3.x = i4.x, r3.y = i4.y, n2(e4, v2[y2], v2[y2 + 1], v2[y2 + 2], v2[y2 + 3], v2[y2 + 4], M2, i4), y2 === 0 && u2 === true && l4.copy(i4));
                        break;
                      case "Z":
                      case "z":
                        e4.currentPath.autoClose = true, 0 < e4.currentPath.curves.length && (i4.copy(l4), e4.currentPath.currentPoint.copy(i4), c3 = true);
                        break;
                      default:
                        console.warn(f2);
                    }
                    u2 = false;
                  }
                  return e4;
                }(e3));
                break;
              case "rect":
                i3 = r2(e3, i3), P = function(t4) {
                  var e4 = u(t4.getAttribute("x") || 0), n3 = u(t4.getAttribute("y") || 0), i4 = u(t4.getAttribute("rx") || t4.getAttribute("ry") || 0), r3 = u(t4.getAttribute("ry") || t4.getAttribute("rx") || 0), a3 = u(t4.getAttribute("width")), s3 = u(t4.getAttribute("height")), l4 = 0.448084975506, c3 = new o.ShapePath();
                  return c3.moveTo(e4 + i4, n3), c3.lineTo(e4 + a3 - i4, n3), i4 === 0 && r3 === 0 || c3.bezierCurveTo(e4 + a3 - i4 * l4, n3, e4 + a3, n3 + r3 * l4, e4 + a3, n3 + r3), c3.lineTo(e4 + a3, n3 + s3 - r3), i4 === 0 && r3 === 0 || c3.bezierCurveTo(e4 + a3, n3 + s3 - r3 * l4, e4 + a3 - i4 * l4, n3 + s3, e4 + a3 - i4, n3 + s3), c3.lineTo(e4 + i4, n3 + s3), i4 === 0 && r3 === 0 || c3.bezierCurveTo(e4 + i4 * l4, n3 + s3, e4, n3 + s3 - r3 * l4, e4, n3 + s3 - r3), c3.lineTo(e4, n3 + r3), i4 === 0 && r3 === 0 || c3.bezierCurveTo(e4, n3 + r3 * l4, e4 + i4 * l4, n3, e4 + i4, n3), c3;
                }(e3);
                break;
              case "polygon":
                i3 = r2(e3, i3), D = e3, A = new o.ShapePath(), O = 0, D.getAttribute("points").replace(/(-?[\d\.?]+)[,|\s](-?[\d\.?]+)/g, function(t4, e4, n3) {
                  var i4 = u(e4), r3 = u(n3);
                  O === 0 ? A.moveTo(i4, r3) : A.lineTo(i4, r3), O++;
                }), A.currentPath.autoClose = true, P = A;
                break;
              case "polyline":
                i3 = r2(e3, i3), C = e3, T = new o.ShapePath(), E = 0, C.getAttribute("points").replace(/(-?[\d\.?]+)[,|\s](-?[\d\.?]+)/g, function(t4, e4, n3) {
                  var i4 = u(e4), r3 = u(n3);
                  E === 0 ? T.moveTo(i4, r3) : T.lineTo(i4, r3), E++;
                }), T.currentPath.autoClose = false, P = T;
                break;
              case "circle":
                i3 = r2(e3, i3), P = function(t4) {
                  var e4 = u(t4.getAttribute("cx") || 0), n3 = u(t4.getAttribute("cy") || 0), i4 = u(t4.getAttribute("r") || 0), r3 = new o.Path();
                  r3.absarc(e4, n3, i4, 0, 2 * Math.PI, false);
                  var a3 = new o.ShapePath();
                  return a3.subPaths.push(r3), a3;
                }(e3);
                break;
              case "ellipse":
                i3 = r2(e3, i3), P = function(t4) {
                  var e4 = u(t4.getAttribute("cx") || 0), n3 = u(t4.getAttribute("cy") || 0), i4 = u(t4.getAttribute("rx") || 0), r3 = u(t4.getAttribute("ry") || 0), a3 = new o.Path();
                  a3.absellipse(e4, n3, i4, r3, 0, 2 * Math.PI, void 0, void 0);
                  var s3 = new o.ShapePath();
                  return s3.subPaths.push(a3), s3;
                }(e3);
                break;
              case "line":
                i3 = r2(e3, i3), c2 = u((l3 = e3).getAttribute("x1") || 0), w2 = u(l3.getAttribute("y1") || 0), M = u(l3.getAttribute("x2") || 0), _5 = u(l3.getAttribute("y2") || 0), (S = new o.ShapePath()).moveTo(c2, w2), S.lineTo(M, _5), S.currentPath.autoClose = false, P = S;
                break;
              case "defs":
                I = false;
                break;
              case "use":
                i3 = r2(e3, i3);
                var R = e3.href.baseVal.substring(1), k = e3.viewportElement.getElementById(R);
                k ? t3(k, i3) : console.warn("SVGLoader: 'use node' references non-existent node id: " + R);
            }
            if (P && (i3.fill !== void 0 && i3.fill !== "none" && P.color.setStyle(i3.fill), function(t4, e4) {
              function n3(t5) {
                x.set(t5.x, t5.y, 1).applyMatrix3(e4), t5.set(x.x, x.y);
              }
              for (var i4 = function(t5) {
                return t5.elements[1] !== 0 || t5.elements[3] !== 0;
              }(e4), r3 = t4.subPaths, a3 = 0, o2 = r3.length; a3 < o2; a3++)
                for (var s3 = r3[a3].curves, l4 = 0; l4 < s3.length; l4++) {
                  var c3 = s3[l4];
                  c3.isLineCurve ? (n3(c3.v1), n3(c3.v2)) : c3.isCubicBezierCurve ? (n3(c3.v0), n3(c3.v1), n3(c3.v2), n3(c3.v3)) : c3.isQuadraticBezierCurve ? (n3(c3.v0), n3(c3.v1), n3(c3.v2)) : c3.isEllipseCurve && (i4 && console.warn("SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented."), y.set(c3.aX, c3.aY), n3(y), c3.aX = y.x, c3.aY = y.y, c3.xRadius *= (h2 = e4.elements, Math.sqrt(h2[0] * h2[0] + h2[1] * h2[1])), c3.yRadius *= (u2 = e4.elements, Math.sqrt(u2[3] * u2[3] + u2[4] * u2[4])));
                }
              var u2, h2;
            }(P, b), h.push(P), P.userData = { node: e3, style: i3 }), I)
              for (var B = e3.childNodes, N = 0; N < B.length; N++)
                t3(B[N], i3);
            L && (p.pop(), 0 < p.length ? b.copy(p[p.length - 1]) : b.identity());
          }
        }(w.documentElement, { fill: "#000", fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, strokeLineJoin: "miter", strokeLineCap: "butt", strokeMiterLimit: 4 }), { paths: h, xml: w.documentElement };
      }, l.createShapes = function(t2) {
        var e2 = 999999999, n2 = { ORIGIN: 0, DESTINATION: 1, BETWEEN: 2, LEFT: 3, RIGHT: 4, BEHIND: 5, BEYOND: 6 }, i2 = { loc: n2.ORIGIN, t: 0 };
        function r2(t3, e3, r3, o2) {
          var s3 = t3.x, l3 = e3.x, c2 = r3.x, u2 = o2.x, h2 = t3.y, d2 = e3.y, p2 = r3.y, f = o2.y, m = (u2 - c2) * (h2 - p2) - (f - p2) * (s3 - c2), g = (f - p2) * (l3 - s3) - (u2 - c2) * (d2 - h2), v = m / g, y = ((l3 - s3) * (h2 - p2) - (d2 - h2) * (s3 - c2)) / g;
          if (g == 0 && m != 0 || v <= 0 || 1 <= v || y < 0 || 1 < y)
            return null;
          if (m == 0 && g == 0) {
            for (var x = 0; x < 2; x++) {
              if (a2(x === 0 ? r3 : o2, t3, e3), i2.loc == n2.ORIGIN)
                return { x: (b = x === 0 ? r3 : o2).x, y: b.y, t: i2.t };
              if (i2.loc == n2.BETWEEN)
                return { x: +(s3 + i2.t * (l3 - s3)).toPrecision(10), y: +(h2 + i2.t * (d2 - h2)).toPrecision(10), t: i2.t };
            }
            return null;
          }
          for (x = 0; x < 2; x++) {
            var b;
            if (a2(x === 0 ? r3 : o2, t3, e3), i2.loc == n2.ORIGIN)
              return { x: (b = x === 0 ? r3 : o2).x, y: b.y, t: i2.t };
          }
          return { x: +(s3 + v * (l3 - s3)).toPrecision(10), y: +(h2 + v * (d2 - h2)).toPrecision(10), t: v };
        }
        function a2(t3, e3, r3) {
          var a3, o2 = r3.x - e3.x, s3 = r3.y - e3.y, l3 = t3.x - e3.x, c2 = t3.y - e3.y, u2 = o2 * c2 - l3 * s3;
          return t3.x === e3.x && t3.y === e3.y ? (i2.loc = n2.ORIGIN, i2.t = 0) : t3.x === r3.x && t3.y === r3.y ? (i2.loc = n2.DESTINATION, i2.t = 1, 0) : void (u2 < -Number.EPSILON ? i2.loc = n2.LEFT : u2 > Number.EPSILON ? i2.loc = n2.RIGHT : o2 * l3 < 0 || s3 * c2 < 0 ? i2.loc = n2.BEHIND : Math.sqrt(o2 * o2 + s3 * s3) < Math.sqrt(l3 * l3 + c2 * c2) ? i2.loc = n2.BEYOND : (a3 = o2 != 0 ? l3 / o2 : c2 / s3, i2.loc = n2.BETWEEN, i2.t = a3));
        }
        function s2(t3, e3, n3) {
          var i3 = new o.Vector2();
          e3.getCenter(i3);
          var a3 = [];
          return n3.forEach(function(e4) {
            e4.boundingBox.containsPoint(i3) && function(t4, e5) {
              for (var n4 = [], i4 = [], a4 = 1; a4 < t4.length; a4++)
                for (var s3 = t4[a4 - 1], l3 = t4[a4], c2 = function(t5) {
                  var a5 = e5[t5 - 1], c3 = e5[t5], u3 = r2(s3, l3, a5, c3);
                  u3 !== null && n4.find(function(t6) {
                    return t6.t <= u3.t + Number.EPSILON && t6.t >= u3.t - Number.EPSILON;
                  }) === void 0 && (n4.push(u3), i4.push(new o.Vector2(u3.x, u3.y)));
                }, u2 = 1; u2 < e5.length; u2++)
                  c2(u2);
              return i4;
            }(t3, e4.points).forEach(function(t4) {
              a3.push({ identifier: e4.identifier, isCW: e4.isCW, point: t4 });
            });
          }), a3.sort(function(t4, e4) {
            return t4.point.x - e4.point.x;
          }), a3;
        }
        var l2 = 0, c = e2, u = -e2, h = t2.subPaths.map(function(t3) {
          for (var n3 = t3.getPoints(), i3 = -e2, r3 = e2, a3 = -e2, s3 = e2, h2 = 0; h2 < n3.length; h2++) {
            var d2 = n3[h2];
            d2.y > i3 && (i3 = d2.y), d2.y < r3 && (r3 = d2.y), d2.x > a3 && (a3 = d2.x), d2.x < s3 && (s3 = d2.x);
          }
          return u <= a3 && (u = a3 + 1), s3 <= c && (c = s3 - 1), { curves: t3.curves, points: n3, isCW: o.ShapeUtils.isClockWise(n3), identifier: l2++, boundingBox: new o.Box2(new o.Vector2(s3, r3), new o.Vector2(a3, i3)) };
        });
        h = h.filter(function(t3) {
          return 1 < t3.points.length;
        }), l2 = 0;
        var d = (h = h.map(function(t3) {
          return t3.identifier = l2, l2++, t3;
        })).map(function(e3) {
          return function(t3, e4, n3, i3, r3) {
            r3 != null && r3 !== "" || (r3 = "nonzero");
            var a3 = new o.Vector2();
            t3.boundingBox.getCenter(a3);
            var l3 = s2([new o.Vector2(n3, a3.y), new o.Vector2(i3, a3.y)], t3.boundingBox, e4);
            l3.sort(function(t4, e5) {
              return t4.point.x - e5.point.x;
            });
            var c2 = [], u2 = [];
            l3.forEach(function(e5) {
              e5.identifier === t3.identifier ? c2.push(e5) : u2.push(e5);
            });
            for (var h2 = c2[0].point.x, d2 = [], p2 = 0; p2 < u2.length && u2[p2].point.x < h2; )
              0 < d2.length && d2[d2.length - 1] === u2[p2].identifier ? d2.pop() : d2.push(u2[p2].identifier), p2++;
            if (d2.push(t3.identifier), r3 === "evenodd") {
              var f = d2.length % 2 == 0, m = d2[d2.length - 2];
              return { identifier: t3.identifier, isHole: f, for: m };
            }
            if (r3 === "nonzero") {
              f = true;
              for (var g = m = null, v = 0; v < d2.length; v++) {
                var y = d2[v];
                f ? (g = e4[y].isCW, f = false, m = y) : g !== e4[y].isCW && (g = e4[y].isCW, f = true);
              }
              return { identifier: t3.identifier, isHole: f, for: m };
            }
            console.warn('fill-rule: "' + r3 + '" is currently not implemented.');
          }(e3, h, c, u, t2.userData.style.fillRule);
        }), p = [];
        return h.forEach(function(t3) {
          if (!d[t3.identifier].isHole) {
            var e3 = new o.Shape();
            e3.curves = t3.curves, d.filter(function(e4) {
              return e4.isHole && e4.for === t3.identifier;
            }).forEach(function(t4) {
              var n3 = h[t4.identifier], i3 = new o.Path();
              i3.curves = n3.curves, e3.holes.push(i3);
            }), p.push(e3);
          }
        }), p;
      }, l.getStrokeStyle = function(t2, e2, n2, i2, r2) {
        return { strokeColor: e2 = e2 !== void 0 ? e2 : "#000", strokeWidth: t2 = t2 !== void 0 ? t2 : 1, strokeLineJoin: n2 = n2 !== void 0 ? n2 : "miter", strokeLineCap: i2 = i2 !== void 0 ? i2 : "butt", strokeMiterLimit: r2 = r2 !== void 0 ? r2 : 4 };
      }, l.pointsToStroke = function(t2, e2, n2, i2) {
        var r2 = [], a2 = [], s2 = [];
        if (l.pointsToStrokeWithBuffers(t2, e2, n2, i2, r2, a2, s2) === 0)
          return null;
        var c = new o.BufferGeometry();
        return c.setAttribute("position", new o.Float32BufferAttribute(r2, 3)), c.setAttribute("normal", new o.Float32BufferAttribute(a2, 3)), c.setAttribute("uv", new o.Float32BufferAttribute(s2, 2)), c;
      }, l.pointsToStrokeWithBuffers = function(t2, e2, n2, i2, r2, a2, s2, l2) {
        var c = new o.Vector2(), u = new o.Vector2(), h = new o.Vector2(), d = new o.Vector2(), p = new o.Vector2(), f = new o.Vector2(), m = new o.Vector2(), g = new o.Vector2(), v = new o.Vector2(), y = new o.Vector2(), x = new o.Vector2(), b = new o.Vector2(), w = new o.Vector2(), M = new o.Vector2(), _5 = new o.Vector2(), S = new o.Vector2(), C = new o.Vector2();
        n2 = n2 !== void 0 ? n2 : 12, i2 = i2 !== void 0 ? i2 : 1e-3, l2 = l2 !== void 0 ? l2 : 0;
        var T = (t2 = function(t3) {
          for (var e3 = false, n3 = 1, r3 = t3.length - 1; n3 < r3; n3++)
            if (t3[n3].distanceTo(t3[n3 + 1]) < i2) {
              e3 = true;
              break;
            }
          if (!e3)
            return t3;
          var a3 = [];
          for (a3.push(t3[0]), n3 = 1, r3 = t3.length - 1; n3 < r3; n3++)
            t3[n3].distanceTo(t3[n3 + 1]) >= i2 && a3.push(t3[n3]);
          return a3.push(t3[t3.length - 1]), a3;
        }(t2)).length;
        if (T < 2)
          return 0;
        var E, D, A, O, L, I, P = t2[0].equals(t2[T - 1]), R = t2[0], k = e2.strokeWidth / 2, B = 1 / (T - 1), N = 0, F = false, j = 0, V = 3 * l2, z = 2 * l2;
        K(t2[0], t2[1], c).multiplyScalar(k), g.copy(t2[0]).sub(c), v.copy(t2[0]).add(c), y.copy(g), x.copy(v);
        for (var G = 1; G < T; G++) {
          E = t2[G], D = G === T - 1 ? P ? t2[1] : void 0 : t2[G + 1];
          var U = c;
          if (K(R, E, U), h.copy(U).multiplyScalar(k), b.copy(E).sub(h), w.copy(E).add(h), A = N + B, O = false, D !== void 0) {
            K(E, D, u), h.copy(u).multiplyScalar(k), M.copy(E).sub(h), _5.copy(E).add(h), L = true, h.subVectors(D, R), U.dot(h) < 0 && (L = false), G === 1 && (F = L), h.subVectors(D, E), h.normalize();
            var H = Math.abs(U.dot(h));
            if (H !== 0) {
              var W = k / H;
              h.multiplyScalar(-W), d.subVectors(E, R), p.copy(d).setLength(W).add(h), S.copy(p).negate();
              var J = p.length(), q = d.length();
              d.divideScalar(q), f.subVectors(D, E);
              var X = f.length();
              switch (f.divideScalar(X), d.dot(S) < q && f.dot(S) < X && (O = true), C.copy(p).add(E), S.add(E), I = false, O ? L ? (_5.copy(S), w.copy(S)) : (M.copy(S), b.copy(S)) : et(), e2.strokeLineJoin) {
                case "bevel":
                  nt(L, O, A);
                  break;
                case "round":
                  it(L, O), L ? tt(E, b, M, A, 0) : tt(E, _5, w, A, 1);
                  break;
                case "miter":
                case "miter-clip":
                default:
                  var Y = k * e2.strokeMiterLimit / J;
                  if (Y < 1) {
                    if (e2.strokeLineJoin !== "miter-clip") {
                      nt(L, O, A);
                      break;
                    }
                    it(L, O), L ? (f.subVectors(C, b).multiplyScalar(Y).add(b), m.subVectors(C, M).multiplyScalar(Y).add(M), Q(b, A, 0), Q(f, A, 0), Q(E, A, 0.5), Q(E, A, 0.5), Q(f, A, 0), Q(m, A, 0), Q(E, A, 0.5), Q(m, A, 0), Q(M, A, 0)) : (f.subVectors(C, w).multiplyScalar(Y).add(w), m.subVectors(C, _5).multiplyScalar(Y).add(_5), Q(w, A, 1), Q(f, A, 1), Q(E, A, 0.5), Q(E, A, 0.5), Q(f, A, 1), Q(m, A, 1), Q(E, A, 0.5), Q(m, A, 1), Q(_5, A, 1));
                  } else
                    O ? (L ? (Q(v, N, 1), Q(g, N, 0), Q(C, A, 0), Q(v, N, 1), Q(C, A, 0), Q(S, A, 1)) : (Q(v, N, 1), Q(g, N, 0), Q(C, A, 1), Q(g, N, 0), Q(S, A, 0), Q(C, A, 1)), L ? M.copy(C) : _5.copy(C)) : L ? (Q(b, A, 0), Q(C, A, 0), Q(E, A, 0.5), Q(E, A, 0.5), Q(C, A, 0), Q(M, A, 0)) : (Q(w, A, 1), Q(C, A, 1), Q(E, A, 0.5), Q(E, A, 0.5), Q(C, A, 1), Q(_5, A, 1)), I = true;
              }
            } else
              et();
          } else
            et();
          P || G !== T - 1 || rt(t2[0], y, x, L, true, N), N = A, R = E, g.copy(M), v.copy(_5);
        }
        if (P) {
          if (O && r2) {
            var Z = C, $2 = S;
            F !== L && (Z = S, $2 = C), L ? (I || F) && ($2.toArray(r2, 0), $2.toArray(r2, 9), I && Z.toArray(r2, 3)) : !I && F || ($2.toArray(r2, 3), $2.toArray(r2, 9), I && Z.toArray(r2, 0));
          }
        } else
          rt(E, b, w, L, false, A);
        return j;
        function K(t3, e3, n3) {
          return n3.subVectors(e3, t3), n3.set(-n3.y, n3.x).normalize();
        }
        function Q(t3, e3, n3) {
          r2 && (r2[V] = t3.x, r2[V + 1] = t3.y, r2[V + 2] = 0, a2 && (a2[V] = 0, a2[V + 1] = 0, a2[V + 2] = 1), V += 3, s2 && (s2[z] = e3, s2[z + 1] = n3, z += 2)), j += 3;
        }
        function tt(t3, e3, i3, r3, a3) {
          c.copy(e3).sub(t3).normalize(), u.copy(i3).sub(t3).normalize();
          var o2 = Math.PI, s3 = c.dot(u);
          Math.abs(s3) < 1 && (o2 = Math.abs(Math.acos(s3))), o2 /= n2, h.copy(e3);
          for (var l3 = 0, p2 = n2 - 1; l3 < p2; l3++)
            d.copy(h).rotateAround(t3, o2), Q(h, r3, a3), Q(d, r3, a3), Q(t3, r3, 0.5), h.copy(d);
          Q(d, r3, a3), Q(i3, r3, a3), Q(t3, r3, 0.5);
        }
        function et() {
          Q(v, N, 1), Q(g, N, 0), Q(b, A, 0), Q(v, N, 1), Q(b, A, 1), Q(w, A, 0);
        }
        function nt(t3, e3, n3) {
          e3 ? (t3 ? (Q(v, N, 1), Q(g, N, 0), Q(b, A, 0), Q(v, N, 1), Q(b, A, 0), Q(S, A, 1), Q(b, n3, 0), Q(M, n3, 0)) : (Q(v, N, 1), Q(g, N, 0), Q(w, A, 1), Q(g, N, 0), Q(S, A, 0), Q(w, A, 1), Q(w, n3, 1), Q(_5, n3, 0)), Q(S, n3, 0.5)) : (t3 ? (Q(b, n3, 0), Q(M, n3, 0)) : (Q(w, n3, 1), Q(_5, n3, 0)), Q(E, n3, 0.5));
        }
        function it(t3, e3) {
          e3 && (t3 ? (Q(v, N, 1), Q(g, N, 0), Q(b, A, 0), Q(v, N, 1), Q(b, A, 0), Q(S, A, 1), Q(b, N, 0), Q(E, A, 0.5), Q(S, A, 1), Q(E, A, 0.5), Q(M, N, 0), Q(S, A, 1)) : (Q(v, N, 1), Q(g, N, 0), Q(w, A, 1), Q(g, N, 0), Q(S, A, 0), Q(w, A, 1), Q(w, N, 1), Q(S, A, 0), Q(E, A, 0.5), Q(E, A, 0.5), Q(S, A, 0), Q(_5, N, 1)));
        }
        function rt(t3, n3, i3, a3, o2, s3) {
          switch (e2.strokeLineCap) {
            case "round":
              o2 ? tt(t3, i3, n3, s3, 0.5) : tt(t3, n3, i3, s3, 0.5);
              break;
            case "square":
              if (o2)
                c.subVectors(n3, t3), u.set(c.y, -c.x), h.addVectors(c, u).add(t3), d.subVectors(u, c).add(t3), a3 ? (h.toArray(r2, 3), d.toArray(r2, 0), d.toArray(r2, 9)) : (h.toArray(r2, 3), h.toArray(r2, 9), d.toArray(r2, 0));
              else {
                c.subVectors(i3, t3), u.set(c.y, -c.x), h.addVectors(c, u).add(t3), d.subVectors(u, c).add(t3);
                var l3 = r2.length;
                a3 ? (h.toArray(r2, l3 - 3), d.toArray(r2, l3 - 6)) : (h.toArray(r2, l3 - 6), d.toArray(r2, l3 - 3)), d.toArray(r2, l3 - 12);
              }
          }
        }
      }, l);
      function l(t2) {
        var e2 = a.call(this, t2) || this;
        return e2.defaultDPI = 90, e2.defaultUnit = "px", e2;
      }
      n.SVGLoader = s;
    }, { three: 19 }], 63: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxTest = void 0;
      var a, o, s = t("../Operate/MrxDbgUiPrBase"), l = t("../Operate/MrxDbgUiPrPoint"), c = t("../MxThreeJS"), u = t("three"), h = t("../MxFun"), d = t("../View/MxDbEntity"), p = t("../MrxDbgUtils"), f = (r(m, a = d.MxDbEntityUserObject), m.prototype.worldDraw = function(t2) {
        var e2 = new u.Vector3(this.pt.x - this.r, this.pt.y - this.r, 0), n2 = new u.Vector3(this.pt.x + this.r, this.pt.y + this.r, 0), i2 = new u.Vector3(e2.x, n2.y), r2 = new u.Vector3(n2.x, e2.y), a2 = [];
        a2.push(e2), a2.push(n2), a2.push(i2), a2.push(r2), t2.setDashLineDisplay(true), t2.setDash(0.1, 0.2), t2.drawLine(r2, e2);
      }, m.prototype.setPoint = function(t2) {
        this.pt = t2;
      }, m.prototype.setR = function(t2) {
        this.r = t2;
      }, m.prototype.getTypeName = function() {
        return "MxDbTest";
      }, m.prototype.getGripPoints = function() {
        var t2 = [];
        return t2.push(this.pt), t2;
      }, m.prototype.moveGripPointsAt = function(t2, e2) {
        return t2 == 0 && this.pt.add(e2), true;
      }, m.prototype.dwgIn = function(t2) {
        return a.prototype.dwgIn.call(this, t2), this.pt.copy(t2.pt), this.r = t2.r, true;
      }, m.prototype.dwgOut = function(t2) {
        return a.prototype.dwgOut.call(this, t2), t2.pt = this.pt, t2.r = this.r, t2;
      }, m.prototype.create = function() {
        return new m();
      }, m);
      function m() {
        var t2 = a !== null && a.apply(this, arguments) || this;
        return t2.pt = new u.Vector3(), t2.r = 100, t2;
      }
      function g(t2) {
        var e2 = new l.MrxDbgUiPrPoint();
        e2.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), e2.go(function(t3) {
          if (t3 == 0) {
            var n2 = e2.value(), i2 = new u.Vector3();
            i2.x = n2.x, i2.y = n2.y;
            var r2 = new s.McEdGetPointWorldDrawObject();
            r2.setDraw(function(t4, e3) {
              e3.setColor(255), e3.drawLine(t4, i2);
            }), e2.setUserDraw(r2), e2.setMessage("\n\u6307\u5B9A\u4E0B\u4E00\u70B9:"), e2.go(function(t4) {
              if (t4 == 0) {
                var i3 = e2.value(), r3 = h.MxFun.getCurrentDraw(), a2 = c.MxThreeJS.createLine(n2, i3, 16777215);
                r3.addObject(a2);
              }
            });
          }
        });
      }
      function v() {
        var t2 = new l.MrxDbgUiPrPoint();
        t2.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:"), t2.go(function(e2) {
          if (e2 == 0) {
            var n2 = h.MxFun.getCurrentDraw(), i2 = new f();
            i2.setColor(16711680), i2.setPoint(t2.value()), i2.setR(n2.screenCoordLong2Doc(100)), n2.addMxEntity(i2), n2.addMxCurrentSelect(i2.objectId());
          }
        });
      }
      function y() {
        p.MrxDbgUtils.selectEnt("Test").then(function(t2) {
          console.log(t2);
        });
      }
      function x() {
        var t2 = h.MxFun.getCurrentDraw();
        o ? (t2.eraseAllMxEntity(), t2.loadMxEntityFromJson(o)) : (o = t2.saveMxEntityToJson(), console.log(o));
      }
      function b() {
        h.MxFun.openFile("demo/buf/hhhh.dwg?token=123456");
      }
      (n.MxTest || (n.MxTest = {})).registerCommand = function() {
        console.log("regist mx test"), new f().init(), h.MxFun.addCommand("MxTest_GetPoint", g), h.MxFun.addCommand("MxTest_DrawCustomEntity", v), h.MxFun.addCommand("MxTest_EntSel", y), h.MxFun.addCommand("MxTest_SaveMxDbEntityToJson", x), h.MxFun.addCommand("MxTest_OpenFile", b), h.MxFun.addWindowsEvent(function(t2, e2) {
          if (t2 == "mouseup") {
            if (h.MxFun.isRunningCommand())
              return 0;
            if (e2.button != 0)
              return 0;
            var n2 = e2.srcElement;
            if (n2 && n2.tagName == "CANVAS") {
              var i2 = h.MxFun.getCurrentDraw(), r2 = new u.Vector3(e2.offsetX, e2.offsetY, 0);
              i2.findMxEntityAtPoint(r2, false).length && e2.preventDefault();
            }
            return 0;
          }
        });
      };
    }, { "../MrxDbgUtils": 20, "../MxFun": 34, "../MxThreeJS": 44, "../Operate/MrxDbgUiPrBase": 51, "../Operate/MrxDbgUiPrPoint": 52, "../View/MxDbEntity": 71, three: 19 }], 64: [function(require, module, exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true }), exports.MxUiObject = exports.MxToolBarItem = exports.MxMenuItem = void 0;
      var MxFun_1 = require("../MxFun"), MxMenuItem = function() {
        this.id = -1, this.text = "", this.evalString = "", this.parentId = -1;
      };
      exports.MxMenuItem = MxMenuItem;
      var MxToolBarItem = function() {
        this.isMxCommand = false, this.itemid = "";
      };
      exports.MxToolBarItem = MxToolBarItem;
      var MxUiObject = function() {
        function MxUiObject() {
          this.vecMenuItem = new Array(), this.vecToolBarItem = new Array(), this.uiPath = "./ui", this.idMenuItemCount = 100, this.isShowTitle = false, this.isShowStructTree = false, this.isEnableLoading = true, this.isShowLayer = false, this.isShowTakeColor = false, this.isShowLayout = false, this.isEnableObjectProperty = false, this.isShowToolbar = false, this.isShowMainMenu = false, this.sTitle = "", this.sLanguageTable = { layout: "\u5E03\u5C40", layer: "\u56FE\u5C42", visible: "\u53EF\u89C1", color: "\u989C\u8272", name: "\u540D\u5B57", status: "\u72B6\u6001", openComplete: "\u63D0\u793A\uFF1A\u6253\u5F00\u56FE\u7EB8\u5B8C\u6210" };
        }
        return MxUiObject.prototype.SetLayoutData = function(t) {
          this.vecLayoutData = t;
        }, MxUiObject.prototype.CallMxCommand = function(t) {
          MxFun_1.MxFun.callCommand(t, "");
        }, MxUiObject.prototype.EvalJs = function(value) {
          eval(value);
        }, MxUiObject.prototype.SetLayerData = function(t) {
          this.vecLayerData = t;
        }, MxUiObject.prototype.SetSketchLayerData = function(t) {
          this.vecSketchLayerData = t;
        }, MxUiObject.prototype.init = function() {
          this.onInit();
        }, MxUiObject.prototype.addMenuItem = function(t, e, n, i) {
          e === void 0 && (e = ""), n === void 0 && (n = -1), i === void 0 && (i = -1);
          var r = new MxMenuItem();
          r.text = t, r.evalString = e, i == -1 && (i = this.idMenuItemCount, this.idMenuItemCount++), r.id = i, r.parentId = n, this.vecMenuItem.push(r);
        }, MxUiObject.prototype.addToolBarItem = function(t, e, n, i, r) {
          e === void 0 && (e = ""), n === void 0 && (n = ""), i === void 0 && (i = false), r === void 0 && (r = "");
          var a = new MxToolBarItem();
          a.image = t, a.evalString = n, a.text = e, a.isMxCommand = i, a.itemid = r, this.vecToolBarItem.push(a);
        }, MxUiObject.prototype.setPath = function(t) {
          this.uiPath = t;
        }, MxUiObject.prototype.getPath = function() {
          return this.uiPath;
        }, MxUiObject.prototype.create = function() {
          this.onCreate();
        }, MxUiObject.prototype.writeUICSS = function() {
          var t = this.uiPath;
          MxFun_1.MxFun.isPC() ? (document.write("<link rel='stylesheet' href='" + t + "/css/mxbimpcm.css'>"), this.isShowMainMenu && (document.write("<link rel='stylesheet' href='" + t + "/css/rightfacefonts2.css'>"), document.write("<link rel='stylesheet' href='" + t + "/css/rightmnu.css'>"), document.write("<script type='text/javascript' src='" + t + "/hc-mobile-nav.js'><\/script>"))) : (document.write("<link rel='stylesheet' href='" + t + "/css/mxmobile.css'>"), this.isShowMainMenu && (document.write("<link href='" + t + "/css/font-awesome.min.css' rel='stylesheet'>"), document.write("<link rel='stylesheet' href='" + t + "/css/rightfacefonts1.css'>"), document.write("<link rel='stylesheet' href='" + t + "/css/rightfacefonts2.css'>"), document.write("<link rel='stylesheet' href='" + t + "/css/rightmnu.css'>"), document.write("<script type='text/javascript' src='" + t + "/hc-mobile-nav.js'><\/script>")));
        }, MxUiObject;
      }();
      exports.MxUiObject = MxUiObject;
    }, { "../MxFun": 34 }], 65: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxUiObjectMobile = void 0;
      var a, o = t("./MxUiObject"), s = t("../MxFun"), l = (r(c, a = o.MxUiObject), c.prototype.onCreate = function() {
        this.isShowTitle && this.WriteTitle(), this.WriteStructTree(), this.isEnableLoading && this.WriteLoading(), this.WriteLayer(), this.WriteTakeColor(), this.WriteLayout(), this.isEnableObjectProperty && this.WriteObjectProperty(), this.isShowToolbar && this.WriteToolbar();
      }, c.prototype.onInit = function() {
        this.InitEvent();
      }, c.prototype.ShowLoading = function() {
        this.isEnableLoading && ($(".Prompt").css("background", "rgba(0, 0, 0, 0)"), $(".Prompt").fadeIn(100), $(".Prompt span").css("display", "none"));
      }, c.prototype.HideLoading = function() {
        this.isEnableLoading && ($(".Prompt").css("background", "rgba(0, 0, 0, 0.8)"), $(".Prompt div").fadeOut(100), $(".Prompt span").fadeIn(200), setTimeout(function() {
          $(".Prompt").fadeOut(1e3);
        }, 1e3));
      }, c.prototype.ShowObjectProperty = function(t2) {
        if (t2.length != 0) {
          var e2;
          e2 = typeof t2 == "string" ? JSON.parse(t2) : t2;
          var n2 = "";
          for (var i2 in e2) {
            var r2 = e2[i2];
            for (var a2 in n2 += '<tbody class="bf-group undefined bf-collapse">', n2 += '<tr class="bf-group-title">', n2 += '<td colspan="2"><i class="bf-icon" style=" padding: 12px;"></i>' + r2.name + "</td>", n2 += "</tr>", r2.datas) {
              var o2 = r2.datas[a2];
              n2 += "<tr class='bf-group-content'>", n2 += "<td class='bf-key'>" + o2.name + "</td>", n2 += "<td class='bf-value'>" + o2.value + "</td>", n2 += "</tr>";
            }
            n2 += "</tbody>";
          }
          document.getElementById("ComponentContent").innerHTML = n2, $(".bf-group").click(function() {
            $(this).hasClass("bf-collapse") ? $(this).removeClass("bf-collapse") : $(this).addClass("bf-collapse");
          });
        }
      }, c.prototype.HideObjectProp = function() {
      }, c.prototype.SwitchShowLayer = function() {
        var t2 = document.getElementById("LayerInterface");
        t2.style.display == "none" ? (t2.style.display = "block", t2.style.left = "80px", t2.style.top = "50px") : t2.style.display = "none";
      }, c.prototype.SwitchShowStructTree = function() {
      }, c.prototype.Chosecolor = function() {
        document.getElementById("color-picker").click();
      }, c.prototype.ColorChange = function(t2) {
        document.getElementById("colorbox").style.backgroundColor = t2, s.MxFun.setCurrentColor(t2);
      }, c.prototype.SwitchShowLayout = function() {
        var t2 = document.getElementById("LayerOutInterface");
        t2.style.display == "none" ? t2.style.display = "block" : t2.style.display = "none";
      }, c.prototype.WriteTitle = function() {
        var t2 = this.uiPath;
        document.write("<div class='bar1'>"), document.write("<img src='" + t2 + "/image/mxcad.png' style='height: 50%;position: absolute;top: 12px;left: 10px;'>"), document.write("<span  class='barspan'  style='position: absolute;left: 45px;'>"), document.write("</span>"), document.write("<div id='container'>"), this.isShowMainMenu && (document.write("<header>"), document.write("<div class='wrapper cf'style='z-index: 999'>"), document.write("<nav id='main-nav' >"), document.write("</nav>"), document.write("<a class='toggle'>"), document.write("<span></span>"), document.write("</a>"), document.write("</div>"), document.write("</header>")), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteToolbar = function() {
        document.write("<div id='MainMenuContent' class='bf-toolbar bf-toolbar-bottom'>"), document.write("</div>");
      }, c.prototype.WriteLoading = function() {
        var t2 = this.uiPath;
        document.write("<div class='Prompt' style='width: 100px;height:30px;position:"), document.write("absolute;top: 60px;left: 50%;margin-left: -50px;color: #fff;text-align: center;'>"), document.write("<div style='text-align: center;'>"), document.write("<img src='" + t2 + "/image/loading.gif' alt='' style='width:30px;height:30px;float: left'>"), document.write("<p style='color:black;vertical-align: middle;float: left;  margin-top: 5px;margin-left: 5px;'>\u52A0\u8F7D\u4E2D.....</p>"), document.write("</div>"), document.write("<span style='vertical-align: middle;display: none'>\u56FE\u7EB8\u52A0\u8F7D\u5B8C\u6BD5</span>"), document.write("</div>");
      }, c.prototype.WriteLayer = function() {
        var t2 = this.uiPath;
        this.isShowLayer && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' title='ModelTree' style='position: absolute; top:111px;left: 0px;' onclick='uiObj.SwitchShowLayer()'>"), document.write("<div class='bf-button mxbim-bf-tree' title='\u56FE\u5C42'>"), document.write("<img src='" + t2 + "/image/layer.png.gif' alt='' style='width: 24px;'>"), document.write("</div>"), document.write("</div>")), document.write("<div class='bf-panel bf-has-title bf-sizable' id='LayerInterface' title='\u56FE\u5C42'"), document.write("style='left: 0px;"), document.write("top: 0px;"), document.write("width: 100%;"), document.write("height: 100%;"), document.write("display: none;'>"), document.write("<div class='bf-close' onclick='uiObj.SwitchShowLayer()' style='text-align: center;'><i class='fa fa-times' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' style='cursor: move; user-select: none;'>\u56FE\u5C42</div>"), document.write("<div>"), document.write("<div class='layer-title' style='width: 12.5%;'>\u53EF\u89C1</div>"), document.write("<div class='layer-title' style='width: 12.5%;'>\u989C\u8272</div>"), document.write("<div class='layer-title' style='width: 62.5%'>\u540D\u5B57</div>"), document.write("<div class='layer-title' style='width: 12.5%'>\u72B6\u6001</div>"), document.write("</div>"), document.write("<div id='Layer-Info'  style='margin-top: 26px;height: 79%;width: 100%; position: absolute;overflow-y: auto;'>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteStructTree = function() {
        this.isShowStructTree && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='Fmj' title='ModelTree'"), document.write("style='position: absolute; top:60px;left: 0px;' onclick='uiObj.SwitchShowStructTree()'>"), document.write("<div class='bf-button mxbim-bf-tree' title='\u6784\u4EF6\u6811'><i class='fa fa-sitemap' aria-hidden='true' style='font-size: 24px;'></i></div>"), document.write("</div>")), document.write("<div class='bf-panel  bf-has-title bf-sizable tree-panel' id='dv' title='\u76EE\u5F55\u6811' style='left: 0px; top: 0px; width: 100%; height: 100%; display: none;'>"), document.write("<div class='bf-close' onclick='uiObj.SwitchShowStructTree()'><i class='fa fa-times fa-2x' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' style='cursor: move; user-select: none;'>\u76EE\u5F55\u6811</div>"), document.write("<div class='bf-panel-body' style='padding-top: 57px;overflow-y: scroll;'>"), document.write("<div class='bf-panel-header'>"), document.write("<div class='bf-panel-header'>"), document.write("<div class='bf-tree-header' style='margin-top: -57px;'>"), document.write("<div class='bf-tabs bf-tabs-tree'>"), document.write("<ul class='bf-tabs-list'>"), document.write("<li class='bf-tabs-option my-option undefined active' id='component'>\u6784\u4EF6</li>"), document.write("<li class='bf-tabs-option my-option undefined' id='area'>\u7A7A\u95F4</li>"), document.write("<li class='bf-tabs-option my-option undefined' id='drawing'>\u56FE\u7EB8</li>"), document.write("</ul>"), document.write("</div>"), document.write("</div>"), document.write("</div>"), document.write("</div>"), document.write("<div class='' style='margin-bottom: 100px;' id='DirectoryContent'>"), document.write("</div>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteTakeColor = function() {
        var t2 = this.uiPath;
        this.isShowTakeColor && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='TakeColor'"), document.write("style='position: absolute;left: 0px; top: 162px;width: 45px; '>"), document.write("<div class='bf-button' onclick='uiObj.Chosecolor()' style='opacity: 1;width: 45px;'>"), document.write("<div  style='position: relative;margin-left: 10px;margin-top: -5px;'>"), document.write("<img src='" + t2 + "/image/color.png' alt='' style='width: 40px;margin-left: -21px;'>"), document.write("</div>"), document.write("<div id='colorbox' style='width: 30px;height: 5px;background-color: #cccccc;margin-left: -3px;margin-top: -5px;'>"), document.write("</div>"), document.write("<div style='width: 18px;height: 40px;float: right;margin-top: -38px;margin-left: 14px;position: absolute;'>"), document.write("<img src='" + t2 + "/image/daojiao.png' alt='' style='width: 15px;margin-top: 10px;z-index: 999;position: relative'>"), document.write("<input id='color-picker' type='color' value='#c0c0c0'   style='display: none' onchange='colorChange(value)'>"), document.write("</div>"), document.write("</div>"), document.write("</div>"));
      }, c.prototype.WriteLayout = function() {
        var t2 = this.uiPath;
        this.isShowLayout && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='LayerOut'"), document.write("style='position: absolute;left: 0px; top: 213px; ' onclick='uiObj.SwitchShowLayout()'>"), document.write("<div class='bf-button'>"), document.write("<img src='" + t2 + "/image/layout.png' alt='' style='width: 24px;'>"), document.write("</div>"), document.write("</div>")), document.write("<div class='bf-panel bf-has-title bf-sizable' id='LayerOutInterface'"), document.write("style='left: 0; top: 0; width: 100%;display:none'>"), document.write("<div class='bf-close' onclick='uiObj.SwitchShowLayout()'><i class='fa fa-times' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' id='buju' style='cursor: move; user-select: none;'>\u5E03\u5C40</div>"), document.write("<div>"), document.write("</div>"), document.write("<div id=''>"), document.write("<div>"), document.write("<table  class='bf-table'>"), document.write("<tbody class='bf-group'>"), document.write("<tr class='bf-group-title  bf_layerout' style='height: 30px;cursor: pointer;'>"), document.write("<td class='bf_layerout_td'  style='width: 60px' >"), document.write("<div class='bf_layer_div layer_on'></div>"), document.write("</td>"), document.write("<td  style='width: 238px' >"), document.write("<span  style='color: white;cursor: pointer;'>LayerOut</span>"), document.write("</td>"), document.write("</tr>"), document.write("<tr class='bf-group-title  bf_layerout' style='height: 30px;cursor: pointer;'>"), document.write("<td class='bf_layerout_td'  style='width: 60px' >"), document.write("<div class='bf_layer_div' ></div>"), document.write("</td>"), document.write("<td  style='width: 238px' >"), document.write("<span  style='color: white;cursor: pointer;'>LayerOut</span>"), document.write("</td>"), document.write("</tr>"), document.write("<tr class='bf-group-title  bf_layerout' style='height: 30px;cursor: pointer;'>"), document.write("<td class='bf_layerout_td'  style='width: 60px' >"), document.write("<div class='bf_layer_div' ></div>"), document.write("</td>"), document.write("<td  style='width: 238px' >"), document.write("<span  style='color: white;cursor: pointer;'>LayerOut</span>"), document.write("</td>"), document.write("</tr>"), document.write("<tr class='bf-group-title  bf_layerout' style='height: 30px;cursor: pointer;'>"), document.write("<td class='bf_layerout_td'  style='width: 60px' >"), document.write("<div class='bf_layer_div'></div>"), document.write("</td>"), document.write("<td  style='width: 238px' >"), document.write("<span  style='color: white;cursor: pointer;'>LayerOut</span>"), document.write("</td>"), document.write("</tr>"), document.write("</tbody>"), document.write("</table>"), document.write("</div>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteObjectProperty = function() {
        document.write("<div class='bf-panel bf-has-title bf-sizable property-panel' id='fmj2' title='\u6784\u4EF6\u8BE6\u60C5' style='left: 0px; top: 0px; width: 100%; height: 100%;display: none;'>"), document.write("<div class='bf-close' id='close2' style='top:4.0em;'><i class='fa fa-times fa-2x' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' style='cursor: move; user-select: none;'>\u6784\u4EF6\u8BE6\u60C5</div>"), document.write("<div class='bf-panel-body' style='padding-top: 41px;'>"), document.write("<div class='bf-panel-container bf-scroll-bar' style='top:0;width: 100%;height: 100%;overflow-y: auto;position: relative;'>"), document.write("<table class='bf-table' id='ComponentContent'>"), document.write("</table>"), document.write("</div>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.UpDisplayLayout = function() {
      }, c.prototype.UpDisplayLayer = function() {
        var t2 = this.uiPath, e2 = this.vecLayerData, n2 = this.vecSketchLayerData, i2 = "";
        if (n2 != null) {
          var r2 = n2;
          for (var a2 in r2) {
            i2 += "<div>";
            var o2 = "hide.png";
            r2[a2].off == 0 && (o2 = "show.png");
            var s2 = "unlock.png";
            i2 += "<table class='bf-table'>", i2 += "<tbody class='bf-group'>", i2 += "<tr class='bf-group-title'>", i2 += '<td><img class="layer-enable" sketch=1 id=' + r2[a2].id + ' src="' + t2 + "/image/" + o2 + '"/></td>', i2 += '<td><span class="layer-color" style="background-color:' + r2[a2].color + '"></span></td>', i2 += '<td><span class="layer-text">\u8349\u56FE_' + r2[a2].name + "</span></td>", i2 += '<td><img class="layer-state" src="' + t2 + "/image/" + s2 + '"/></td>', i2 += "</tr>", i2 += "</tbody>", i2 += "</table>", i2 += "</div>";
          }
        }
        if (e2 != null)
          for (var a2 in r2 = e2)
            i2 += "<div>", o2 = "hide.png", r2[a2].off == 0 && (o2 = "show.png"), s2 = "lock.png", i2 += "<table class='bf-table'>", i2 += "<tbody class='bf-group'>", i2 += "<tr class='bf-group-title'>", i2 += '<td><img class="layer-enable" sketch=0 id=' + r2[a2].id + ' src="' + t2 + "/image/" + o2 + '"/></td>', i2 += '<td><span class="layer-color" style="background-color:' + r2[a2].color + '"></span></td>', i2 += '<td><span class="layer-text">' + r2[a2].name + "</span></td>", i2 += '<td><img class="layer-state" src="' + t2 + "/image/" + s2 + '"/></td>', i2 += "</tr>", i2 += "</tbody>", i2 += "</table>", i2 += "</div>";
        var l2 = document.getElementById("Layer-Info");
        l2 != null && (l2.innerHTML = i2);
      }, c.prototype.WriteFooter = function() {
        document.write("<div class='footer' style='background: rgba(0, 0, 0, 0.7);min-width: auto;position: fixed;left: 0;bottom: 0;width: 100%;'>"), document.write("<div style='line-height: 40px;font-size: 12px;color: #999;padding: 0 10px;'>"), document.write("<p style='float: right;line-height: 15px;font-size: 12px;color: #999;display: block;'>"), document.write("<a style='color: #4a90e2;text-decoration: none;outline: none;' href='http://www.mxdraw.com/' target='_blank'>\u68A6\u60F3CAD</a>\u65D7\u4E0B\u4EA7\u54C1"), document.write("</p>"), document.write("<a style='color: #4a90e2;text-decoration: none;outline: none;' href='http://www.mxdraw.com' target='_blank'>MX3D</a> \u8700ICP\u590715011727\u53F7"), document.write("</div>"), document.write("</div>");
      }, c.prototype.CreateToolBar = function(t2) {
        if (this.isShowToolbar) {
          var e2 = "";
          for (var n2 in t2) {
            var i2 = t2[n2], r2 = "uiObj.CallMxCommand";
            i2.isMxCommand || (r2 = "uiObj.EvalJs"), 0 < i2.itemid.length ? e2 += '<div class="bf-button" onclick="' + r2 + "('" + t2[n2].evalString + `')"><img class="mainimage-bf-butto" id="` + i2.itemid + '" src="' + this.uiPath + "\\image\\" + i2.image + '" title="' + t2[n2].text + '"></div>' : e2 += '<div class="bf-button" onclick="' + r2 + "('" + t2[n2].evalString + `')"><img class="mainimage-bf-butto" src="` + this.uiPath + "\\image\\" + i2.image + '" title="' + t2[n2].text + '"></div>';
          }
          document.getElementById("MainMenuContent").innerHTML = e2;
        }
      }, c.prototype.InitEvent = function() {
        var t2 = document.getElementById("LayerInterface");
        this.CreateToolBar(this.vecToolBarItem), t2.style.display = "none";
        var e2 = this.vecMenuItem;
        this.isShowMainMenu && function(t3) {
          var n3 = "";
          !function t4(e3, i4) {
            var r4 = function(t5, e4) {
              var n4 = new Array();
              for (var i5 in e4)
                e4[i5].parentId == t5 && n4.push(e4[i5]);
              return n4;
            }(e3, i4);
            if (0 < r4.length) {
              for (var a4 in n3 += "<ul>", r4)
                r4[a4].evalString.length != 0 ? (n3 += '<li><p class="li_option" ', n3 += `onclick="uiObj.EvalJs('` + r4[a4].evalString + `')"`, n3 += ">" + r4[a4].text + "</p>") : (n3 += "<li><a ", n3 += ">" + r4[a4].text + "</a>"), t4(r4[a4].id, i4), n3 += "</li>";
              n3 += "</br>", n3 += "</br>", n3 += "</br>", n3 += "</ul>";
            }
          }(-1, e2), t3("#main-nav").append(n3);
          var i3 = t3("#main-nav"), r3 = t3(".toggle"), a3 = { maxWidth: false, customToggle: r3, levelTitles: true }, o2 = null, s2 = {};
          o2 && o2.remove(), r3.off("click"), o2 = i3.clone(), t3.extend(s2, { side: "right" }), o2.hcMobileNav(t3.extend({}, a3, s2));
        }(jQuery);
        var n2 = window.location.href, i2 = n2.length, r2 = n2.indexOf("?"), a2 = n2.substr(r2, i2).split("=")[1];
        $(".barspan").html(decodeURIComponent(a2)), $("#close2").click(function() {
          $(this).parent("div").fadeOut(200);
        }), $(".bf-select-current").click(function() {
          $(this).hasClass("bf-open") ? $(this).removeClass("bf-open") : $(this).addClass("bf-open");
        }), $(".my-option").click(function() {
          var t3 = $(this);
          $(".my-option").each(function() {
            $(this).removeClass("active");
          }), t3.addClass("active");
        }), $(".bf-select-option").click(function() {
          $(this).parent("ul").prev("span").html($(this).text()), $(this).parent("ul").prev("span").removeClass("bf-open");
        }), $(document).on("click", ".layer-enable", function() {
          var t3 = s.MxFun.getUiObj().getPath(), e3 = parseInt($(this).attr("id")), n3 = parseInt($(this).attr("sketch")), i3 = true;
          $(this).attr("src") == t3 + "/image/show.png" ? ($(this).attr("src", t3 + "/image/hide.png"), i3 = false) : $(this).attr("src", t3 + "/image/show.png"), s.MxFun.showLayer(e3, i3, n3 == 1);
        });
      }, c.prototype.Fullscreen = function() {
        var t2 = document.documentElement;
        t2.requestFullscreen ? t2.requestFullscreen() : t2.mozRequestFullScreen ? t2.mozRequestFullScreen() : t2.webkitRequestFullScreen && t2.webkitRequestFullScreen(), document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen ? document.webkitCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen(), this.IsFullStatus() ? ($("img[title='\u53D6\u6D88\u5168\u5C4F']").attr("src", this.uiPath + "/image\\fullscreen1.gif"), $("img[title='\u53D6\u6D88\u5168\u5C4F']").attr("title", "\u5168\u5C4F")) : ($("img[title='\u5168\u5C4F']").attr("src", this.uiPath + "/image\\escscreen1.gif"), $("img[title='\u5168\u5C4F']").attr("title", "\u53D6\u6D88\u5168\u5C4F"));
      }, c.prototype.IsFullStatus = function() {
        return (document.fullscreenEnabled || document.mozFullscreenElement || document.webkitFullscreenElement) != null;
      }, c);
      function c() {
        return a !== null && a.apply(this, arguments) || this;
      }
      n.MxUiObjectMobile = l;
    }, { "../MxFun": 34, "./MxUiObject": 64 }], 66: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxUiObjectPC = void 0;
      var a, o = t("./MxUiObject"), s = t("../MxFun"), l = (r(c, a = o.MxUiObject), c.prototype.onCreate = function() {
        this.isShowTitle && this.WriteTitle(), this.WriteStructTree(), this.isEnableLoading && this.WriteLoading(), this.WriteLayer(), this.WriteTakeColor(), this.WriteLayout(), this.isEnableObjectProperty && this.WriteObjectProperty(), this.isShowToolbar && this.WriteToolbar();
      }, c.prototype.onInit = function() {
        this.InitEvent();
      }, c.prototype.WriteTitle = function() {
        var t2 = this.uiPath;
        document.write("<div id='all'>"), document.write("   <div class='bar1'>"), document.write("   <img src=" + t2 + "/image/mxcad.png style='height: 50%;position: absolute;top: 12px;left: 10px;'>"), document.write("   <span  class='barspan' style='position: absolute;left: 45px;'>"), document.write("   </span>"), document.write("   <div id='container'>"), this.isShowMainMenu && (document.write("   <header>"), document.write("    <div class='wrapper cf'style='z-index: 999'>"), document.write("   <nav id='main-nav' >"), document.write("    </nav>"), document.write("    <a class='toggle'>"), document.write("   <span></span>"), document.write("    </a>"), document.write("    </div>"), document.write("    </header>")), document.write("    </div>"), document.write("    </div>");
      }, c.prototype.WriteStructTree = function() {
        this.isShowStructTree && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='ModelTreeThumbnail' title='\u76EE\u5F55\u6811'"), document.write("style='position: absolute;left: 10px; top: 97px; ' onclick='uiObj.SwitchShowStructTree()'>"), document.write("<div class='bf-button mxbim-bf-tree' title='\u76EE\u5F55\u6811'><i class='fa fa-sitemap' aria-hidden='true'></i></div>"), document.write("</div>")), document.write("<div class='bf-panel bf-has-title bf-sizable' id='ModelTreeInterface' title='\u76EE\u5F55\u6811'"), document.write("style='left:0px; top: 0px; width: 300px; height: 416px;display: none'>"), document.write("   <div class='bf-close' onclick='uiObj.SwitchShowStructTree()'><i class='fa fa-times' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' style='cursor: move; user-select: none;' id='mulushu'>\u76EE\u5F55\u6811</div>"), document.write("<div class='bf-panel-body' style='padding-top: 36px;'>"), document.write("<div class='bf-panel-header'>"), document.write("<div class='bf-tree-header' style='margin-top: -36px;'>"), document.write("<div class='bf-select bf-select-tree'>"), document.write("<span class='bf-select-current'>\u6784\u4EF6</span>"), document.write("<ul class='bf-select-list'>"), document.write("<li class='bf-select-option' id='type'>\u6784\u4EF6</li>"), document.write("<li class='bf-select-option' id='file'>\u6587\u4EF6</li>"), document.write("<li class='bf-select-option' id='area'>\u7A7A\u95F4</li>"), document.write("<li class='bf-select-option' id='drawing'>\u56FE\u7EB8</li>"), document.write("</ul>"), document.write("</div>"), document.write("</div>"), document.write("</div>"), document.write("<div id='DirectoryContent' class='bf-panel-container TreeInfo'>"), document.write("</div>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteLoading = function() {
        var t2 = this.uiPath;
        document.write("<div class='Prompt'>"), document.write("<div style='text-align: center;'>"), document.write("<img src='" + t2 + "/image/loading.gif' alt='' style='width:30px;height:30px;float: left'>"), document.write("<p  style='color:black;vertical-align: middle;float: left; margin-top: 5px;margin-left: 5px;'>\u52A0\u8F7D\u4E2D.....</p>"), document.write("</div>"), document.write("<span style='display: none'>" + this.sLanguageTable.openComplete + "</span>"), document.write("</div>");
      }, c.prototype.WriteLayer = function() {
        var t2 = this.uiPath;
        this.isShowLayer && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='LayerThumbnail' title='" + this.sLanguageTable.layer + "'"), document.write("style='position: absolute;left: 10px; top: 45px; ' onclick='uiObj.SwitchShowLayer()'>"), document.write("<div class='bf-button'>"), document.write("<img src='" + t2 + "/image/layer.png.gif' alt='' style='width: 32px;'>"), document.write("</div>"), document.write("</div>")), document.write("<div class='bf-panel bf-has-title bf-sizable' id='LayerInterface'"), document.write("style='left: 10px; top: 50px; width: 300px; height: 416px;display: none'>"), document.write("<div class='bf-close' onclick='uiObj.SwitchShowLayer(false)'><i class='fa fa-times' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' id='tuceng' style='cursor: move; user-select: none;'>" + this.sLanguageTable.layer + "</div>"), document.write("<div>"), document.write("<div class='layer-title' style='width: 50px;font-size: 14px'>" + this.sLanguageTable.visible + "</div>"), document.write("<div class='layer-title' style='width: 50px;font-size: 14px'>" + this.sLanguageTable.color + "</div>"), document.write("<div class='layer-title' style='width: 148px;font-size: 14px'>" + this.sLanguageTable.name + "</div>"), document.write("<div class='layer-title' style='width: 50px;font-size: 14px'>" + this.sLanguageTable.status + "</div>"), document.write("</div>"), document.write("<div id='Layer-Info' style='margin-top: 25px;height: 349px;position: absolute;overflow-y: auto;'>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteTakeColor = function() {
        var t2 = this.uiPath;
        this.isShowTakeColor && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='TakeColor' title='\u9009\u62E9\u989C\u8272'"), document.write("style='position: absolute;left: 10px; top: 149px; '>"), document.write("<div class='bf-button' onclick='uiObj.Chosecolor()' style='opacity: 1;'>"), document.write("<img src='" + t2 + "/image/color.png' alt='' style='width: 40px;margin-left: -10px;'>"), document.write("<div id='colorbox' style='width: 35px;height: 5px;background-color: #cccccc;margin-left: -3px'>"), document.write("</div>"), document.write("<div style='width: 18px;height: 40px;float: right;margin-top: -42px;margin-left: 14px;'>"), document.write("<img src='" + t2 + "/image/daojiao.png' alt='' style='width: 15px;margin-top: 10px;z-index: 999;position: relative'>"), document.write("<input id='color-picker' type='color' value='#c0c0c0'   style='display: none' onchange='uiObj.ColorChange(value)'>"), document.write("</div>"), document.write("</div>"), document.write("</div>"));
      }, c.prototype.WriteLayout = function() {
        var t2 = this.uiPath;
        this.isShowLayout && (document.write("<div class='bf-toolbar bf-toolbar bf-tree-toolbar' id='LayerOut' title='" + this.sLanguageTable.layout + "'"), document.write("style='position: absolute;left: 10px; top: 97px; ' onclick='uiObj.SwitchShowLayout()'>"), document.write("<div class='bf-button'>"), document.write("<img src='" + t2 + "/image/layout.png' alt='' style='width: 32px;'>"), document.write("</div>"), document.write("</div>")), document.write("<div class='bf-panel bf-has-title bf-sizable' id='LayerOutInterface'"), document.write("style='left: 10px; top: 50px; width: 300px;display:none'>"), document.write("<div class='bf-close' onclick='uiObj.SwitchShowLayout()'><i class='fa fa-times' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' id='buju' style='cursor: move; user-select: none;'>" + this.sLanguageTable.layout + "</div>"), document.write("<div>"), document.write("</div>"), document.write("<div id='layout-Info'>"), document.write("</div>"), document.write("</div>");
      }, c.prototype.WriteObjectProperty = function() {
        document.write("<div class='bf-panel bf-has-title bf-sizable' id='StrcutInfoBase' title='\u5C5E\u6027'"), document.write("style='right: 10px; top: 45px; width: 300px; height: 416px;display: none'>"), document.write("<div class='bf-close' id='close2'><i class='fa fa-times' aria-hidden='true'></i></div>"), document.write("<div class='bf-title' style='cursor: move; user-select: none;'>\u5C5E\u6027</div>"), document.write("<div id='ComponentContent' class='bf-panel-body StructInfo'></div>"), document.write("<div class='bf-resize'></div>"), document.write("</div>");
      }, c.prototype.WriteToolbar = function() {
        document.write("<div id='MainMenuContent' class='bf-toolbar bf-toolbar-bottom' style='position: fixed'></div>");
      }, c.prototype.CreateToolBar = function(t2) {
        if (this.isShowToolbar) {
          var e2 = "";
          for (var n2 in t2) {
            var i2 = t2[n2], r2 = "uiObj.CallMxCommand";
            i2.isMxCommand || (r2 = "uiObj.EvalJs"), 0 < i2.itemid.length ? e2 += '<div class="bf-button" onclick="' + r2 + "('" + t2[n2].evalString + `')"><img class="mainimage-bf-butto" id="` + i2.itemid + '" src="' + this.uiPath + "\\image\\" + i2.image + '" title="' + t2[n2].text + '"></div>' : e2 += '<div class="bf-button" onclick="' + r2 + "('" + t2[n2].evalString + `')"><img class="mainimage-bf-butto" src="` + this.uiPath + "\\image\\" + i2.image + '" title="' + t2[n2].text + '"></div>';
          }
          document.getElementById("MainMenuContent").innerHTML = e2;
        }
      }, c.prototype.UpDisplayLayer = function() {
        var t2 = this.uiPath, e2 = this.vecLayerData, n2 = this.vecSketchLayerData, i2 = "";
        if (n2 != null) {
          var r2 = n2;
          for (var a2 in r2) {
            i2 += "<div>";
            var o2 = "hide.png";
            r2[a2].off == 0 && (o2 = "show.png");
            var s2 = "unlock.png";
            i2 += "<table class='bf-table'>", i2 += "<tbody class='bf-group'>", i2 += "<tr class='bf-group-title'>", i2 += '<td><img class="layer-enable" sketch=1 id=' + r2[a2].id + ' src="' + t2 + "/image/" + o2 + '"/></td>', i2 += '<td><span class="layer-color" style="background-color:' + r2[a2].color + '"></span></td>', i2 += '<td><span class="layer-text">\u8349\u56FE_' + r2[a2].name + "</span></td>", i2 += '<td><img class="layer-state" src="' + t2 + "/image/" + s2 + '"/></td>', i2 += "</tr>", i2 += "</tbody>", i2 += "</table>", i2 += "</div>";
          }
        }
        if (e2 != null)
          for (var a2 in r2 = e2)
            i2 += "<div>", o2 = "hide.png", r2[a2].off == 0 && (o2 = "show.png"), s2 = "lock.png", i2 += "<table class='bf-table'>", i2 += "<tbody class='bf-group'>", i2 += "<tr class='bf-group-title'>", i2 += '<td><img class="layer-enable" sketch=0 id=' + r2[a2].id + ' src="' + t2 + "/image/" + o2 + '"/></td>', i2 += '<td><span class="layer-color" style="background-color:' + r2[a2].color + '"></span></td>', i2 += '<td><span class="layer-text">' + r2[a2].name + "</span></td>", i2 += '<td><img class="layer-state" src="' + t2 + "/image/" + s2 + '"/></td>', i2 += "</tr>", i2 += "</tbody>", i2 += "</table>", i2 += "</div>";
        var l2 = document.getElementById("Layer-Info");
        l2 != null && (l2.innerHTML = i2);
      }, c.prototype.UpDisplayLayout = function() {
        var t2 = this.vecLayoutData, e2 = "";
        if (e2 += "<div>", e2 += "<table  class='bf-table'>", e2 += "<tbody class='bf-group'>", e2 += "<tr class='bf-group-title  bf_layerout' style='height: 30px;cursor: pointer;'>", e2 += "<td class='bf_layerout_td'  style='width: 60px' >", e2 += "<div class='bf_layer_div layer_on'></div>", e2 += "</td>", e2 += "<td  style='width: 238px' >", e2 += "<span  class='layout-name' name='Model' style='color: white;cursor: pointer;'>Model</span>", e2 += "</td>", e2 += "</tr>", t2 != null) {
          var n2 = t2;
          for (var i2 in n2)
            e2 += "<tr class='bf-group-title  bf_layerout' style='height: 30px;cursor: pointer;'>", e2 += "<td class='bf_layerout_td'  style='width: 60px' >", e2 += "<div class='bf_layer_div layer_on'></div>", e2 += "</td>", e2 += "<td style='width: 238px' >", e2 += "<span class='layout-name' name='" + n2[i2] + "' style='color: white;cursor: pointer;'>" + n2[i2] + "</span>", e2 += "</td>", e2 += "</tr>";
        }
        e2 += "</tbody>", e2 += "</table>", e2 += "</div>";
        var r2 = document.getElementById("layout-Info");
        r2 != null && (r2.innerHTML = e2);
      }, c.prototype.InitEvent = function() {
        var t2 = document.getElementById("ModelTreeInterface"), e2 = document.getElementById("LayerInterface"), n2 = document.getElementById("LayerOutInterface"), i2 = document.getElementById("tuceng"), r2 = document.getElementById("mulushu"), a2 = document.getElementById("buju"), o2 = 0, l2 = 0, c2 = 0, u = 0, h = false;
        r2.onmousedown = function(e3) {
          o2 = e3.clientX, l2 = e3.clientY, c2 = t2.offsetLeft, u = t2.offsetTop, h = true, t2.style.cursor = "move";
        }, i2.onmousedown = function(t3) {
          o2 = t3.clientX, l2 = t3.clientY, c2 = e2.offsetLeft, u = e2.offsetTop, h = true, e2.style.cursor = "move";
        }, a2.onmousedown = function(t3) {
          o2 = t3.clientX, l2 = t3.clientY, c2 = n2.offsetLeft, u = n2.offsetTop, h = true, n2.style.cursor = "move";
        }, window.onmousemove = function(i3) {
          if (h != 0) {
            var r3 = i3.clientX, a3 = i3.clientY, s2 = r3 - (o2 - c2), d2 = a3 - (l2 - u);
            t2.style.left = s2 + "px", t2.style.top = d2 + "px", e2.style.left = s2 + "px", e2.style.top = d2 + "px", n2.style.left = s2 + "px", n2.style.top = d2 + "px";
          }
        }, r2.onmouseup = function() {
          h = false, t2.style.cursor = "default";
        }, i2.onmouseup = function() {
          h = false, e2.style.cursor = "default";
        }, a2.onmouseup = function() {
          h = false, n2.style.cursor = "default";
        }, $("#close2").click(function() {
          $(this).parent("div").fadeOut(200);
        }), $("#menu4").click(function() {
          $("#StrcutInfoBase").hasClass("hide") ? ($("#StrcutInfoBase").fadeIn(200), $("#StrcutInfoBase").removeClass("hide")) : ($("#StrcutInfoBase").fadeOut(200), $("#StrcutInfoBase").addClass("hide"));
        }), $(".bf-select-current").click(function() {
          $(this).hasClass("bf-open") ? $(this).removeClass("bf-open") : $(this).addClass("bf-open");
        }), $(".bf-select-option").click(function() {
          $(this).parent("ul").prev("span").html($(this).text()), $(this).parent("ul").prev("span").removeClass("bf-open");
        });
        var d = $("#StrcutInfoBase");
        d.bind("mousedown", function(t3) {
          var e3 = $(this)[0].offsetLeft, n3 = $(this)[0].offsetTop, i3 = t3.pageX, r3 = t3.pageY;
          $(document).bind("mousemove", function(t4) {
            var a3 = t4.pageX - i3, o3 = t4.pageY - r3, s2 = e3 + a3 + "px", l3 = n3 + o3 + "px";
            d.css({ top: l3, left: s2 });
          });
        }), $(document).bind("mouseup", function() {
          $(this).unbind("mousemove");
        }), this.CreateToolBar(this.vecToolBarItem);
        var p = this.vecMenuItem;
        if (this.isShowMainMenu && function(t3) {
          var e3 = "";
          !function t4(n4, i4) {
            var r4 = function(t5, e4) {
              var n5 = new Array();
              for (var i5 in e4)
                e4[i5].parentId == t5 && n5.push(e4[i5]);
              return n5;
            }(n4, i4);
            if (0 < r4.length) {
              for (var a4 in e3 += "<ul>", r4)
                r4[a4].evalString.length != 0 ? (e3 += '<li><p class="li_option" ', e3 += `onclick="uiObj.EvalJs('` + r4[a4].evalString + `')"`, e3 += ">" + r4[a4].text + "</p>") : (e3 += "<li><a ", e3 += ">" + r4[a4].text + "</a>"), t4(r4[a4].id, i4), e3 += "</li>";
              e3 += "</br>", e3 += "</br>", e3 += "</br>", e3 += "</ul>";
            }
          }(-1, p), t3("#main-nav").append(e3);
          var n3 = t3("#main-nav"), i3 = t3(".toggle"), r3 = { maxWidth: false, customToggle: i3, levelTitles: true }, a3 = null, o3 = {};
          a3 && a3.remove(), i3.off("click"), a3 = n3.clone(), t3.extend(o3, { side: "right" }), a3.hcMobileNav(t3.extend({}, r3, o3));
        }(jQuery), $(".li_option").click(function() {
          var t3 = $(this);
          $(".li_option").each(function() {
            $(this).removeClass("active");
          }), t3.addClass("active");
        }), this.sTitle == "") {
          var f = window.location.href, m = f.length, g = f.indexOf("?"), v = f.substr(g, m).split("=")[1];
          v != null && (this.sTitle = v);
        }
        $(".barspan").html(decodeURIComponent(this.sTitle)), $(document).on("click", ".layer-enable", function() {
          var t3 = s.MxFun.getUiObj().getPath(), e3 = parseInt($(this).attr("id")), n3 = parseInt($(this).attr("sketch")), i3 = true;
          $(this).attr("src") == t3 + "/image/show.png" ? ($(this).attr("src", t3 + "/image/hide.png"), i3 = false) : $(this).attr("src", t3 + "/image/show.png"), s.MxFun.showLayer(e3, i3, n3 == 1);
        }), $(document).on("click", ".layout-name", function() {
          var t3 = $(this).attr("name");
          t3 == "Model" && (t3 = ""), s.MxFun.getCurrentDraw().gotoLayout(t3);
        });
      }, c.prototype.WriteFooter = function() {
        document.write("<div class='footer' style='background: rgba(0, 0, 0, 0.7);position: fixed;left: 0;bottom: 0;width: 100%;'>"), document.write("   <div style='line-height: 40px;font-size: 12px;color: #999;padding: 0 10px;'>"), document.write("    <p style='float: right;line-height: 15px;font-size: 12px;color: #999;display: block;'>"), document.write("    <a style='color: #4a90e2;text-decoration: none;outline: none;' href='http://www.mxdraw.com/' target='_blank'>MxDraw </a>\u65D7\u4E0B\u4EA7\u54C1"), document.write("    </p>"), document.write("    <a style='color: #4a90e2;text-decoration: none;outline: none;' href='http://www.mxdraw.com' target='_blank'>MX3D </a> \u8700ICP\u590715011727\u53F7"), document.write("    </div>"), document.write("   </div>");
      }, c.prototype.ShowLoading = function() {
        this.isEnableLoading && ($(".Prompt").css("background", "rgba(0, 0, 0, 0)"), $(".Prompt").fadeIn(100), $(".Prompt span").css("display", "none"));
      }, c.prototype.HideLoading = function() {
        this.isEnableLoading && ($(".Prompt").css("background", "rgba(0, 0, 0, 0.8)"), $(".Prompt div").fadeOut(100), $(".Prompt span").fadeIn(200), setTimeout(function() {
          $(".Prompt").fadeOut(1e3);
        }, 1e3));
      }, c.prototype.ShowObjectProperty = function(t2) {
        if (t2.length != 0) {
          var e2;
          e2 = typeof t2 == "string" ? JSON.parse(t2) : t2;
          var n2 = "";
          for (var i2 in e2) {
            var r2 = e2[i2];
            for (var a2 in n2 += "<table class='bf-table'>", n2 += "<tbody class='bf-group'>", n2 += "<tr class='bf-group-title'>", n2 += "<td colspan='2'><i class='bf-icon'></i>" + r2.name + "</td>", n2 += "</tr>", r2.datas) {
              var o2 = r2.datas[a2];
              n2 += "<tr class='bf-group-content'>", n2 += "<td class='bf-key'>" + o2.name + "</td>", n2 += "<td class='bf-value'>" + o2.value + "</td>", n2 += "</tr>";
            }
            n2 += "</tbody>", n2 += "</table>";
          }
          document.getElementById("ComponentContent").innerHTML = n2, $(".bf-group").click(function() {
            $(this).hasClass("bf-collapse") ? $(this).removeClass("bf-collapse") : $(this).addClass("bf-collapse");
          }), $("#StrcutInfoBase").fadeIn(200), $("#StrcutInfoBase").removeClass("hide");
        }
      }, c.prototype.HideObjectProp = function() {
        $("#StrcutInfoBase").hasClass("hide") || ($("#StrcutInfoBase").fadeOut(200), $("#StrcutInfoBase").addClass("hide"));
      }, c.prototype.SwitchShowLayer = function() {
        var t2 = document.getElementById("ModelTreeInterface"), e2 = document.getElementById("ModelTreeThumbnail"), n2 = document.getElementById("LayerThumbnail"), i2 = document.getElementById("LayerInterface"), r2 = document.getElementById("LayerOut"), a2 = document.getElementById("LayerOutInterface");
        t2.style.display = "none", (a2.style.display = "none") == i2.style.display ? (n2.style.display = "block", i2.style.display = "block", i2.style.left = "80px", i2.style.top = "50px", e2 != null && (e2.style.display = "block"), r2 != null && (r2.style.display = "block"), t2.style.display = "none", a2.style.display = "none") : (i2.style.display = "none", e2 != null && (e2.style.display = "block"), n2.style.display = "block", r2 != null && (r2.style.display = "block"));
      }, c.prototype.SwitchShowStructTree = function() {
        var t2 = document.getElementById("ModelTreeInterface"), e2 = document.getElementById("ModelTreeThumbnail"), n2 = document.getElementById("LayerThumbnail"), i2 = document.getElementById("LayerInterface"), r2 = document.getElementById("LayerOut"), a2 = document.getElementById("LayerOutInterface");
        i2.style.display = "none", (a2.style.display = "none") == t2.style.display ? (e2 != null && (e2.style.display = "block"), t2.style.display = "block", t2.style.left = "80px", t2.style.top = "50px", n2.style.display = "block", r2 != null && (r2.style.display = "block"), i2.style.display = "none", a2.style.display = "none") : (t2.style.display = "none", e2 != null && (e2.style.display = "block"), n2.style.display = "block", r2 != null && (r2.style.display = "block"));
      }, c.prototype.Chosecolor = function() {
        document.getElementById("color-picker").click();
      }, c.prototype.ColorChange = function(t2) {
        document.getElementById("colorbox").style.backgroundColor = t2, s.MxFun.setCurrentColor(t2);
      }, c.prototype.SwitchShowLayout = function() {
        var t2 = document.getElementById("ModelTreeInterface"), e2 = document.getElementById("ModelTreeThumbnail"), n2 = document.getElementById("LayerThumbnail"), i2 = document.getElementById("LayerInterface"), r2 = document.getElementById("LayerOut"), a2 = document.getElementById("LayerOutInterface");
        t2.style.display = "none", i2.style.display = "none", a2 && a2.style.display == "none" ? (r2 && (r2.style.display = "block"), a2.style.display = "block", a2.style.left = "80px", a2.style.top = "120px", e2 != null && (e2.style.display = "block"), n2 && (n2.style.display = "block"), t2.style.display = "none", i2.style.display = "none") : (a2 && (a2.style.display = "none"), e2 != null && (e2.style.display = "block"), n2 && (n2.style.display = "block"), r2 && (r2.style.display = "block"));
      }, c.prototype.Fullscreen = function() {
        var t2 = document.documentElement;
        t2.requestFullscreen ? t2.requestFullscreen() : t2.mozRequestFullScreen ? t2.mozRequestFullScreen() : t2.webkitRequestFullScreen && t2.webkitRequestFullScreen(), document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen ? document.webkitCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen(), this.IsFullStatus() ? ($("img[title='\u53D6\u6D88\u5168\u5C4F']").attr("src", this.uiPath + "/image\\fullscreen1.gif"), $("img[title='\u53D6\u6D88\u5168\u5C4F']").attr("title", "\u5168\u5C4F")) : ($("img[title='\u5168\u5C4F']").attr("src", this.uiPath + "/image\\escscreen1.gif"), $("img[title='\u5168\u5C4F']").attr("title", "\u53D6\u6D88\u5168\u5C4F"));
      }, c.prototype.IsFullStatus = function() {
        return (document.fullscreenEnabled || document.mozFullscreenElement || document.webkitFullscreenElement) != null;
      }, c);
      function c() {
        return a !== null && a.apply(this, arguments) || this;
      }
      n.MxUiObjectPC = l;
    }, { "../MxFun": 34, "./MxUiObject": 64 }], 67: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxUiVue = void 0;
      var i, r, a, o = t("../MxFun"), s = t("../Operate/MxJigCmdManager"), l = t("../MxTools"), c = t("../Operate/MxCmdRunManager");
      function u(t2) {
        if (t2 == 32 || t2 == 13)
          if (s.MxJigCmdManager.isRunning())
            s.MxJigCmdManager.OnEnter(t2);
          else {
            var e2 = f(), n2 = "";
            n2 = e2.length == 0 ? c.MxCmdRunManager.GetPrvCmd() : e2, m(""), n2 = l.MxTools.stringTrimLeftSpace(n2), o.MxFun.sendStringToExecute(n2);
          }
        else if (t2 == 27)
          s.MxJigCmdManager.isRunning() ? s.MxJigCmdManager.stopCmd() : d(" *\u53D6\u6D88*\n\u547D\u4EE4:");
        else if (t2 == 38)
          s.MxJigCmdManager.isRunning() || (c.MxCmdRunManager.MoveUpKey(), (i2 = c.MxCmdRunManager.GetListCommad()).length != 0 && (m(i2), p()));
        else if (t2 == 40) {
          var i2;
          s.MxJigCmdManager.isRunning() || (c.MxCmdRunManager.MoveDownKey(), (i2 = c.MxCmdRunManager.GetListCommad()).length != 0 && (m(i2), p()));
        }
      }
      function h(t2, e2) {
        e2 === void 0 && (e2 = true);
        var n2 = t2.length;
        if (!(n2 < 1)) {
          for (var i2 = a.getCmdLine(), r2 = i2.getCmdTip(), o2 = i2.getCmdText(), s2 = t2.indexOf("\n"), l2 = 0, c2 = true; s2 != -1 && (c2 ? (i2.addCmdDisplay("\n" + r2 + o2 + t2.substring(l2, s2 - l2)), o2 = r2 = "", c2 = false) : i2.addCmdDisplay("\n" + t2.substring(l2, s2 - l2)), (l2 = s2 + 1) < n2); )
            s2 = t2.indexOf("\n", l2);
          if (c2) {
            var u2 = t2.substring(l2, n2 - l2), h2 = u2.indexOf("\r"), d2 = u2.length;
            r2 = h2 == -1 ? r2 + o2 + u2 : h2 + 1 < d2 ? u2.substring(h2 + 1, d2 - h2 - 1) : "";
          } else
            l2 < n2 && (r2 = t2.substring(l2, n2));
          o2 = "", e2 && (r2 += " "), i2.setCmdTip(r2), i2.setCmdText(o2), i2.upDisplay();
        }
      }
      function d(t2) {
        for (var e2 = [], n2 = 1; n2 < arguments.length; n2++)
          e2[n2 - 1] = arguments[n2];
        if (a != null) {
          for (var i2 = arguments, r2 = i2[0], o2 = 0; o2 < i2.length - 1; o2++) {
            var s2 = new RegExp("\\{" + o2 + "\\}", "gm");
            r2 = r2.replace(s2, i2[o2 + 1]);
          }
          h(r2, true);
        }
      }
      function p() {
        a != null && a.getCmdLine().upDisplay();
      }
      function f() {
        if (a == null)
          return "";
        var t2 = a.getCmdLine();
        return l.MxTools.stringTrimLeftRightSpace(t2.getCmdText());
      }
      function m(t2) {
        if (a != null)
          return a.getCmdLine().setCmdText(t2);
      }
      function g(t2) {
        var e2 = s.MxJigCmdManager.getCurCmd();
        e2 != null && (e2.getDynImput().onKeyDonw(t2) || u(t2));
      }
      i = n.MxUiVue || (n.MxUiVue = {}), a = void 0, (r = i.CursorType || (i.CursorType = {}))[r.kNormal = 0] = "kNormal", r[r.kRect = 1] = "kRect", r[r.kCross = 2] = "kCross", i.isNull = function() {
        return a == null;
      }, i.init = function(t2) {
        (a = t2).mountKeydownEvent(u), a.getDynamicInput().mountKeydownEvent(g);
      }, i.setTipCoord = function(t2) {
        a != null && a.setTipCoord(t2);
      }, i.setCursorType = function(t2) {
        a != null && a.setCursorType(t2);
      }, i.AcutPrintfNoFormat = h, i.acutPrintf = d, i.cmdLineUpDisplay = p, i.getCmdText = f, i.setCmdText = m, i.getCmdDisplay = function() {
        return a == null ? "" : a.getCmdLine().getCmdDisplay();
      }, i.setCmdDisplay = function(t2) {
        if (a != null)
          return a.getCmdLine().setCmdDisplay(t2);
      }, i.getCmdTip = function() {
        return a == null ? "" : a.getCmdLine().getCmdTip();
      }, i.setCmdTip = function(t2) {
        if (a != null)
          return a.getCmdLine().setCmdTip(t2);
      }, i.restoreCmdStatus = function() {
        if (a != null) {
          var t2 = a.getCmdLine();
          t2.getCmdTip() == " " && t2.getCmdText().length == 0 ? (t2.setCmdTip(""), d("{0}:", "\u547D\u4EE4")) : d("\n{0}:", "\u547D\u4EE4");
        }
      }, i.DynamicInput_upDisplay = function() {
        a != null && i.OnMxEvent({ name: "dynInputUpDisplay" });
      }, i.DynamicInput_setType = function(t2) {
        a != null && a.getDynamicInput().setType(t2);
      }, i.DynamicInput_getType = function() {
        return a == null ? s.MxJigCmdManager.DynamicInputType.kNoInput : a.getDynamicInput().getType();
      }, i.DynamicInput_setPos = function(t2) {
        a != null && a.getDynamicInput().setPos([t2.x, t2.y]);
      }, i.DynamicInput_setTip = function(t2) {
        a != null && a.getDynamicInput().setTip(t2);
      }, i.DynamicInput_setValue1 = function(t2) {
        a != null && a.getDynamicInput().setValue1(t2);
      }, i.DynamicInput_getValue1 = function() {
        return a == null ? "" : a.getDynamicInput().getValue1();
      }, i.DynamicInput_setValue1Pos = function(t2) {
        a != null && a.getDynamicInput().setValue1Pos([t2.x, t2.y]);
      }, i.DynamicInput_setValue2 = function(t2) {
        a != null && a.getDynamicInput().setValue2(t2);
      }, i.DynamicInput_getValue2 = function() {
        return a == null ? "" : a.getDynamicInput().getValue2();
      }, i.DynamicInput_getFocusValue = function() {
        return a == null ? "" : a.getDynamicInput().getFocusValue();
      }, i.DynamicInput_setValue2Pos = function(t2) {
        a != null && a.getDynamicInput().setValue2Pos([t2.x, t2.y]);
      }, i.DynamicInput_setShow = function(t2) {
        a != null && a.getDynamicInput().setShow(t2);
      }, i.DynamicInput_isShow = function() {
        return a != null && a.getDynamicInput().isShow();
      }, i.OnMxEvent = function(t2) {
        if (a == null)
          return false;
        a.OnMxEvent(t2);
      };
    }, { "../MxFun": 34, "../MxTools": 45, "../Operate/MxCmdRunManager": 53, "../Operate/MxJigCmdManager": 58 }], 68: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.ExternalReferenceManager = n.ExternalReferenceDatabase = n.Blocks = n.Block = n.Layer = n.MxNewDisplayMemorySection = n.MxNewDisplayMemorySectionType = n.TextureData = n.BlockInstance = n.BlockRef = n.ClipPlans = n.ClipPlan = void 0;
      var i = t("three"), r = t("../MxShader"), a = t("./MxBrowseLayerData"), o = t("../MxManager"), s = t("../MxNetData"), l = t("../MxStencilObject"), c = t("../MxFun"), u = function() {
        this.x1 = 0, this.y1 = 0, this.x2 = 0, this.y2 = 0;
      };
      n.ClipPlan = u;
      var h = function() {
        this.ver = 4, this.id = 1, this.clipPlanArray = new Array(), this.clipPoints = [], this.instansClipePoints = [];
      };
      n.ClipPlans = h;
      var d = function() {
        this.ver = 4, this.mat = new i.Matrix4(), this.blkRecId = -1, this.blkOwnerId = 0, this.layerId = -1, this.color = 16777215, this.clipPlans = new h();
      };
      n.BlockRef = d;
      var p = function() {
        this.mat = new i.Matrix4(), this.color = new Array(), this.topLayerColor = new Array(), this.clipPlans = new h(), this.clipMat = new i.Matrix4();
      };
      n.BlockInstance = p;
      var f, m, g = function() {
      };
      n.TextureData = g, (m = f = n.MxNewDisplayMemorySectionType || (n.MxNewDisplayMemorySectionType = {}))[m.kLinesType = 1] = "kLinesType", m[m.kTriangleType = 2] = "kTriangleType", m[m.kLinesType_Float = 3] = "kLinesType_Float", m[m.kTriangleType_Float = 4] = "kTriangleType_Float", m[m.kPointType_Float = 5] = "kPointType_Float", m[m.kPointType = 6] = "kPointType", n.MxNewDisplayMemorySection = function() {
        this.id = 0, this.type = f.kLinesType, this.blockId = 0, this.layerId = 0, this.color = 0, this.points = [];
      };
      var v = (y.prototype.Show = function(t2) {
        for (var e2 = 0, n2 = this._entitys.length; e2 < n2; e2++)
          this._entitys[e2].visible = t2;
      }, y.prototype.updataClipMaterial = function(t2) {
        for (var e2 = this._material_clip.length, n2 = 0.5 * t2.width, i2 = 0.5 * t2.height, r2 = 0; r2 < e2; r2++)
          this._material_clip[r2].uniforms.vieww.value = n2, this._material_clip[r2].uniforms.viewh.value = i2;
      }, y.prototype.createThreejsObjForMesh_Clip = function(t2, e2, n2) {
        t2.size != 0 && t2.forEach(function(t3) {
          var a2 = t3;
          if (a2.length != 0) {
            var s2 = [], c2 = [], u2 = a2[0].clipPlans;
            u2.ver <= 3 && (s2.push(u2.clipPlanArray[0].x1, u2.clipPlanArray[0].y1), c2.push(u2.clipPlanArray[0].x2, u2.clipPlanArray[0].y2));
            for (var h2 = [], d2 = [], p2 = [], f2 = [], m2 = [], g2 = [], v2 = [], y2 = 0; y2 < a2.length; y2++) {
              var x2 = a2[y2];
              h2 = h2.concat(x2.mat.elements.slice(0, 4)), d2 = d2.concat(x2.mat.elements.slice(4, 8)), p2 = p2.concat(x2.mat.elements.slice(8, 12)), f2 = f2.concat(x2.mat.elements.slice(12, 16)), m2.push(0), g2 = g2.concat(a2[y2].color);
            }
            if (0 < this._geometryMeshPositionsByBlock.length)
              for (y2 = 0; y2 < a2.length; y2++)
                g2 = g2.concat(a2[y2].color);
            if (0 < this._geometryMeshPositionsByBlock_ZeroLayer.length)
              for (y2 = 0; y2 < a2.length; y2++)
                v2 = v2.concat(a2[y2].topLayerColor);
            var b2, w2 = 0.5 * n2.width, M2 = 0.5 * n2.height;
            u2.ver <= 3 ? (b2 = new i.RawShaderMaterial({ uniforms: { clippt1: { value: s2 }, clippt2: { value: c2 }, vieww: { value: w2 }, viewh: { value: M2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_CLIP, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_CLIP, linewidth: 1, transparent: true, side: i.DoubleSide }), this._material_clip.push(b2)) : b2 = new i.RawShaderMaterial({ vertexShader: r.MxShader.VSHADER_COLOR_POINT, fragmentShader: r.MxShader.FSHADER_COLOR_POINT, linewidth: 1, transparent: true, side: i.DoubleSide });
            for (var _6 = 0; _6 < this._geometryMeshPostion.length; _6++)
              (C2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, C2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPostion[_6], 2)), C2.setAttribute("color", new i.Float32BufferAttribute(this._geometryMeshColor[_6], 3)), C2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), C2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), C2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), C2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), C2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(m2), 1)), (T = new i.Mesh(C2, b2)).frustumCulled = false, T.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(T), this._entitys.push(T), 4 <= u2.ver && 0 < u2.instansClipePoints.length && new l.MxStencilObject().associateObject(T, u2.instansClipePoints);
            for (_6 = 0; _6 < this._geometryMeshPositionsByBlock.length; _6++)
              (C2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, C2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPositionsByBlock[_6], 2)), C2.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(g2), 3)), C2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), C2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), C2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), C2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), C2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(m2), 1)), (T = new i.Mesh(C2, b2)).frustumCulled = false, T.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(T), this._entitys.push(T), 4 <= u2.ver && 0 < u2.instansClipePoints.length && new l.MxStencilObject().associateObject(T, u2.instansClipePoints);
            for (_6 = 0; _6 < this._geometryMeshPositionsByBlock_ZeroLayer.length; _6++)
              (C2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, C2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPositionsByBlock_ZeroLayer[_6], 2)), C2.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(v2), 3)), C2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), C2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), C2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), C2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), C2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(m2), 1)), (T = new i.Mesh(C2, b2)).frustumCulled = false, T.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(T), this._entitys.push(T), 4 <= u2.ver && 0 < u2.instansClipePoints.length && new l.MxStencilObject().associateObject(T, u2.instansClipePoints);
            var S2 = new i.RawShaderMaterial({ uniforms: { color: { value: this._color }, clippt1: { value: s2 }, clippt2: { value: c2 }, vieww: { value: w2 }, viewh: { value: M2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_BYLAYER_CLIP, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_CLIP, linewidth: 1, transparent: true, side: i.DoubleSide });
            for (this._material_clip.push(S2), _6 = 0; _6 < this._geometryMeshPositionsByLayer.length; _6++) {
              var C2, T;
              (C2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, C2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPositionsByLayer[_6], 2)), C2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), C2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), C2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), C2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), C2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(m2), 1)), (T = new i.Mesh(C2, S2)).frustumCulled = false, T.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(T), this._entitys.push(T), 4 <= u2.ver && 0 < u2.instansClipePoints.length && new l.MxStencilObject().associateObject(T, u2.instansClipePoints);
            }
          }
        }, this);
      }, y.prototype.createThreejsObjForCurve_Clip = function(t2, e2, n2) {
        t2.size != 0 && t2.forEach(function(t3, a2, s2) {
          var c2 = t3;
          if (c2.length != 0) {
            var u2 = [], h2 = [], d2 = c2[0].clipPlans;
            d2.ver <= 3 && (u2.push(d2.clipPlanArray[0].x1, d2.clipPlanArray[0].y1), h2.push(d2.clipPlanArray[0].x2, d2.clipPlanArray[0].y2));
            for (var p2 = [], f2 = [], m2 = [], g2 = [], v2 = [], y2 = [], x2 = [], b2 = 0; b2 < c2.length; b2++) {
              var w2 = c2[b2];
              p2 = p2.concat(w2.mat.elements.slice(0, 4)), f2 = f2.concat(w2.mat.elements.slice(4, 8)), m2 = m2.concat(w2.mat.elements.slice(8, 12)), g2 = g2.concat(w2.mat.elements.slice(12, 16)), v2.push(0);
            }
            if (0 < this._geometryCurvePositionsByBlock.length)
              for (b2 = 0; b2 < c2.length; b2++)
                y2 = y2.concat(c2[b2].color);
            if (0 < this._geometryCurvePositionsByBlock_ZeroLayer.length)
              for (b2 = 0; b2 < c2.length; b2++)
                x2 = x2.concat(c2[b2].topLayerColor);
            var M2, _6 = 0.5 * n2.width, S2 = 0.5 * n2.height;
            d2.ver <= 3 ? (M2 = new i.RawShaderMaterial({ uniforms: { clippt1: { value: u2 }, clippt2: { value: h2 }, vieww: { value: _6 }, viewh: { value: S2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_CLIP, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_CLIP, linewidth: 1, transparent: true, side: i.DoubleSide }), this._material_clip.push(M2)) : M2 = new i.RawShaderMaterial({ vertexShader: r.MxShader.VSHADER_COLOR_POINT, fragmentShader: r.MxShader.FSHADER_COLOR_POINT, linewidth: 1, transparent: true, side: i.DoubleSide });
            for (var C2 = 0; C2 < this._geometryCurvePostion.length; C2++)
              (E = new i.InstancedBufferGeometry()).maxInstancedCount = c2.length, E.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePostion[C2], 2)), E.setAttribute("color", new i.Float32BufferAttribute(this._geometryCurveColor[C2], 3)), E.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), E.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), E.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(m2), 4)), E.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(g2), 4)), E.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(v2), 1)), (D = new i.LineSegments(E, M2)).frustumCulled = false, D.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(D), this._entitys.push(D), 4 <= d2.ver && 0 < d2.instansClipePoints.length && new l.MxStencilObject().associateObject(D, d2.instansClipePoints);
            for (C2 = 0; C2 < this._geometryCurvePositionsByBlock.length; C2++)
              (E = new i.InstancedBufferGeometry()).maxInstancedCount = c2.length, E.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePositionsByBlock[C2], 2)), E.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(y2), 3)), E.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), E.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), E.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(m2), 4)), E.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(g2), 4)), E.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(v2), 1)), (D = new i.LineSegments(E, M2)).frustumCulled = false, D.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(D), this._entitys.push(D), 4 <= d2.ver && 0 < d2.instansClipePoints.length && new l.MxStencilObject().associateObject(D, d2.instansClipePoints);
            for (C2 = 0; C2 < this._geometryCurvePositionsByBlock_ZeroLayer.length; C2++)
              (E = new i.InstancedBufferGeometry()).maxInstancedCount = c2.length, E.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePositionsByBlock_ZeroLayer[C2], 2)), E.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(x2), 3)), E.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), E.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), E.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(m2), 4)), E.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(g2), 4)), E.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(v2), 1)), (D = new i.LineSegments(E, M2)).frustumCulled = false, D.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(D), this._entitys.push(D), 4 <= d2.ver && 0 < d2.instansClipePoints.length && new l.MxStencilObject().associateObject(D, d2.instansClipePoints);
            var T = new i.RawShaderMaterial({ uniforms: { color: { value: this._color }, clippt1: { value: u2 }, clippt2: { value: h2 }, vieww: { value: _6 }, viewh: { value: S2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_BYLAYER_CLIP, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_CLIP, linewidth: 1, transparent: true, side: i.DoubleSide });
            for (this._material_clip.push(T), C2 = 0; C2 < this._geometryCurvePositionsByLayer.length; C2++) {
              var E, D;
              (E = new i.InstancedBufferGeometry()).maxInstancedCount = c2.length, E.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePositionsByLayer[C2], 2)), E.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), E.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(f2), 4)), E.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(m2), 4)), E.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(g2), 4)), E.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(v2), 1)), (D = new i.LineSegments(E, T)).frustumCulled = false, D.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(D), this._entitys.push(D), 4 <= d2.ver && 0 < d2.instansClipePoints.length && new l.MxStencilObject().associateObject(D, d2.instansClipePoints);
            }
          }
        }, this);
      }, y.prototype.createThreejsObjForCurve = function(t2, e2) {
        if (t2.length != 0) {
          for (var n2 = [], a2 = [], s2 = [], l2 = [], c2 = [], u2 = [], h2 = [], d2 = 0; d2 < t2.length; d2++) {
            var p2 = t2[d2];
            n2 = n2.concat(p2.mat.elements.slice(0, 4)), a2 = a2.concat(p2.mat.elements.slice(4, 8)), s2 = s2.concat(p2.mat.elements.slice(8, 12)), l2 = l2.concat(p2.mat.elements.slice(12, 16)), c2.push(0);
          }
          if (0 < this._geometryCurvePositionsByBlock.length)
            for (d2 = 0; d2 < t2.length; d2++)
              u2 = u2.concat(t2[d2].color);
          if (0 < this._geometryCurvePositionsByBlock_ZeroLayer.length)
            for (d2 = 0; d2 < t2.length; d2++)
              h2 = h2.concat(t2[d2].topLayerColor);
          for (var f2 = new i.RawShaderMaterial({ vertexShader: r.MxShader.VSHADER_COLOR_POINT, fragmentShader: r.MxShader.FSHADER_COLOR_POINT, linewidth: 1, transparent: true, side: i.DoubleSide }), m2 = 0; m2 < this._geometryCurvePostion.length; m2++)
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePostion[m2], 2)), v2.setAttribute("color", new i.Float32BufferAttribute(this._geometryCurveColor[m2], 3)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.LineSegments(v2, f2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(y2), this._entitys.push(y2);
          for (m2 = 0; m2 < this._geometryCurvePositionsByBlock.length; m2++)
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePositionsByBlock[m2], 2)), v2.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(u2), 3)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.LineSegments(v2, f2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(y2), this._entitys.push(y2);
          for (m2 = 0; m2 < this._geometryCurvePositionsByBlock_ZeroLayer.length; m2++)
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePositionsByBlock_ZeroLayer[m2], 2)), v2.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(h2), 3)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.LineSegments(v2, f2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(y2), this._entitys.push(y2);
          var g2 = new i.RawShaderMaterial({ uniforms: { color: { value: this._color } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_BYLAYER, fragmentShader: r.MxShader.FSHADER_COLOR_POINT, linewidth: 1, transparent: true, side: i.DoubleSide });
          for (m2 = 0; m2 < this._geometryCurvePositionsByLayer.length; m2++) {
            var v2, y2;
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryCurvePositionsByLayer[m2], 2)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.LineSegments(v2, g2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(y2), this._entitys.push(y2);
          }
        }
      }, y.prototype.createThreejsObjForMemorySections_clip = function(t2, e2, n2) {
        t2.size != 0 && t2.forEach(function(t3) {
          var a2 = t3;
          if (a2.length != 0) {
            for (var s2 = a2[0].clipPlans, c2 = [], u2 = [], h2 = [], d2 = [], p2 = [], m2 = 0; m2 < a2.length; m2++) {
              var g2 = a2[m2];
              c2 = c2.concat(g2.mat.elements.slice(0, 4)), u2 = u2.concat(g2.mat.elements.slice(4, 8)), h2 = h2.concat(g2.mat.elements.slice(8, 12)), d2 = d2.concat(g2.mat.elements.slice(12, 16)), p2.push(0);
            }
            for (var v2 = this._MemorySections.length, y2 = 0; y2 < v2; y2++) {
              var x2 = this._MemorySections[y2], b2 = n2.automaticInversionColor2(x2.color), w2 = [];
              if ((4278190080 & b2) == 16777216 ? w2 = this._color : w2.push((255 & b2) / 255, (b2 >> 8 & 255) / 255, (b2 >> 16 & 255) / 255), x2.type == f.kLinesType) {
                var M2 = new i.RawShaderMaterial({ uniforms: { color: { value: w2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_FORMXCAD, linewidth: 1, transparent: true, side: i.DoubleSide });
                (S2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, S2.setAttribute("position", new i.Float32BufferAttribute(x2.points, 3)), S2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(c2), 4)), S2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), S2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), S2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), S2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(p2), 1)), (C2 = new i.LineSegments(S2, M2)).frustumCulled = false, C2.renderOrder = o.MxData.iCADCurveRenderOrder, 4 <= s2.ver && 0 < s2.instansClipePoints.length && new l.MxStencilObject().associateObject(C2, s2.instansClipePoints), e2.add(C2), this._entitys.push(C2);
              } else if (x2.type == f.kTriangleType) {
                M2 = new i.RawShaderMaterial({ uniforms: { color: { value: w2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_FORMXCAD, transparent: true, side: i.DoubleSide }), (S2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, S2.setAttribute("position", new i.Float32BufferAttribute(x2.points, 3)), S2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(c2), 4)), S2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), S2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), S2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), S2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(p2), 1));
                var _6 = new i.Mesh(S2, M2);
                _6.frustumCulled = false, _6.renderOrder = o.MxData.iCADMeshRenderOrder, 4 <= s2.ver && 0 < s2.instansClipePoints.length && new l.MxStencilObject().associateObject(_6, s2.instansClipePoints), e2.add(_6), this._entitys.push(_6);
              } else if (x2.type == f.kPointType) {
                var S2, C2;
                M2 = new i.RawShaderMaterial({ uniforms: { color: { value: w2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_FORMXCAD, transparent: true, side: i.DoubleSide }), (S2 = new i.InstancedBufferGeometry()).maxInstancedCount = a2.length, S2.setAttribute("position", new i.Float32BufferAttribute(x2.points, 3)), S2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(c2), 4)), S2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), S2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), S2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), S2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(p2), 1)), (C2 = new i.Points(S2, M2)).frustumCulled = false, C2.renderOrder = o.MxData.iCADCurveRenderOrder, 4 <= s2.ver && 0 < s2.instansClipePoints.length && new l.MxStencilObject().associateObject(C2, s2.instansClipePoints), e2.add(C2), this._entitys.push(C2);
              }
            }
          }
        }, this);
      }, y.prototype.createThreejsObjForMemorySections = function(t2, e2, n2) {
        if (t2.length != 0) {
          for (var a2 = [], s2 = [], l2 = [], c2 = [], u2 = [], h2 = 0; h2 < t2.length; h2++) {
            var d2 = t2[h2];
            a2 = a2.concat(d2.mat.elements.slice(0, 4)), s2 = s2.concat(d2.mat.elements.slice(4, 8)), l2 = l2.concat(d2.mat.elements.slice(8, 12)), c2 = c2.concat(d2.mat.elements.slice(12, 16)), u2.push(0);
          }
          for (var p2 = this._MemorySections.length, m2 = 0; m2 < p2; m2++) {
            var g2 = this._MemorySections[m2], v2 = n2.automaticInversionColor2(g2.color), y2 = [];
            if ((4278190080 & v2) == 16777216 ? (y2 = this._color, this._colorValue) : y2.push((255 & v2) / 255, (v2 >> 8 & 255) / 255, (v2 >> 16 & 255) / 255), g2.type == f.kLinesType) {
              var x2 = new i.RawShaderMaterial({ uniforms: { color: { value: y2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_FORMXCAD, linewidth: 1, transparent: true, side: i.DoubleSide });
              (w2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, w2.setAttribute("position", new i.Float32BufferAttribute(g2.points, 3)), w2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), w2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), w2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), w2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(c2), 4)), w2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(u2), 1)), (M2 = new i.LineSegments(w2, x2)).frustumCulled = false, M2.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(M2), this._entitys.push(M2);
            } else if (g2.type == f.kTriangleType) {
              x2 = new i.RawShaderMaterial({ uniforms: { color: { value: y2 } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_FORMXCAD, transparent: true, side: i.DoubleSide }), (w2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, w2.setAttribute("position", new i.Float32BufferAttribute(g2.points, 3)), w2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), w2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), w2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), w2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(c2), 4)), w2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(u2), 1));
              var b2 = new i.Mesh(w2, x2);
              b2.frustumCulled = false, b2.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(b2), this._entitys.push(b2);
            } else if (g2.type == f.kPointType) {
              var w2, M2;
              x2 = new i.RawShaderMaterial({ uniforms: { color: { value: y2 }, size: 1 }, vertexShader: r.MxShader.VSHADER_COLOR_POINT_FORMXCAD, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_FORMXCAD, transparent: true, side: i.DoubleSide }), (w2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, w2.setAttribute("position", new i.Float32BufferAttribute(g2.points, 3)), w2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), w2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), w2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), w2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(c2), 4)), w2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(u2), 1)), (M2 = new i.Points(w2, x2)).frustumCulled = false, M2.renderOrder = o.MxData.iCADCurveRenderOrder, e2.add(M2), this._entitys.push(M2);
            }
          }
        }
      }, y.prototype.createThreejsObjForTexture = function(t2, e2, n2) {
        if (t2.length != 0) {
          var a2 = [], s2 = [], l2 = [], u2 = [], h2 = [], d2 = n2.getCurrentLoadUrl(), p2 = c.MxFun.dwgDir();
          p2.length != 0 && d2.substring(d2.lastIndexOf("/buf/")).toLowerCase() != "/buf/" && (d2 = d2 + p2 + "/buf/");
          for (var f2 = 0; f2 < t2.length; f2++) {
            var m2 = t2[f2];
            a2 = a2.concat(m2.mat.elements.slice(0, 4)), s2 = s2.concat(m2.mat.elements.slice(4, 8)), l2 = l2.concat(m2.mat.elements.slice(8, 12)), u2 = u2.concat(m2.mat.elements.slice(12, 16)), h2.push(0);
          }
          for (var g2 = 0; g2 < this._TextureData.length; g2++) {
            var v2 = this._TextureData[g2], y2 = new i.InstancedBufferGeometry();
            y2.maxInstancedCount = t2.length, y2.setAttribute("position", new i.Float32BufferAttribute(v2.pos, 2)), y2.setAttribute("uv", new i.Float32BufferAttribute(v2.textureCoord, 2)), y2.setAttribute("color", new i.Float32BufferAttribute(v2.color, 3)), y2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), y2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), y2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), y2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), y2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(h2), 1));
            var x2 = d2 + v2.sFileName, b2 = { texture: { value: new i.TextureLoader().load(x2, function(t3) {
              t3 && n2.updateDisplay();
            }) } };
            b2.texture.value.wrapS = b2.texture.value.wrapT = i.RepeatWrapping;
            var w2 = new i.RawShaderMaterial({ uniforms: b2, vertexShader: r.MxShader.VSHADER_COLOR_POINT_TEXTURE, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_TEXTURE, transparent: true, side: i.DoubleSide }), M2 = new i.Mesh(y2, w2);
            M2.renderOrder = o.MxData.iCADMeshRenderOrder, M2.frustumCulled = false, e2.add(M2), this._entitys.push(M2);
          }
        }
      }, y.prototype.createThreejsObjForTexture_Clip = function(t2, e2, n2) {
        if (t2.size != 0) {
          var a2 = n2.getCurrentLoadUrl(), s2 = c.MxFun.dwgDir();
          s2.length != 0 && a2.substring(a2.lastIndexOf("/buf/")).toLowerCase() != "/buf/" && (a2 = a2 + s2 + "/buf/"), t2.forEach(function(t3) {
            var s3 = t3;
            if (s3.length != 0) {
              for (var c2 = s3[0].clipPlans, u2 = [], h2 = [], d2 = [], p2 = [], f2 = [], m2 = 0; m2 < s3.length; m2++) {
                var g2 = s3[m2];
                u2 = u2.concat(g2.mat.elements.slice(0, 4)), h2 = h2.concat(g2.mat.elements.slice(4, 8)), d2 = d2.concat(g2.mat.elements.slice(8, 12)), p2 = p2.concat(g2.mat.elements.slice(12, 16)), f2.push(0);
              }
              for (var v2 = 0; v2 < this._TextureData.length; v2++) {
                var y2 = this._TextureData[v2], x2 = new i.InstancedBufferGeometry();
                x2.maxInstancedCount = s3.length, x2.setAttribute("position", new i.Float32BufferAttribute(y2.pos, 2)), x2.setAttribute("uv", new i.Float32BufferAttribute(y2.textureCoord, 2)), x2.setAttribute("color", new i.Float32BufferAttribute(y2.color, 3)), x2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(u2), 4)), x2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(h2), 4)), x2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(d2), 4)), x2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(p2), 4)), x2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(f2), 1));
                var b2 = a2 + y2.sFileName, w2 = { texture: { value: new i.TextureLoader().load(b2, function(t4) {
                  t4 && n2.updateDisplay();
                }) } };
                w2.texture.value.wrapS = w2.texture.value.wrapT = i.RepeatWrapping;
                var M2 = new i.RawShaderMaterial({ uniforms: w2, vertexShader: r.MxShader.VSHADER_COLOR_POINT_TEXTURE, fragmentShader: r.MxShader.FSHADER_COLOR_POINT_TEXTURE, transparent: true, side: i.DoubleSide }), _6 = new i.Mesh(x2, M2);
                _6.renderOrder = o.MxData.iCADMeshRenderOrder, _6.frustumCulled = false, 4 <= c2.ver && 0 < c2.instansClipePoints.length && new l.MxStencilObject().associateObject(_6, c2.instansClipePoints), e2.add(_6), this._entitys.push(_6);
              }
            }
          }, this);
        }
      }, y.prototype.createThreejsObjForMesh = function(t2, e2) {
        if (t2.length != 0) {
          for (var n2 = [], a2 = [], s2 = [], l2 = [], c2 = [], u2 = [], h2 = [], d2 = 0; d2 < t2.length; d2++) {
            var p2 = t2[d2];
            n2 = n2.concat(p2.mat.elements.slice(0, 4)), a2 = a2.concat(p2.mat.elements.slice(4, 8)), s2 = s2.concat(p2.mat.elements.slice(8, 12)), l2 = l2.concat(p2.mat.elements.slice(12, 16)), c2.push(0), u2 = u2.concat(t2[d2].color);
          }
          if (0 < this._geometryMeshPositionsByBlock.length)
            for (d2 = 0; d2 < t2.length; d2++)
              u2 = u2.concat(t2[d2].color);
          if (0 < this._geometryMeshPositionsByBlock_ZeroLayer.length)
            for (d2 = 0; d2 < t2.length; d2++)
              h2 = h2.concat(t2[d2].topLayerColor);
          for (var f2 = new i.RawShaderMaterial({ vertexShader: r.MxShader.VSHADER_COLOR_POINT, fragmentShader: r.MxShader.FSHADER_COLOR_POINT, transparent: true, side: i.DoubleSide }), m2 = 0; m2 < this._geometryMeshPostion.length; m2++)
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPostion[m2], 2)), v2.setAttribute("color", new i.Float32BufferAttribute(this._geometryMeshColor[m2], 3)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.Mesh(v2, f2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(y2), this._entitys.push(y2);
          for (m2 = 0; m2 < this._geometryMeshPositionsByBlock.length; m2++)
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPositionsByBlock[m2], 2)), v2.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(u2), 3)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.Mesh(v2, f2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(y2), this._entitys.push(y2);
          for (m2 = 0; m2 < this._geometryMeshPositionsByBlock_ZeroLayer.length; m2++)
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPositionsByBlock_ZeroLayer[m2], 2)), v2.setAttribute("color", new i.InstancedBufferAttribute(new Float32Array(h2), 3)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.Mesh(v2, f2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(y2), this._entitys.push(y2);
          var g2 = new i.RawShaderMaterial({ uniforms: { color: { value: this._color } }, vertexShader: r.MxShader.VSHADER_COLOR_POINT, fragmentShader: r.MxShader.FSHADER_COLOR_POINT, transparent: true, side: i.DoubleSide });
          for (m2 = 0; m2 < this._geometryMeshPositionsByLayer.length; m2++) {
            var v2, y2;
            (v2 = new i.InstancedBufferGeometry()).maxInstancedCount = t2.length, v2.setAttribute("position", new i.Float32BufferAttribute(this._geometryMeshPositionsByLayer[m2], 2)), v2.setAttribute("tran1", new i.InstancedBufferAttribute(new Float32Array(n2), 4)), v2.setAttribute("tran2", new i.InstancedBufferAttribute(new Float32Array(a2), 4)), v2.setAttribute("tran3", new i.InstancedBufferAttribute(new Float32Array(s2), 4)), v2.setAttribute("tran4", new i.InstancedBufferAttribute(new Float32Array(l2), 4)), v2.setAttribute("ishide", new i.InstancedBufferAttribute(new Float32Array(c2), 1)), (y2 = new i.Mesh(v2, g2)).frustumCulled = false, y2.renderOrder = o.MxData.iCADMeshRenderOrder, e2.add(y2), this._entitys.push(y2);
          }
        }
      }, y.prototype.addGeometryCurve = function(t2, e2, n2, i2, r2) {
        0 < t2.length && (this._geometryCurvePostion.push(t2), this._geometryCurveColor.push(e2)), 0 < n2.length && this._geometryCurvePositionsByBlock.push(n2), 0 < i2.length && this._geometryCurvePositionsByLayer.push(i2), 0 < r2.length && this._geometryCurvePositionsByBlock_ZeroLayer.push(r2);
      }, y.prototype.addGeometryMesh = function(t2, e2, n2, i2, r2) {
        0 < t2.length && (this._geometryMeshPostion.push(t2), this._geometryMeshColor.push(e2)), 0 < n2.length && this._geometryMeshPositionsByBlock.push(n2), 0 < i2.length && this._geometryMeshPositionsByLayer.push(i2), 0 < r2.length && this._geometryMeshPositionsByBlock_ZeroLayer.push(r2);
      }, y.prototype.addGeometryTexture = function(t2, e2, n2, i2, r2, a2, o2) {
        var s2 = new g();
        s2.pos = t2, s2.textureCoord = e2, s2.color = n2, s2.sFileName = i2, s2.dAngel = r2, s2.ptRotationPostionX = a2, s2.ptRotationPostionY = o2, this._TextureData.push(s2);
      }, y.prototype.addMemorySections = function(t2) {
        this._MemorySections.push(t2);
      }, y.prototype.createThreejsObj = function(t2, e2, n2, i2, r2) {
        var a2 = n2.getScene(), o2 = n2.getCanvas();
        if (t2.length != 0) {
          if (this._color == null) {
            var s2 = i2.getColor(r2);
            this._color = [], this._color.push((255 & s2) / 255, (s2 >> 8 & 255) / 255, (s2 >> 16 & 255) / 255), this._colorValue = 16777215 & s2;
          }
          this._geometryCurvePostion.length == 0 && this._geometryCurvePositionsByBlock.length == 0 && this._geometryCurvePositionsByLayer.length == 0 && this._geometryCurvePositionsByBlock_ZeroLayer.length == 0 || this.createThreejsObjForCurve(t2, a2), this._geometryMeshPostion.length == 0 && this._geometryMeshPositionsByBlock.length == 0 && this._geometryMeshPositionsByLayer.length == 0 && this._geometryMeshPositionsByBlock_ZeroLayer.length == 0 || this.createThreejsObjForMesh(t2, a2), this._TextureData.length != 0 && this.createThreejsObjForTexture(t2, a2, n2), this._MemorySections.length != 0 && this.createThreejsObjForMemorySections(t2, a2, n2);
        }
        e2.size != 0 && (this._color == null && (s2 = i2.getColor(r2), this._color = [], this._color.push((255 & s2) / 255, (s2 >> 8 & 255) / 255, (s2 >> 16 & 255) / 255), this._colorValue = 16777215 & s2), this._geometryCurvePostion.length == 0 && this._geometryCurvePositionsByBlock.length == 0 && this._geometryCurvePositionsByLayer.length == 0 && this._geometryCurvePositionsByBlock_ZeroLayer.length == 0 || this.createThreejsObjForCurve_Clip(e2, a2, o2), this._geometryMeshPostion.length == 0 && this._geometryMeshPositionsByBlock.length == 0 && this._geometryMeshPositionsByLayer.length == 0 && this._geometryMeshPositionsByBlock_ZeroLayer.length == 0 || this.createThreejsObjForMesh_Clip(e2, a2, o2), this._TextureData.length != 0 && this.createThreejsObjForTexture_Clip(e2, a2, n2), this._MemorySections.length != 0 && this.createThreejsObjForMemorySections_clip(e2, a2, n2)), this._geometryCurvePostion = [], this._geometryCurvePositionsByBlock = [], this._geometryCurvePositionsByLayer = [], this._geometryCurvePositionsByBlock_ZeroLayer = [], this._geometryCurveColor = [], this._geometryMeshPostion = [], this._geometryMeshPositionsByBlock = [], this._geometryMeshPositionsByLayer = [], this._geometryMeshPositionsByBlock_ZeroLayer = [], this._geometryMeshColor = [], this._TextureData = [], this._MemorySections = [];
      }, y);
      function y(t2) {
        this._blockRecId = 0, this._TextureData = [], this._MemorySections = [], this._geometryCurvePostion = new Array(), this._geometryCurveColor = new Array(), this._geometryMeshPostion = new Array(), this._geometryMeshColor = new Array(), this._geometryCurvePositionsByBlock = new Array(), this._geometryMeshPositionsByBlock = new Array(), this._geometryCurvePositionsByLayer = new Array(), this._geometryMeshPositionsByLayer = new Array(), this._geometryCurvePositionsByBlock_ZeroLayer = new Array(), this._geometryMeshPositionsByBlock_ZeroLayer = new Array(), this._entitys = new Array(), this._color = void 0, this._colorValue = 16777215, this._material_clip = [], this._blockRecId = t2;
      }
      n.Layer = v;
      var x = (b.prototype.showLayer = function(t2, e2) {
        var n2 = this._layerTogeometry.get(t2);
        n2 != null && n2.Show(e2);
      }, b.prototype.updataClipMaterial = function(t2) {
        var e2 = t2.getCanvas();
        this._layerTogeometry.forEach(function(t3, n2, i2) {
          t3.updataClipMaterial(e2);
        });
      }, b.prototype.getId = function() {
        return this._id;
      }, b.prototype.getBlkRef = function() {
        return this._blkRef;
      }, b.prototype.createThreejsObj = function(t2, e2) {
        var n2 = this;
        this._layerTogeometry.forEach(function(i2, r2, a2) {
          i2.createThreejsObj(n2._instance, n2._instance_clip, t2, e2, r2);
        });
      }, b.prototype.addGeometryCurve = function(t2, e2, n2, i2, r2, a2) {
        var o2 = this._layerTogeometry.get(n2);
        o2 == null && (o2 = new v(this._id), this._layerTogeometry.set(n2, o2)), o2.addGeometryCurve(t2, e2, i2, r2, a2);
      }, b.prototype.addMemorySections = function(t2) {
        var e2 = this._layerTogeometry.get(t2.layerId);
        e2 == null && (e2 = new v(this._id), this._layerTogeometry.set(t2.layerId, e2)), e2.addMemorySections(t2);
      }, b.prototype.addGeometryTexture = function(t2, e2, n2, i2, r2, a2, o2, s2) {
        var l2 = this._layerTogeometry.get(i2);
        l2 == null && (l2 = new v(this._id), this._layerTogeometry.set(i2, l2)), l2.addGeometryTexture(t2, e2, n2, r2, a2, o2, s2);
      }, b.prototype.addGeometryMesh = function(t2, e2, n2, i2, r2, a2) {
        var o2 = this._layerTogeometry.get(n2);
        o2 == null && (o2 = new v(this._id), this._layerTogeometry.set(n2, o2)), o2.addGeometryMesh(t2, e2, i2, r2, a2);
      }, b.prototype.addInstance = function(t2) {
        var e2;
        t2.clipPlans.ver <= 3 ? t2.clipPlans.clipPlanArray.length == 0 ? this._instance.push(t2) : ((e2 = this._instance_clip.get(t2.clipPlans.id)) == null && (e2 = [], this._instance_clip.set(t2.clipPlans.id, e2)), e2.push(t2)) : t2.clipPlans.instansClipePoints.length == 0 || 100 < this._instance_clip.size ? this._instance.push(t2) : ((e2 = this._instance_clip.get(t2.clipPlans.id)) == null && (e2 = [], this._instance_clip.set(t2.clipPlans.id, e2)), e2.push(t2));
      }, b.prototype.addBlkRef = function(t2) {
        this._blkRef.push(t2);
      }, b);
      function b(t2) {
        this._id = 0, this._layerTogeometry = /* @__PURE__ */ new Map(), this._blkRef = [], this._instance = [], this._instance_clip = /* @__PURE__ */ new Map(), this._id = t2;
      }
      n.Block = x;
      var w = (M.prototype.crateBlock = function(t2) {
        var e2 = this._mapBlock.get(t2);
        return e2 == null && (e2 = new x(t2), this._mapBlock.set(t2, e2)), e2;
      }, M.prototype.getBlock = function(t2) {
        return this._mapBlock.get(t2);
      }, M.prototype.addBlockRef = function(t2) {
        this.crateBlock(t2.blkOwnerId).addBlkRef(t2);
      }, M.prototype.showLayer = function(t2, e2) {
        this._mapBlock.forEach(function(t3, e3) {
          var n2 = t3, i2 = e3;
          return function(t4, e4, r2) {
            t4.showLayer(n2, i2);
          };
        }.call(this, t2, e2));
      }, M.prototype.createBlocks_30 = function(t2, e2) {
        if (!this._isCreate) {
          this.crateBlock(0);
          for (var n2 = 1, r2 = t2.getInt32(12, true), a2 = 80, o2 = 0; o2 < r2; o2++) {
            var s2 = t2.getInt32(a2, true);
            a2 += 4;
            var l2 = t2.getInt32(a2, true);
            a2 += 4;
            var c2 = t2.getInt32(a2, true);
            a2 += 4;
            var p2 = t2.getInt32(a2, true);
            a2 += 4;
            for (var f2 = new Array(), m2 = 0; m2 < 16; m2++) {
              var g2 = t2.getFloat32(a2, true);
              a2 += 4, f2.push(g2);
            }
            var v2 = t2.getInt32(a2, true);
            a2 += 4;
            var y2 = new h();
            y2.id = n2, y2.ver = 3, n2++, y2.clipPlanArray = [];
            for (var x2 = 0; x2 < v2; x2++) {
              var b2 = t2.getFloat32(a2, true);
              a2 += 4;
              var w2 = t2.getFloat32(a2, true);
              a2 += 4;
              var M2 = t2.getFloat32(a2, true);
              a2 += 4;
              var _6 = t2.getFloat32(a2, true);
              a2 += 4;
              var S2 = new u();
              S2.x1 = b2, S2.y1 = w2, S2.x2 = M2, S2.y2 = _6, y2.clipPlanArray.push(S2);
            }
            var C2 = new d();
            C2.ver = 3, C2.mat = new i.Matrix4(), C2.mat.fromArray(f2), C2.blkRecId = c2, C2.blkOwnerId = s2, C2.layerId = l2, C2.color = p2, C2.clipPlans = y2, this.crateBlock(c2), this.addBlockRef(C2);
          }
          this._isGetAllBlocks = true, this._isCreate = true;
        }
      }, M.prototype.createBlocks_40 = function(t2, e2) {
        if (!this._isCreate) {
          this.crateBlock(0);
          for (var n2 = 1, r2 = t2.getInt32(12, true), a2 = 80, o2 = 0; o2 < r2; o2++) {
            var s2 = t2.getInt32(a2, true);
            a2 += 4;
            var l2 = t2.getInt32(a2, true);
            a2 += 4;
            var c2 = t2.getInt32(a2, true);
            a2 += 4;
            var u2 = t2.getInt32(a2, true);
            a2 += 4;
            for (var p2 = new Array(), f2 = 0; f2 < 16; f2++) {
              var m2 = t2.getFloat32(a2, true);
              a2 += 4, p2.push(m2);
            }
            var g2 = t2.getInt32(a2, true);
            a2 += 4;
            var v2 = new h();
            v2.id = n2, v2.ver = 4, n2++, v2.clipPoints = [];
            for (var y2 = 0; y2 < g2; y2++) {
              var x2 = new i.Vector2();
              x2.x = t2.getFloat32(a2, true), a2 += 4, x2.y = t2.getFloat32(a2, true), a2 += 4, v2.clipPoints.push(x2);
            }
            var b2 = new d();
            b2.ver = 4, b2.mat = new i.Matrix4(), b2.mat.fromArray(p2), b2.blkRecId = c2, b2.blkOwnerId = s2, b2.layerId = l2, b2.color = u2, b2.clipPlans = v2, this.crateBlock(c2), this.addBlockRef(b2);
          }
          this._isGetAllBlocks = true, this._isCreate = true;
        }
      }, M.prototype.createBlocks = function(t2, e2) {
        this._isCreate || (new s.MxNetData(t2).getVersion_MwBlobHead() <= 3 ? this.createBlocks_30(t2, e2) : this.createBlocks_40(t2, e2));
      }, M.prototype.updataClipMaterial = function(t2) {
        this._mapBlock.forEach(function(e2, n2, i2) {
          e2.updataClipMaterial(t2);
        });
      }, M.prototype.createAllInstance = function(t2) {
        var e2 = this.getBlock(0);
        if (e2 == null)
          return false;
        if (this._rootBlockRef == null)
          return false;
        var n2 = new i.Matrix4(), r2 = /* @__PURE__ */ new Map(), a2 = new h();
        return this._iClipIdCount = 1, a2.id = this._iClipIdCount, this._iClipIdCount++, this.createAllInstanceCall(e2, this._rootBlockRef, n2, r2, 16777215, t2, void 0, a2), true;
      }, M.prototype.createThreejsObj = function(t2, e2, n2) {
        this._mapNeedCreateThreejsObj.get(t2.getId()) == null && this._mapNeedCreateThreejsObj.set(t2.getId(), t2), this._isCreateAllInstance || this._isGetAllBlocks && n2.isInitComplete() && (this._isCreateAllInstance = this.createAllInstance(n2)), this._isCreateAllInstance && (this._mapNeedCreateThreejsObj.forEach(function(t3, i2, r2) {
          t3.createThreejsObj(e2, n2);
        }), this._mapNeedCreateThreejsObj.clear());
      }, M.prototype.createAllInstanceCall = function(t2, e2, n2, r2, a2, o2, s2, l2) {
        if (r2[t2.getId()] != 1) {
          r2[t2.getId()] = true;
          var c2 = new p();
          if (c2.mat = new i.Matrix4(), c2.mat.copy(n2), c2.mat.multiply(e2.mat), e2.ver <= 3)
            if (e2.clipPlans.clipPlanArray.length == 0)
              c2.clipPlans = l2;
            else {
              c2.clipPlans = e2.clipPlans, c2.clipPlans.ver = 3;
              for (var u2, d2, f2, m2, g2 = c2.clipPlans.clipPlanArray.length, v2 = function() {
                u2 = new i.Vector3(c2.clipPlans.clipPlanArray[y2].x1, c2.clipPlans.clipPlanArray[y2].y1, 0), d2 = new i.Vector3(c2.clipPlans.clipPlanArray[y2].x2, c2.clipPlans.clipPlanArray[y2].y2, 0), f2 = new i.Vector3(c2.clipPlans.clipPlanArray[y2].x1, c2.clipPlans.clipPlanArray[y2].y2, 0), m2 = new i.Vector3(c2.clipPlans.clipPlanArray[y2].x2, c2.clipPlans.clipPlanArray[y2].y1, 0), u2.applyMatrix4(c2.mat), d2.applyMatrix4(c2.mat), f2.applyMatrix4(c2.mat), m2.applyMatrix4(c2.mat);
                var t3 = u2.x, e3 = u2.x, n3 = u2.y, r3 = u2.y, a3 = [];
                a3.push(d2), a3.push(f2), a3.push(m2), a3.forEach(function(i2) {
                  t3 > i2.x && (t3 = i2.x), e3 < i2.x && (e3 = i2.x), n3 > i2.y && (n3 = i2.y), r3 < i2.y && (r3 = i2.y);
                }), c2.clipPlans.clipPlanArray[y2].x1 = t3, c2.clipPlans.clipPlanArray[y2].y1 = n3, c2.clipPlans.clipPlanArray[y2].x2 = e3, c2.clipPlans.clipPlanArray[y2].y2 = r3;
              }, y2 = 0; y2 < g2; y2++)
                v2();
            }
          else if (e2.clipPlans.clipPoints.length == 0)
            c2.clipPlans = l2;
          else {
            c2.clipPlans = new h(), c2.clipPlans.ver = 4, c2.clipPlans.id = this._iClipIdCount, this._iClipIdCount++, c2.clipPlans.instansClipePoints = l2.instansClipePoints.slice(0);
            var x2 = [], b2 = e2.clipPlans.clipPoints;
            for (g2 = b2.length, y2 = 0; y2 < g2; y2++) {
              var w2 = new i.Vector3(b2[y2].x, b2[y2].y, 0);
              w2.applyMatrix4(c2.mat), x2.push(new i.Vector2(w2.x, w2.y));
            }
            c2.clipPlans.instansClipePoints.push(x2);
          }
          s2 == null ? c2.topLayerColor.push(1, 1, 1) : c2.topLayerColor.push(s2[0], s2[1], s2[2]);
          var M2 = e2.color >> 24 & 255;
          if (M2 == 2)
            c2.color.push((255 & a2) / 255, (a2 >> 8 & 255) / 255, (a2 >> 16 & 255) / 255);
          else if (M2 == 1) {
            var _6 = o2.getColor(e2.layerId);
            c2.color.push((255 & _6) / 255, (_6 >> 8 & 255) / 255, (_6 >> 16 & 255) / 255), a2 = _6;
          } else
            c2.color.push((255 & e2.color) / 255, (e2.color >> 8 & 255) / 255, (e2.color >> 16 & 255) / 255), a2 = e2.color;
          t2.addInstance(c2);
          for (var S2 = t2.getBlkRef(), C2 = s2 == null, T = 0; T < S2.length; T++)
            if (S2[T].blkRecId != 0) {
              var E = this.getBlock(S2[T].blkRecId);
              if (E == null)
                return;
              C2 && (s2 = [], _6 = o2.getColor(S2[T].layerId), s2.push((255 & _6) / 255, (_6 >> 8 & 255) / 255, (_6 >> 16 & 255) / 255)), this.createAllInstanceCall(E, S2[T], c2.mat, r2, a2, o2, s2, c2.clipPlans);
            }
          r2[t2.getId()] = false;
        }
      }, M.prototype.initRootBlockRef = function(t2) {
        t2 == null && ((t2 = new d()).mat = new i.Matrix4(), t2.blkRecId = 0, t2.blkOwnerId = -1, t2.layerId = -1, t2.color = 16777215), this._rootBlockRef = t2;
      }, M);
      function M() {
        this._mapBlock = /* @__PURE__ */ new Map(), this._mapNeedCreateThreejsObj = /* @__PURE__ */ new Map(), this._isCreate = false, this._isGetAllBlocks = false, this._isCreateAllInstance = false, this._rootBlockRef = void 0, this._iClipIdCount = 1;
      }
      n.Blocks = w;
      var _5 = function() {
        this.blocks = new w(), this.layers = new a.MxBrowseLayerData();
      };
      n.ExternalReferenceDatabase = _5;
      var S = (C.prototype.createTzDwgExternalReferences = function(t2) {
        this._mapId2ExternalDatabase.get(t2) || this.getBlocks(t2).initRootBlockRef();
      }, C.prototype.createExternalReferences = function(t2) {
        for (var e2 = t2.getInt32(12, true), n2 = 80, r2 = 0; r2 < e2; r2++) {
          for (var a2 = new Array(), o2 = 0; o2 < 16; o2++) {
            var s2 = t2.getFloat32(n2, true);
            n2 += 4, a2.push(s2);
          }
          var l2 = t2.getInt32(n2, true);
          n2 += 4;
          var c2 = t2.getInt32(n2, true);
          if (n2 += 4, t2.getInt32(n2, true), n2 += 4, l2 != 0) {
            var u2 = this.getBlocks(l2), h2 = new d();
            h2.mat = new i.Matrix4(), h2.mat.fromArray(a2), h2.blkRecId = 0, h2.blkOwnerId = -1, h2.layerId = -1, h2.color = c2, u2.initRootBlockRef(h2);
          } else
            console.log("mx error iDatabaseIndex");
        }
      }, C.prototype.getBlocks = function(t2) {
        if (t2 != 0) {
          var e2 = this._mapId2ExternalDatabase.get(t2);
          return e2 == null && (e2 = new _5(), this._mapId2ExternalDatabase.set(t2, e2)), e2.blocks;
        }
        console.log("mx error iDatabaseIndex");
      }, C.prototype.getLayers = function(t2) {
        if (t2 != 0) {
          var e2 = this._mapId2ExternalDatabase.get(t2);
          return e2 == null && (e2 = new _5(), this._mapId2ExternalDatabase.set(t2, e2)), e2.layers;
        }
        console.log("mx error iDatabaseIndex");
      }, C);
      function C() {
        this._mapId2ExternalDatabase = /* @__PURE__ */ new Map();
      }
      n.ExternalReferenceManager = S;
    }, { "../MxFun": 34, "../MxManager": 36, "../MxNetData": 38, "../MxShader": 40, "../MxStencilObject": 41, "./MxBrowseLayerData": 69, three: 19 }], 69: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxBrowseLayerData = void 0;
      var i = (r.prototype.add = function(t2, e2, n2) {
        this._layerColor[t2] = e2, this._nametoId[n2] = t2;
      }, r.prototype.setZeroLayerId = function(t2) {
        this._zeroLayerId = t2;
      }, r.prototype.getZeroLayerId = function() {
        return this._zeroLayerId;
      }, r.prototype.getLayerIdForName = function(t2) {
        return this._nametoId[t2] == null ? 0 : this._nametoId[t2];
      }, r.prototype.getColor = function(t2) {
        return this._layerColor[t2] == null ? 16777215 : this._layerColor[t2];
      }, r.prototype.initComplete = function() {
        this._isSetInstanceComplete = true;
      }, r.prototype.isInitComplete = function() {
        return this._isSetInstanceComplete;
      }, r);
      function r() {
        this._isSetInstanceComplete = false, this._layerColor = /* @__PURE__ */ new Map(), this._nametoId = /* @__PURE__ */ new Map(), this._zeroLayerId = 0;
      }
      n.MxBrowseLayerData = i;
    }, {}], 70: [function(t, e, n) {
      "use strict";
      var i = this && this.__awaiter || function(t2, e2, n2, i2) {
        return new (n2 = n2 || Promise)(function(r2, a2) {
          function o2(t3) {
            try {
              l2(i2.next(t3));
            } catch (t4) {
              a2(t4);
            }
          }
          function s2(t3) {
            try {
              l2(i2.throw(t3));
            } catch (t4) {
              a2(t4);
            }
          }
          function l2(t3) {
            var e3;
            t3.done ? r2(t3.value) : ((e3 = t3.value) instanceof n2 ? e3 : new n2(function(t4) {
              t4(e3);
            })).then(o2, s2);
          }
          l2((i2 = i2.apply(t2, e2 || [])).next());
        });
      }, r = this && this.__generator || function(t2, e2) {
        var n2, i2, r2, a2, o2 = { label: 0, sent: function() {
          if (1 & r2[0])
            throw r2[1];
          return r2[1];
        }, trys: [], ops: [] };
        return a2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (a2[Symbol.iterator] = function() {
          return this;
        }), a2;
        function s2(a3) {
          return function(s3) {
            return function(a4) {
              if (n2)
                throw new TypeError("Generator is already executing.");
              for (; o2; )
                try {
                  if (n2 = 1, i2 && (r2 = 2 & a4[0] ? i2.return : a4[0] ? i2.throw || ((r2 = i2.return) && r2.call(i2), 0) : i2.next) && !(r2 = r2.call(i2, a4[1])).done)
                    return r2;
                  switch (i2 = 0, r2 && (a4 = [2 & a4[0], r2.value]), a4[0]) {
                    case 0:
                    case 1:
                      r2 = a4;
                      break;
                    case 4:
                      return o2.label++, { value: a4[1], done: false };
                    case 5:
                      o2.label++, i2 = a4[1], a4 = [0];
                      continue;
                    case 7:
                      a4 = o2.ops.pop(), o2.trys.pop();
                      continue;
                    default:
                      if (!(r2 = 0 < (r2 = o2.trys).length && r2[r2.length - 1]) && (a4[0] === 6 || a4[0] === 2)) {
                        o2 = 0;
                        continue;
                      }
                      if (a4[0] === 3 && (!r2 || a4[1] > r2[0] && a4[1] < r2[3])) {
                        o2.label = a4[1];
                        break;
                      }
                      if (a4[0] === 6 && o2.label < r2[1]) {
                        o2.label = r2[1], r2 = a4;
                        break;
                      }
                      if (r2 && o2.label < r2[2]) {
                        o2.label = r2[2], o2.ops.push(a4);
                        break;
                      }
                      r2[2] && o2.ops.pop(), o2.trys.pop();
                      continue;
                  }
                  a4 = e2.call(t2, o2);
                } catch (t3) {
                  a4 = [6, t3], i2 = 0;
                } finally {
                  n2 = r2 = 0;
                }
              if (5 & a4[0])
                throw a4[1];
              return { value: a4[0] ? a4[1] : void 0, done: true };
            }([a3, s3]);
          };
        }
      };
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbDatabase = void 0;
      var a = t("three"), o = t("../MxFun"), s = t("./MxDbEntity"), l = t("./MxDbEntityGrip"), c = t("./MxDbEntitySelect"), u = t("../MxManager"), h = t("../MxType"), d = t("./MxDbLayerTable"), p = t("./MxDbGroup"), f = t("../MxDrawData"), m = t("../MxTools"), g = (v.prototype.getAllEntity = function() {
        return this.mapIdToEntity;
      }, v.prototype.getGroupDictionary = function() {
        return this.groupDictionary;
      }, v.prototype.upDirtyDisplay = function() {
        var t2 = false;
        return this.mapIdToEntity.forEach(function(e2) {
          e2.getDirtyDisplay() && (e2.upDisplay(), e2.setDirtyDisplay(false), t2 = true);
        }), t2;
      }, v.prototype.onViewChange = function() {
        var t2 = false;
        return this.mapIdToEntity.forEach(function(e2) {
          e2.onViewChange() && (t2 = true);
        }), t2;
      }, v.prototype.toJsonObject = function(t2) {
        var e2 = { ver: 1 }, n2 = new a.Vector3(0, 0, 0), i2 = new a.Vector3(this.mxObj.getViewWidth(), this.mxObj.getViewHeight(), 0), r2 = h.MxType.MxCloneType.kMxFileClone;
        t2 && (r2 = h.MxType.MxCloneType.kSaveDwgClone), e2.correctLargeCoordinates = f.MxDrawData.m_isCorrectLargeCoordinates, f.MxDrawData.m_isCorrectLargeCoordinates && (e2.matDoc2Cad = this.mxObj.getDoc2CADMatrix());
        var o2 = this.mxObj.screenCoord2Doc(n2.x, n2.y, 0), s2 = this.mxObj.screenCoord2Doc(i2.x, i2.y, 0);
        e2.view = { ptView1: o2, ptView2: s2 };
        var l2 = [];
        return this.mapNameToLayer.forEach(function(t3) {
          var e3 = { type: r2 };
          t3.dwgOut(e3), e3.TypeName = "MxDbLayerTableRecord", l2.push(e3);
        }), e2.layers = l2, this.groupDictionary.dwgOut(e2), e2;
      }, v.prototype.saveJson = function(t2) {
        var e2 = this, n2 = this.toJsonObject(t2), i2 = h.MxType.MxCloneType.kMxFileClone;
        t2 && (i2 = h.MxType.MxCloneType.kSaveDwgClone);
        var r2 = [];
        return this.mapIdToEntity.forEach(function(t3) {
          var n3 = t3.getUserObject(), a2 = { type: i2 };
          n3.dwgOut(a2), a2.TypeName = n3.getTypeName(), a2.group = e2.groupDictionary.getEntityInGroupName(t3.objectId()), r2.push(a2);
        }), n2.entitys = r2, n2;
      }, v.prototype.reInit = function() {
        this.eraseAllEntity(), this.initLayerTable(), this.groupDictionary = new p.MxDbGroupDictionary();
      }, v.prototype.loadJson = function(t2) {
        return i(this, void 0, void 0, function() {
          var e2, n2, i2, a2, o2, l2, c2, h2, d2, p2, f2 = this;
          return r(this, function(m2) {
            switch (m2.label) {
              case 0:
                if (this.reInit(), (e2 = t2).view && (n2 = e2.view, this.mxObj.zoomW(n2.ptView1, n2.ptView2, false)), i2 = e2.layers)
                  for (a2 = i2.length, p2 = 0; p2 < a2; p2++)
                    o2 = i2[p2], this.addLayer(o2.name).dwgIn(o2);
                this.groupDictionary.dwgIn(e2), l2 = e2.entitys, c2 = l2.length, h2 = function(t3) {
                  var e3, n3, i3, a3;
                  return r(this, function(r2) {
                    switch (r2.label) {
                      case 0:
                        return e3 = l2[t3], [4, u.MxManager.getMxDbEntityClassHierarchy().createMxEntity(e3.TypeName)];
                      case 1:
                        return (n3 = r2.sent()) ? (n3.dwgIn(e3), (i3 = new s.MxDbEntity()).initUserObject(n3), d2.addEntityImp(i3), (a3 = e3.group) && 0 < a3.length && a3.forEach(function(t4) {
                          f2.groupDictionary.add(t4).append(i3.objectId());
                        }), [2]) : [2, "continue"];
                    }
                  });
                }, d2 = this, p2 = 0, m2.label = 1;
              case 1:
                return p2 < c2 ? [5, h2(p2)] : [3, 4];
              case 2:
                m2.sent(), m2.label = 3;
              case 3:
                return p2++, [3, 1];
              case 4:
                return [2, new Promise(function(t3) {
                  t3(true);
                })];
            }
          });
        });
      }, v.prototype.getMxObject = function() {
        return this.mxObj;
      }, v.prototype.getGripManager = function() {
        return this.gripManager;
      }, v.prototype.getSelectManager = function() {
        return this.selectManager;
      }, v.prototype.clearMxCurrentSelect = function() {
        var t2 = false;
        return this.gripManager.removeAllGrips() && (t2 = true), this.selectManager.removeAllEntity() && (t2 = true), t2;
      }, v.prototype.eraseAllEntity = function() {
        this.mapIdToEntity.forEach(function(t2) {
          t2.clearDisplayImp();
        }), this.mapIdToEntity = /* @__PURE__ */ new Map(), this.clearMxCurrentSelect();
      }, v.prototype.intiDoc2Wold = function(t2) {
        this.parentObject.matrix = t2, this.parentObject.matrixAutoUpdate = false;
      }, v.prototype.initLayerTable = function() {
        this.mapNameToLayer = /* @__PURE__ */ new Map(), this.curLayer = "0";
        var t2 = new d.MxDbLayerTableRecord();
        t2.init(this.curLayer, this.parentObject), this.mapNameToLayer.set(this.curLayer, t2);
      }, v.prototype.init = function(t2) {
        this.mxObj = t2, this.scene = t2.getScene(), o.MxFun.removeThreejsObject(this.parentObject, this.scene), this.parentObject = new a.Object3D(), this.parentObject.renderOrder = u.MxData.iMxEntityRenderOrder, this.scene.add(this.parentObject), this.initLayerTable();
      }, v.prototype.getEntity = function(t2) {
        return this.mapIdToEntity.get(t2);
      }, v.prototype.isValidId = function(t2) {
        return this.mapIdToEntity.has(t2);
      }, v.prototype.setRenderOrder = function(t2) {
        var e2 = this.parentObject.renderOrder;
        return this.parentObject.renderOrder = t2, e2;
      }, v.prototype.eraseEntity = function(t2) {
        this.gripManager.deleteGripData(t2), this.selectManager.deleteSelect(t2), this.mapIdToEntity.delete(t2);
      }, v.prototype.showLayer = function(t2, e2) {
        var n2 = this.getLayer(t2);
        n2 && n2.setVisible(e2);
      }, v.prototype.setCurrentLayer = function(t2) {
        if (t2.length != 0)
          return this.curLayer = t2, this.addLayer(t2);
      }, v.prototype.addLayer = function(t2) {
        var e2 = this.mapNameToLayer.get(t2);
        return e2 || ((e2 = new d.MxDbLayerTableRecord()).init(t2, this.parentObject), this.mapNameToLayer.set(t2, e2), e2);
      }, v.prototype.getLayer = function(t2) {
        return this.mapNameToLayer.get(t2);
      }, v.prototype.addMxEntity = function(t2) {
        if (t2.getImp())
          return t2.objectId();
        var e2 = new s.MxDbEntity();
        return e2.initUserObject(t2), t2.initGuid(m.MxTools.generateUUID()), this.addEntityImp(e2);
      }, v.prototype.addEntityImp = function(t2) {
        return this.mapIdToEntity.set(this.idCount, t2), t2.setMxDatabase(this), t2.setObjectId(this.idCount), t2.getLayer().length == 0 && t2.setLayer(this.curLayer), t2.upDisplay(), this.idCount++;
      }, v.prototype.getThreeJSParentObject = function() {
        return this.parentObject;
      }, v.prototype.getIntersectObjects = function(t2) {
        var e2 = new a.Raycaster();
        e2.linePrecision = this.mxObj.screenCoordLong2Doc(40);
        var n2 = this.mxObj.getCanvas(), i2 = n2.clientWidth, r2 = n2.clientHeight, o2 = new a.Vector2(t2.x / i2 * 2 - 1, -t2.y / r2 * 2 + 1);
        return e2.setFromCamera(o2, this.mxObj.getCamera()), e2.intersectObjects(this.parentObject.children, true);
      }, v);
      function v() {
        this.mapIdToEntity = /* @__PURE__ */ new Map(), this.mxObj = null, this.scene = null, this.idCount = 1, this.parentObject = null, this.mapNameToLayer = /* @__PURE__ */ new Map(), this.curLayer = "0", this.gripManager = new l.MxDbEntityGrip(this), this.selectManager = new c.MxDbEntitySelect(this), this.groupDictionary = new p.MxDbGroupDictionary();
      }
      n.MxDbDatabase = g;
    }, { "../MxDrawData": 29, "../MxFun": 34, "../MxManager": 36, "../MxTools": 45, "../MxType": 46, "./MxDbEntity": 71, "./MxDbEntityGrip": 72, "./MxDbEntitySelect": 73, "./MxDbGroup": 74, "./MxDbLayerTable": 75, three: 19 }], 71: [function(t, e, n) {
      "use strict";
      var i = this && this.__awaiter || function(t2, e2, n2, i2) {
        return new (n2 = n2 || Promise)(function(r2, a2) {
          function o2(t3) {
            try {
              l2(i2.next(t3));
            } catch (t4) {
              a2(t4);
            }
          }
          function s2(t3) {
            try {
              l2(i2.throw(t3));
            } catch (t4) {
              a2(t4);
            }
          }
          function l2(t3) {
            var e3;
            t3.done ? r2(t3.value) : ((e3 = t3.value) instanceof n2 ? e3 : new n2(function(t4) {
              t4(e3);
            })).then(o2, s2);
          }
          l2((i2 = i2.apply(t2, e2 || [])).next());
        });
      }, r = this && this.__generator || function(t2, e2) {
        var n2, i2, r2, a2, o2 = { label: 0, sent: function() {
          if (1 & r2[0])
            throw r2[1];
          return r2[1];
        }, trys: [], ops: [] };
        return a2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (a2[Symbol.iterator] = function() {
          return this;
        }), a2;
        function s2(a3) {
          return function(s3) {
            return function(a4) {
              if (n2)
                throw new TypeError("Generator is already executing.");
              for (; o2; )
                try {
                  if (n2 = 1, i2 && (r2 = 2 & a4[0] ? i2.return : a4[0] ? i2.throw || ((r2 = i2.return) && r2.call(i2), 0) : i2.next) && !(r2 = r2.call(i2, a4[1])).done)
                    return r2;
                  switch (i2 = 0, r2 && (a4 = [2 & a4[0], r2.value]), a4[0]) {
                    case 0:
                    case 1:
                      r2 = a4;
                      break;
                    case 4:
                      return o2.label++, { value: a4[1], done: false };
                    case 5:
                      o2.label++, i2 = a4[1], a4 = [0];
                      continue;
                    case 7:
                      a4 = o2.ops.pop(), o2.trys.pop();
                      continue;
                    default:
                      if (!(r2 = 0 < (r2 = o2.trys).length && r2[r2.length - 1]) && (a4[0] === 6 || a4[0] === 2)) {
                        o2 = 0;
                        continue;
                      }
                      if (a4[0] === 3 && (!r2 || a4[1] > r2[0] && a4[1] < r2[3])) {
                        o2.label = a4[1];
                        break;
                      }
                      if (a4[0] === 6 && o2.label < r2[1]) {
                        o2.label = r2[1], r2 = a4;
                        break;
                      }
                      if (r2 && o2.label < r2[2]) {
                        o2.label = r2[2], o2.ops.push(a4);
                        break;
                      }
                      r2[2] && o2.ops.pop(), o2.trys.pop();
                      continue;
                  }
                  a4 = e2.call(t2, o2);
                } catch (t3) {
                  a4 = [6, t3], i2 = 0;
                } finally {
                  n2 = r2 = 0;
                }
              if (5 & a4[0])
                throw a4[1];
              return { value: a4[0] ? a4[1] : void 0, done: true };
            }([a3, s3]);
          };
        }
      };
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbEntity = n.MxDbEntityClassHierarchy = n.MxDbEntityUserObject = void 0;
      var a = t("three"), o = t("../Operate/McGiWorldDraw"), s = t("../MxManager"), l = t("../MxTools"), c = t("../MxType"), u = (h.prototype.getClosestPointTo = function(t2, e2) {
        return e2 === void 0 && (e2 = 0), null;
      }, h.prototype.getTypeName = function() {
        return "";
      }, h.prototype.initGuid = function(t2) {
        0 < this.sGuid.length ? console.log("mx: init guid error") : this.sGuid = t2;
      }, h.prototype.guid = function() {
        return this.sGuid;
      }, h.prototype.setLayer = function(t2) {
        var e2 = this.getImp();
        e2 && e2.nodifySetLayer(), this.layer = t2;
      }, h.prototype.getLayer = function() {
        return this.layer;
      }, h.prototype.setDash = function(t2, e2) {
        this.dDashArray = t2, this.dDashRatio = e2, this.dLineWidth == 0 && (this.dLineWidth = 6, this.lineWidthByPixels = true);
      }, h.prototype.getDash = function() {
        return { dDashArray: this.dDashArray, dDashRatio: this.dDashRatio };
      }, h.prototype.setDashLineDisplay = function(t2) {
        t2 ? (this.dDashArray = 0.03, this.dDashRatio = 0.1, this.dLineWidth == 0 && (this.dLineWidth = 6, this.lineWidthByPixels = true)) : (this.dDashArray = 0, this.dDashRatio = 0);
      }, h.prototype.isDashLineDisplay = function() {
        return 0 < this.dDashArray && 0 < this.dDashRatio;
      }, h.prototype.setLineWidthByPixels = function(t2) {
        this.lineWidthByPixels = t2;
      }, h.prototype.getLineWidthByPixels = function() {
        return this.lineWidthByPixels;
      }, h.prototype.setLineWidth = function(t2) {
        this.dLineWidth = t2;
      }, h.prototype.getLineWidth = function() {
        return this.dLineWidth;
      }, h.prototype.getMxObject = function() {
        var t2 = this.getImp();
        return t2 ? t2.getMxObject() : null;
      }, h.prototype.onViewChange = function() {
        return false;
      }, h.prototype.getImp = function() {
        return this.MxDbEntityImp;
      }, h.prototype.upDisplay = function() {
        var t2 = this.getImp();
        return !!t2 && t2.upDisplay();
      }, h.prototype.erase = function() {
        var t2 = this.getImp();
        return !!t2 && t2.erase();
      }, h.prototype.setColor = function(t2) {
        this.iColor = t2;
      }, h.prototype.getColor = function() {
        return this.iColor;
      }, h.prototype.setRenderOrder = function(t2) {
        this.iRenderOrder = t2;
      }, h.prototype.getRenderOrder = function() {
        return this.iRenderOrder;
      }, h.prototype.onEndGripEidt = function() {
      }, h.prototype.onStartGripEidt = function() {
      }, h.prototype.dwgIn = function(t2) {
        return this.iColor = t2.iColor, this.iRenderOrder = t2.iRenderOrder, this.opacity = t2.opacity, this.visible = t2.visible, this.dLineWidth = t2.lineWidth, this.lineWidthByPixels = t2.lineWidthByPixels, this.dDashArray = t2.dashArray, this.dDashRatio = t2.dashRatio, this.layer = t2.layer, t2.guid && (this.sGuid = t2.guid), true;
      }, h.prototype.dwgOut = function(t2) {
        return t2.iColor = this.iColor, t2.iRenderOrder = this.iRenderOrder, t2.opacity = this.opacity, t2.visible = this.visible, t2.lineWidth = this.dLineWidth, t2.lineWidthByPixels = this.lineWidthByPixels, t2.dashArray = this.dDashArray, t2.dashRatio = this.dDashRatio, t2.layer = this.layer, t2.guid = this.sGuid, t2;
      }, h.prototype.clone = function(t2) {
        var e2 = this.create(), n2 = { type: t2 || c.MxType.MxCloneType.kClone };
        return this.dwgOut(n2), e2.dwgIn(n2), e2.sGuid = "", e2;
      }, h.prototype.init = function() {
        s.MxManager.getMxDbEntityClassHierarchy().init(this);
      }, h.prototype.transformBy = function(t2) {
      }, h.prototype.objectId = function() {
        var t2 = this.getImp();
        return t2 ? t2.objectId() : 0;
      }, h);
      function h() {
        this.iColor = 16777215, this.iRenderOrder = s.MxData.iMxEntityRenderOrder, this.opacity = 1, this.visible = true, this.dLineWidth = 0, this.lineWidthByPixels = true, this.dDashArray = 0, this.dDashRatio = 0, this.layer = "", this.sGuid = "";
      }
      n.MxDbEntityUserObject = u;
      var d = (p.prototype.init = function(t2) {
        var e2 = t2.getTypeName();
        this.mapType2Create.get(e2) && console.log("MxError:already has this class name " + e2), this.mapType2Create.set(e2, { type: 0, createfun: t2 });
      }, p.prototype.initDynamic = function(t2) {
        this.dynmaicCreate = t2;
      }, p.prototype.createMxEntity = function(t2) {
        return i(this, void 0, void 0, function() {
          var e2, n2;
          return r(this, function(i2) {
            switch (i2.label) {
              case 0:
                return (e2 = this.mapType2Create.get(t2)) ? [3, 3] : this.dynmaicCreate ? [4, this.dynmaicCreate(t2)] : [3, 2];
              case 1:
                return (n2 = i2.sent()) ? (this.mapType2Create.set(t2, { type: 1, createfun: n2 }), [2, new Promise(function(t3, e3) {
                  t3(new n2());
                })]) : [2, new Promise(function(t3, e3) {
                  t3(null);
                })];
              case 2:
                return [2, new Promise(function(t3, e3) {
                  t3(null);
                })];
              case 3:
                return e2.type == 0 ? [2, new Promise(function(t3, n3) {
                  t3(e2.createfun.create());
                })] : e2.type == 1 ? [2, new Promise(function(t3, n3) {
                  t3(new e2.createfun());
                })] : [2, new Promise(function(t3, e3) {
                  t3(null);
                })];
            }
          });
        });
      }, p);
      function p() {
        this.mapType2Create = /* @__PURE__ */ new Map(), this.dynmaicCreate = null;
      }
      n.MxDbEntityClassHierarchy = d;
      var f = (m.prototype.setObjectId = function(t2) {
        this.id = t2;
      }, m.prototype.nodifySetLayer = function() {
        this.layerObjectGroup && this.clearDisplayImp();
      }, m.prototype.setLayer = function(t2) {
        this.userObject.setLayer(t2);
      }, m.prototype.getLayer = function() {
        return this.userObject.getLayer();
      }, m.prototype.setDirtyDisplay = function(t2) {
        this.isDirtyDisplay = t2;
      }, m.prototype.getDirtyDisplay = function() {
        return this.isDirtyDisplay;
      }, m.prototype.setMxDatabase = function(t2) {
        this.mxDatabase = t2;
      }, m.prototype.objectId = function() {
        return this.id;
      }, m.prototype.initUserObject = function(t2) {
        (this.userObject = t2).MxDbEntityImp = this;
      }, m.prototype.upDisplay = function() {
        if (!this.mxDatabase)
          return console.log("mxassert(0) this.mxDatabase is null"), false;
        this.updateDisplayImp(this.mxDatabase.getMxObject());
      }, m.prototype.erase = function() {
        if (this.id == 0)
          return false;
        this.clearDisplayImp(), this.userObject = null, this.mxDatabase.eraseEntity(this.id), this.id = 0, this.mxDatabase = null;
      }, m.prototype.clearDisplayImp = function() {
        this.layerObjectGroup && (this.threeObjectGroup && (this.threeObjectGroup.traverse(function(t2) {
          t2.type === "Mesh" && (t2.geometry.dispose(), t2.material.dispose());
        }), this.layerObjectGroup.remove(this.threeObjectGroup)), this.threeObjectGroup = null, this.layerObjectGroup = null);
      }, m.prototype.updateDisplayImp = function(t2) {
        if (this.clearDisplayImp(), this.userObject) {
          if (this.userObject.visible) {
            var e2 = this.mxDatabase.addLayer(this.userObject.getLayer());
            if (!e2)
              return console.log("mxassert(0) this.layerRecord is null"), false;
            this.threeObjectGroup = new a.Group();
            var n2 = new o.McGiWorldDraw(t2, o.McGiWorldDrawType.kWorldDraw);
            n2.setupForEntity(this.userObject), this.worldDraw(n2);
            for (var i2 = n2.getEntitys(), r2 = i2.length, s2 = 0; s2 < r2; s2++) {
              var c2 = i2[s2];
              (c2.MxDbEntity = this).threeObjectGroup.add(c2);
            }
            this.layerObjectGroup = e2.getGroup(), this.layerObjectGroup.add(this.threeObjectGroup);
          }
        } else
          l.MxTools.MxASSERT(false, "this.userObject == null");
      }, m.prototype.worldDraw = function(t2) {
        this.userObject.worldDraw(t2);
      }, m.prototype.getGripPoints = function() {
        return this.userObject.getGripPoints();
      }, m.prototype.getClosestPointTo = function(t2, e2) {
        return this.userObject.getClosestPointTo(t2, e2);
      }, m.prototype.getUserObject = function() {
        return this.userObject;
      }, m.prototype.clone = function(t2) {
        var e2 = new m();
        return e2.initUserObject(this.userObject.clone(t2)), e2;
      }, m.prototype.transformBy = function(t2) {
        this.userObject.transformBy(t2);
      }, m.prototype.setColor = function(t2) {
        this.userObject.setColor(t2);
      }, m.prototype.onEndGripEidt = function() {
        this.userObject.onEndGripEidt();
      }, m.prototype.onStartGripEidt = function() {
        return this.userObject.onStartGripEidt();
      }, m.prototype.getColor = function() {
        return this.userObject.getColor();
      }, m.prototype.getMxObject = function() {
        return this.mxDatabase ? this.mxDatabase.getMxObject() : null;
      }, m.prototype.onViewChange = function() {
        return !!this.userObject && this.userObject.onViewChange();
      }, m);
      function m() {
        this.threeObjectGroup = null, this.userObject = null, this.mxDatabase = null, this.isDirtyDisplay = false, this.layerObjectGroup = null, this.id = 0;
      }
      n.MxDbEntity = f;
    }, { "../MxManager": 36, "../MxTools": 45, "../MxType": 46, "../Operate/McGiWorldDraw": 50, three: 19 }], 72: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbEntityGrip = n.MxDbEntityGripJig = n.MxGetWordDrawxDataForThreeJsObject = n.MxGetMxDbEntitForThreeJsObject = n.MxDbEntityGripData = void 0;
      var a = t("three"), o = t("../MxFun"), s = t("../MxDrawData"), l = t("../Operate/MxJig"), c = t("../Operate/MxJigCmdManager"), u = t("../Operate/McGiWorldDraw"), h = t("../MxManager"), d = t("../MxType"), p = function() {
        this.threeObject = null;
      };
      function f(t2) {
        for (var e2 = null; t2 && !(e2 = t2.MxDbEntity) && t2.parent; )
          t2 = t2.parent;
        return e2;
      }
      n.MxDbEntityGripData = p, n.MxGetMxDbEntitForThreeJsObject = f, n.MxGetWordDrawxDataForThreeJsObject = function(t2) {
        for (var e2 = null; t2 && !(e2 = t2.MxWordDrawXData) && t2.parent; )
          t2 = t2.parent;
        return e2;
      };
      var m, g = (r(v, m = l.McEdJigCommand), v.prototype.sampler = function() {
        var t2 = c.MxJigCmdManager.InType.kGetBegan | c.MxJigCmdManager.InType.kGetEnd, e2 = this.acquirePoint(t2);
        return e2.status == c.MxJigCmdManager.DragStatus.kNormal && (this.currPt = e2.pt), e2.status;
      }, v.prototype.getTypeName = function() {
        return "MxGripEdit";
      }, v.prototype.onStartCommand = function() {
        this.iscallOnStartCommand = true, m.prototype.onStartCommand.call(this);
      }, v.prototype.done = function(t2) {
        if (t2 == c.MxJigCmdManager.DragStatus.kNormal) {
          var e2 = this.currPt.clone();
          e2.sub(this.dragBasePt);
          for (var n2 = this.getMxObject(), i2 = n2.getMxDatabase(), r2 = n2.getMxDatabase().getGripManager(), a2 = this.grips.length, o2 = /* @__PURE__ */ new Set(), s2 = [], l2 = 0; l2 < a2; l2++) {
            var u2 = this.grips[l2], h2 = this.ents[l2];
            r2.deleteGripData(h2.objectId()), h2.getUserObject().moveGripPointsAt(u2.iIndex, e2), r2.addGripFromEntity(h2), h2.upDisplay(), o2.add(h2.objectId());
            var d2 = { id: h2.objectId(), index: u2.iIndex, curentPoint: this.currPt };
            s2.push(d2);
          }
          n2.updateDisplay(), 0 < s2.length && n2.callEvent("objectGripEdit", s2), i2.getSelectManager().upSelectDilsplay(o2);
        }
        var p2 = this.ents.length;
        for (l2 = 0; l2 < p2; l2++)
          (h2 = this.ents[l2]).onEndGripEidt(), t2 != c.MxJigCmdManager.DragStatus.kNormal && h2.upDisplay();
        return c.MxJigCmdManager.DoneStatius.kExitCommand;
      }, v.prototype.upDisplay = function() {
        var t2 = this.currPt.clone();
        if (t2.sub(this.dragBasePt), !(t2.length() < 1e-3)) {
          if (this.iscallOnStartCommand) {
            for (var e2 = this.ents.length, n2 = 0; n2 < e2; n2++) {
              var i2 = this.ents[n2];
              this.aryParam.push(i2.onStartGripEidt());
            }
            this.iscallOnStartCommand = false;
          }
          var r2 = this.getMxObject(), a2 = this.grips.length;
          for (n2 = 0; n2 < a2; n2++) {
            var o2 = this.grips[n2], s2 = (i2 = this.ents[n2], this.aryParam[n2]), l2 = i2.clone(d.MxType.MxCloneType.kDragClone);
            l2.getUserObject().moveGripPointsAt(o2.iIndex, t2);
            var c2 = new u.McGiWorldDraw(r2, u.McGiWorldDrawType.kDynDragDraw);
            c2.setupForEntity(l2.getUserObject()), l2.worldDraw(c2);
            var h2 = c2.getEntitys(), p2 = h2.length, f2 = 31;
            s2 && s2.renderOrder && (f2 = s2.renderOrder);
            for (var m2 = 0; m2 < p2; m2++)
              this.drawEntity(h2[m2], f2);
          }
        }
      }, v);
      function v(t2, e2, n2) {
        var i2 = m.call(this) || this;
        return i2.aryParam = [], i2.iscallOnStartCommand = true, i2.dragBasePt = t2, i2.grips = e2, i2.ents = n2, i2.currPt = t2, i2.iscallOnStartCommand = true, i2;
      }
      n.MxDbEntityGripJig = g;
      var y = (x.prototype.getAllSelect = function() {
        var t2 = [];
        return this.mapGrips.forEach(function(e2, n2) {
          t2.push(n2);
        }), t2;
      }, x.prototype.getParentObject = function() {
        return this.database.getMxObject().getTheTempDrawContainer();
      }, x.prototype.removeAllGrips = function() {
        if (this.mapGrips.size == 0)
          return false;
        this.database.getMxObject();
        var t2 = this.getParentObject();
        return this.mapGrips.forEach(function(e2, n2, i2) {
          for (var r2 = e2.length, a2 = 0; a2 < r2; a2++) {
            var s2 = e2[a2];
            o.MxFun.removeThreejsObject(s2.threeObject, t2);
          }
        }), this.mapGrips = /* @__PURE__ */ new Map(), true;
      }, x.prototype.deleteGripData = function(t2) {
        var e2 = this.getParentObject(), n2 = this.mapGrips.get(t2);
        if (n2)
          for (var i2 = n2.length, r2 = 0; r2 < i2; r2++) {
            var a2 = n2[r2];
            o.MxFun.removeThreejsObject(a2.threeObject, e2);
          }
        this.mapGrips.delete(t2);
      }, x.prototype.createGripDisplayObject = function(t2) {
        var e2 = this.database.getMxObject(), n2 = this.getParentObject();
        t2.geometry = new a.Geometry();
        var i2 = e2.screenCoordLong2Doc(s.MxDrawData.m_dGridWidth / 2);
        t2.geometry.vertices.push(new a.Vector3(t2.point.x - i2, t2.point.y - i2, 0)), t2.geometry.vertices.push(new a.Vector3(t2.point.x - i2, t2.point.y + i2, 0)), t2.geometry.vertices.push(new a.Vector3(t2.point.x + i2, t2.point.y + i2, 0)), t2.geometry.vertices.push(new a.Vector3(t2.point.x + i2, t2.point.y - i2, 0)), t2.geometry.faces.push(new a.Face3(0, 1, 2)), t2.geometry.faces.push(new a.Face3(2, 3, 0)), t2.geometry.computeFaceNormals(), t2.geometry.computeVertexNormals();
        var r2 = new a.MeshBasicMaterial({ color: 255, transparent: true, depthTest: false, side: a.DoubleSide, opacity: 0.9 }), o2 = new a.Mesh(t2.geometry, r2);
        o2.renderOrder = h.MxData.iGripRenderOrder, n2.add(o2), t2.threeObject = o2;
      }, x.prototype.addGripData = function(t2, e2, n2) {
        var i2 = this.mapGrips.get(t2);
        i2 == null && (i2 = new Array(), this.mapGrips.set(t2, i2));
        var r2 = new p();
        return r2.iIndex = e2, r2.point = new a.Vector3(n2.x, n2.y, 0), i2.push(r2), r2;
      }, x.prototype.hitTest = function(t2) {
        var e2 = this, n2 = { grips: new Array(), ents: new Array(), pt: t2 }, i2 = new a.Vector3(t2.x, t2.y, 0), r2 = this.database.getMxObject(), o2 = r2.screenCoordLong2Doc(2 * s.MxDrawData.m_dGridWidth);
        return this.mapGrips.forEach(function(t3, a2) {
          for (var s2 = t3.length, l2 = 0; l2 < s2; l2++) {
            var c2 = t3[l2];
            if (c2.point.distanceTo(i2) <= o2) {
              var u2 = e2.database.getEntity(a2), h2 = true;
              r2.hasEvent("whetherEditTheGripPoint") && (h2 = r2.callEvent("whetherEditTheGripPoint", { entity: u2.getUserObject(), index: c2.iIndex })), h2 && (n2.grips.push(c2), n2.ents.push(u2));
              break;
            }
          }
        }), n2;
      }, x.prototype.onMouseLBDown = function(t2) {
        if (!s.MxDrawData.m_isEnableGripEidt)
          return false;
        var e2 = this.hitTest(t2);
        return e2.grips.length != 0 && (o.MxFun.sendStringToExecute("Mx_FrontEndWebpageGripEdit", e2), true);
      }, x.prototype.gripEditImp = function(t2) {
        var e2 = t2.grips, n2 = t2.ents, i2 = t2.pt, r2 = new g(i2, e2, n2);
        r2.setDisableDynInput(true), r2.setDisableOsnap(true), c.MxJigCmdManager.runCmd(r2);
      }, x.prototype.doWindowsSelect = function(t2, e2) {
      }, x.prototype.addGripFromEntity = function(t2) {
        if (s.MxDrawData.m_isEnableGripEidt) {
          var e2 = t2.getGripPoints(), n2 = t2.objectId();
          this.deleteGripData(n2);
          for (var i2 = 0; i2 < e2.length; i2++) {
            var r2 = this.addGripData(n2, i2, e2[i2]);
            this.createGripDisplayObject(r2);
          }
        }
      }, x.prototype.addSelect = function(t2) {
        var e2 = this.database.getSelectManager(), n2 = false;
        if (this.getAllSelect().forEach(function(e3) {
          e3 == t2 && (n2 = true);
        }), !n2) {
          var i2 = this.database.getMxObject(), r2 = i2.getMxEntity(t2);
          if (r2) {
            var a2 = /* @__PURE__ */ new Set();
            a2.add(t2), this.addGripFromEntity(r2), e2.upSelectDilsplay(a2), this.isCallingMxEntitySelectChange || (this.isCallingMxEntitySelectChange = true, i2.callEvent("MxEntitySelectChange", this.getAllSelect()), this.isCallingMxEntitySelectChange = false);
          }
        }
      }, x.prototype.doPointSelect = function(t2) {
        for (var e2 = false, n2 = this.database.getSelectManager(), i2 = this.database.getMxObject(), r2 = n2.isEmptySelect(), a2 = false, o2 = i2.screenCoordLong2Doc(2 * s.MxDrawData.m_dGridWidth), l2 = function() {
          s.MxDrawData.m_isMultipleSelect || (c2.removeAllGrips(), n2.removeAllEntity());
          var r3 = c2.database.getIntersectObjects(t2);
          if (r3.length == 0)
            return i2.updateDisplay(), "break";
          var l3 = i2.screenCoord2Doc(t2.x, t2.y, t2.z), u2 = c2, h2 = /* @__PURE__ */ new Set();
          r3.forEach(function(t3) {
            var e3 = f(t3.object);
            if (e3) {
              var n3 = e3.objectId();
              if (u2.database.isValidId(n3) && !h2.has(n3)) {
                var i3 = e3.getClosestPointTo(l3, 1), r4 = false;
                (!i3 || i3.distanceTo(l3) < o2) && (r4 = true), r4 && (h2.add(n3), u2.addGripFromEntity(e3));
              }
            }
          });
          var d2 = /* @__PURE__ */ new Set(), p2 = c2.database.getGroupDictionary();
          return h2.forEach(function(t3) {
            d2.add(t3), p2.getEntityInGroup(t3).forEach(function(t4) {
              t4.getAll().forEach(function(t5) {
                u2.database.isValidId(t5) && d2.add(t5);
              });
            });
          }), a2 = true, n2.upSelectDilsplay(d2), i2.updateDisplay(), e2 = true, "break";
        }, c2 = this; l2() !== "break"; )
          ;
        return !a2 && r2 == n2.isEmptySelect() || this.isCallingMxEntitySelectChange || (this.isCallingMxEntitySelectChange = true, i2.callEvent("MxEntitySelectChange", this.getAllSelect()), this.isCallingMxEntitySelectChange = false), e2;
      }, x);
      function x(t2) {
        this.database = null, this.mapGrips = /* @__PURE__ */ new Map(), this.isCallingMxEntitySelectChange = false, this.database = t2;
      }
      n.MxDbEntityGrip = y;
    }, { "../MxDrawData": 29, "../MxFun": 34, "../MxManager": 36, "../MxType": 46, "../Operate/McGiWorldDraw": 50, "../Operate/MxJig": 57, "../Operate/MxJigCmdManager": 58, three: 19 }], 73: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbEntitySelect = void 0;
      var i = t("three"), r = t("../MxFun"), a = t("three.meshline"), o = t("../Operate/McGiWorldDraw"), s = t("../MxManager"), l = (c.prototype.setRenderOrder = function(t2) {
        this.iRenderOrder = t2;
      }, c.prototype.getRenderOrder = function() {
        return this.iRenderOrder;
      }, c.prototype.setCanvasSize = function(t2, e2) {
        this.canvasWidth == t2 && this.canvasHeight == e2 || (this.canvasWidth = t2, this.canvasHeight = e2, this.material.resolution = new i.Vector2(this.canvasWidth, this.canvasHeight), this.material.needsUpdate = true);
      }, c.prototype.removeAllEntity = function() {
        var t2 = this.getParentObject();
        return this.mapIdToThreeObject.size != 0 && (this.mapIdToThreeObject.forEach(function(e2) {
          for (var n2 = e2.length, i2 = 0; i2 < n2; i2++)
            r.MxFun.removeThreejsObject(e2[i2], t2);
        }), this.mapIdToThreeObject.clear(), true);
      }, c.prototype.isEmptySelect = function() {
        return this.mapIdToThreeObject.size == 0;
      }, c.prototype.getParentObject = function() {
        return this.mxDatabase.getMxObject().getTheTempDrawContainer();
      }, c.prototype.getAllSelect = function() {
        var t2 = [];
        return this.mapIdToThreeObject.forEach(function(e2, n2) {
          t2.push(n2);
        }), t2;
      }, c.prototype.setPrvCommandSelect = function(t2) {
        this.aryPrvCommandSelect = t2;
      }, c.prototype.getPrvCommandSelect = function() {
        return this.aryPrvCommandSelect;
      }, c.prototype.deleteSelect = function(t2) {
        var e2 = this.getParentObject(), n2 = this.mapIdToThreeObject.get(t2);
        if (n2) {
          for (var i2 = n2.length, a2 = 0; a2 < i2; a2++)
            r.MxFun.removeThreejsObject(n2[a2], e2);
          this.mapIdToThreeObject.delete(t2);
        }
      }, c.prototype.upSelectDilsplayFromId = function(t2) {
        var e2 = /* @__PURE__ */ new Set();
        e2.add(t2), this.upSelectDilsplay(e2);
      }, c.prototype.upSelectDilsplay = function(t2) {
        var e2 = this, n2 = new o.McGiWorldDrawSelect(this.mxDatabase.getMxObject(), this);
        t2.forEach(function(t3) {
          e2.deleteSelect(t3);
          var i2 = e2.mxDatabase.getEntity(t3);
          i2 && (n2.setCurEntityId(t3), i2.worldDraw(n2));
        });
      }, c.prototype.addCircleDisplay = function(t2, e2, n2) {
        var r2 = new i.CircleGeometry(n2, 64, 3, 2 * Math.PI);
        if (r2.vertices.shift(), r2.vertices.length != 0) {
          r2.vertices.push(r2.vertices[0]);
          var o2 = 3 * r2.vertices.length;
          if (o2 != 0) {
            for (var s2 = this.getParentObject(), l2 = new Float32Array(o2), c2 = 0, u = 0; c2 + 2 < o2; c2 += 3, u++)
              l2[c2] = r2.vertices[u].x + e2.x, l2[c2 + 1] = r2.vertices[u].y + e2.y, l2[c2 + 2] = e2.z;
            var h = new a.MeshLine();
            h.setGeometry(l2);
            var d = new i.Mesh(h.geometry, this.material);
            d.renderOrder = this.iRenderOrder, s2.add(d);
            var p = this.mapIdToThreeObject.get(t2);
            p || (p = new Array(), this.mapIdToThreeObject.set(t2, p)), p.push(d);
          }
        }
      }, c.prototype.addLineDisplay = function(t2, e2, n2) {
        var r2 = this.getParentObject(), o2 = new Float32Array(6);
        o2[0] = e2.x, o2[1] = e2.y, o2[2] = 0, o2[3] = n2.x, o2[4] = n2.y, o2[5] = 0;
        var s2 = new a.MeshLine();
        s2.setGeometry(o2);
        var l2 = new i.Mesh(s2.geometry, this.material);
        l2.renderOrder = this.iRenderOrder, r2.add(l2);
        var c2 = this.mapIdToThreeObject.get(t2);
        c2 || (c2 = new Array(), this.mapIdToThreeObject.set(t2, c2)), c2.push(l2);
      }, c);
      function c(t2) {
        this.mapIdToThreeObject = /* @__PURE__ */ new Map(), this.canvasWidth = 800, this.canvasHeight = 500, this.mxDatabase = null, this.material = new a.MeshLineMaterial({ useMap: false, color: new i.Color(2641557), opacity: 0.8, resolution: new i.Vector2(800, 500), sizeAttenuation: false, lineWidth: 10, transparent: true, depthTest: false }), this.iRenderOrder = s.MxData.iSelectRenderOrder, this.aryPrvCommandSelect = [], this.mxDatabase = t2;
      }
      n.MxDbEntitySelect = l;
    }, { "../MxFun": 34, "../MxManager": 36, "../Operate/McGiWorldDraw": 50, three: 19, "three.meshline": 18 }], 74: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbGroupDictionary = n.MxDbGroup = void 0;
      var i = (r.prototype.name = function() {
        return this.sName;
      }, r.prototype.append = function(t2) {
        this.has(t2) || this.setId.add(t2);
      }, r.prototype.clear = function() {
        this.setId = /* @__PURE__ */ new Set();
      }, r.prototype.getAll = function() {
        var t2 = [];
        return this.setId.forEach(function(e2) {
          t2.push(e2);
        }), t2;
      }, r.prototype.has = function(t2) {
        return this.setId.has(t2);
      }, r.prototype.delete = function(t2) {
        return this.setId.delete(t2);
      }, r);
      function r(t2) {
        this.setId = /* @__PURE__ */ new Set(), this.sName = "", this.sName = t2;
      }
      n.MxDbGroup = i;
      var a = (o.prototype.getAt = function(t2) {
        return this.mapNameToGroup.get(t2);
      }, o.prototype.delete = function(t2) {
        return !!this.mapNameToGroup.has(t2) && this.mapNameToGroup.delete(t2);
      }, o.prototype.add = function(t2) {
        var e2 = this.mapNameToGroup.get(t2);
        return e2 || (e2 = new i(t2), this.mapNameToGroup.set(t2, e2), e2);
      }, o.prototype.dwgOut = function(t2) {
        var e2 = [];
        return this.mapNameToGroup.forEach(function(t3, n2) {
          e2.push(n2);
        }), t2.groups = e2, t2;
      }, o.prototype.dwgIn = function(t2) {
        var e2 = this;
        return t2.groups.forEach(function(t3) {
          var n2 = new i(t3);
          e2.mapNameToGroup.set(t3, n2);
        }), true;
      }, o.prototype.getEntityInGroup = function(t2) {
        var e2 = [];
        return this.mapNameToGroup.forEach(function(n2) {
          n2.has(t2) && e2.push(n2);
        }), e2;
      }, o.prototype.getEntityInGroupName = function(t2) {
        var e2 = [];
        return this.mapNameToGroup.forEach(function(n2, i2) {
          n2.has(t2) && e2.push(i2);
        }), e2;
      }, o);
      function o() {
        this.mapNameToGroup = /* @__PURE__ */ new Map();
      }
      n.MxDbGroupDictionary = a;
    }, {}], 75: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbLayerTableRecord = void 0;
      var i = t("three"), r = t("../MxManager"), a = (o.prototype.getGroup = function() {
        return this.group;
      }, o.prototype.getName = function() {
        return this.name;
      }, o.prototype.setName = function(t2) {
        this.name = t2;
      }, o.prototype.setVisible = function(t2) {
        this.visible = t2, this.group.visible = t2;
      }, o.prototype.getVisible = function() {
        return this.visible;
      }, o.prototype.init = function(t2, e2) {
        return this.name = t2, this.group.renderOrder = r.MxData.iMxEntityRenderOrder, e2.add(this.group), true;
      }, o.prototype.dwgIn = function(t2) {
        return this.visible = t2.visible, this.name = t2.name, this.group.visible = this.visible, true;
      }, o.prototype.dwgOut = function(t2) {
        return t2.visible = this.visible, t2.name = this.name, t2;
      }, o);
      function o() {
        this.group = new i.Group(), this.name = "", this.visible = true;
      }
      n.MxDbLayerTableRecord = a;
    }, { "../MxManager": 36, three: 19 }], 76: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDbTextureManager = void 0;
      var i = t("three"), r = (a.prototype.loadImage = function(t2, e2) {
        var n2 = this.mapImageUrlToMaterialTexture.get(t2);
        if (n2)
          e2(n2);
        else {
          var r2 = this;
          new i.TextureLoader().load(t2, function(n3) {
            var a2 = new i.MeshLambertMaterial({ map: n3, transparent: true, side: i.DoubleSide });
            a2.map && (a2.map.needsUpdate = true), r2.mapImageUrlToMaterialTexture.set(t2, a2), e2 && e2(a2);
          }, void 0, function(t3) {
            console.log(t3), e2 && e2(null);
          });
        }
      }, a);
      function a() {
        this.mapImageUrlToMaterialTexture = /* @__PURE__ */ new Map();
      }
      n.MxDbTextureManager = r;
    }, { three: 19 }], 77: [function(t, e, n) {
      "use strict";
      var i, r = this && this.__extends || (i = function(t2, e2) {
        return (i = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
          t3.__proto__ = e3;
        } || function(t3, e3) {
          for (var n2 in e3)
            Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
        })(t2, e2);
      }, function(t2, e2) {
        if (typeof e2 != "function" && e2 !== null)
          throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function n2() {
          this.constructor = t2;
        }
        i(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
      });
      Object.defineProperty(n, "__esModule", { value: true }), n.MxDrawObject3dThreeJS = n.MxDrawObject2dThreeJS = n.MxDrawMapBoxThreeJS = n.MxDrawThreeJS = n.MxThreeJSType = void 0;
      var a, o, s = t("three"), l = t("../Operate/MxJigCmdManager");
      (o = a = n.MxThreeJSType || (n.MxThreeJSType = {}))[o.k2d = 0] = "k2d", o[o.k3d = 1] = "k3d", o[o.kMapBox = 2] = "kMapBox";
      var c = (u.prototype.addControlsChangeEvent = function() {
        var t2 = this.mxObject;
        this.mxObject.getOrbitControls().addEventListener("change", function() {
          l.MxJigCmdManager.OnThreeControlsChage(), t2.callEvent("viewchange"), t2.getMxDatabase().onViewChange();
          var e2 = t2.getMxCAD();
          e2 && e2.getGrip().onControlsChage(), t2.updateDisplay();
        });
      }, u.prototype.updateDisplay = function(t2) {
        t2 === void 0 && (t2 = false), this.mxObject.updateDisplayImplement(t2);
      }, u.prototype.addWindowResizeEvent = function() {
      }, u);
      function u(t2) {
        this.mxObject = t2;
      }
      n.MxDrawThreeJS = c;
      var h, d = (r(p, h = c), p.prototype.onInitThreejs = function() {
        var t2 = this, e2 = new s.Camera(), n2 = new s.Scene(), i2 = this.mapBox.canvas, r2 = new s.DirectionalLight(16777215);
        r2.position.set(0, -70, 100).normalize(), n2.add(r2);
        var a2 = new s.DirectionalLight(16777215);
        a2.position.set(0, 70, 100).normalize(), n2.add(a2);
        var o2 = new s.WebGLRenderer({ canvas: i2, context: this.mapBox.gl });
        o2.autoClear = false, this.mxObject2d.mapBoxInitThreeJSObject(n2, e2, o2);
        var l2 = this;
        this.mapBox.render = function(e3, n3) {
          var i3 = new s.Matrix4().fromArray(n3);
          i3.multiply(t2.matCADLogicalCoordToMap);
          var r3 = new s.Vector3(0, 0, 0);
          if (r3.applyMatrix4(i3), 1 < r3.z) {
            var a3 = 1 - r3.z - 1e-5;
            i3 = new s.Matrix4().makeTranslation(0, 0, a3).multiply(i3);
          }
          l2.mxObject2d.mapBoxRender(e3, i3);
        };
      }, p.prototype.alignCoordSys = function(t2, e2, n2, i2, r2) {
        var a2 = 1;
        0 < e2.x - t2.x && 0 < i2.x - n2.x && (a2 = (i2.x - n2.x) / (e2.x - t2.x));
        var o2 = new s.Matrix4();
        o2.makeTranslation(-t2.x, -t2.y, -t2.z);
        var l2 = new s.Matrix4().scale(new s.Vector3(a2, -a2, a2));
        return new s.Matrix4().makeTranslation(n2.x, n2.y + (i2.y - n2.y), r2).multiply(l2).multiply(o2);
      }, p.prototype.updateCameraDisplayRange = function(t2, e2, n2) {
        var i2 = new s.Matrix4();
        i2.makeTranslation(-this.mapBox.cadOrigin.x, -this.mapBox.cadOrigin.y, -this.mapBox.cadOrigin.z);
        var r2 = new s.Matrix4();
        r2.makeTranslation(this.mapBox.mapOrigin.x, this.mapBox.mapOrigin.y, this.mapBox.elevation);
        var a2 = new s.Matrix4();
        a2.makeScale(this.mapBox.mapLenInCADUnits, -this.mapBox.mapLenInCADUnits, this.mapBox.mapLenInCADUnits);
        var o2 = r2.multiply(a2).multiply(i2), l2 = this.mxObject2d.getWorldToDoc();
        this.matCADLogicalCoordToMap = o2.clone().multiply(l2), this.mapBox.matCadToMap = o2, this.mapBox.matMapToCad = new s.Matrix4(), this.mapBox.matMapToCad.getInverse(o2);
      }, p.prototype.onInitScene = function() {
      }, p.prototype.addControlsChangeEvent = function() {
      }, p.prototype.addWindowResizeEvent = function() {
      }, p.prototype.updateDisplay = function(t2) {
        t2 === void 0 && (t2 = false);
      }, p.prototype.getType = function() {
        return a.kMapBox;
      }, p);
      function p(t2, e2) {
        var n2 = h.call(this, e2) || this;
        return n2.matCADLogicalCoordToMap = new s.Matrix4(), n2.mapBox = t2, n2.mxObject2d = e2, n2;
      }
      n.MxDrawMapBoxThreeJS = d;
      var f, m = (r(g, f = c), g.prototype.onInitThreejs = function() {
        this.proxyObj.onInitThreejs();
      }, g.prototype.onInitScene = function() {
        this.proxyObj.onInitScene();
      }, g.prototype.getType = function() {
        return a.k2d;
      }, g.prototype.updateCameraDisplayRange = function(t2, e2, n2) {
        this.proxyObj.updateCameraDisplayRangeImp(t2, e2, n2);
      }, g);
      function g(t2) {
        var e2 = f.call(this, t2) || this;
        return e2.proxyObj = t2, e2;
      }
      n.MxDrawObject2dThreeJS = m;
      var v, y = (r(x, v = c), x.prototype.onInitThreejs = function() {
        this.proxyObj.onInitThreejs();
      }, x.prototype.onInitScene = function() {
        this.proxyObj.onInitScene();
      }, x.prototype.getType = function() {
        return a.k3d;
      }, x.prototype.updateCameraDisplayRange = function(t2, e2, n2) {
      }, x);
      function x(t2) {
        var e2 = v.call(this, t2) || this;
        return e2.proxyObj = t2, e2;
      }
      n.MxDrawObject3dThreeJS = y;
    }, { "../Operate/MxJigCmdManager": 58, three: 19 }], 78: [function(t, e, n) {
      "use strict";
      Object.defineProperty(n, "__esModule", { value: true }), n.McDrawObject = void 0;
      var i = t("three"), r = (a.prototype.init = function(t2, e2) {
        this.mxObject = t2, this.mcObjectImp = e2;
      }, a.prototype.updateDisplay = function() {
        if (!this.mcObjectImp)
          return false;
        var t2 = this.mxObject.getCamera(), e2 = new i.Matrix4();
        e2.multiplyMatrices(t2.matrixWorldInverse, this.mxObject.getDoc2World());
        var n2 = t2.projectionMatrix;
        return this.mcObjectImp.updateDisplay(e2.elements, n2.elements);
      }, a);
      function a() {
      }
      n.McDrawObject = r;
    }, { three: 19 }] }, {}, [60]);
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/loadCoreCode/mxcadassembly_es5.js
  function mxcadassemblyinit() {
    var e, t = (e = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0, typeof __filename != "undefined" && (e = e || __filename), function(t2) {
      var n, r, i;
      t2 = t2 || {}, n || (n = t2 !== void 0 ? t2 : {}), n.ready = new Promise(function(e2, t3) {
        r = e2, i = t3;
      });
      var o, f, a, c, u, s, p = Object.assign({}, n), _5 = typeof window == "object", A = typeof importScripts == "function", l = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", b = "";
      l ? (b = A ? xxxxx("path").dirname(b) + "/" : __dirname + "/", s = () => {
        u || (c = xxxxx("fs"), u = xxxxx("path"));
      }, o = function(e2, t3) {
        var n2 = Z(e2);
        return n2 ? t3 ? n2 : n2.toString() : (s(), e2 = u.normalize(e2), c.readFileSync(e2, t3 ? void 0 : "utf8"));
      }, a = (e2) => ((e2 = o(e2, true)).buffer || (e2 = new Uint8Array(e2)), e2), f = (e2, t3, n2) => {
        var r2 = Z(e2);
        r2 && t3(r2), s(), e2 = u.normalize(e2), c.readFile(e2, function(e3, r3) {
          e3 ? n2(e3) : t3(r3.buffer);
        });
      }, 1 < process.argv.length && process.argv[1].replace(/\\/g, "/"), process.argv.slice(2), process.on("uncaughtException", function(e2) {
        throw e2;
      }), process.on("unhandledRejection", function(e2) {
        throw e2;
      }), n.inspect = function() {
        return "[Emscripten Module object]";
      }) : (_5 || A) && (A ? b = self.location.href : typeof document != "undefined" && document.currentScript && (b = document.currentScript.src), e && (b = e), b = b.indexOf("blob:") !== 0 ? b.substr(0, b.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", o = (e2) => {
        try {
          var t3 = new XMLHttpRequest();
          return t3.open("GET", e2, false), t3.send(null), t3.responseText;
        } catch (i2) {
          if (e2 = Z(e2)) {
            t3 = [];
            for (var n2 = 0; n2 < e2.length; n2++) {
              var r2 = e2[n2];
              255 < r2 && (N && F("Character code " + r2 + " (" + String.fromCharCode(r2) + ")  at offset " + n2 + " not in 0x00-0xFF."), r2 &= 255), t3.push(String.fromCharCode(r2));
            }
            return t3.join("");
          }
          throw i2;
        }
      }, A && (a = (e2) => {
        try {
          var t3 = new XMLHttpRequest();
          return t3.open("GET", e2, false), t3.responseType = "arraybuffer", t3.send(null), new Uint8Array(t3.response);
        } catch (t4) {
          if (e2 = Z(e2))
            return e2;
          throw t4;
        }
      }), f = (e2, t3, n2) => {
        var r2 = new XMLHttpRequest();
        r2.open("GET", e2, true), r2.responseType = "arraybuffer", r2.onload = () => {
          if (r2.status == 200 || r2.status == 0 && r2.response)
            t3(r2.response);
          else {
            var i2 = Z(e2);
            i2 ? t3(i2.buffer) : n2();
          }
        }, r2.onerror = n2, r2.send(null);
      }), n.print || console.log.bind(console);
      var d, y = n.printErr || console.warn.bind(console);
      function h() {
        this.exports = function(e2) {
          for (var t3, n2 = new Uint8Array(123), r2 = 25; r2 >= 0; --r2)
            n2[48 + r2] = 52 + r2, n2[65 + r2] = r2, n2[97 + r2] = 26 + r2;
          function i2(e3, t4, r3) {
            for (var i3, o2, f2 = 0, a2 = t4, c2 = r3.length, u2 = t4 + (3 * c2 >> 2) - (r3[c2 - 2] == "=") - (r3[c2 - 1] == "="); f2 < c2; f2 += 4)
              i3 = n2[r3.charCodeAt(f2 + 1)], o2 = n2[r3.charCodeAt(f2 + 2)], e3[a2++] = n2[r3.charCodeAt(f2)] << 2 | i3 >> 4, a2 < u2 && (e3[a2++] = i3 << 4 | o2 >> 2), a2 < u2 && (e3[a2++] = o2 << 6 | n2[r3.charCodeAt(f2 + 3)]);
          }
          return n2[43] = 62, n2[47] = 63, function(e3) {
            var n3 = e3.a.buffer, r3 = new Int8Array(n3), o2 = new Int16Array(n3), f2 = new Int32Array(n3), a2 = new Uint8Array(n3), c2 = (new Uint16Array(n3), new Uint32Array(n3)), u2 = (new Float32Array(n3), new Float64Array(n3)), s2 = Math.imul, p2 = (Math.fround, Math.abs, Math.clz32, Math.min, Math.max, Math.floor, Math.ceil, Math.trunc, Math.sqrt, e3.abort), _6 = e3.b, A2 = e3.c, l2 = e3.d, b2 = e3.e, d2 = e3.f, y2 = 5245008;
            function h2(e4) {
              var t4, n4 = 0, r4 = 0, i3 = 0, o3 = 0, u3 = 0, s3 = 0, p3 = 0, _7 = 0, A3 = 0, l3 = 0;
              y2 = t4 = y2 - 16 | 0;
              e: {
                t: {
                  n: {
                    r: {
                      i: {
                        o: {
                          f: {
                            a: {
                              c: {
                                u: {
                                  s: {
                                    if ((e4 |= 0) >>> 0 <= 244) {
                                      if (3 & (n4 = (o3 = f2[404]) >>> (r4 = (s3 = e4 >>> 0 < 11 ? 16 : e4 + 11 & -8) >>> 3 | 0) | 0)) {
                                        e4 = (u3 = f2[1664 + (n4 = (i3 = r4 + (1 & (-1 ^ n4)) | 0) << 3) >> 2]) + 8 | 0, (0 | (r4 = f2[u3 + 8 >> 2])) != (0 | (n4 = n4 + 1656 | 0)) ? (f2[r4 + 12 >> 2] = n4, f2[n4 + 8 >> 2] = r4) : f2[404] = j2(i3) & o3, n4 = i3 << 3, f2[u3 + 4 >> 2] = 3 | n4, f2[4 + (n4 = n4 + u3 | 0) >> 2] = 1 | f2[n4 + 4 >> 2];
                                        break e;
                                      }
                                      if ((l3 = f2[406]) >>> 0 >= s3 >>> 0)
                                        break s;
                                      if (n4) {
                                        r4 = e4 = (n4 = (0 - (e4 = (0 - (e4 = 2 << r4) | e4) & n4 << r4) & e4) - 1 | 0) >>> 12 & 16, r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 5 & 8, r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 2 & 4, A3 = f2[1664 + (e4 = (r4 = ((r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 1 & 2) | (e4 = (n4 = n4 >>> e4 | 0) >>> 1 & 1)) + (n4 >>> e4 | 0) | 0) << 3) >> 2], (0 | (n4 = f2[A3 + 8 >> 2])) != (0 | (e4 = e4 + 1656 | 0)) ? (f2[n4 + 12 >> 2] = e4, f2[e4 + 8 >> 2] = n4) : (o3 = j2(r4) & o3, f2[404] = o3), e4 = A3 + 8 | 0, f2[A3 + 4 >> 2] = 3 | s3, u3 = (n4 = r4 << 3) - s3 | 0, f2[4 + (i3 = s3 + A3 | 0) >> 2] = 1 | u3, f2[n4 + A3 >> 2] = u3, l3 && (r4 = 1656 + ((n4 = l3 >>> 3 | 0) << 3) | 0, A3 = f2[409], (n4 = 1 << n4) & o3 ? n4 = f2[r4 + 8 >> 2] : (f2[404] = n4 | o3, n4 = r4), f2[r4 + 8 >> 2] = A3, f2[n4 + 12 >> 2] = A3, f2[A3 + 12 >> 2] = r4, f2[A3 + 8 >> 2] = n4), f2[409] = i3, f2[406] = u3;
                                        break e;
                                      }
                                      if (!(p3 = f2[405]))
                                        break s;
                                      for (r4 = e4 = (n4 = (0 - p3 & p3) - 1 | 0) >>> 12 & 16, r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 5 & 8, r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 2 & 4, n4 = f2[1920 + (((r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 1 & 2) | (e4 = (n4 = n4 >>> e4 | 0) >>> 1 & 1)) + (n4 >>> e4 | 0) << 2) >> 2], i3 = (-8 & f2[n4 + 4 >> 2]) - s3 | 0, r4 = n4; (e4 = f2[r4 + 16 >> 2]) || (e4 = f2[r4 + 20 >> 2]); )
                                        i3 = (u3 = (r4 = (-8 & f2[e4 + 4 >> 2]) - s3 | 0) >>> 0 < i3 >>> 0) ? r4 : i3, n4 = u3 ? e4 : n4, r4 = e4;
                                      if (_7 = f2[n4 + 24 >> 2], (0 | (u3 = f2[n4 + 12 >> 2])) != (0 | n4)) {
                                        e4 = f2[n4 + 8 >> 2], f2[e4 + 12 >> 2] = u3, f2[u3 + 8 >> 2] = e4;
                                        break t;
                                      }
                                      if (!(e4 = f2[(r4 = n4 + 20 | 0) >> 2])) {
                                        if (!(e4 = f2[n4 + 16 >> 2]))
                                          break u;
                                        r4 = n4 + 16 | 0;
                                      }
                                      for (; A3 = r4, u3 = e4, (e4 = f2[(r4 = e4 + 20 | 0) >> 2]) || (r4 = u3 + 16 | 0, e4 = f2[u3 + 16 >> 2]); )
                                        ;
                                      f2[A3 >> 2] = 0;
                                      break t;
                                    }
                                    if (s3 = -1, !(e4 >>> 0 > 4294967231) && (s3 = -8 & (e4 = e4 + 11 | 0), _7 = f2[405])) {
                                      i3 = 0 - s3 | 0, o3 = 0, s3 >>> 0 < 256 || (o3 = 31, s3 >>> 0 > 16777215 || (e4 = e4 >>> 8 | 0, e4 <<= A3 = e4 + 1048320 >>> 16 & 8, o3 = 28 + ((e4 = ((e4 <<= r4 = e4 + 520192 >>> 16 & 4) << (n4 = e4 + 245760 >>> 16 & 2) >>> 15 | 0) - (n4 | r4 | A3) | 0) << 1 | s3 >>> e4 + 21 & 1) | 0)), r4 = f2[1920 + (o3 << 2) >> 2];
                                      p: {
                                        _: {
                                          if (r4)
                                            for (e4 = 0, n4 = s3 << ((0 | o3) == 31 ? 0 : 25 - (o3 >>> 1 | 0) | 0); ; ) {
                                              if (!((A3 = (p3 = -8 & f2[r4 + 4 >> 2]) - s3 | 0) >>> 0 >= i3 >>> 0) && (i3 = A3, u3 = r4, (0 | s3) == (0 | p3))) {
                                                i3 = 0, e4 = r4;
                                                break _;
                                              }
                                              if (A3 = f2[r4 + 20 >> 2], r4 = f2[16 + ((n4 >>> 29 & 4) + r4 | 0) >> 2], e4 = A3 ? (0 | A3) == (0 | r4) ? e4 : A3 : e4, n4 <<= 1, !r4)
                                                break;
                                            }
                                          else
                                            e4 = 0;
                                          if (!(e4 | u3)) {
                                            if (u3 = 0, !(e4 = (0 - (e4 = 2 << o3) | e4) & _7))
                                              break s;
                                            r4 = e4 = (n4 = (e4 & 0 - e4) - 1 | 0) >>> 12 & 16, r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 5 & 8, r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 2 & 4, e4 = f2[1920 + (((r4 |= e4 = (n4 = n4 >>> e4 | 0) >>> 1 & 2) | (e4 = (n4 = n4 >>> e4 | 0) >>> 1 & 1)) + (n4 >>> e4 | 0) << 2) >> 2];
                                          }
                                          if (!e4)
                                            break p;
                                        }
                                        for (; i3 = (r4 = (n4 = (-8 & f2[e4 + 4 >> 2]) - s3 | 0) >>> 0 < i3 >>> 0) ? n4 : i3, u3 = r4 ? e4 : u3, e4 = (n4 = f2[e4 + 16 >> 2]) || f2[e4 + 20 >> 2]; )
                                          ;
                                      }
                                      if (!(!u3 | f2[406] - s3 >>> 0 <= i3 >>> 0)) {
                                        if (o3 = f2[u3 + 24 >> 2], (0 | u3) != (0 | (n4 = f2[u3 + 12 >> 2]))) {
                                          e4 = f2[u3 + 8 >> 2], f2[e4 + 12 >> 2] = n4, f2[n4 + 8 >> 2] = e4;
                                          break n;
                                        }
                                        if (!(e4 = f2[(r4 = u3 + 20 | 0) >> 2])) {
                                          if (!(e4 = f2[u3 + 16 >> 2]))
                                            break c;
                                          r4 = u3 + 16 | 0;
                                        }
                                        for (; A3 = r4, n4 = e4, (e4 = f2[(r4 = e4 + 20 | 0) >> 2]) || (r4 = n4 + 16 | 0, e4 = f2[n4 + 16 >> 2]); )
                                          ;
                                        f2[A3 >> 2] = 0;
                                        break n;
                                      }
                                    }
                                  }
                                  if ((r4 = f2[406]) >>> 0 >= s3 >>> 0) {
                                    i3 = f2[409], (n4 = r4 - s3 | 0) >>> 0 >= 16 ? (f2[406] = n4, e4 = i3 + s3 | 0, f2[409] = e4, f2[e4 + 4 >> 2] = 1 | n4, f2[r4 + i3 >> 2] = n4, f2[i3 + 4 >> 2] = 3 | s3) : (f2[409] = 0, f2[406] = 0, f2[i3 + 4 >> 2] = 3 | r4, f2[4 + (e4 = r4 + i3 | 0) >> 2] = 1 | f2[e4 + 4 >> 2]), e4 = i3 + 8 | 0;
                                    break e;
                                  }
                                  if ((_7 = f2[407]) >>> 0 > s3 >>> 0) {
                                    n4 = _7 - s3 | 0, f2[407] = n4, e4 = (r4 = f2[410]) + s3 | 0, f2[410] = e4, f2[e4 + 4 >> 2] = 1 | n4, f2[r4 + 4 >> 2] = 3 | s3, e4 = r4 + 8 | 0;
                                    break e;
                                  }
                                  if (e4 = 0, p3 = s3 + 47 | 0, f2[522] ? r4 = f2[524] : (f2[525] = -1, f2[526] = -1, f2[523] = 4096, f2[524] = 4096, f2[522] = t4 + 12 & -16 ^ 1431655768, f2[527] = 0, f2[515] = 0, r4 = 4096), (r4 = (A3 = p3 + r4 | 0) & (u3 = 0 - r4 | 0)) >>> 0 <= s3 >>> 0)
                                    break e;
                                  if ((i3 = f2[514]) && (o3 = (n4 = f2[512]) + r4 | 0) >>> 0 > i3 >>> 0 | n4 >>> 0 >= o3 >>> 0)
                                    break e;
                                  if (4 & a2[2060])
                                    break o;
                                  s: {
                                    p: {
                                      if (i3 = f2[410])
                                        for (e4 = 2064; ; ) {
                                          if ((n4 = f2[e4 >> 2]) >>> 0 <= i3 >>> 0 & i3 >>> 0 < n4 + f2[e4 + 4 >> 2] >>> 0)
                                            break p;
                                          if (!(e4 = f2[e4 + 8 >> 2]))
                                            break;
                                        }
                                      if ((0 | (n4 = C2(0))) == -1)
                                        break f;
                                      if (o3 = r4, (e4 = (i3 = f2[523]) - 1 | 0) & n4 && (o3 = (r4 - n4 | 0) + (e4 + n4 & 0 - i3) | 0), o3 >>> 0 <= s3 >>> 0 | o3 >>> 0 > 2147483646)
                                        break f;
                                      if ((i3 = f2[514]) && i3 >>> 0 < (u3 = (e4 = f2[512]) + o3 | 0) >>> 0 | e4 >>> 0 >= u3 >>> 0)
                                        break f;
                                      if ((0 | n4) != (0 | (e4 = C2(o3))))
                                        break s;
                                      break i;
                                    }
                                    if ((o3 = u3 & A3 - _7) >>> 0 > 2147483646)
                                      break f;
                                    if ((0 | (n4 = C2(o3))) == (f2[e4 >> 2] + f2[e4 + 4 >> 2] | 0))
                                      break a;
                                    e4 = n4;
                                  }
                                  if (!((0 | e4) == -1 | s3 + 48 >>> 0 <= o3 >>> 0)) {
                                    if ((n4 = (n4 = f2[524]) + (p3 - o3 | 0) & 0 - n4) >>> 0 > 2147483646) {
                                      n4 = e4;
                                      break i;
                                    }
                                    if ((0 | C2(n4)) != -1) {
                                      o3 = n4 + o3 | 0, n4 = e4;
                                      break i;
                                    }
                                    C2(0 - o3 | 0);
                                    break f;
                                  }
                                  if (n4 = e4, (0 | e4) != -1)
                                    break i;
                                  break f;
                                }
                                u3 = 0;
                                break t;
                              }
                              n4 = 0;
                              break n;
                            }
                            if ((0 | n4) != -1)
                              break i;
                          }
                          f2[515] = 4 | f2[515];
                        }
                        if (r4 >>> 0 > 2147483646)
                          break r;
                        if ((0 | (n4 = C2(r4))) == -1 | (0 | (e4 = C2(0))) == -1 | e4 >>> 0 <= n4 >>> 0)
                          break r;
                        if ((o3 = e4 - n4 | 0) >>> 0 <= s3 + 40 >>> 0)
                          break r;
                      }
                      e4 = f2[512] + o3 | 0, f2[512] = e4, e4 >>> 0 > c2[513] && (f2[513] = e4);
                      i: {
                        o: {
                          f: {
                            if (p3 = f2[410]) {
                              for (e4 = 2064; ; ) {
                                if (((i3 = f2[e4 >> 2]) + (r4 = f2[e4 + 4 >> 2]) | 0) == (0 | n4))
                                  break f;
                                if (!(e4 = f2[e4 + 8 >> 2]))
                                  break;
                              }
                              break o;
                            }
                            for ((e4 = f2[408]) >>> 0 <= n4 >>> 0 && e4 || (f2[408] = n4), e4 = 0, f2[517] = o3, f2[516] = n4, f2[412] = -1, f2[413] = f2[522], f2[519] = 0; r4 = 1656 + (i3 = e4 << 3) | 0, f2[i3 + 1664 >> 2] = r4, f2[i3 + 1668 >> 2] = r4, (0 | (e4 = e4 + 1 | 0)) != 32; )
                              ;
                            r4 = (i3 = o3 - 40 | 0) - (e4 = n4 + 8 & 7 ? -8 - n4 & 7 : 0) | 0, f2[407] = r4, e4 = e4 + n4 | 0, f2[410] = e4, f2[e4 + 4 >> 2] = 1 | r4, f2[4 + (n4 + i3 | 0) >> 2] = 40, f2[411] = f2[526];
                            break i;
                          }
                          if (!(8 & a2[e4 + 12 | 0] | i3 >>> 0 > p3 >>> 0 | n4 >>> 0 <= p3 >>> 0)) {
                            f2[e4 + 4 >> 2] = r4 + o3, r4 = (e4 = p3 + 8 & 7 ? -8 - p3 & 7 : 0) + p3 | 0, f2[410] = r4, e4 = (n4 = f2[407] + o3 | 0) - e4 | 0, f2[407] = e4, f2[r4 + 4 >> 2] = 1 | e4, f2[4 + (n4 + p3 | 0) >> 2] = 40, f2[411] = f2[526];
                            break i;
                          }
                        }
                        c2[408] > n4 >>> 0 && (f2[408] = n4), r4 = n4 + o3 | 0, e4 = 2064;
                        o: {
                          f: {
                            a: {
                              c: {
                                u: {
                                  s: {
                                    for (; ; ) {
                                      if ((0 | r4) != f2[e4 >> 2]) {
                                        if (e4 = f2[e4 + 8 >> 2])
                                          continue;
                                        break s;
                                      }
                                      break;
                                    }
                                    if (!(8 & a2[e4 + 12 | 0]))
                                      break u;
                                  }
                                  for (e4 = 2064; ; ) {
                                    if ((r4 = f2[e4 >> 2]) >>> 0 <= p3 >>> 0 && (u3 = r4 + f2[e4 + 4 >> 2] | 0) >>> 0 > p3 >>> 0)
                                      break c;
                                    e4 = f2[e4 + 8 >> 2];
                                  }
                                }
                                if (f2[e4 >> 2] = n4, f2[e4 + 4 >> 2] = f2[e4 + 4 >> 2] + o3, f2[4 + (A3 = (n4 + 8 & 7 ? -8 - n4 & 7 : 0) + n4 | 0) >> 2] = 3 | s3, s3 = (o3 = r4 + (r4 + 8 & 7 ? -8 - r4 & 7 : 0) | 0) - (_7 = s3 + A3 | 0) | 0, (0 | o3) == (0 | p3)) {
                                  f2[410] = _7, e4 = f2[407] + s3 | 0, f2[407] = e4, f2[_7 + 4 >> 2] = 1 | e4;
                                  break f;
                                }
                                if (f2[409] == (0 | o3)) {
                                  f2[409] = _7, e4 = f2[406] + s3 | 0, f2[406] = e4, f2[_7 + 4 >> 2] = 1 | e4, f2[e4 + _7 >> 2] = e4;
                                  break f;
                                }
                                if ((3 & (e4 = f2[o3 + 4 >> 2])) == 1) {
                                  u3 = -8 & e4;
                                  u:
                                    if (e4 >>> 0 <= 255) {
                                      if (r4 = f2[o3 + 8 >> 2], e4 = e4 >>> 3 | 0, (0 | (n4 = f2[o3 + 12 >> 2])) == (0 | r4)) {
                                        f2[404] = f2[404] & j2(e4);
                                        break u;
                                      }
                                      f2[r4 + 12 >> 2] = n4, f2[n4 + 8 >> 2] = r4;
                                    } else {
                                      if (p3 = f2[o3 + 24 >> 2], (0 | o3) == (0 | (n4 = f2[o3 + 12 >> 2])))
                                        if ((i3 = f2[(e4 = o3 + 20 | 0) >> 2]) || (i3 = f2[(e4 = o3 + 16 | 0) >> 2])) {
                                          for (; r4 = e4, (i3 = f2[(e4 = (n4 = i3) + 20 | 0) >> 2]) || (e4 = n4 + 16 | 0, i3 = f2[n4 + 16 >> 2]); )
                                            ;
                                          f2[r4 >> 2] = 0;
                                        } else
                                          n4 = 0;
                                      else
                                        e4 = f2[o3 + 8 >> 2], f2[e4 + 12 >> 2] = n4, f2[n4 + 8 >> 2] = e4;
                                      if (p3) {
                                        r4 = f2[o3 + 28 >> 2];
                                        s: {
                                          if (f2[(e4 = 1920 + (r4 << 2) | 0) >> 2] == (0 | o3)) {
                                            if (f2[e4 >> 2] = n4, n4)
                                              break s;
                                            f2[405] = f2[405] & j2(r4);
                                            break u;
                                          }
                                          if (f2[p3 + (f2[p3 + 16 >> 2] == (0 | o3) ? 16 : 20) >> 2] = n4, !n4)
                                            break u;
                                        }
                                        f2[n4 + 24 >> 2] = p3, (e4 = f2[o3 + 16 >> 2]) && (f2[n4 + 16 >> 2] = e4, f2[e4 + 24 >> 2] = n4), (e4 = f2[o3 + 20 >> 2]) && (f2[n4 + 20 >> 2] = e4, f2[e4 + 24 >> 2] = n4);
                                      }
                                    }
                                  s3 = u3 + s3 | 0, o3 = o3 + u3 | 0;
                                }
                                if (f2[o3 + 4 >> 2] = -2 & f2[o3 + 4 >> 2], f2[_7 + 4 >> 2] = 1 | s3, f2[s3 + _7 >> 2] = s3, s3 >>> 0 <= 255) {
                                  n4 = 1656 + ((e4 = s3 >>> 3 | 0) << 3) | 0, (r4 = f2[404]) & (e4 = 1 << e4) ? e4 = f2[n4 + 8 >> 2] : (f2[404] = e4 | r4, e4 = n4), f2[n4 + 8 >> 2] = _7, f2[e4 + 12 >> 2] = _7, f2[_7 + 12 >> 2] = n4, f2[_7 + 8 >> 2] = e4;
                                  break f;
                                }
                                if (e4 = 31, s3 >>> 0 <= 16777215 && (e4 = s3 >>> 8 | 0, e4 <<= i3 = e4 + 1048320 >>> 16 & 8, e4 = 28 + ((e4 = ((e4 <<= r4 = e4 + 520192 >>> 16 & 4) << (n4 = e4 + 245760 >>> 16 & 2) >>> 15 | 0) - (n4 | r4 | i3) | 0) << 1 | s3 >>> e4 + 21 & 1) | 0), f2[_7 + 28 >> 2] = e4, f2[_7 + 16 >> 2] = 0, f2[_7 + 20 >> 2] = 0, i3 = 1920 + (e4 << 2) | 0, (r4 = f2[405]) & (n4 = 1 << e4)) {
                                  for (e4 = s3 << ((0 | e4) == 31 ? 0 : 25 - (e4 >>> 1 | 0) | 0), n4 = f2[i3 >> 2]; ; ) {
                                    if (r4 = n4, (-8 & f2[n4 + 4 >> 2]) == (0 | s3))
                                      break a;
                                    if (n4 = e4 >>> 29 | 0, e4 <<= 1, !(n4 = f2[16 + (i3 = r4 + (4 & n4) | 0) >> 2]))
                                      break;
                                  }
                                  f2[i3 + 16 >> 2] = _7, f2[_7 + 24 >> 2] = r4;
                                } else
                                  f2[405] = n4 | r4, f2[i3 >> 2] = _7, f2[_7 + 24 >> 2] = i3;
                                f2[_7 + 12 >> 2] = _7, f2[_7 + 8 >> 2] = _7;
                                break f;
                              }
                              for (r4 = (i3 = o3 - 40 | 0) - (e4 = n4 + 8 & 7 ? -8 - n4 & 7 : 0) | 0, f2[407] = r4, e4 = e4 + n4 | 0, f2[410] = e4, f2[e4 + 4 >> 2] = 1 | r4, f2[4 + (n4 + i3 | 0) >> 2] = 40, f2[411] = f2[526], f2[(r4 = (e4 = (u3 + (u3 - 39 & 7 ? 39 - u3 & 7 : 0) | 0) - 47 | 0) >>> 0 < p3 + 16 >>> 0 ? p3 : e4) + 4 >> 2] = 27, e4 = f2[519], f2[r4 + 16 >> 2] = f2[518], f2[r4 + 20 >> 2] = e4, e4 = f2[517], f2[r4 + 8 >> 2] = f2[516], f2[r4 + 12 >> 2] = e4, f2[518] = r4 + 8, f2[517] = o3, f2[516] = n4, f2[519] = 0, e4 = r4 + 24 | 0; f2[e4 + 4 >> 2] = 7, n4 = e4 + 8 | 0, e4 = e4 + 4 | 0, n4 >>> 0 < u3 >>> 0; )
                                ;
                              if ((0 | r4) == (0 | p3))
                                break i;
                              if (f2[r4 + 4 >> 2] = -2 & f2[r4 + 4 >> 2], u3 = r4 - p3 | 0, f2[p3 + 4 >> 2] = 1 | u3, f2[r4 >> 2] = u3, u3 >>> 0 <= 255) {
                                n4 = 1656 + ((e4 = u3 >>> 3 | 0) << 3) | 0, (r4 = f2[404]) & (e4 = 1 << e4) ? e4 = f2[n4 + 8 >> 2] : (f2[404] = e4 | r4, e4 = n4), f2[n4 + 8 >> 2] = p3, f2[e4 + 12 >> 2] = p3, f2[p3 + 12 >> 2] = n4, f2[p3 + 8 >> 2] = e4;
                                break i;
                              }
                              if (e4 = 31, f2[p3 + 16 >> 2] = 0, f2[p3 + 20 >> 2] = 0, u3 >>> 0 <= 16777215 && (e4 = u3 >>> 8 | 0, e4 <<= i3 = e4 + 1048320 >>> 16 & 8, e4 = 28 + ((e4 = ((e4 <<= r4 = e4 + 520192 >>> 16 & 4) << (n4 = e4 + 245760 >>> 16 & 2) >>> 15 | 0) - (n4 | r4 | i3) | 0) << 1 | u3 >>> e4 + 21 & 1) | 0), f2[p3 + 28 >> 2] = e4, i3 = 1920 + (e4 << 2) | 0, (r4 = f2[405]) & (n4 = 1 << e4)) {
                                for (e4 = u3 << ((0 | e4) == 31 ? 0 : 25 - (e4 >>> 1 | 0) | 0), n4 = f2[i3 >> 2]; ; ) {
                                  if (r4 = n4, (0 | u3) == (-8 & f2[n4 + 4 >> 2]))
                                    break o;
                                  if (n4 = e4 >>> 29 | 0, e4 <<= 1, !(n4 = f2[16 + (i3 = r4 + (4 & n4) | 0) >> 2]))
                                    break;
                                }
                                f2[i3 + 16 >> 2] = p3, f2[p3 + 24 >> 2] = r4;
                              } else
                                f2[405] = n4 | r4, f2[i3 >> 2] = p3, f2[p3 + 24 >> 2] = i3;
                              f2[p3 + 12 >> 2] = p3, f2[p3 + 8 >> 2] = p3;
                              break i;
                            }
                            e4 = f2[r4 + 8 >> 2], f2[e4 + 12 >> 2] = _7, f2[r4 + 8 >> 2] = _7, f2[_7 + 24 >> 2] = 0, f2[_7 + 12 >> 2] = r4, f2[_7 + 8 >> 2] = e4;
                          }
                          e4 = A3 + 8 | 0;
                          break e;
                        }
                        e4 = f2[r4 + 8 >> 2], f2[e4 + 12 >> 2] = p3, f2[r4 + 8 >> 2] = p3, f2[p3 + 24 >> 2] = 0, f2[p3 + 12 >> 2] = r4, f2[p3 + 8 >> 2] = e4;
                      }
                      if (!((e4 = f2[407]) >>> 0 <= s3 >>> 0)) {
                        n4 = e4 - s3 | 0, f2[407] = n4, e4 = (r4 = f2[410]) + s3 | 0, f2[410] = e4, f2[e4 + 4 >> 2] = 1 | n4, f2[r4 + 4 >> 2] = 3 | s3, e4 = r4 + 8 | 0;
                        break e;
                      }
                    }
                    f2[403] = 48, e4 = 0;
                    break e;
                  }
                  n:
                    if (o3) {
                      r4 = f2[u3 + 28 >> 2];
                      r: {
                        if (f2[(e4 = 1920 + (r4 << 2) | 0) >> 2] == (0 | u3)) {
                          if (f2[e4 >> 2] = n4, n4)
                            break r;
                          _7 = j2(r4) & _7, f2[405] = _7;
                          break n;
                        }
                        if (f2[o3 + (f2[o3 + 16 >> 2] == (0 | u3) ? 16 : 20) >> 2] = n4, !n4)
                          break n;
                      }
                      f2[n4 + 24 >> 2] = o3, (e4 = f2[u3 + 16 >> 2]) && (f2[n4 + 16 >> 2] = e4, f2[e4 + 24 >> 2] = n4), (e4 = f2[u3 + 20 >> 2]) && (f2[n4 + 20 >> 2] = e4, f2[e4 + 24 >> 2] = n4);
                    }
                  n:
                    if (i3 >>> 0 <= 15)
                      e4 = i3 + s3 | 0, f2[u3 + 4 >> 2] = 3 | e4, f2[4 + (e4 = e4 + u3 | 0) >> 2] = 1 | f2[e4 + 4 >> 2];
                    else if (f2[u3 + 4 >> 2] = 3 | s3, f2[4 + (o3 = u3 + s3 | 0) >> 2] = 1 | i3, f2[o3 + i3 >> 2] = i3, i3 >>> 0 <= 255)
                      n4 = 1656 + ((e4 = i3 >>> 3 | 0) << 3) | 0, (r4 = f2[404]) & (e4 = 1 << e4) ? e4 = f2[n4 + 8 >> 2] : (f2[404] = e4 | r4, e4 = n4), f2[n4 + 8 >> 2] = o3, f2[e4 + 12 >> 2] = o3, f2[o3 + 12 >> 2] = n4, f2[o3 + 8 >> 2] = e4;
                    else {
                      e4 = 31, i3 >>> 0 <= 16777215 && (e4 = i3 >>> 8 | 0, e4 <<= A3 = e4 + 1048320 >>> 16 & 8, e4 = 28 + ((e4 = ((e4 <<= r4 = e4 + 520192 >>> 16 & 4) << (n4 = e4 + 245760 >>> 16 & 2) >>> 15 | 0) - (n4 | r4 | A3) | 0) << 1 | i3 >>> e4 + 21 & 1) | 0), f2[o3 + 28 >> 2] = e4, f2[o3 + 16 >> 2] = 0, f2[o3 + 20 >> 2] = 0, n4 = 1920 + (e4 << 2) | 0;
                      r: {
                        if ((r4 = 1 << e4) & _7) {
                          for (e4 = i3 << ((0 | e4) == 31 ? 0 : 25 - (e4 >>> 1 | 0) | 0), r4 = f2[n4 >> 2]; ; ) {
                            if ((-8 & f2[(n4 = r4) + 4 >> 2]) == (0 | i3))
                              break r;
                            if (r4 = e4 >>> 29 | 0, e4 <<= 1, !(r4 = f2[16 + (A3 = (4 & r4) + n4 | 0) >> 2]))
                              break;
                          }
                          f2[A3 + 16 >> 2] = o3;
                        } else
                          f2[405] = r4 | _7, f2[n4 >> 2] = o3;
                        f2[o3 + 24 >> 2] = n4, f2[o3 + 12 >> 2] = o3, f2[o3 + 8 >> 2] = o3;
                        break n;
                      }
                      e4 = f2[n4 + 8 >> 2], f2[e4 + 12 >> 2] = o3, f2[n4 + 8 >> 2] = o3, f2[o3 + 24 >> 2] = 0, f2[o3 + 12 >> 2] = n4, f2[o3 + 8 >> 2] = e4;
                    }
                  e4 = u3 + 8 | 0;
                  break e;
                }
                t:
                  if (_7) {
                    r4 = f2[n4 + 28 >> 2];
                    n: {
                      if (f2[(e4 = 1920 + (r4 << 2) | 0) >> 2] == (0 | n4)) {
                        if (f2[e4 >> 2] = u3, u3)
                          break n;
                        f2[405] = j2(r4) & p3;
                        break t;
                      }
                      if (f2[_7 + (f2[_7 + 16 >> 2] == (0 | n4) ? 16 : 20) >> 2] = u3, !u3)
                        break t;
                    }
                    f2[u3 + 24 >> 2] = _7, (e4 = f2[n4 + 16 >> 2]) && (f2[u3 + 16 >> 2] = e4, f2[e4 + 24 >> 2] = u3), (e4 = f2[n4 + 20 >> 2]) && (f2[u3 + 20 >> 2] = e4, f2[e4 + 24 >> 2] = u3);
                  }
                i3 >>> 0 <= 15 ? (e4 = i3 + s3 | 0, f2[n4 + 4 >> 2] = 3 | e4, f2[4 + (e4 = e4 + n4 | 0) >> 2] = 1 | f2[e4 + 4 >> 2]) : (f2[n4 + 4 >> 2] = 3 | s3, f2[4 + (u3 = n4 + s3 | 0) >> 2] = 1 | i3, f2[i3 + u3 >> 2] = i3, l3 && (r4 = 1656 + ((e4 = l3 >>> 3 | 0) << 3) | 0, A3 = f2[409], (e4 = 1 << e4) & o3 ? e4 = f2[r4 + 8 >> 2] : (f2[404] = e4 | o3, e4 = r4), f2[r4 + 8 >> 2] = A3, f2[e4 + 12 >> 2] = A3, f2[A3 + 12 >> 2] = r4, f2[A3 + 8 >> 2] = e4), f2[409] = u3, f2[406] = i3), e4 = n4 + 8 | 0;
              }
              return y2 = t4 + 16 | 0, 0 | e4;
            }
            function m2(e4) {
              var t4 = 0, n4 = 0, r4 = 0, i3 = 0, o3 = 0, a3 = 0, u3 = 0;
              e:
                if (e4) {
                  o3 = (r4 = e4 - 8 | 0) + (e4 = -8 & (t4 = f2[e4 - 4 >> 2])) | 0;
                  t:
                    if (!(1 & t4)) {
                      if (!(3 & t4))
                        break e;
                      if ((r4 = r4 - (t4 = f2[r4 >> 2]) | 0) >>> 0 < c2[408])
                        break e;
                      if (e4 = e4 + t4 | 0, f2[409] == (0 | r4)) {
                        if ((3 & (t4 = f2[o3 + 4 >> 2])) == 3)
                          return f2[406] = e4, f2[o3 + 4 >> 2] = -2 & t4, f2[r4 + 4 >> 2] = 1 | e4, void (f2[e4 + r4 >> 2] = e4);
                      } else {
                        if (t4 >>> 0 <= 255) {
                          if (i3 = f2[r4 + 8 >> 2], t4 = t4 >>> 3 | 0, (0 | (n4 = f2[r4 + 12 >> 2])) == (0 | i3)) {
                            f2[404] = f2[404] & j2(t4);
                            break t;
                          }
                          f2[i3 + 12 >> 2] = n4, f2[n4 + 8 >> 2] = i3;
                          break t;
                        }
                        if (u3 = f2[r4 + 24 >> 2], (0 | r4) == (0 | (t4 = f2[r4 + 12 >> 2])))
                          if ((n4 = f2[(i3 = r4 + 20 | 0) >> 2]) || (n4 = f2[(i3 = r4 + 16 | 0) >> 2])) {
                            for (; a3 = i3, (n4 = f2[(i3 = (t4 = n4) + 20 | 0) >> 2]) || (i3 = t4 + 16 | 0, n4 = f2[t4 + 16 >> 2]); )
                              ;
                            f2[a3 >> 2] = 0;
                          } else
                            t4 = 0;
                        else
                          n4 = f2[r4 + 8 >> 2], f2[n4 + 12 >> 2] = t4, f2[t4 + 8 >> 2] = n4;
                        if (!u3)
                          break t;
                        i3 = f2[r4 + 28 >> 2];
                        n: {
                          if (f2[(n4 = 1920 + (i3 << 2) | 0) >> 2] == (0 | r4)) {
                            if (f2[n4 >> 2] = t4, t4)
                              break n;
                            f2[405] = f2[405] & j2(i3);
                            break t;
                          }
                          if (f2[u3 + (f2[u3 + 16 >> 2] == (0 | r4) ? 16 : 20) >> 2] = t4, !t4)
                            break t;
                        }
                        if (f2[t4 + 24 >> 2] = u3, (n4 = f2[r4 + 16 >> 2]) && (f2[t4 + 16 >> 2] = n4, f2[n4 + 24 >> 2] = t4), !(n4 = f2[r4 + 20 >> 2]))
                          break t;
                        f2[t4 + 20 >> 2] = n4, f2[n4 + 24 >> 2] = t4;
                      }
                    }
                  if (!(r4 >>> 0 >= o3 >>> 0) && 1 & (t4 = f2[o3 + 4 >> 2])) {
                    t: {
                      if (!(2 & t4)) {
                        if (f2[410] == (0 | o3)) {
                          if (f2[410] = r4, e4 = f2[407] + e4 | 0, f2[407] = e4, f2[r4 + 4 >> 2] = 1 | e4, f2[409] != (0 | r4))
                            break e;
                          return f2[406] = 0, void (f2[409] = 0);
                        }
                        if (f2[409] == (0 | o3))
                          return f2[409] = r4, e4 = f2[406] + e4 | 0, f2[406] = e4, f2[r4 + 4 >> 2] = 1 | e4, void (f2[e4 + r4 >> 2] = e4);
                        e4 = (-8 & t4) + e4 | 0;
                        n:
                          if (t4 >>> 0 <= 255) {
                            if (i3 = f2[o3 + 8 >> 2], t4 = t4 >>> 3 | 0, (0 | (n4 = f2[o3 + 12 >> 2])) == (0 | i3)) {
                              f2[404] = f2[404] & j2(t4);
                              break n;
                            }
                            f2[i3 + 12 >> 2] = n4, f2[n4 + 8 >> 2] = i3;
                          } else {
                            if (u3 = f2[o3 + 24 >> 2], (0 | o3) == (0 | (t4 = f2[o3 + 12 >> 2])))
                              if ((n4 = f2[(i3 = o3 + 20 | 0) >> 2]) || (n4 = f2[(i3 = o3 + 16 | 0) >> 2])) {
                                for (; a3 = i3, (n4 = f2[(i3 = (t4 = n4) + 20 | 0) >> 2]) || (i3 = t4 + 16 | 0, n4 = f2[t4 + 16 >> 2]); )
                                  ;
                                f2[a3 >> 2] = 0;
                              } else
                                t4 = 0;
                            else
                              n4 = f2[o3 + 8 >> 2], f2[n4 + 12 >> 2] = t4, f2[t4 + 8 >> 2] = n4;
                            if (u3) {
                              i3 = f2[o3 + 28 >> 2];
                              r: {
                                if (f2[(n4 = 1920 + (i3 << 2) | 0) >> 2] == (0 | o3)) {
                                  if (f2[n4 >> 2] = t4, t4)
                                    break r;
                                  f2[405] = f2[405] & j2(i3);
                                  break n;
                                }
                                if (f2[u3 + (f2[u3 + 16 >> 2] == (0 | o3) ? 16 : 20) >> 2] = t4, !t4)
                                  break n;
                              }
                              f2[t4 + 24 >> 2] = u3, (n4 = f2[o3 + 16 >> 2]) && (f2[t4 + 16 >> 2] = n4, f2[n4 + 24 >> 2] = t4), (n4 = f2[o3 + 20 >> 2]) && (f2[t4 + 20 >> 2] = n4, f2[n4 + 24 >> 2] = t4);
                            }
                          }
                        if (f2[r4 + 4 >> 2] = 1 | e4, f2[e4 + r4 >> 2] = e4, f2[409] != (0 | r4))
                          break t;
                        return void (f2[406] = e4);
                      }
                      f2[o3 + 4 >> 2] = -2 & t4, f2[r4 + 4 >> 2] = 1 | e4, f2[e4 + r4 >> 2] = e4;
                    }
                    if (e4 >>> 0 <= 255)
                      return t4 = 1656 + ((e4 = e4 >>> 3 | 0) << 3) | 0, (n4 = f2[404]) & (e4 = 1 << e4) ? e4 = f2[t4 + 8 >> 2] : (f2[404] = e4 | n4, e4 = t4), f2[t4 + 8 >> 2] = r4, f2[e4 + 12 >> 2] = r4, f2[r4 + 12 >> 2] = t4, void (f2[r4 + 8 >> 2] = e4);
                    i3 = 31, f2[r4 + 16 >> 2] = 0, f2[r4 + 20 >> 2] = 0, e4 >>> 0 <= 16777215 && (t4 = e4 >>> 8 | 0, t4 <<= a3 = t4 + 1048320 >>> 16 & 8, i3 = 28 + ((t4 = ((t4 <<= i3 = t4 + 520192 >>> 16 & 4) << (n4 = t4 + 245760 >>> 16 & 2) >>> 15 | 0) - (n4 | i3 | a3) | 0) << 1 | e4 >>> t4 + 21 & 1) | 0), f2[r4 + 28 >> 2] = i3, a3 = 1920 + (i3 << 2) | 0;
                    t: {
                      n: {
                        if ((n4 = f2[405]) & (t4 = 1 << i3)) {
                          for (i3 = e4 << ((0 | i3) == 31 ? 0 : 25 - (i3 >>> 1 | 0) | 0), t4 = f2[a3 >> 2]; ; ) {
                            if (n4 = t4, (-8 & f2[t4 + 4 >> 2]) == (0 | e4))
                              break n;
                            if (t4 = i3 >>> 29 | 0, i3 <<= 1, !(t4 = f2[16 + (a3 = n4 + (4 & t4) | 0) >> 2]))
                              break;
                          }
                          f2[a3 + 16 >> 2] = r4, f2[r4 + 24 >> 2] = n4;
                        } else
                          f2[405] = t4 | n4, f2[a3 >> 2] = r4, f2[r4 + 24 >> 2] = a3;
                        f2[r4 + 12 >> 2] = r4, f2[r4 + 8 >> 2] = r4;
                        break t;
                      }
                      e4 = f2[n4 + 8 >> 2], f2[e4 + 12 >> 2] = r4, f2[n4 + 8 >> 2] = r4, f2[r4 + 24 >> 2] = 0, f2[r4 + 12 >> 2] = n4, f2[r4 + 8 >> 2] = e4;
                    }
                    e4 = f2[412] - 1 | 0, f2[412] = e4 || -1;
                  }
                }
            }
            function k2(e4, t4, n4) {
              var i3, o3 = 0, c3 = 0;
              if (n4 >>> 0 >= 512)
                return l2(0 | e4, 0 | t4, 0 | n4), e4;
              i3 = e4 + n4 | 0;
              e:
                if (3 & (e4 ^ t4))
                  if (i3 >>> 0 < 4)
                    n4 = e4;
                  else if ((o3 = i3 - 4 | 0) >>> 0 < e4 >>> 0)
                    n4 = e4;
                  else
                    for (n4 = e4; r3[0 | n4] = a2[0 | t4], r3[n4 + 1 | 0] = a2[t4 + 1 | 0], r3[n4 + 2 | 0] = a2[t4 + 2 | 0], r3[n4 + 3 | 0] = a2[t4 + 3 | 0], t4 = t4 + 4 | 0, o3 >>> 0 >= (n4 = n4 + 4 | 0) >>> 0; )
                      ;
                else {
                  t:
                    if (3 & e4)
                      if (n4)
                        for (n4 = e4; ; ) {
                          if (r3[0 | n4] = a2[0 | t4], t4 = t4 + 1 | 0, !(3 & (n4 = n4 + 1 | 0)))
                            break t;
                          if (!(n4 >>> 0 < i3 >>> 0))
                            break;
                        }
                      else
                        n4 = e4;
                    else
                      n4 = e4;
                  if (!((o3 = -4 & i3) >>> 0 < 64 || (c3 = o3 + -64 | 0) >>> 0 < n4 >>> 0))
                    for (; f2[n4 >> 2] = f2[t4 >> 2], f2[n4 + 4 >> 2] = f2[t4 + 4 >> 2], f2[n4 + 8 >> 2] = f2[t4 + 8 >> 2], f2[n4 + 12 >> 2] = f2[t4 + 12 >> 2], f2[n4 + 16 >> 2] = f2[t4 + 16 >> 2], f2[n4 + 20 >> 2] = f2[t4 + 20 >> 2], f2[n4 + 24 >> 2] = f2[t4 + 24 >> 2], f2[n4 + 28 >> 2] = f2[t4 + 28 >> 2], f2[n4 + 32 >> 2] = f2[t4 + 32 >> 2], f2[n4 + 36 >> 2] = f2[t4 + 36 >> 2], f2[n4 + 40 >> 2] = f2[t4 + 40 >> 2], f2[n4 + 44 >> 2] = f2[t4 + 44 >> 2], f2[n4 + 48 >> 2] = f2[t4 + 48 >> 2], f2[n4 + 52 >> 2] = f2[t4 + 52 >> 2], f2[n4 + 56 >> 2] = f2[t4 + 56 >> 2], f2[n4 + 60 >> 2] = f2[t4 + 60 >> 2], t4 = t4 - -64 | 0, c3 >>> 0 >= (n4 = n4 - -64 | 0) >>> 0; )
                      ;
                  if (n4 >>> 0 >= o3 >>> 0)
                    break e;
                  for (; f2[n4 >> 2] = f2[t4 >> 2], t4 = t4 + 4 | 0, o3 >>> 0 > (n4 = n4 + 4 | 0) >>> 0; )
                    ;
                }
              if (n4 >>> 0 < i3 >>> 0)
                for (; r3[0 | n4] = a2[0 | t4], t4 = t4 + 1 | 0, (0 | i3) != (0 | (n4 = n4 + 1 | 0)); )
                  ;
              return e4;
            }
            function v2(e4, t4) {
              var n4 = 0;
              if (t4 && (r3[0 | e4] = 0, r3[(n4 = e4 + t4 | 0) - 1 | 0] = 0, !(t4 >>> 0 < 3 || (r3[e4 + 2 | 0] = 0, r3[e4 + 1 | 0] = 0, r3[n4 - 3 | 0] = 0, r3[n4 - 2 | 0] = 0, t4 >>> 0 < 7 || (r3[e4 + 3 | 0] = 0, r3[n4 - 4 | 0] = 0, t4 >>> 0 < 9 || (f2[(e4 = (n4 = 0 - e4 & 3) + e4 | 0) >> 2] = 0, f2[(t4 = (n4 = t4 - n4 & -4) + e4 | 0) - 4 >> 2] = 0, n4 >>> 0 < 9 || (f2[e4 + 8 >> 2] = 0, f2[e4 + 4 >> 2] = 0, f2[t4 - 8 >> 2] = 0, f2[t4 - 12 >> 2] = 0, n4 >>> 0 < 25 || (f2[e4 + 24 >> 2] = 0, f2[e4 + 20 >> 2] = 0, f2[e4 + 16 >> 2] = 0, f2[e4 + 12 >> 2] = 0, f2[t4 - 16 >> 2] = 0, f2[t4 - 20 >> 2] = 0, f2[t4 - 24 >> 2] = 0, f2[t4 - 28 >> 2] = 0, (t4 = (t4 = n4) - (n4 = 4 & e4 | 24) | 0) >>> 0 < 32))))))))
                for (e4 = e4 + n4 | 0; f2[e4 + 24 >> 2] = 0, f2[e4 + 28 >> 2] = 0, f2[e4 + 16 >> 2] = 0, f2[e4 + 20 >> 2] = 0, f2[e4 + 8 >> 2] = 0, f2[e4 + 12 >> 2] = 0, f2[e4 >> 2] = 0, f2[e4 + 4 >> 2] = 0, e4 = e4 + 32 | 0, (t4 = t4 - 32 | 0) >>> 0 > 31; )
                  ;
            }
            function M2(e4) {
              var t4, n4 = 0, r4 = 0, i3 = 0;
              t4 = 0 | d2(8), f2[t4 >> 2] = 1348, f2[t4 >> 2] = 1392;
              e: {
                t: {
                  if (3 & (n4 = e4))
                    for (; ; ) {
                      if (!a2[0 | n4])
                        break t;
                      if (!(3 & (n4 = n4 + 1 | 0)))
                        break;
                    }
                  for (; r4 = n4, n4 = n4 + 4 | 0, !((-1 ^ (i3 = f2[r4 >> 2])) & i3 - 16843009 & -2139062144); )
                    ;
                  if (n4 = r4 - e4 | 0, !(255 & i3))
                    break e;
                  for (; i3 = a2[r4 + 1 | 0], r4 = n4 = r4 + 1 | 0, i3; )
                    ;
                }
                n4 = n4 - e4 | 0;
              }
              r4 = P2(n4 + 13 | 0), f2[r4 + 8 >> 2] = 0, f2[r4 + 4 >> 2] = n4, f2[r4 >> 2] = n4, f2[t4 + 4 >> 2] = k2(r4 + 12 | 0, e4, n4 + 1 | 0), f2[t4 >> 2] = 1440, b2(0 | t4, 1472, 1), p2();
            }
            function w2(e4, t4, n4, i3) {
              r3[e4 + 53 | 0] = 1;
              e:
                if (f2[e4 + 4 >> 2] == (0 | n4)) {
                  r3[e4 + 52 | 0] = 1, n4 = f2[e4 + 16 >> 2];
                  t: {
                    if (!n4) {
                      if (f2[e4 + 36 >> 2] = 1, f2[e4 + 24 >> 2] = i3, f2[e4 + 16 >> 2] = t4, (0 | i3) != 1)
                        break e;
                      if (f2[e4 + 48 >> 2] == 1)
                        break t;
                      break e;
                    }
                    if ((0 | t4) == (0 | n4)) {
                      if ((0 | (n4 = f2[e4 + 24 >> 2])) == 2 && (f2[e4 + 24 >> 2] = i3, n4 = i3), f2[e4 + 48 >> 2] != 1)
                        break e;
                      if ((0 | n4) == 1)
                        break t;
                      break e;
                    }
                    f2[e4 + 36 >> 2] = f2[e4 + 36 >> 2] + 1;
                  }
                  r3[e4 + 54 | 0] = 1;
                }
            }
            function g2(e4, t4, n4) {
              var r4 = 0;
              if (!n4)
                return f2[e4 + 4 >> 2] == f2[t4 + 4 >> 2];
              if ((0 | e4) == (0 | t4))
                return 1;
              r4 = f2[e4 + 4 >> 2], e4 = a2[0 | r4], n4 = f2[t4 + 4 >> 2], t4 = a2[0 | n4];
              e:
                if (!(!e4 | (0 | t4) != (0 | e4)))
                  for (; ; ) {
                    if (t4 = a2[n4 + 1 | 0], !(e4 = a2[r4 + 1 | 0]))
                      break e;
                    if (n4 = n4 + 1 | 0, r4 = r4 + 1 | 0, (0 | e4) != (0 | t4))
                      break;
                  }
              return (0 | e4) == (0 | t4);
            }
            function G2(e4, t4, n4) {
              var i3;
              if (!(i3 = f2[e4 + 16 >> 2]))
                return f2[e4 + 36 >> 2] = 1, f2[e4 + 24 >> 2] = n4, void (f2[e4 + 16 >> 2] = t4);
              e: {
                if ((0 | t4) == (0 | i3)) {
                  if (f2[e4 + 24 >> 2] != 2)
                    break e;
                  return void (f2[e4 + 24 >> 2] = n4);
                }
                r3[e4 + 54 | 0] = 1, f2[e4 + 24 >> 2] = 2, f2[e4 + 36 >> 2] = f2[e4 + 36 >> 2] + 1;
              }
            }
            function C2(e4) {
              var t4, r4;
              return (e4 = (t4 = f2[377]) + (r4 = e4 + 3 & -4) | 0) >>> 0 <= t4 >>> 0 && r4 || e4 >>> 0 > (n3.byteLength / 65536 | 0) << 16 >>> 0 && !(0 | _6(0 | e4)) ? (f2[403] = 48, -1) : (f2[377] = e4, t4);
            }
            function P2(e4) {
              var t4 = 0;
              e4 = e4 || 1;
              e: {
                for (; ; ) {
                  if (t4 = h2(e4))
                    break e;
                  if (!(t4 = f2[528]))
                    break;
                  U2[0 | t4]();
                }
                A2(), p2();
              }
              return t4;
            }
            function x2(e4) {
              var t4, n4;
              return f2[(e4 |= 0) >> 2] = 1392, t4 = f2[e4 + 4 >> 2] - 12 | 0, n4 = f2[t4 + 8 >> 2] - 1 | 0, f2[t4 + 8 >> 2] = n4, (0 | n4) < 0 && m2(t4), 0 | e4;
            }
            function j2(e4) {
              var t4;
              return (-1 >>> (t4 = 31 & e4) & -2) << t4 | (-1 << (e4 = 0 - e4 & 31) & -2) >>> e4;
            }
            function I2(e4) {
              (e4 |= 0) && m2(e4);
            }
            function E2(e4) {
              x2(e4 |= 0), m2(e4);
            }
            function R2(e4) {
              return 0 | (e4 |= 0);
            }
            function B2(e4) {
              m2(e4 |= 0);
            }
            function O2(e4) {
            }
            i2(t3 = a2, 1024, "dmVjdG9yAHN0ZDo6ZXhjZXB0aW9uAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAOgEAABaBAAA3AUAAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAOgEAACIBAAAfAQAAAAAAACsBAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAAAAAAMAUAAAIAAAAKAAAABAAAAAUAAAAGAAAACwAAAAwAAAANAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAOgEAAAIBQAArAQAAAAAAABgBQAADgAAAA8AAAAQAAAAU3Q5ZXhjZXB0aW9uAAAAAMAEAABQBQAAAAAAAIwFAAABAAAAEQAAABIAAABTdDExbG9naWNfZXJyb3IA6AQAAHwFAABgBQAAAAAAAMAFAAABAAAAEwAAABIAAABTdDEybGVuZ3RoX2Vycm9yAAAAAOgEAACsBQAAjAUAAFN0OXR5cGVfaW5mbwAAAADABAAAzAU="), i2(t3, 1508, "UAhQ");
            var T2, U2 = ((T2 = [null, x2, R2, B2, O2, O2, function(e4, t4, n4) {
              n4 |= 0;
              var r4, i3 = 0, o3 = 0, a3 = 0, c3 = 0;
              if (y2 = r4 = y2 + -64 | 0, i3 = 1, !g2(e4 |= 0, t4 |= 0, 0) && (i3 = 0, t4)) {
                y2 = i3 = y2 + -64 | 0, o3 = f2[t4 >> 2], a3 = f2[o3 - 4 >> 2], c3 = f2[o3 - 8 >> 2], f2[i3 + 20 >> 2] = 0, f2[i3 + 16 >> 2] = 1148, f2[i3 + 12 >> 2] = t4, f2[i3 + 8 >> 2] = 1196, o3 = 0, v2(i3 + 24 | 0, 39), t4 = t4 + c3 | 0;
                e:
                  if (g2(a3, 1196, 0))
                    f2[i3 + 56 >> 2] = 1, U2[f2[f2[a3 >> 2] + 20 >> 2]](a3, i3 + 8 | 0, t4, t4, 1, 0), o3 = f2[i3 + 32 >> 2] == 1 ? t4 : 0;
                  else {
                    U2[f2[f2[a3 >> 2] + 24 >> 2]](a3, i3 + 8 | 0, t4, 1, 0);
                    t:
                      switch (f2[i3 + 44 >> 2]) {
                        case 0:
                          o3 = f2[i3 + 48 >> 2] == 1 && f2[i3 + 36 >> 2] == 1 && f2[i3 + 40 >> 2] == 1 ? f2[i3 + 28 >> 2] : 0;
                          break e;
                        case 1:
                          break t;
                        default:
                          break e;
                      }
                    f2[i3 + 32 >> 2] != 1 && f2[i3 + 48 >> 2] | f2[i3 + 36 >> 2] != 1 | f2[i3 + 40 >> 2] != 1 || (o3 = f2[i3 + 24 >> 2]);
                  }
                y2 = i3 - -64 | 0, i3 = 0, o3 && (v2(4 | (t4 = r4 + 8 | 0), 52), f2[r4 + 56 >> 2] = 1, f2[r4 + 20 >> 2] = -1, f2[r4 + 16 >> 2] = e4, f2[r4 + 8 >> 2] = o3, U2[f2[f2[o3 >> 2] + 28 >> 2]](o3, t4, f2[n4 >> 2], 1), (0 | (e4 = f2[r4 + 32 >> 2])) == 1 && (f2[n4 >> 2] = f2[r4 + 24 >> 2]), i3 = (0 | e4) == 1);
              }
              return y2 = r4 - -64 | 0, 0 | i3;
            }, function(e4, t4, n4, r4, i3, o3) {
              n4 |= 0, r4 |= 0, i3 |= 0, o3 |= 0, g2(e4 |= 0, f2[8 + (t4 |= 0) >> 2], o3) && w2(t4, n4, r4, i3);
            }, function(e4, t4, n4, i3, o3) {
              if (n4 |= 0, i3 |= 0, o3 |= 0, g2(e4 |= 0, f2[8 + (t4 |= 0) >> 2], o3))
                f2[t4 + 28 >> 2] == 1 | f2[t4 + 4 >> 2] != (0 | n4) || (f2[t4 + 28 >> 2] = i3);
              else
                e:
                  if (g2(e4, f2[t4 >> 2], o3)) {
                    if (!(f2[t4 + 16 >> 2] != (0 | n4) & f2[t4 + 20 >> 2] != (0 | n4))) {
                      if ((0 | i3) != 1)
                        break e;
                      return void (f2[t4 + 32 >> 2] = 1);
                    }
                    f2[t4 + 20 >> 2] = n4, f2[t4 + 32 >> 2] = i3, f2[t4 + 40 >> 2] = f2[t4 + 40 >> 2] + 1, f2[t4 + 36 >> 2] != 1 | f2[t4 + 24 >> 2] != 2 || (r3[t4 + 54 | 0] = 1), f2[t4 + 44 >> 2] = 4;
                  }
            }, function(e4, t4, n4, r4) {
              n4 |= 0, r4 |= 0, g2(e4 |= 0, f2[8 + (t4 |= 0) >> 2], 0) && G2(t4, n4, r4);
            }, B2, function(e4, t4, n4, r4, i3, o3) {
              n4 |= 0, r4 |= 0, i3 |= 0, o3 |= 0, g2(e4 |= 0, f2[8 + (t4 |= 0) >> 2], o3) ? w2(t4, n4, r4, i3) : (e4 = f2[e4 + 8 >> 2], U2[f2[f2[e4 >> 2] + 20 >> 2]](e4, t4, n4, r4, i3, o3));
            }, function(e4, t4, n4, i3, c3) {
              if (n4 |= 0, i3 |= 0, c3 |= 0, g2(e4 |= 0, f2[8 + (t4 |= 0) >> 2], c3))
                f2[t4 + 28 >> 2] == 1 | f2[t4 + 4 >> 2] != (0 | n4) || (f2[t4 + 28 >> 2] = i3);
              else
                e: {
                  if (g2(e4, f2[t4 >> 2], c3)) {
                    if (!(f2[t4 + 16 >> 2] != (0 | n4) & f2[t4 + 20 >> 2] != (0 | n4))) {
                      if ((0 | i3) != 1)
                        break e;
                      return void (f2[t4 + 32 >> 2] = 1);
                    }
                    f2[t4 + 32 >> 2] = i3;
                    t:
                      if (f2[t4 + 44 >> 2] != 4) {
                        if (o2[t4 + 52 >> 1] = 0, e4 = f2[e4 + 8 >> 2], U2[f2[f2[e4 >> 2] + 20 >> 2]](e4, t4, n4, n4, 1, c3), a2[t4 + 53 | 0]) {
                          if (f2[t4 + 44 >> 2] = 3, !a2[t4 + 52 | 0])
                            break t;
                          break e;
                        }
                        f2[t4 + 44 >> 2] = 4;
                      }
                    if (f2[t4 + 20 >> 2] = n4, f2[t4 + 40 >> 2] = f2[t4 + 40 >> 2] + 1, f2[t4 + 36 >> 2] != 1 | f2[t4 + 24 >> 2] != 2)
                      break e;
                    return void (r3[t4 + 54 | 0] = 1);
                  }
                  e4 = f2[e4 + 8 >> 2], U2[f2[f2[e4 >> 2] + 24 >> 2]](e4, t4, n4, i3, c3);
                }
            }, function(e4, t4, n4, r4) {
              n4 |= 0, r4 |= 0, g2(e4 |= 0, f2[8 + (t4 |= 0) >> 2], 0) ? G2(t4, n4, r4) : (e4 = f2[e4 + 8 >> 2], U2[f2[f2[e4 >> 2] + 28 >> 2]](e4, t4, n4, r4));
            }, R2, B2, function(e4) {
              return 1031;
            }, E2, function(e4) {
              return f2[4 + (e4 |= 0) >> 2];
            }, E2]).grow = function(e4) {
              var t4 = this.length;
              return this.length = this.length + e4, t4;
            }, T2.set = function(e4, t4) {
              this[e4] = t4;
            }, T2.get = function(e4) {
              return this[e4];
            }, T2);
            return { g: function() {
            }, h: I2, i: function() {
              var e4;
              return e4 = P2(24), f2[e4 >> 2] = 0, f2[e4 + 4 >> 2] = 0, f2[e4 + 16 >> 2] = 0, f2[e4 + 20 >> 2] = 0, f2[e4 + 8 >> 2] = 0, f2[e4 + 12 >> 2] = 0, 0 | e4;
            }, j: function(e4, t4, n4) {
              var r4;
              return e4 = +e4, t4 = +t4, n4 = +n4, r4 = P2(24), u2[r4 + 16 >> 3] = n4, u2[r4 + 8 >> 3] = t4, u2[r4 >> 3] = e4, 0 | r4;
            }, k: function(e4, t4) {
              t4 |= 0, u2[(e4 |= 0) >> 3] = u2[e4 >> 3] + u2[t4 >> 3], u2[e4 + 8 >> 3] = u2[e4 + 8 >> 3] + u2[t4 + 8 >> 3], u2[e4 + 16 >> 3] = u2[e4 + 16 >> 3] + u2[t4 + 16 >> 3];
            }, l: function(e4, t4) {
              t4 |= 0, u2[(e4 |= 0) >> 3] = u2[e4 >> 3] - u2[t4 >> 3], u2[e4 + 8 >> 3] = u2[e4 + 8 >> 3] - u2[t4 + 8 >> 3], u2[e4 + 16 >> 3] = u2[e4 + 16 >> 3] - u2[t4 + 16 >> 3];
            }, m: function(e4) {
              return +u2[(e4 |= 0) >> 3];
            }, n: function(e4, t4) {
              t4 = +t4, u2[(e4 |= 0) >> 3] = t4;
            }, o: function(e4) {
              return +u2[8 + (e4 |= 0) >> 3];
            }, p: function(e4, t4) {
              t4 = +t4, u2[8 + (e4 |= 0) >> 3] = t4;
            }, q: function(e4) {
              return +u2[16 + (e4 |= 0) >> 3];
            }, r: function(e4, t4) {
              t4 = +t4, u2[16 + (e4 |= 0) >> 3] = t4;
            }, s: I2, t: function() {
              var e4;
              return e4 = P2(12), f2[e4 + 8 >> 2] = 0, f2[e4 >> 2] = 0, f2[e4 + 4 >> 2] = 0, 0 | e4;
            }, u: function(e4, t4) {
              t4 |= 0;
              var n4 = 0, r4 = 0, i3 = 0, o3 = 0, a3 = 0, c3 = 0;
              e:
                if ((0 | (n4 = f2[4 + (e4 |= 0) >> 2])) == f2[e4 + 8 >> 2]) {
                  t: {
                    if ((i3 = 1 + (n4 = (0 | (c3 = n4 - (r4 = f2[e4 >> 2]) | 0)) / 24 | 0) | 0) >>> 0 < 178956971) {
                      if (o3 = n4 << 1, i3 = n4 >>> 0 < 89478485 ? i3 >>> 0 < o3 >>> 0 ? o3 : i3 : 178956970) {
                        if (i3 >>> 0 >= 178956971)
                          break t;
                        o3 = P2(s2(i3, 24));
                      } else
                        o3 = 0;
                      n4 = o3 + s2(n4, 24) | 0, a3 = f2[t4 + 4 >> 2], f2[n4 >> 2] = f2[t4 >> 2], f2[n4 + 4 >> 2] = a3, a3 = f2[t4 + 20 >> 2], f2[n4 + 16 >> 2] = f2[t4 + 16 >> 2], f2[n4 + 20 >> 2] = a3, a3 = f2[t4 + 12 >> 2], f2[n4 + 8 >> 2] = f2[t4 + 8 >> 2], f2[n4 + 12 >> 2] = a3, t4 = n4 + s2((0 | c3) / -24 | 0, 24) | 0, (0 | c3) > 0 && k2(t4, r4, c3), f2[e4 + 8 >> 2] = o3 + s2(i3, 24), f2[e4 + 4 >> 2] = n4 + 24, f2[e4 >> 2] = t4, r4 && m2(r4);
                      break e;
                    }
                    M2(1024), p2();
                  }
                  M2(1046), p2();
                } else
                  r4 = f2[t4 + 4 >> 2], f2[n4 >> 2] = f2[t4 >> 2], f2[n4 + 4 >> 2] = r4, r4 = f2[t4 + 20 >> 2], f2[n4 + 16 >> 2] = f2[t4 + 16 >> 2], f2[n4 + 20 >> 2] = r4, r4 = f2[t4 + 12 >> 2], f2[n4 + 8 >> 2] = f2[t4 + 8 >> 2], f2[n4 + 12 >> 2] = r4, f2[e4 + 4 >> 2] = n4 + 24;
            }, v: function(e4) {
              var t4 = 0;
              (e4 |= 0) && ((t4 = f2[e4 >> 2]) && (f2[e4 + 4 >> 2] = t4, m2(t4)), m2(e4));
            }, w: function() {
              return 0 | P2(1);
            }, x: function(e4, t4) {
              e4 |= 0;
              var n4 = 0, r4 = 0, i3 = 0, o3 = 0, a3 = 0, c3 = 0, p3 = 0, _7 = 0, A3 = 0, l3 = 0, b3 = 0, d3 = 0;
              if (e4 = f2[(t4 |= 0) >> 2], (r4 = (0 | (i3 = f2[t4 + 4 >> 2] - e4 | 0)) / 24 | 0) >>> 0 >= 2) {
                if (!(i3 - 24 >>> 0 < 24)) {
                  if (n4 = u2[e4 + 8 >> 3], t4 = 1, b3 = 1 & (r4 = r4 - 1 | 0), a3 = u2[e4 >> 3], i3 - 48 >>> 0 < 24)
                    c3 = n4;
                  else
                    for (d3 = -2 & r4, r4 = 0, p3 = a3, _7 = n4; i3 = e4 + s2(t4, 24) | 0, o3 = 0.5 * ((a3 = u2[i3 + 24 >> 3]) - (A3 = u2[i3 >> 3])) * ((l3 = u2[i3 + 8 >> 3] - n4) + ((c3 = u2[i3 + 32 >> 3]) - n4)) + (0.5 * (A3 - p3) * (_7 - n4 + l3) + o3), t4 = t4 + 2 | 0, p3 = a3, _7 = c3, (0 | d3) != (0 | (r4 = r4 + 2 | 0)); )
                      ;
                  b3 && (e4 = e4 + s2(t4, 24) | 0, o3 = 0.5 * (u2[e4 >> 3] - a3) * (c3 - n4 + (u2[e4 + 8 >> 3] - n4)) + o3);
                }
                n4 = o3 < 0 ? -o3 : o3;
              } else
                n4 = 0;
              return +n4;
            }, y: function(e4, t4, n4) {
              e4 |= 0, t4 |= 0;
              var r4, i3 = 0, o3 = 0, a3 = 0, c3 = 0, p3 = 0, _7 = 0, A3 = 0;
              if ((r4 = ((e4 = f2[4 + (n4 |= 0) >> 2]) - (n4 = f2[n4 >> 2]) | 0) / 24 | 0) >>> 0 >= 3)
                for (e4 = r4 - 1 | 0, i3 = u2[t4 + 8 >> 3], A3 = u2[t4 >> 3], t4 = 0; c3 = n4 + s2(e4, 24) | 0, a3 = u2[c3 + 8 >> 3], e4 = t4, t4 = n4 + s2(t4, 24) | 0, !(i3 < a3 & (o3 = u2[t4 + 8 >> 3]) <= i3) & (!(i3 >= a3) | !(i3 < o3)) || A3 - (p3 = u2[t4 >> 3]) < (i3 - o3) * (u2[c3 >> 3] - p3) / (a3 - o3) && (_7 ^= 1), (0 | r4) != (0 | (t4 = e4 + 1 | 0)); )
                  ;
              return 1 & _7;
            }, z: I2, A: U2, B: h2 };
          }(e2);
        }(L);
      }
      Object.assign(n, p), p = null, n.wasmBinary && (d = n.wasmBinary), n.noExitRuntime;
      var m = Error, k = {};
      d = [], typeof k != "object" && F("no native wasm support detected");
      var v, M, w, g, G, C = false, P = n.INITIAL_MEMORY || 16777216;
      (v = n.wasmMemory ? n.wasmMemory : new function() {
        this.buffer = new ArrayBuffer(P / 65536 * 65536);
      }()) && (M = v.buffer), P = M.byteLength;
      var x = M;
      M = x, n.HEAP8 = w = new Int8Array(x), n.HEAP16 = new Int16Array(x), n.HEAP32 = G = new Int32Array(x), n.HEAPU8 = g = new Uint8Array(x), n.HEAPU16 = new Uint16Array(x), n.HEAPU32 = new Uint32Array(x), n.HEAPF32 = new Float32Array(x), n.HEAPF64 = new Float64Array(x);
      var j, I = [], E = [], R = [];
      function B() {
        var e2 = n.preRun.shift();
        I.unshift(e2);
      }
      var O = 0, T = null, U = null;
      function F(e2) {
        throw n.onAbort && n.onAbort(e2), y(e2 = "Aborted(" + e2 + ")"), C = true, e2 = new m(e2 + ". Build with -s ASSERTIONS=1 for more info."), i(e2), e2;
      }
      n.preloadedImages = {}, n.preloadedAudios = {};
      var S, z = "data:application/octet-stream;base64,";
      if (!(S = "mxcadassembly_min.wasm").startsWith(z)) {
        var H = S;
        S = n.locateFile ? n.locateFile(H, b) : b + H;
      }
      function W() {
        var e2 = S;
        try {
          if (e2 == S && d)
            return new Uint8Array(d);
          var t3 = Z(e2);
          if (t3)
            return t3;
          if (a)
            return a(e2);
          throw "both async and sync fetching of the wasm failed";
        } catch (e3) {
          F(e3);
        }
      }
      function D(e2) {
        for (; 0 < e2.length; ) {
          var t3 = e2.shift();
          if (typeof t3 == "function")
            t3(n);
          else {
            var r2 = t3.U;
            typeof r2 == "number" ? t3.G === void 0 ? Q(r2)() : Q(r2)(t3.G) : r2(t3.G === void 0 ? null : t3.G);
          }
        }
      }
      var X = [];
      function Q(e2) {
        var t3 = X[e2];
        return t3 || (e2 >= X.length && (X.length = e2 + 1), X[e2] = t3 = j.get(e2)), t3;
      }
      var N = false, V = typeof atob == "function" ? atob : function(e2) {
        var t3 = "", n2 = 0;
        e2 = e2.replace(/[^A-Za-z0-9\+\/=]/g, "");
        do {
          var r2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e2.charAt(n2++)), i2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e2.charAt(n2++)), o2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e2.charAt(n2++)), f2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(e2.charAt(n2++));
          r2 = r2 << 2 | i2 >> 4, i2 = (15 & i2) << 4 | o2 >> 2;
          var a2 = (3 & o2) << 6 | f2;
          t3 += String.fromCharCode(r2), o2 !== 64 && (t3 += String.fromCharCode(i2)), f2 !== 64 && (t3 += String.fromCharCode(a2));
        } while (n2 < e2.length);
        return t3;
      };
      function Z(e2) {
        if (e2.startsWith(z)) {
          if (e2 = e2.slice(z.length), typeof l == "boolean" && l) {
            var t3 = Buffer.from(e2, "base64");
            t3 = new Uint8Array(t3.buffer, t3.byteOffset, t3.byteLength);
          } else
            try {
              var n2 = V(e2), r2 = new Uint8Array(n2.length);
              for (e2 = 0; e2 < n2.length; ++e2)
                r2[e2] = n2.charCodeAt(e2);
              t3 = r2;
            } catch (e3) {
              throw Error("Converting base64 string to bytes failed.");
            }
          return t3;
        }
      }
      var L = { f: function(e2) {
        return be(e2 + 16) + 16;
      }, e: function(e2, t3, n2) {
        throw new function(e3) {
          this.C = e3 - 16, this.P = function(e4) {
            G[this.C + 4 >> 2] = e4;
          }, this.M = function(e4) {
            G[this.C + 8 >> 2] = e4;
          }, this.N = function() {
            G[this.C >> 2] = 0;
          }, this.L = function() {
            w[this.C + 12 >> 0] = 0;
          }, this.O = function() {
            w[this.C + 13 >> 0] = 0;
          }, this.K = function(e4, t4) {
            this.P(e4), this.M(t4), this.N(), this.L(), this.O();
          };
        }(e2).K(t3, n2), e2;
      }, c: function() {
        F("");
      }, d: function(e2, t3, n2) {
        g.copyWithin(e2, t3, t3 + n2);
      }, b: function() {
        F("OOM");
      }, a: v };
      !function() {
        function e2(e3) {
          n.asm = e3.exports, j = n.asm.A, E.unshift(n.asm.g), O--, n.monitorRunDependencies && n.monitorRunDependencies(O), O == 0 && (T !== null && (clearInterval(T), T = null), U && (e3 = U, U = null, e3()));
        }
        function t3(t4) {
          e2(t4.instance);
        }
        function r2(e3) {
          return function() {
            if (!d && (_5 || A)) {
              if (typeof fetch == "function" && !S.startsWith("file://"))
                return fetch(S, { credentials: "same-origin" }).then(function(e4) {
                  if (!e4.ok)
                    throw "failed to load wasm binary file at '" + S + "'";
                  return e4.arrayBuffer();
                }).catch(function() {
                  return W();
                });
              if (f)
                return new Promise(function(e4, t4) {
                  f(S, function(t5) {
                    e4(new Uint8Array(t5));
                  }, t4);
                });
            }
            return Promise.resolve().then(function() {
              return W();
            });
          }().then(function() {
            return { then: function(e4) {
              e4({ instance: new h() });
            } };
          }).then(function(e4) {
            return e4;
          }).then(e3, function(e4) {
            y("failed to asynchronously prepare wasm: " + e4), F(e4);
          });
        }
        var o2 = { a: L };
        if (O++, n.monitorRunDependencies && n.monitorRunDependencies(O), n.instantiateWasm)
          try {
            return n.instantiateWasm(o2, e2);
          } catch (e3) {
            return y("Module.instantiateWasm callback failed with error: " + e3), false;
          }
        (d || typeof k.instantiateStreaming != "function" || S.startsWith(z) || S.startsWith("file://") || typeof fetch != "function" ? r2(t3) : fetch(S, { credentials: "same-origin" }).then(function(e3) {
          return k.instantiateStreaming(e3, o2).then(t3, function(e4) {
            return y("wasm streaming compile failed: " + e4), y("falling back to ArrayBuffer instantiation"), r2(t3);
          });
        })).catch(i);
      }(), n.___wasm_call_ctors = function() {
        return (n.___wasm_call_ctors = n.asm.g).apply(null, arguments);
      };
      var Y, q = n._emscripten_bind_VoidPtr___destroy___0 = function() {
        return (q = n._emscripten_bind_VoidPtr___destroy___0 = n.asm.h).apply(null, arguments);
      }, J = n._emscripten_bind_McGePoint3d_McGePoint3d_0 = function() {
        return (J = n._emscripten_bind_McGePoint3d_McGePoint3d_0 = n.asm.i).apply(null, arguments);
      }, K = n._emscripten_bind_McGePoint3d_McGePoint3d_3 = function() {
        return (K = n._emscripten_bind_McGePoint3d_McGePoint3d_3 = n.asm.j).apply(null, arguments);
      }, $2 = n._emscripten_bind_McGePoint3d_op_add_1 = function() {
        return ($2 = n._emscripten_bind_McGePoint3d_op_add_1 = n.asm.k).apply(null, arguments);
      }, ee = n._emscripten_bind_McGePoint3d_op_sub_1 = function() {
        return (ee = n._emscripten_bind_McGePoint3d_op_sub_1 = n.asm.l).apply(null, arguments);
      }, te = n._emscripten_bind_McGePoint3d_get_x_0 = function() {
        return (te = n._emscripten_bind_McGePoint3d_get_x_0 = n.asm.m).apply(null, arguments);
      }, ne = n._emscripten_bind_McGePoint3d_set_x_1 = function() {
        return (ne = n._emscripten_bind_McGePoint3d_set_x_1 = n.asm.n).apply(null, arguments);
      }, re = n._emscripten_bind_McGePoint3d_get_y_0 = function() {
        return (re = n._emscripten_bind_McGePoint3d_get_y_0 = n.asm.o).apply(null, arguments);
      }, ie = n._emscripten_bind_McGePoint3d_set_y_1 = function() {
        return (ie = n._emscripten_bind_McGePoint3d_set_y_1 = n.asm.p).apply(null, arguments);
      }, oe = n._emscripten_bind_McGePoint3d_get_z_0 = function() {
        return (oe = n._emscripten_bind_McGePoint3d_get_z_0 = n.asm.q).apply(null, arguments);
      }, fe = n._emscripten_bind_McGePoint3d_set_z_1 = function() {
        return (fe = n._emscripten_bind_McGePoint3d_set_z_1 = n.asm.r).apply(null, arguments);
      }, ae = n._emscripten_bind_McGePoint3d___destroy___0 = function() {
        return (ae = n._emscripten_bind_McGePoint3d___destroy___0 = n.asm.s).apply(null, arguments);
      }, ce = n._emscripten_bind_McGePoint3dArray_McGePoint3dArray_0 = function() {
        return (ce = n._emscripten_bind_McGePoint3dArray_McGePoint3dArray_0 = n.asm.t).apply(null, arguments);
      }, ue = n._emscripten_bind_McGePoint3dArray_append_1 = function() {
        return (ue = n._emscripten_bind_McGePoint3dArray_append_1 = n.asm.u).apply(null, arguments);
      }, se = n._emscripten_bind_McGePoint3dArray___destroy___0 = function() {
        return (se = n._emscripten_bind_McGePoint3dArray___destroy___0 = n.asm.v).apply(null, arguments);
      }, pe = n._emscripten_bind_McGeTool_McGeTool_0 = function() {
        return (pe = n._emscripten_bind_McGeTool_McGeTool_0 = n.asm.w).apply(null, arguments);
      }, _e = n._emscripten_bind_McGeTool_calcArea_1 = function() {
        return (_e = n._emscripten_bind_McGeTool_calcArea_1 = n.asm.x).apply(null, arguments);
      }, Ae = n._emscripten_bind_McGeTool_pointInPolyline_2 = function() {
        return (Ae = n._emscripten_bind_McGeTool_pointInPolyline_2 = n.asm.y).apply(null, arguments);
      }, le = n._emscripten_bind_McGeTool___destroy___0 = function() {
        return (le = n._emscripten_bind_McGeTool___destroy___0 = n.asm.z).apply(null, arguments);
      }, be = n._malloc = function() {
        return (be = n._malloc = n.asm.B).apply(null, arguments);
      };
      function de() {
        function e2() {
          if (!Y && (Y = true, n.calledRun = true, !C)) {
            if (D(E), r(n), n.onRuntimeInitialized && n.onRuntimeInitialized(), n.postRun)
              for (typeof n.postRun == "function" && (n.postRun = [n.postRun]); n.postRun.length; ) {
                var e3 = n.postRun.shift();
                R.unshift(e3);
              }
            D(R);
          }
        }
        if (!(0 < O)) {
          if (n.preRun)
            for (typeof n.preRun == "function" && (n.preRun = [n.preRun]); n.preRun.length; )
              B();
          D(I), 0 < O || (n.setStatus ? (n.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              n.setStatus("");
            }, 1), e2();
          }, 1)) : e2());
        }
      }
      if (U = function e2() {
        Y || de(), Y || (U = e2);
      }, n.run = de, n.preInit)
        for (typeof n.preInit == "function" && (n.preInit = [n.preInit]); 0 < n.preInit.length; )
          n.preInit.pop()();
      function ye() {
      }
      function he(e2) {
        return (e2 || ye).F;
      }
      function me(e2, t3) {
        var n2 = he(t3), r2 = n2[e2];
        return r2 || ((r2 = Object.create((t3 || ye).prototype)).C = e2, n2[e2] = r2);
      }
      function ke() {
        throw "cannot construct a VoidPtr, no constructor in IDL";
      }
      function ve(e2, t3, n2) {
        e2 && typeof e2 == "object" && (e2 = e2.C), t3 && typeof t3 == "object" && (t3 = t3.C), n2 && typeof n2 == "object" && (n2 = n2.C), this.C = e2 === void 0 ? J() : t3 === void 0 ? _emscripten_bind_McGePoint3d_McGePoint3d_1(e2) : n2 === void 0 ? _emscripten_bind_McGePoint3d_McGePoint3d_2(e2, t3) : K(e2, t3, n2), he(ve)[this.C] = this;
      }
      function Me() {
        this.C = ce(), he(Me)[this.C] = this;
      }
      function we() {
        this.C = pe(), he(we)[this.C] = this;
      }
      return de(), ye.prototype = Object.create(ye.prototype), ye.prototype.constructor = ye, ye.prototype.D = ye, ye.F = {}, n.WrapperObject = ye, n.getCache = he, n.wrapPointer = me, n.castObject = function(e2, t3) {
        return me(e2.C, t3);
      }, n.NULL = me(0), n.destroy = function(e2) {
        if (!e2.__destroy__)
          throw "Error: Cannot destroy object. (Did you create it yourself?)";
        e2.__destroy__(), delete he(e2.D)[e2.C];
      }, n.compare = function(e2, t3) {
        return e2.C === t3.C;
      }, n.getPointer = function(e2) {
        return e2.C;
      }, n.getClass = function(e2) {
        return e2.D;
      }, ke.prototype = Object.create(ye.prototype), ke.prototype.constructor = ke, ke.prototype.D = ke, ke.F = {}, n.VoidPtr = ke, ke.prototype.__destroy__ = function() {
        q(this.C);
      }, ve.prototype = Object.create(ye.prototype), ve.prototype.constructor = ve, ve.prototype.D = ve, ve.F = {}, n.McGePoint3d = ve, ve.prototype.op_add = function(e2) {
        var t3 = this.C;
        e2 && typeof e2 == "object" && (e2 = e2.C), $2(t3, e2);
      }, ve.prototype.op_sub = function(e2) {
        var t3 = this.C;
        e2 && typeof e2 == "object" && (e2 = e2.C), ee(t3, e2);
      }, ve.prototype.get_x = ve.prototype.H = function() {
        return te(this.C);
      }, ve.prototype.set_x = ve.prototype.R = function(e2) {
        var t3 = this.C;
        e2 && typeof e2 == "object" && (e2 = e2.C), ne(t3, e2);
      }, Object.defineProperty(ve.prototype, "x", { get: ve.prototype.H, set: ve.prototype.R }), ve.prototype.get_y = ve.prototype.I = function() {
        return re(this.C);
      }, ve.prototype.set_y = ve.prototype.S = function(e2) {
        var t3 = this.C;
        e2 && typeof e2 == "object" && (e2 = e2.C), ie(t3, e2);
      }, Object.defineProperty(ve.prototype, "y", { get: ve.prototype.I, set: ve.prototype.S }), ve.prototype.get_z = ve.prototype.J = function() {
        return oe(this.C);
      }, ve.prototype.set_z = ve.prototype.T = function(e2) {
        var t3 = this.C;
        e2 && typeof e2 == "object" && (e2 = e2.C), fe(t3, e2);
      }, Object.defineProperty(ve.prototype, "z", { get: ve.prototype.J, set: ve.prototype.T }), ve.prototype.__destroy__ = function() {
        ae(this.C);
      }, Me.prototype = Object.create(ye.prototype), Me.prototype.constructor = Me, Me.prototype.D = Me, Me.F = {}, n.McGePoint3dArray = Me, Me.prototype.append = Me.prototype.append = function(e2) {
        var t3 = this.C;
        e2 && typeof e2 == "object" && (e2 = e2.C), ue(t3, e2);
      }, Me.prototype.__destroy__ = function() {
        se(this.C);
      }, we.prototype = Object.create(ye.prototype), we.prototype.constructor = we, we.prototype.D = we, we.F = {}, n.McGeTool = we, we.prototype.calcArea = function(e2) {
        var t3 = this.C;
        return e2 && typeof e2 == "object" && (e2 = e2.C), _e(t3, e2);
      }, we.prototype.pointInPolyline = function(e2, t3) {
        var n2 = this.C;
        return e2 && typeof e2 == "object" && (e2 = e2.C), t3 && typeof t3 == "object" && (t3 = t3.C), !!Ae(n2, e2, t3);
      }, we.prototype.__destroy__ = function() {
        le(this.C);
      }, t2.ready;
    });
    return typeof exports == "object" && typeof module == "object" ? module.exports = t : typeof define == "function" && define.amd ? define([], function() {
      return t;
    }) : typeof exports == "object" && (exports.mxcadassembly = t), t();
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/loadCoreCode/index.js
  init_registerMxDbEntity();
  var __awaiter11 = function(t, i, n, e) {
    return new (n || (n = Promise))(function(o, r) {
      function a(t2) {
        try {
          m(e.next(t2));
        } catch (t3) {
          r(t3);
        }
      }
      function s(t2) {
        try {
          m(e.throw(t2));
        } catch (t3) {
          r(t3);
        }
      }
      function m(t2) {
        var i2;
        t2.done ? o(t2.value) : (i2 = t2.value, i2 instanceof n ? i2 : new n(function(t3) {
          t3(i2);
        })).then(a, s);
      }
      m((e = e.apply(t, i || [])).next());
    });
  };
  function rxInitMxEntity() {
    var t;
    (t = store_default.state.MxFun) === null || t === void 0 || t.initDynamicCreate(dynamicCreateMxObject);
  }
  function loadCoreCode() {
    return __awaiter11(this, void 0, void 0, function* () {
      return new Promise((t, i) => __awaiter11(this, void 0, void 0, function* () {
        try {
          if (store_default.state.MxFun)
            return console.error("mx loadCoreCode ady call"), void t();
          window.$ = window.jQuery = yield dynamicImport("jquery"), window.MxDocumentReady = void 0, window.MxUiMain = (t2) => {
            const i2 = t2("./MxFun").MxFun;
            window.THREE = i2.getTHREE(), store_default.commit("setMxFun", i2), store_default.events.emit("MxUiMain", t2), window.MxUiMain = void 0;
          }, window.MxMain = (i2) => (store_default.events.emit("MxMain", i2), window.MxMain = void 0, rxInitMxEntity(), registerMxDbEntity(), t(), 0), mxcadassemblyinit().then(function(t2) {
            store_default.commit("setMxassembly", t2);
          }), mxfun();
        } catch (t2) {
          i({ code: "error", msg: t2 });
        }
      }));
    });
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/mxdraw.js
  init_useCanvasResizeListener();
  init_store();
  init_MxFun();
  init_MxThreeJS2();
  init_MxType2();
  init_Mxassembly();
  init_McGeTool();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MrxDbgUtils/index.js
  init_MxFun();
  init_store();
  var MrxDbgUtilsClass = class {
    constructor() {
      this.imp = null;
    }
    initImp() {
      if (!this.imp && store_default.state.MxFun) {
        let t = store_default.state.MxFun;
        this.imp = new t.getMrxDbgUtilsClass();
      }
    }
    findEntAtPoint(t, i = null, s, n = true, e) {
      return this.initImp(), s || (s = MxFun_default.getCurrentDraw()), this.imp.findEntAtPoint(s.getMxObjectImplement(), t, i, n, e);
    }
    selectEnt(t, i) {
      return this.initImp(), this.imp.selectEnt(t);
    }
  };
  var MrxDbgUtils = new MrxDbgUtilsClass();
  var MrxDbgUtils_default = MrxDbgUtils;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/mxdraw.js
  init_MxPaintBrush();
  init_MrxDbgUiPrPoint();
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrBaseReturn();
  init_MxDbEntity();
  init_MxDbImage();
  init_MxDbSVG();
  init_MxDbSVGText();
  init_MxDbPolyline();
  init_MxDb2LineAngularDimension();
  init_Mx3PointArc();
  init_MxDbCoord();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLine/index.js
  init_registerMxDbEntity();
  init_MxDbEntity();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLine/draw.js
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter12 = function(t, n, e, i) {
    return new (e || (e = Promise))(function(r, o) {
      function a(t2) {
        try {
          s(i.next(t2));
        } catch (t3) {
          o(t3);
        }
      }
      function u(t2) {
        try {
          s(i.throw(t2));
        } catch (t3) {
          o(t3);
        }
      }
      function s(t2) {
        var n2;
        t2.done ? r(t2.value) : (n2 = t2.value, n2 instanceof e ? n2 : new e(function(t3) {
          t3(n2);
        })).then(a, u);
      }
      s((i = i.apply(t, n || [])).next());
    });
  };
  function drawMxDbLine() {
    return __awaiter12(this, void 0, void 0, function* () {
      const t = new MrxDbgUiPrPoint();
      t.setMessage("\n\u6307\u5B9A\u7B2C\u4E00\u70B9:");
      let n = yield t.go();
      if (n == null)
        return;
      t.setBasePt(n.clone()), t.setUseBasePt(true), t.setMessage("\n\u6307\u5B9A\u7B2C\u4E8C\u70B9:");
      let e = yield t.go();
      if (e == null)
        return;
      let i = new MxDbLine_default();
      i.pt1 = n, i.pt2 = e, MxFun_default.addToCurrentSpace(i);
    });
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLine/index.js
  var MxDbLine = class extends MxDbEntity {
    constructor() {
      super(...arguments), this.pt1 = new THREE.Vector3(), this.pt2 = new THREE.Vector3();
    }
    getTypeName() {
      return "MxDbLine";
    }
    worldDraw(t) {
      t.drawLine(this.pt1, this.pt2);
    }
    setPoint1(t) {
      this.pt1 = t;
    }
    getPoint1() {
      return this.pt1;
    }
    setPoint2(t) {
      this.pt2 = t;
    }
    getPoint2() {
      return this.pt2;
    }
    getGripPoints() {
      let t = [];
      t.push(this.pt1), t.push(this.pt2);
      let i = new THREE.Vector3(this.pt1.x + 0.5 * (this.pt2.x - this.pt1.x), this.pt1.y + 0.5 * (this.pt2.y - this.pt1.y), 0);
      return t.push(i), t;
    }
    moveGripPointsAt(t, i) {
      return t == 0 ? this.pt1.add(i) : t == 1 ? this.pt2.add(i) : t == 2 && (this.pt1.add(i), this.pt2.add(i)), true;
    }
    dwgIn(t) {
      return this.onDwgIn(t), this.pt1.copy(t.pt1), this.pt2.copy(t.pt2), true;
    }
    dwgOut(t) {
      return this.onDwgOut(t), t.pt1 = this.pt1, t.pt2 = this.pt2, t;
    }
    create() {
      return new MxDbLine();
    }
    getGeomExtents() {
      return new THREE.Box3(this.pt1, this.pt2);
    }
    getGetLength() {
      return this.pt1.distanceTo(this.pt2);
    }
  };
  MxDbLine.cmd = "Mx_Line", MxDbLine.draw = drawMxDbLine, addRegisterMxDbEntity(MxDbLine);
  var MxDbLine_default = MxDbLine;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/mxdraw.js
  init_MxDbRect();
  init_MxDbAlignedDimension();
  init_MxFilters();
  init_McGiWorldDrawType();
  init_MxDbArea();
  init_MxDbLeadTag();
  init_MxDbAnyLine();
  init_MxDbCloudLine();
  init_MxDbRegularPolygon();
  init_MxDbLeadComment();
  init_MxDbRectBoxLeadComment();
  init_MxDbEllipse();
  init_MxDbText2();
  init_MxDrawObject();
  init_MxDbHatch();
  init_MxDbDatabase();
  init_MxCADObject();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbGradientLine/index.js
  init_McGiWorldDrawType();
  init_MxDbEntity();
  init_registerMxDbEntity();
  function createCurvePath(e = false) {
    const t = new THREE.CurvePath();
    return t.autoClose = e, t;
  }
  function createQuadraticBezierCurve3(e) {
    let t = 0, r = [];
    for (let i = 0; i < e.length; i++) {
      const i2 = e[t], n = e[++t] || i2, s = e[++t] || n;
      if (!i2 || !n || !s)
        break;
      r.push(new THREE.QuadraticBezierCurve3(i2, n, s));
    }
    return r;
  }
  function createCubicBezierCurve3(e) {
    let t = 0, r = [];
    for (let i = 0; i < e.length; i++) {
      const i2 = e[t], n = e[++t] || i2, s = e[++t] || n, o = e[++t] || s;
      if (!(i2 && n && s && o))
        break;
      r.push(new THREE.CubicBezierCurve3(i2, n, s, o));
    }
    return r;
  }
  function getCurveColorGradientData(e, t) {
    let r = 0, i = [], n = [];
    const s = Number((1 / t.length).toFixed(2));
    let o = new THREE.Color(t[r]), c = new THREE.Color(t[r + 1]);
    for (let u = 0, l = e.length; u < l; u++) {
      const l2 = e[u], a = u / e.length;
      a / r >= s && (r++, c.set(new THREE.Color(t[r] || t[--r]))), i.push(l2.x, l2.y, l2.z || 0), o.lerpHSL(c, a), n.push(o.r, o.g, o.b);
    }
    return [i, n];
  }
  function getColorGradientData(e, t) {
    let r = [], i = [];
    for (let n = 0, s = e.length; n < s; n++) {
      const s2 = e[n];
      r.push(s2.x, s2.y, s2.z || 0);
      const o = new THREE.Color(t[n]);
      i.push(o.r, o.g, o.b);
    }
    return [r, i];
  }
  var propertyDbKeys6 = ["points", "colors", "linecap", "linejoin", "closed", "curveType", "tension", "bezierType"];
  var MxDbGradientLine = class extends MxDbEntity {
    constructor() {
      super(...arguments), this.linecap = "round", this.linejoin = "round", this.closed = false, this.curveType = "centripetal", this.tension = 0, this.bezierType = "quadratic";
    }
    create() {
      return new MxDbGradientLine();
    }
    getTypeName() {
      return "MxDbGradientLine";
    }
    setPoints(e) {
      return this.points = e, this;
    }
    setColors(e) {
      return this.colors = e, this;
    }
    addColor(e) {
      return this.colors.push(e), this;
    }
    setLinecap(e) {
      this.linecap = e;
    }
    setClosed(e) {
      this.closed = e;
    }
    setCurveType(e) {
      this.curveType = e;
    }
    setTension(e) {
      this.tension = e;
    }
    setBezierType(e) {
      this.bezierType = e;
    }
    worldDraw(e) {
      const t = e.getType();
      let r = this.getPoints();
      const { closed: i, curveType: n, tension: s, bezierType: o } = this, c = new THREE.BufferGeometry();
      let u = [], l = [];
      const a = o === "cubic", h = o === "quadratic";
      s !== 0 ? this.curve = new THREE.CatmullRomCurve3(r, i, n, s) : o ? (this.curve = createCurvePath(i), a ? this.curve.curves = createCubicBezierCurve3(r) : h ? this.curve.curves = createQuadraticBezierCurve3(r) : this.curve = void 0) : this.curve = void 0, this.curve && (r = this.curve.getPoints(50));
      const { linecap: p, linejoin: d } = this;
      let v;
      if (this.colors && this.colors.length > 1) {
        const e2 = i ? [...this.colors, this.colors[0]] : this.colors;
        [u, l] = this.curve ? getCurveColorGradientData(r, e2) : getColorGradientData(r, e2), c.setAttribute("position", new THREE.Float32BufferAttribute(u, 3)), c.setAttribute("color", new THREE.Float32BufferAttribute(l, 3)), v = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors, linecap: p, linejoin: d });
      } else
        c.setFromPoints(r), v = new THREE.LineBasicMaterial({ color: this.color, linecap: p, linejoin: d });
      const E = i ? new THREE.LineLoop(c, v) : new THREE.Line(c, v);
      if (e.drawEntity(E), (t === McGiWorldDrawType_default.kSelectDraw || t === McGiWorldDrawType_default.kDynDragDraw) && this.curve) {
        let t2 = this.getPoints();
        const r2 = e.getLineWidth();
        e.setLineWidth(1), e.drawLines(t2), e.setLineWidth(r2);
      }
    }
    getGripPoints() {
      return this.getPoints();
    }
    getPoints() {
      return this.closed ? [...this.points, this.points[0]] : this.points;
    }
    moveGripPointsAt(e, t) {
      return this.move(e, t), true;
    }
    move(e, t) {
      return this.points[e].add(t), this;
    }
    dwgIn(e) {
      return this.dwgInHelp(e, propertyDbKeys6), this.curve = e.curve, true;
    }
    dwgOut(e) {
      return this.dwgOutHelp(e, propertyDbKeys6), e.curve = this.curve, e;
    }
  };
  addRegisterMxDbEntity(MxDbGradientLine);
  var MxDbGradientLine_default = MxDbGradientLine;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/mxdraw.js
  init_MxDbShape();
  init_MxDbEllipseShape();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipseArc/index.js
  init_registerMxDbEntity();
  init_three();
  init_MxDbEllipseShape();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipseArc/draw.js
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter13 = function(t, n, r, e) {
    return new (r || (r = Promise))(function(i, o) {
      function a(t2) {
        try {
          d(e.next(t2));
        } catch (t3) {
          o(t3);
        }
      }
      function c(t2) {
        try {
          d(e.throw(t2));
        } catch (t3) {
          o(t3);
        }
      }
      function d(t2) {
        var n2;
        t2.done ? i(t2.value) : (n2 = t2.value, n2 instanceof r ? n2 : new r(function(t3) {
          t3(n2);
        })).then(a, c);
      }
      d((e = e.apply(t, n || [])).next());
    });
  };
  function drawMxDbEllipseArc() {
    const t = new MrxDbgUiPrPoint(), n = MxFun_default.getCurrentDraw(), r = new McEdGetPointWorldDrawObject();
    let e = new MxDbEllipseArc_default();
    t.setUserDraw(r), t.go(() => __awaiter13(this, void 0, void 0, function* () {
      e.center = t.value(), r.setDraw((t2, n2) => {
        e.startPoint = t2, e.yRadius = e.center.distanceTo(t2), n2.drawCustomEntity(e);
      }), e.startPoint = (yield t.go()) || new THREE.Vector3(), r.setDraw((t2, n2) => {
        e.endPoint = t2, n2.drawCustomEntity(e);
      }), e.endPoint = (yield t.go()) || new THREE.Vector3(), n.addMxEntity(e);
    }));
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbEllipseArc/index.js
  var MxDbEllipseArc = class extends MxDbEllipseShape {
    constructor() {
      super(), this._propertyDbKeys = [...this._propertyDbKeys, "startPoint", "endPoint"];
    }
    getTypeName() {
      return "MxDbEllipseArc";
    }
    setStartPoint(t) {
      return this.startPoint = t, this;
    }
    setEndPoint(t) {
      return this.endPoint = t, this;
    }
    worldDraw(t) {
      let { center: e, startPoint: i, endPoint: s } = this;
      i && (this.xRadius = e.distanceTo(i), this.startAngle = THREE.MathUtils.degToRad(calculateArcAngle(i, e, this.xRadius).angle)), s && (this.yRadius = e.distanceTo(s), this.endAngle = THREE.MathUtils.degToRad(calculateArcAngle(s, e, this.yRadius).angle)), this.drawEllipseShape(t);
    }
    getGripPoints() {
      return [this.center, this.startPoint, this.endPoint];
    }
    moveGripPointsAt(t, e) {
      return t === 0 && (this.center.add(e), this.startPoint.add(e), this.endPoint.add(e)), t === 1 && this.startPoint.add(e), t === 2 && this.endPoint.add(e), true;
    }
  };
  MxDbEllipseArc.cmd = "Mx_MxDbEllipseArc", MxDbEllipseArc.draw = drawMxDbEllipseArc, addRegisterMxDbEntity(MxDbEllipseArc);
  var MxDbEllipseArc_default = MxDbEllipseArc;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/mxdraw.js
  init_MxDbCircleShape();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCircleArc/index.js
  init_registerMxDbEntity();
  init_three();
  init_MxDbCircleShape();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCircleArc/draw.js
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter14 = function(t, e, r, n) {
    return new (r || (r = Promise))(function(o, i) {
      function a(t2) {
        try {
          s(n.next(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function c(t2) {
        try {
          s(n.throw(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function s(t2) {
        var e2;
        t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof r ? e2 : new r(function(t3) {
          t3(e2);
        })).then(a, c);
      }
      s((n = n.apply(t, e || [])).next());
    });
  };
  function drawMxDbCircleArc() {
    const t = new MrxDbgUiPrPoint(), e = MxFun_default.getCurrentDraw(), r = new McEdGetPointWorldDrawObject();
    let n = new MxDbCircleArc_default();
    n.stroke = "#ff0000", t.setUserDraw(r), t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u4E2D\u70B9:"), t.go(() => __awaiter14(this, void 0, void 0, function* () {
      n.center = t.value(), r.setDraw((t2) => {
        r.drawLine(n.center, t2);
      }), t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u5F00\u59CB\u70B9:"), n.startPoint = (yield t.go()) || new THREE.Vector3(), r.setDraw((t2) => {
        n.endPoint = t2, r.drawCustomEntity(n);
      }), t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u7ED3\u675F\u70B9:"), n.endPoint = (yield t.go()) || new THREE.Vector3(), r.setDraw(() => {
      }), e.addMxEntity(n);
    }));
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbCircleArc/index.js
  var MxDbCircleArc = class extends MxDbCircleShape {
    constructor() {
      super(), this._propertyDbKeys = [...this._propertyDbKeys, "startPoint", "endPoint"];
    }
    getTypeName() {
      return "MxDbCircleArc";
    }
    setStartPoint(t) {
      return this.startPoint = t, this;
    }
    setEndPoint(t) {
      return this.endPoint = t, this;
    }
    worldDraw(t) {
      let { startPoint: r, endPoint: e } = this;
      if (r && (this.startAngle = this.computePointAngle(r)), e && (this.endAngle = this.computePointAngle(e)), r && e) {
        const { points: r2 } = this.drawEllipseShape(t);
        this.startPoint = r2[0];
      }
    }
    computePointAngle(t) {
      return this.radius = this.center.distanceTo(t), THREE.MathUtils.degToRad(calculateArcAngle(t, this.center, this.radius).angle);
    }
    getGripPoints() {
      return [this.center, this.startPoint, this.endPoint];
    }
    moveGripPointsAt(t, r) {
      return t === 0 ? (this.center.add(r), this.startPoint.add(r), this.endPoint.add(r)) : t === 1 ? this.startPoint.add(r) : t === 2 && this.endPoint.add(r), true;
    }
  };
  MxDbCircleArc.cmd = "Mx_MxDbCircleArc", MxDbCircleArc.draw = drawMxDbCircleArc, addRegisterMxDbEntity(MxDbCircleArc);
  var MxDbCircleArc_default = MxDbCircleArc;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArcShapeDraw/index.js
  init_registerMxDbEntity();
  init_three();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArcShape/index.js
  init_McGiWorldDrawType();
  var MxDbArcShape = class extends MxDbCircleArc_default {
    constructor() {
      super(), this.center = new THREE.Vector3(), this.innerRadius = 10, this.outerRadius = 20, this._propertyDbKeys = [...this._propertyDbKeys, "center", "innerRadius", "outerRadius"];
    }
    getTypeName() {
      return "MxDbArcShape";
    }
    worldDraw(e) {
      e.getType() === McGiWorldDrawType_default.kDynDragDraw ? (e.drawCircle(this.center, this.innerRadius), e.drawCircle(this.center, this.outerRadius)) : this.drawArcShape(e);
    }
    drawArcShape(e) {
      const { center: r, startAngle: t, endAngle: i, clockwise: s } = this, { x: a, y: c } = r;
      this.isClosedToCenter = false;
      const n = this.createEllipseCurve(a, c, this.innerRadius, this.innerRadius, t, i, s), h = this.createEllipseCurve(a, c, this.outerRadius, this.outerRadius, i, t, !s), o = this.createPaths([n, h]);
      let d = this.getShapePoints(o);
      this._draw(e, d), this._drawStoreLine(e, d);
    }
    getGripPoints() {
      return [this.center];
    }
    moveGripPointsAt(e, r) {
      return e === 0 && this.center.add(r), true;
    }
  };
  var MxDbArcShape_default = MxDbArcShape;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArcShapeDraw/draw.js
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter15 = function(t, e, r, n) {
    return new (r || (r = Promise))(function(i, o) {
      function a(t2) {
        try {
          u(n.next(t2));
        } catch (t3) {
          o(t3);
        }
      }
      function c(t2) {
        try {
          u(n.throw(t2));
        } catch (t3) {
          o(t3);
        }
      }
      function u(t2) {
        var e2;
        t2.done ? i(t2.value) : (e2 = t2.value, e2 instanceof r ? e2 : new r(function(t3) {
          t3(e2);
        })).then(a, c);
      }
      u((n = n.apply(t, e || [])).next());
    });
  };
  function drawMxDbArcShape() {
    const t = new MrxDbgUiPrPoint(), e = MxFun_default.getCurrentDraw(), r = new McEdGetPointWorldDrawObject();
    let n = new MxDbArcShapeDraw_default();
    t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u4E2D\u70B9:"), t.setUserDraw(r), t.go(() => __awaiter15(this, void 0, void 0, function* () {
      t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u5F00\u59CB\u70B9:"), n.center = t.value(), r.setDraw((t2) => {
        n.interRadiusPoint = t2, r.drawCircle(n.center, t2.distanceTo(n.center));
      }), n.interRadiusPoint = (yield t.go()) || new THREE.Vector3(), r.setDraw((t2) => {
        n.outerRadiusPoint = t2, r.drawCustomEntity(n);
      }), n.outerRadiusPoint = (yield t.go()) || new THREE.Vector3(), e.addMxEntity(n);
    }));
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArcShapeDraw/index.js
  var MxDbArcShapeDraw = class extends MxDbArcShape_default {
    constructor() {
      super(), this.outerRadiusPoint = new THREE.Vector3(), this.interRadiusPoint = new THREE.Vector3(), this._propertyDbKeys = [...this._propertyDbKeys, "interRadiusPoint", "outerRadiusPoint"];
    }
    getTypeName() {
      return "MxDbArcShapeDraw";
    }
    worldDraw(t) {
      this.innerRadius = this.center.distanceTo(this.interRadiusPoint), this.outerRadius = this.center.distanceTo(this.outerRadiusPoint), this.startAngle = THREE.MathUtils.degToRad(calculateArcAngle(this.interRadiusPoint, this.center, this.innerRadius).angle), this.endAngle = THREE.MathUtils.degToRad(calculateArcAngle(this.outerRadiusPoint, this.center, this.outerRadius).angle), this.drawArcShape(t);
    }
    getGripPoints() {
      return [this.center, this.interRadiusPoint, this.outerRadiusPoint];
    }
    moveGripPointsAt(t, e) {
      return t === 0 && (this.center.add(e), this.interRadiusPoint.add(e), this.outerRadiusPoint.add(e)), t === 1 && this.interRadiusPoint.add(e), t === 2 && this.outerRadiusPoint.add(e), true;
    }
  };
  MxDbArcShapeDraw.isRegister = false, MxDbArcShapeDraw.cmd = "Mx_MxDbArcShape", MxDbArcShapeDraw.draw = drawMxDbArcShape, addRegisterMxDbEntity(MxDbArcShapeDraw);
  var MxDbArcShapeDraw_default = MxDbArcShapeDraw;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRingShape/index.js
  init_registerMxDbEntity();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRingShape/draw.js
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter16 = function(t, e, n, r) {
    return new (n || (n = Promise))(function(o, i) {
      function a(t2) {
        try {
          w(r.next(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function c(t2) {
        try {
          w(r.throw(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function w(t2) {
        var e2;
        t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof n ? e2 : new n(function(t3) {
          t3(e2);
        })).then(a, c);
      }
      w((r = r.apply(t, e || [])).next());
    });
  };
  function drawMxDbRingShape() {
    const t = new MrxDbgUiPrPoint(), e = MxFun_default.getCurrentDraw(), n = new McEdGetPointWorldDrawObject();
    t.setUserDraw(n);
    const r = new McEdGetPointWorldDrawObject(), o = new MxDbRingShapeDraw();
    t.setUserDraw(r), t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u5F00\u59CB\u70B9:"), t.go((n2) => __awaiter16(this, void 0, void 0, function* () {
      console.log(123), o.center = t.value(), r.setDraw((t2) => {
        r.drawCircle(o.center, o.center.distanceTo(t2));
      }), o.innerPoint = (yield t.go()) || new THREE.Vector3(), r.setDraw((t2) => {
        o.outerPoint = t2, r.drawCustomEntity(o);
      }), o.outerPoint = (yield t.go()) || new THREE.Vector3(), e.addMxEntity(o);
    }));
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRingShape/index.js
  var MxDbRingShape = class extends MxDbArcShape_default {
    getTypeName() {
      return "MxDbRingShape";
    }
    worldDraw(t) {
      const { center: e, startAngle: i, endAngle: r, clockwise: s } = this, { x: n, y: h } = e;
      this.isClosedToCenter = false;
      const o = this.createEllipseCurve(n, h, this.innerRadius, this.innerRadius, i, r, s), a = this.createEllipseCurve(n, h, this.outerRadius, this.outerRadius, i, r, !s), d = this.createPaths([o, a]);
      let p = this.getShapePoints(d);
      const c = this.createPaths(o);
      let u = this.getShapePoints(c);
      const x = this.createPaths(a);
      let D = this.getShapePoints(x);
      this.isFill ? (this._draw(t, p), this._drawStoreLine(t, u), this._drawStoreLine(t, D)) : (this._draw(t, u), this._drawStoreLine(t, u), this._draw(t, D), this._drawStoreLine(t, D));
    }
  };
  MxDbRingShape.isRegister = false, MxDbRingShape.cmd = "Mx_MxDbRingShape", MxDbRingShape.draw = drawMxDbRingShape;
  var MxDbRingShapeDraw = class extends MxDbRingShape {
    constructor() {
      super(), this.innerPoint = new THREE.Vector3(), this.outerPoint = new THREE.Vector3(), this._propertyDbKeys = [...this._propertyDbKeys, "innerPoint", "outerPoint"];
    }
    getGripPoints() {
      return [this.center, this.innerPoint, this.outerPoint];
    }
    moveGripPointsAt(t, e) {
      return t === 0 && (this.center.add(e), this.innerPoint.add(e), this.outerPoint.add(e)), t === 1 && this.innerPoint.add(e), t === 2 && this.outerPoint.add(e), true;
    }
    worldDraw(t) {
      this.innerPoint && (this.innerRadius = this.center.distanceTo(this.innerPoint)), this.outerPoint && (this.outerRadius = this.center.distanceTo(this.outerPoint)), super.worldDraw(t);
    }
  };
  addRegisterMxDbEntity(MxDbRingShape);
  var MxDbRingShape_default = MxDbRingShape;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbStarShape/index.js
  init_registerMxDbEntity();
  init_MxDbShape();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbStarShape/draw.js
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter17 = function(t, e, r, n) {
    return new (r || (r = Promise))(function(o, i) {
      function a(t2) {
        try {
          w(n.next(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function c(t2) {
        try {
          w(n.throw(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function w(t2) {
        var e2;
        t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof r ? e2 : new r(function(t3) {
          t3(e2);
        })).then(a, c);
      }
      w((n = n.apply(t, e || [])).next());
    });
  };
  function drawMxDbStarShape() {
    const t = new MrxDbgUiPrPoint(), e = MxFun_default.getCurrentDraw(), r = new McEdGetPointWorldDrawObject();
    t.setUserDraw(r);
    const n = new McEdGetPointWorldDrawObject(), o = new MxDbStarShapeDraw();
    t.setUserDraw(n), t.setMessage("\n\u786E\u5B9A\u5706\u5F27\u5F00\u59CB\u70B9:"), t.go((r2) => __awaiter17(this, void 0, void 0, function* () {
      o.center = t.value(), n.setDraw((t2) => {
        o.innerPoint = t2, n.drawCircle(o.center, o.center.distanceTo(t2));
      }), o.innerPoint = (yield t.go()) || new THREE.Vector3(), n.setDraw((t2) => {
        o.outerPoint = t2, n.drawCustomEntity(o);
      }), o.outerPoint = (yield t.go()) || new THREE.Vector3(), e.addMxEntity(o);
    }));
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbStarShape/index.js
  var MxDbStarShape = class extends MxDbShape {
    constructor() {
      super(), this.center = new THREE.Vector3(), this.numPoints = 10, this.innerRadius = 10, this.outerRadius = 10, this._propertyDbKeys = [...this._propertyDbKeys, "center", "numPoints", "innerRadius", "outerRadius"];
    }
    getTypeName() {
      return "MxDbStarShape";
    }
    worldDraw(t) {
      const { x: e, y: r } = this.center, i = new THREE.Path();
      i.moveTo(e, r - this.outerRadius);
      for (let t2 = 1; t2 < 2 * this.numPoints; t2++) {
        const s2 = t2 % 2 == 0 ? this.outerRadius : this.innerRadius, n2 = s2 * Math.sin(t2 * Math.PI / this.numPoints) + e, o = -1 * s2 * Math.cos(t2 * Math.PI / this.numPoints) + r;
        i.lineTo(n2, o);
      }
      i.closePath();
      const s = this.createPaths(i), n = this.getShapePoints(s);
      this._draw(t, n), this._drawStoreLine(t, n);
    }
    getGripPoints() {
      return [this.center];
    }
    moveGripPointsAt(t, e) {
      return t === 0 && this.center.add(e), true;
    }
  };
  MxDbStarShape.cmd = "Mx_MxDbStarShape", MxDbStarShape.draw = drawMxDbStarShape;
  var MxDbStarShapeDraw = class extends MxDbStarShape {
    constructor() {
      super(), this.innerPoint = new THREE.Vector3(), this.outerPoint = new THREE.Vector3(), this._propertyDbKeys = [...this._propertyDbKeys, "innerPoint", "outerPoint"];
    }
    getGripPoints() {
      return [this.center, this.innerPoint, this.outerPoint];
    }
    moveGripPointsAt(t, e) {
      return t === 0 && (this.center.add(e), this.innerPoint.add(e), this.outerPoint.add(e)), t === 1 && this.innerPoint.add(e), t === 2 && this.outerPoint.add(e), true;
    }
    worldDraw(t) {
      this.innerPoint && (this.innerRadius = this.center.distanceTo(this.innerPoint)), this.outerPoint && (this.outerRadius = this.center.distanceTo(this.outerPoint)), super.worldDraw(t);
    }
  };
  addRegisterMxDbEntity(MxDbStarShape);
  var MxDbStarShape_default = MxDbStarShape;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbRegularPolygonShape/index.js
  init_registerMxDbEntity();
  init_MxDbShape();
  var MxDbRegularPolygonShape = class extends MxDbShape {
    constructor() {
      super(), this.center = new THREE.Vector3(), this.sidesNumber = 6, this.radius = 70, this._propertyDbKeys = [...this._propertyDbKeys, "center", "sidesNumber", "radius"];
    }
    getTypeName() {
      return "MxDbRegularPolygonShape";
    }
    worldDraw(e) {
      this._drawPolygonShape(e);
    }
    _drawPolygonShape(e) {
      const t = this._getPoints(), r = new THREE.Path();
      r.moveTo(t[0].x, t[0].y);
      for (let e2 = 0; e2 < t.length; e2++)
        r.lineTo(t[e2].x, t[e2].y);
      r.closePath();
      const s = this.createPaths(r), o = this.getShapePoints(s);
      this._draw(e, o), this._drawStoreLine(e, o);
    }
    _getPoints() {
      const { sidesNumber: e, radius: t } = this, { x: r, y: s } = this.center, o = [];
      for (let i = 0; i < e; i++)
        o.push({ x: t * Math.sin(2 * i * Math.PI / e) + r, y: -1 * t * Math.cos(2 * i * Math.PI / e) + s });
      return o;
    }
    getGripPoints() {
      return [this.center];
    }
    moveGripPointsAt(e, t) {
      return e === 0 && this.center.add(t), true;
    }
  };
  addRegisterMxDbEntity(MxDbRegularPolygonShape);
  var MxDbRegularPolygonShape_default = MxDbRegularPolygonShape;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArrow/index.js
  init_registerMxDbEntity();
  init_MxDbShape();

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArrow/draw.js
  init_McEdGetPointWorldDrawObject();
  init_MrxDbgUiPrPoint();
  init_MxFun();
  var __awaiter18 = function(t, e, n, r) {
    return new (n || (n = Promise))(function(o, i) {
      function a(t2) {
        try {
          u(r.next(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function c(t2) {
        try {
          u(r.throw(t2));
        } catch (t3) {
          i(t3);
        }
      }
      function u(t2) {
        var e2;
        t2.done ? o(t2.value) : (e2 = t2.value, e2 instanceof n ? e2 : new n(function(t3) {
          t3(e2);
        })).then(a, c);
      }
      u((r = r.apply(t, e || [])).next());
    });
  };
  function getScreenPixel(t, e) {
    let n = MxFun_default.screenCoordLong2World(e ? t : t - t / 3);
    return n = MxFun_default.worldCoordLong2Doc(n);
  }
  function drawMxDbArrow() {
    const t = new McEdGetPointWorldDrawObject(), e = new MxDbArrow_default(), n = MxFun_default.getCurrentDraw(), r = new MrxDbgUiPrPoint();
    r.setUserDraw(t), e.setLineWidth(10), r.go(() => {
      e.innerOffset = getScreenPixel(10), e.outerOffset = getScreenPixel(22), e.topOffset = getScreenPixel(36), e.startPoint = r.value(), t.setDraw((n2) => {
        e.endPoint = n2, t.drawCustomEntity(e);
      }), r.go((t2) => __awaiter18(this, void 0, void 0, function* () {
        e.endPoint = r.value(), n.addMxEntity(e);
      }));
    });
  }

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbArrow/index.js
  var MxDbArrow = class extends MxDbShape {
    constructor() {
      super(), this.isSharpCorner = true, this.innerOffset = 10, this.outerOffset = 22, this.topOffset = 36, this.startPoint = new THREE.Vector3(), this.endPoint = new THREE.Vector3(), this._propertyDbKeys = [...this._propertyDbKeys, "outerOffset", "topOffset", "innerOffset", "isSharpCorner", "startPoint", "endPoint"];
    }
    worldDraw(t) {
      const r = this.getArrowVertex(this.startPoint, this.endPoint);
      r && (this._draw(t, r), this._drawStoreLine(t, r));
    }
    getArrowVertex(t, r, e = this.isSharpCorner) {
      let { innerOffset: o, topOffset: s, outerOffset: i } = this;
      const n = [];
      n[3] = r;
      const x = Math.sqrt((t.x - r.x) * (t.x - r.x) + (t.y - r.y) * (t.y - r.y));
      if (x === 0)
        return;
      const y = -(r.x - t.x) / x, h = (r.y - t.y) / x, a = t.x + o, d = t.y + x - s, w = t.x + i, f = t.y + x - s, E = t.x - o, p = t.y + x - s, c = t.x - i, D = t.y + x - s;
      return e ? (n[0] = t, n[6] = n[0]) : (n[0] = new THREE.Vector3(t.x - (E - t.x) * h, t.y - (E - t.x) * y), n[6] = new THREE.Vector3(t.x + (E - t.x) * h, t.y + (E - t.x) * y), n[7] = n[0]), n[1] = new THREE.Vector3(t.x + (a - t.x) * h - (d - t.y) * y, t.y + (a - t.x) * y + (d - t.y) * h), n[2] = new THREE.Vector3(t.x + (w - t.x) * h - (f - t.y) * y, t.y + (w - t.x) * y + (f - t.y) * h), n[4] = new THREE.Vector3(t.x + (c - t.x) * h - (D - t.y) * y, t.y + (c - t.x) * y + (D - t.y) * h), n[5] = new THREE.Vector3(t.x + (E - t.x) * h - (p - t.y) * y, t.y + (E - t.x) * y + (p - t.y) * h), n;
    }
    getGripPoints() {
      const t = new THREE.Vector3();
      return new THREE.Line3(this.startPoint, this.endPoint).getCenter(t), [this.startPoint, t, this.endPoint];
    }
    moveGripPointsAt(t, r) {
      return t === 0 && this.startPoint.add(r), t === 1 && (this.startPoint.add(r), this.endPoint.add(r)), t === 2 && this.endPoint.add(r), true;
    }
  };
  MxDbArrow.cmd = "Mx_MxDbArrow", MxDbArrow.draw = drawMxDbArrow, addRegisterMxDbEntity(MxDbArrow);
  var MxDbArrow_default = MxDbArrow;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/MxModule/MxDbLineShape/index.js
  init_registerMxDbEntity();
  init_MxDbShape();
  var MxDbLineShape = class extends MxDbShape {
    constructor() {
      super(), this.points = [], this._propertyDbKeys = [...this._propertyDbKeys, "points"];
    }
    setPoints(t) {
      return this.points = t, this;
    }
    addPoint(t) {
      return this.points.push(t), this;
    }
    removePoint(t) {
      return this.points.splice(t, 1), this;
    }
    getTypeName() {
      return "MxDbLineShape";
    }
    worldDraw(t) {
      this._draw(t, this.points), this._drawStoreLine(t, this.points);
    }
    getGripPoints() {
      return this.points;
    }
    moveGripPointsAt(t, e) {
      return this.points[t].add(e), true;
    }
    getGeomExtents() {
      return new THREE.Box3().setFromPoints(this.points);
    }
    getGetLength() {
      let t = 0;
      for (let e = 0; e++; e < this.points.length)
        this.points[e + 1] && (t += this.points[e].distanceTo(this.points[e + 1]));
      return t;
    }
  };
  addRegisterMxDbEntity(MxDbLineShape);
  var MxDbLineShape_default = MxDbLineShape;

  // C:/Users/MxDev/Documents/HBuilderProjects/demo测试/node_modules/mxdraw/dist/lib/index.js
  var lib_default = mxdraw_exports;

  // <stdin>
  var stdin_default = {
    mounted() {
      const canvas = document.createElement("canvas");
      const mxdiv = document.getElementById("mxdiv");
      canvas.id = "myCanvas";
      mxdiv.style.width = "99vw";
      mxdiv.style.height = "80vh";
      mxdiv.appendChild(canvas);
      lib_default.loadCoreCode().then(() => {
        lib_default.MxFun.createMxObject({
          canvasId: "myCanvas",
          cadFile: "https://oss.fanghenet.com/CAD/new_mxdwg/buf/8390421fad604c779783c0b399421d65.dwg",
          callback(mxDrawObject, { canvas: canvas2, canvasParent }) {
            canvasParent.className = "mxdiv";
            mxDrawObject.addEvent("loadComplete", () => {
            });
          }
        });
      });
    }
  };
  return __toCommonJS(stdin_exports);
})();
/*!
 * jQuery JavaScript Library v3.6.3
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-12-20T21:28Z
 */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
